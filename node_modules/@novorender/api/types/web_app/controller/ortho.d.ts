import { type ReadonlyVec3, type ReadonlyQuat } from "gl-matrix";
import { BaseController, type ControllerInitParams } from "./base";
import { type BoundingSphere, type RenderStateCamera } from "../../core3d";
import { ControllerInput } from "./input";
/** The ortho controller is for navigating a orthographic camera.
 * @remarks
 * A key aspect of this controller is as a means to view and navigate in 2D,
 * aligning the parallel to the view plane to the axes or some reference plane.
 * The front and back clipping planes are used to reveal a limited slab of the geometry.
 * @category Camera Controllers
 */
export declare class OrthoController extends BaseController {
    kind: "ortho";
    projection: "orthographic";
    private params;
    private _position;
    private _orientation;
    private _fov;
    /**
     * @param input The input source.
     */
    constructor(input: ControllerInput);
    /** Camera position, in world space. */
    get position(): ReadonlyVec3;
    set position(value: ReadonlyVec3);
    /** Computed rotation quaternion, in world space.
     * @remarks
     * This rotation is derived from {@link pitch}, {@link yaw} and  {@link roll} angles.
     */
    get rotation(): ReadonlyQuat;
    /** The camera pitch angle, in degrees. */
    get pitch(): number;
    set pitch(value: number);
    /** The camera yaw angle, in degrees. */
    get yaw(): number;
    set yaw(value: number);
    /** The camera roll angle, in degrees. */
    get roll(): number;
    set roll(value: number);
    /** The camera vertical field of view angle, in meters. */
    get fov(): number;
    set fov(value: number);
    /** Update controller parameters.
     * @param params Set of parameters to change.
     */
    updateParams(params: Partial<OrthoControllerParams>): void;
    serialize(): ControllerInitParams;
    init(params: ControllerInitParams): void;
    autoFit(center: ReadonlyVec3, radius: number): void;
    moveTo(targetPosition: ReadonlyVec3, flyTime?: number, rotation?: ReadonlyQuat): void;
    zoomTo(boundingSphere: BoundingSphere, flyTime?: number): void;
    update(): void;
    stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera>;
    private static fovFromPerspective;
    /** OrthoController type guard function.
     * @param controller The controller to type guard.
     */
    static is(controller: BaseController): controller is OrthoController;
    /** OrthoController type assert function.
     * @param controller The controller to type assert.
     */
    static assert(controller: BaseController): asserts controller is OrthoController;
}
/** Ortho controller initialization parameters.
 * @category Camera Controllers
 */
export interface OrthoControllerParams {
    /** The interval to use for stepping clipping planes in the depth direction, i.e. when using mouse navigate buttons.
     * @defaultValue 1.0
     */
    readonly stepInterval: number;
    /** Whether to use mouse pointer lock or not.
     * @defaultValue false
     */
    readonly usePointerLock: boolean;
}
//# sourceMappingURL=ortho.d.ts.map