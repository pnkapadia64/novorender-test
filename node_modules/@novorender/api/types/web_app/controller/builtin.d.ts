import type { PickContext } from "./base";
import { FlightController, CadMiddlePanController, CadRightPanController, SpecialFlightController } from "./flight";
import type { ControllerInput } from "./input";
import { NullController } from "./null";
import { OrbitController } from "./orbit";
import { OrthoController } from "./ortho";
import { PanoramaController } from "./panorama";
/**
 * Return the built-in camera controllers.
 * @param input The control input.
 * @param pick The control pick context, typically the view in where
 */
export declare function builtinControllers(input: ControllerInput, pick: PickContext): {
    readonly orbit: OrbitController;
    readonly flight: FlightController;
    readonly ortho: OrthoController;
    readonly panorama: PanoramaController;
    readonly cadMiddlePan: CadMiddlePanController;
    readonly cadRightPan: CadRightPanController;
    readonly special: SpecialFlightController;
    readonly null: NullController;
};
/** Types of built-in camera controller.
 * @category Camera Controller
 * @category Render View
 */
export type BuiltinCameraControllerType = ReturnType<typeof builtinControllers>;
/** Kind strings of built-in camera controller.
 * @category Camera Controller
 * @category Render View
 */
export type BuiltinCameraControllerKind = keyof BuiltinCameraControllerType;
//# sourceMappingURL=builtin.d.ts.map