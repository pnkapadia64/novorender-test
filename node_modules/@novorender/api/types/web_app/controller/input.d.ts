/**
 * The input source of camera controllers.
 * @remarks
 * This class abstract away input gestures, such as mouse, keyboard and touch event into a unified model.
 * It does this by defining a {@link ControllerAxes | set of axes} that represents an imagined gamepad/joystick input device for each class of input gestures.
 * The assumption is that each of these axes may be bound to a pair of keyboard keys, e.g. `A` and `D`, or some input position coordinate, e.g. the mouse `x` position for left/right motion.
 * All of these axes are updated independently, i.e. it is possible to move a camera with both keyboard and mouse simultaneously.
 * It is up to each camera controller to scale and apply each of these axes into an actual motion of the camera.
 * @category Camera Controllers
 */
export declare class ControllerInput {
    /** The underlying HTMLElement providing input events. */
    readonly domElement: HTMLElement;
    /** A set of optional callbacks for controllers that wants to handle certain input events themselves. */
    callbacks: ContollerInputContext | undefined;
    /** The current values of each input axis. */
    readonly axes: ControllerAxes;
    /** The current list of individual touch contact points. */
    touchPoints: readonly TouchContactPoint[];
    private readonly _keys;
    private _mouseButtonDown;
    private _zoomY;
    private _zoomX;
    private readonly _touchMovePrev;
    private _touchZoomDistancePrev;
    private prevTouchCenter;
    private _mouseWheelLastActive;
    private static readonly _gestureKeys;
    /** Whether to use {@link https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API | mouse pointer lock} or not. */
    usePointerLock: boolean;
    /**
     * @param domElement The HTMLElement to subscribe to input events from.
     */
    constructor(domElement?: HTMLElement);
    /** Unsubscribe from input events. */
    dispose(): void;
    /** Return the client width of the input {@link domElement}. */
    get width(): number;
    /** Return the client height of the input {@link domElement}. */
    get height(): number;
    /** Current multiplier applied to motion via the Control/Alt keys. */
    get multiplier(): number;
    /** Whether the shift key is currently pressed or not. */
    get hasShift(): boolean;
    /** The pixel position centering zoom gestures.
     * @remarks
     * This is typically the current cursor position while using the mouse scroll wheel,
     * or the center position between touch points in a pinch gesture.
     */
    get zoomPos(): number[];
    /** Subscribe to input events from {@link domElement}. */
    protected connect(): void;
    /** Unsubscribe to input events from {@link domElement}. */
    protected disconnect(): void;
    private click;
    private contextmenu;
    private static isGestureKey;
    /** Indicate whether the mouse scroll wheel has recently been moved. */
    isScrolling(): boolean;
    private updateModifierKeys;
    private keydown;
    private keyup;
    private blur;
    private mousedown;
    private mouseup;
    private wheel;
    private mousemove;
    private touchstart;
    private touchend;
    private touchcancel;
    private touchmove;
    /** Apply time-related state updates.
     * @param elapsedTime The amount of milliseconds passed since the last call to this function.
     */
    animate(elapsedTime: number): void;
    /** Reset axes to their default/neutral state. */
    resetAxes(): void;
    /** Determine if axes are all at their default/neutral state. */
    axesEmpty(): boolean;
}
/** Flags for various mouse buttons.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 * @category Camera Controllers
 */
export declare enum MouseButtons {
    none = 0,
    left = 1,
    right = 2,
    middle = 4,
    backward = 8,
    forward = 16
}
type ControllerAxesName = "keyboard_ad" | "keyboard_ws" | "keyboard_qe" | "keyboard_arrow_left_right" | "keyboard_arrow_up_down" | "mouse_lmb_move_x" | "mouse_lmb_move_y" | "mouse_rmb_move_x" | "mouse_rmb_move_y" | "mouse_mmb_move_x" | "mouse_mmb_move_y" | "mouse_navigate" | "mouse_navigate" | "mouse_wheel" | "touch_1_move_x" | "touch_1_move_y" | "touch_2_move_x" | "touch_2_move_y" | "touch_3_move_x" | "touch_3_move_y" | "touch_pinch2" | "touch_pinch3";
/** The input gesture axes values.
 * @property keyboard_ad Keyboard `A` and `D` axis.
 * @property keyboard_ws Keyboard `W` and `S` axis.
 * @property keyboard_qe Keyboard `Q` and `E` axis.
 * @property keyboard_arrow_left_right Keyboard cursor left and right axis.
 * @property keyboard_arrow_up_down Keyboard cursor up and down axis.
 * @category Camera Controllers
 */
export type ControllerAxes = {
    [P in ControllerAxesName]: number;
};
/** Input event callbacks.
 * @category Camera Controllers
 */
export interface ContollerInputContext {
    /** Mouse button events. */
    mouseButtonChanged(event: MouseEvent): Promise<void> | void;
    /** Touch "click" events. */
    touchChanged(event: TouchEvent): Promise<void> | void;
    /** Mouse or touch move events. */
    moveBegin(event: TouchEvent | MouseEvent): Promise<void> | void;
}
/** A single touch input contact point.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch} for more details.
 * @category Camera Controllers
 */
export interface TouchContactPoint {
    /** The touch identifier.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch/identifier}
     */
    readonly id: number;
    /** The touch client x coordinate.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientX}
     */
    readonly x: number;
    /** The touch client y coordinate.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientY}
     */
    readonly y: number;
}
export {};
//# sourceMappingURL=input.d.ts.map