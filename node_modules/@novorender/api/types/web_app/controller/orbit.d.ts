import { type RenderStateCamera } from "../../core3d";
import { type ReadonlyVec3, vec3, type ReadonlyQuat } from "gl-matrix";
import { BaseController, type ControllerInitParams } from "./base";
import { ControllerInput } from "./input";
/** A camera controller for orbiting around a point of interest.
 * @category Camera Controllers
 */
export declare class OrbitController extends BaseController {
    kind: "orbit";
    projection: "pinhole";
    private params;
    private readonly _orientation;
    private _pivot;
    private _distance;
    private _fov;
    /**
     * @param input The input source.
     * @param params Optional initialization parameters.
     */
    constructor(input: ControllerInput, params?: Partial<OrbitControllerParams>);
    /** The current controller parameters. */
    get parameters(): OrbitControllerParams;
    /** Computed position, in world space.
     * @remarks
     * This position is derived from {@link pivot} point, {@link distance}, rotated around {@link pitch} and {@link yaw} angles.
     */
    get position(): vec3;
    /** Computed rotation quaternion, in world space.
     * @remarks
     * This rotation is derived from {@link pitch} and {@link yaw} angles.
     */
    get rotation(): ReadonlyQuat;
    /** The pitch angle around the pivot point, in degrees. */
    get pitch(): number;
    set pitch(value: number);
    /** The yaw angle around the pivot point, in degrees. */
    get yaw(): number;
    set yaw(value: number);
    /** The pivot point to orbit around, in world space. */
    get pivot(): ReadonlyVec3;
    set pivot(value: ReadonlyVec3);
    /** The distance from the pivot point, in meters. */
    get distance(): number;
    set distance(value: number);
    /** The camera vertical field of view angle, in degrees. */
    get fov(): number;
    set fov(value: number);
    /** Update controller parameters.
     * @param params Set of parameters to change.
     */
    updateParams(params: Partial<OrbitControllerParams>): void;
    serialize(includeDerived?: boolean): ControllerInitParams;
    init(params: ControllerInitParams): void;
    autoFit(center: ReadonlyVec3, radius: number): void;
    update(): void;
    stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera>;
    /** OrbitController type guard function.
     * @param controller The controller to type guard.
     */
    static is(controller: BaseController): controller is OrbitController;
    /** OrbitController type assert function.
     * @param controller The controller to type assert.
     */
    static assert(controller: BaseController): asserts controller is OrbitController;
}
/** Orbit type camera motion controller
 * @category Camera Controllers
 */
export interface OrbitControllerParams {
    /** The camera distance relative to pivot point in meters. */
    readonly maxDistance: number;
    /** Linear velocity modifier (default is 1.0) */
    readonly linearVelocity: number;
    /** Rotational velocity modifier (default is 1.0) */
    readonly rotationalVelocity: number;
}
//# sourceMappingURL=orbit.d.ts.map