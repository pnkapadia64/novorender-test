import { type ReadonlyQuat, quat, type ReadonlyVec3 } from "gl-matrix";
/** A 3D rotation expressed as pitch, roll and yaw angles.
 * @see {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes}
 * @category Camera Controllers
 */
export declare class PitchRollYawOrientation {
    private _pitch;
    private _yaw;
    private _roll;
    private _rot;
    /**
     * @param pitch Pitch angle, in degrees.
     * @param yaw Yaw angle, in degrees.
     * @param roll Roll angle, in degrees.
     */
    constructor(pitch?: number, yaw?: number, roll?: number);
    /** Pitch angle, in degrees. */
    get pitch(): number;
    set pitch(value: number);
    /** Roll angle, in degrees. */
    get roll(): number;
    set roll(value: number);
    /** Yaw angle, in degrees. */
    get yaw(): number;
    set yaw(value: number);
    /** Rotation expressed as a quaternion.
     * @remarks
     * The rotation will return a new object if after pitch, roll or yaw angles have changed since last time this accessor was called.
     * Othewise, it returns the previous, cached, object.
     * This enables {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality | strict equality}
     * to determine when the rotation remains unchanged.
     * @see {@link https://glmatrix.net/docs/module-quat.html}
     */
    get rotation(): ReadonlyQuat;
    /** Set pitch, roll and yaw angles from rotation quaternion.
     * @param rot The rotation quaternion to decompose into angles.
     */
    decomposeRotation(rot: ReadonlyQuat): void;
    private computeRotation;
}
/** Compute rotation quaternion from roll, pitch and yaw angles.
 * @param roll Roll angle in degrees,
 * @param pitch Pitch angle in degrees,
 * @param yaw Yaw angle in degrees,
 * @category Camera Controllers
 */
export declare function computeRotation(roll: number, pitch: number, yaw: number): quat;
/** Decompose rotation quaternioan into roll, pitch and yaw angles.
 * @param rot Rotation quaternion.
 * @returns Rotation angles in radians.
 * @category Camera Controllers
 */
export declare function decomposeRotation(rot: ReadonlyQuat): {
    /** The yaw angle, in radians. */
    readonly yaw: number;
    /** The pitch angle, in radians. */
    readonly pitch: number;
    /** The roll angle, in radians. */
    readonly roll: number;
};
/** Retuns a quaternion computed for the given direction.
  * Will compute rotation with Y as the up vector unless direction is Y or snapToAxis is given
  * @param dir Direction vector.
  * @param snapToAxis Snap to custom rotation, uses Y as up otherwise
  * @returns Rotation computed for the given direction and snap axis.
  * @category Camera Controllers
  */
export declare function rotationFromDirection(dir: ReadonlyVec3, snapToAxis?: quat): quat;
//# sourceMappingURL=orientation.d.ts.map