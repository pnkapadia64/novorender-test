import { type ReadonlyVec3, type ReadonlyQuat } from "gl-matrix";
import { BaseController, type ControllerInitParams } from "./base";
import { type RenderStateCamera } from "../../core3d";
import { ControllerInput } from "./input";
/** Panorama type camera motion controller
 * @remarks
 * For rotating the camera inside a sphere with a panorama image projected onto it.
 * @category Camera Controllers
 */
export declare class PanoramaController extends BaseController {
    kind: "panorama";
    projection: "pinhole";
    private params;
    private _position;
    private readonly _orientation;
    private _fov;
    /**
     * @param input The input source.
     */
    constructor(input: ControllerInput);
    /** Camera position, in world space. */
    get position(): ReadonlyVec3;
    set position(value: ReadonlyVec3);
    /** Computed rotation quaternion, in world space.
     * @remarks
     * This rotation is derived from {@link pitch} and {@link yaw} angles.
     */
    get rotation(): ReadonlyQuat;
    /** The camera pitch angle, in degrees. */
    get pitch(): number;
    set pitch(value: number);
    /** The camera yaw angle, in degrees. */
    get yaw(): number;
    set yaw(value: number);
    /** The camera vertical field of view angle, in degrees. */
    get fov(): number;
    set fov(value: number);
    /** Update controller parameters.
     * @param params Set of parameters to change.
     */
    updateParams(params: Partial<PanoramaControllerParams>): void;
    serialize(): ControllerInitParams;
    init(params: ControllerInitParams): void;
    autoFit(center: ReadonlyVec3, radius: number): void;
    moveTo(targetPosition: ReadonlyVec3, flyTime?: number, rotation?: ReadonlyQuat): void;
    update(): void;
    stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera>;
    /** PanoramaController type guard function.
     * @param controller The controller to type guard.
     */
    static is(controller: BaseController): controller is PanoramaController;
    /** PanoramaController type assert function.
     * @param controller The controller to type assert.
     */
    static assert(controller: BaseController): asserts controller is PanoramaController;
}
/** Panorama camera controller parameters
 * @category Camera Controllers
 */
export interface PanoramaControllerParams {
    /** The camera rotational velocity factor.
     * @defaultValue 1
     */
    rotationalVelocity: number;
}
//# sourceMappingURL=panorama.d.ts.map