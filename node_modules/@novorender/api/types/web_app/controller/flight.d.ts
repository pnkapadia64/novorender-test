import { type ReadonlyVec3, type ReadonlyQuat } from "gl-matrix";
import { BaseController, type ControllerInitParams, type PickContext } from "./base";
import { type RenderStateCamera, type RecursivePartial, type BoundingSphere } from "../../core3d";
import { ControllerInput } from "./input";
/** The flight controller mimics the behaviour of an etheral, hovering drone, allowing unconstrained movements through walls and obstacles.
 * @category Camera Controllers
 */
export declare class FlightController extends BaseController {
    /** The context used for pick queries. */
    readonly pick: PickContext;
    kind: string;
    projection: "pinhole";
    private params;
    private _position;
    private readonly _orientation;
    private _pivot;
    private _fov;
    private readonly resetPickDelay;
    private lastUpdatedMoveBegin;
    private lastUpdate;
    private moveBeginDelay;
    private recordedMoveBegin;
    private inMoveBegin;
    /**
     * @param input The input source.
     * @param pick The context used for pick queries.
     */
    constructor(input: ControllerInput, 
    /** The context used for pick queries. */
    pick: PickContext);
    /** Camera position, in world space. */
    get position(): ReadonlyVec3;
    set position(value: ReadonlyVec3);
    /** Computed rotation quaternion, in world space.
     * @remarks
     * This rotation is derived from {@link pitch} and {@link yaw} angles.
     */
    get rotation(): ReadonlyQuat;
    /** The camera pitch angle, in degrees. */
    get pitch(): number;
    set pitch(value: number);
    /** The camera yaw angle, in degrees. */
    get yaw(): number;
    set yaw(value: number);
    /** The camera vertical field of view angle, in degrees. */
    get fov(): number;
    set fov(value: number);
    /** The optional pivot point to orbit around, in world space. */
    get pivot(): Pivot | undefined;
    /** Update controller parameters.
     * @param params Set of parameters to change.
     */
    updateParams(params: RecursivePartial<FlightControllerParams>): void;
    serialize(): ControllerInitParams;
    init(params: ControllerInitParams): void;
    autoFit(center: ReadonlyVec3, radius: number): void;
    moveTo(targetPosition: ReadonlyVec3, flyTime?: number, rotation?: ReadonlyQuat): void;
    zoomTo(boundingSphere: BoundingSphere, flyTime?: number): void;
    update(): void;
    stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera>;
    mouseButtonChanged(event: MouseEvent): Promise<void>;
    touchChanged(event: TouchEvent): Promise<void>;
    moveBegin(event: TouchEvent | MouseEvent): Promise<void>;
    private resetPivot;
    private setPivot;
    /** FlightController type guard function.
     * @param controller The controller to type guard.
     */
    static is(controller: BaseController): controller is FlightController;
    /** FlightController type assert function.
     * @param controller The controller to type assert.
     */
    static assert(controller: BaseController): asserts controller is FlightController;
}
/** Variant of flight controller that uses middle mouse button for panning.
 * @category Camera Controllers
 */
export declare class CadMiddlePanController extends FlightController {
    readonly pick: PickContext;
    kind: "cadMiddlePan";
    constructor(input: ControllerInput, pick: PickContext, params?: FlightControllerParams);
    getTransformations(): CameraTransformations;
}
/** Variant of flight controller that uses right mouse button for panning.
 * @category Camera Controllers
 */
export declare class CadRightPanController extends FlightController {
    readonly pick: PickContext;
    kind: "cadRightPan";
    constructor(input: ControllerInput, pick: PickContext, params?: FlightControllerParams);
    getTransformations(): CameraTransformations;
}
/** Vassbakk's super special flight controller.
 * @category Camera Controllers
 */
export declare class SpecialFlightController extends FlightController {
    readonly pick: PickContext;
    kind: "special";
    constructor(input: ControllerInput, pick: PickContext, params?: FlightControllerParams);
    getTransformations(): CameraTransformations;
}
/** Flight controller initialization parameters
 * @category Camera Controllers
 */
export interface FlightControllerParams {
    /** The camera linear velocity factor.
     * @defaultValue 1
     */
    linearVelocity: number;
    /** The camera rotational velocity factor.
     * @defaultValue 1
     */
    rotationalVelocity: number;
    /** Delay for pick updates, in milliseconds.
     * @defaultValue 200
     */
    pickDelay: number;
    /** Option to enable shift to modify mouse wheel speed.
    * @defaultValue false
    */
    enableShiftModifierOnWheel: boolean;
    /**
     * When set, the controller will sample the distance to the pixel under the mouse cursor,
     * or central pinch point, and move the camera with speed proportional to that distance.
     * The min and max determines the bounds of how slow/fast it is allowed to move.
     *
     * Setting this to `null` disables this feature, using a constant speed factor of 1.0.
     * @defaultValue null
     */
    proportionalCameraSpeed: {
        readonly min: number;
        readonly max: number;
    } | null;
}
interface CameraTransformations {
    tx: number;
    ty: number;
    tz: number;
    rx: number;
    ry: number;
    shouldPivot: boolean;
}
interface Pivot {
    center: ReadonlyVec3;
    offset: ReadonlyVec3;
    distance: number;
    active: boolean;
}
export {};
//# sourceMappingURL=flight.d.ts.map