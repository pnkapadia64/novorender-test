import type { AtLeastOne, RGB, RGBA, RGBATransform } from "../core3d/state";
/**
 * Create a highlight color transform that doesn't change colors.
 * @category Render State
 */
export declare function createNeutralHighlight(): RGBATransform;
/**
 * Create a highlight color transform that replaces material opacity.
 * @param opacity New material opacity between 0 and 1, where 0 is 100% transparent and 1.0 is 100% opaque.
 * @category Render State
 */
export declare function createTransparentHighlight(opacity: number): RGBATransform;
/**
 * Create a highlight color transform that replaces material colors.
 * @param color New material color or color modifier with optional alpha to be used uniformly across selection.
 * @category Render State
 */
export declare function createColorSetHighlight(color: RGB | RGBA): RGBATransform;
/**
 * Create a highlight color transform that modifies material colors.
 * @param color New material color or color modifier with optional alpha.
 * @remarks
 * Colors can either be replaced or modified using the {@link LinearTransform}.
 * @category Render State
 */
export declare function createRGBATransformHighlight(options: AtLeastOne<RGBAOptions>): RGBATransform;
/**
 * Create a highlight color transform that modifies material colors using hue, saturation and lightness.
 * @param color New material hue, saturation and lightness modifier with optional alpha.
 * @category Render State
 */
export declare function createHSLATransformHighlight(options: AtLeastOne<HSLAOptions>): RGBATransform;
/** Options for RGBA + alpha color transformation.
 * @remarks
 * All input values are between 0 and 1.
 * @category Render State
 */
export interface RGBAOptions {
    /** Red color adjustment. */
    readonly red: number | LinearTransform;
    /** Green color adjustment. */
    readonly green: number | LinearTransform;
    /** Blue color adjustment. */
    readonly blue: number | LinearTransform;
    /** Opacity/alpha adjustment. */
    readonly opacity: number | LinearTransform;
}
/** Options for HSL + alpha color transformation.
 * @remarks
 * All input values are between 0 and 1.
 * See {@link https://en.wikipedia.org/wiki/HSL_and_HSV | Wikipedia} for more details on the HSV color space.
 * @category Render State
 */
export interface HSLAOptions {
    /** Lightness adjustment. */
    readonly lightness: number | LinearTransform;
    /** Saturation adjustment (scale). */
    readonly saturation: number;
    /** Opacity/alpha adjustment. */
    readonly opacity: number | LinearTransform;
}
/** Linear transform options.
 * @remarks
 * The transform is performed by first applying scale, then adding offset, i.e.: result = value * scale + offset.
 * If scale = 0, offset will effectively replace input value.
 * @category Render State
 */
export interface LinearTransform {
    /** Multiplicand for input value. Default = 1.*/
    readonly scale?: number;
    /** Addend for scaled input value. Default = 0. */
    readonly offset?: number;
}
//# sourceMappingURL=highlight.d.ts.map