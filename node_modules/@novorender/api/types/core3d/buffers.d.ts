import type { ResourceBin } from "./resource";
export declare const enum BufferFlags {
    color = 1,
    pick = 2,
    depth = 4,
    all = 7
}
/**
 * Set of buffers uses for rendering and pick.
 * @remarks
 * These buffers are only useful for advanced developers who aim to extend this API with their own custom 3D module.
 * @category Render Module
 */
export declare class RenderBuffers {
    /** The underlying webgl2 rendering context. */
    readonly gl: WebGL2RenderingContext;
    /** The buffer width in pixels. */
    readonly width: number;
    /** The buffer height in pixels. */
    readonly height: number;
    /** # of MSAA samples. */
    readonly samples: number;
    /** The resource bin to manage resource tracking and disposal. */
    readonly resourceBin: ResourceBin;
    /** Flag to indicate the CPU/read buffers needs to be updated. */
    readBuffersNeedUpdate: boolean;
    /** Texture resources. */
    readonly textures: {
        readonly color: WebGLTexture;
        readonly pick: WebGLTexture;
        readonly depth: WebGLTexture;
    };
    /** Renderbuffer resources. */
    readonly renderBuffers: {
        readonly colorMSAA: WebGLRenderbuffer | null;
        readonly depthMSAA: WebGLRenderbuffer | null;
    };
    /** Frame buffer resources. */
    readonly frameBuffers: {
        readonly color: WebGLFramebuffer;
        readonly colorMSAA: WebGLFramebuffer | null;
        readonly pick: WebGLFramebuffer;
    };
    /** CPU/JS copy of pick buffers. */
    readonly readBuffers: {
        readonly pick: WebGLBuffer;
    };
    private typedArrays;
    private pickFence;
    private read;
}
//# sourceMappingURL=buffers.d.ts.map