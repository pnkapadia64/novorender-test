import type { WasmInstance } from "..";
import type { ShaderImports } from "core3d/shaders";
import type { TextureImageSource } from "../../webgl2";
/**
 *  Core3D bundler/build resource imports.
 * @remarks
 * In order to adapt to any build/bundler system and inlining preferences, we declare all non-javascript imported resources here.
 * These must be created by some external function that is specific to your build/bundler environment.
 * @category Render View
 */
export interface Core3DImports {
    /** The GGX shader lookup image.
     * @remarks This image can be found in `core3d/lut_ggx.png`.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CreateImageBitmap | createImageBitmap}
     */
    readonly lutGGX: TextureImageSource;
    /** The web assembly instance.
     * @remarks This web assembly can be found in `core3d/wasm/main.wasm`.
     * @see {@link https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running | Loading and running WebAssembly code}
     */
    readonly wasmInstance: WasmInstance;
    /** The web assembly instance.
     * @remarks This web assembly can be found in `@novorender/wasm-parser/wasm_parser_bg.wasm`.
     * @see {@link https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running | Loading and running WebAssembly code}
     */
    readonly parserWasm: ArrayBuffer;
    /** The scene load/parse worker.
     * @remarks This worker root can be found in `core3d/modules/octree/worker/index.ts`.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker | Worker: Worker() constructor}
     */
    readonly loaderWorker: Worker;
    /** The watermark logo data.
     * @remarks This file can be found in `core3d/modules/watermark/logo.bin`.
     */
    readonly logo: ArrayBuffer;
    /** GLSL shader imports.
     * @remarks The shaders can be found in `core3d/imports/shaders.ts`.
     */
    readonly shaders: ShaderImports;
}
/**
 * A map describing inlined resources, or urls where to fetch them.
 */
export interface Core3DImportMap {
    /** The base url to be applied to the other URLs.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL}
     */
    readonly baseUrl: URL;
    /** Inlined GGX lookup texture as Blob or ImageBitmap, or URL to download.
     * @defaultValue `"./lut_ggx.png"`
     * @remarks Blobs should have their type set to the proper MIME type, e.g. `type: "image/png"`.
     */
    readonly lutGGX?: string | URL | Blob | ImageBitmap;
    /** Inlined WASM instance, or URL to download.
     * @defaultValue `"./main.wasm"`
     */
    readonly wasmInstance?: string | URL | WasmInstance;
    /** Inlined WASM data, or URL to download.
     * @defaultValue `"./parser.wasm"`
     */
    readonly parserWasm?: string | URL | ArrayBuffer;
    /** Inlined loader worker, or URL to download.
     * @defaultValue `"./loaderWorker.js"`
     */
    readonly loaderWorker?: string | URL | Worker;
    /** Inlined Logo, or URL to download.
     * @defaultValue `"./logo.bin"`
     */
    readonly logo?: string | URL | ArrayBuffer;
    /** Inlined shaders, or URL to download.
     * @defaultValue `"./shaders.js"`
     */
    readonly shaders?: string | URL | ShaderImports;
}
/** Download any missing imports.
 * @param map URLs or bundled asset map.
 * @remarks
 * This function will attempt to download any resource not inlined from the specified urls,
 * using the specified {@link Core3DImportMap.baseUrl | baseUrl}.
 * If map is undefined, it will look for the files in the same folder as the current script.
 *
 * @category Render View
 */
export declare function downloadCore3dImports(map: Core3DImportMap): Promise<Core3DImports>;
//# sourceMappingURL=index.d.ts.map