import { type WebGLResource, type BufferParams, type BufferTargetString, type FrameBufferParams, type ProgramParams, type RenderbufferParams, type SamplerParams, type TextureParams, type TextureTargetString, type VertexArrayParams, type ProgramAsyncParams } from "../webgl2";
/**
 * A WebGL resource tracking helper class.
 * @remarks
 * Resource bins are used to track allocation of WebGL resources and assist with automatic disposal.
 * @category Render Module
 */
export declare class ResourceBin {
    /** The underlying WebGL2 rendering context. */
    readonly gl: WebGL2RenderingContext;
    /** The name of the resource bin. */
    readonly name: string;
    private readonly collection;
    private readonly resourceMap;
    get resourceInfo(): IterableIterator<ResourceInfo>;
    get size(): number;
    createBuffer(params: BufferParams): WebGLBuffer;
    createFrameBuffer(params: FrameBufferParams): WebGLFramebuffer;
    createProgram(params: ProgramParams): WebGLProgram;
    createProgramAsync(params: ProgramAsyncParams): {
        readonly program: WebGLProgram;
        readonly vertex: WebGLShader;
        readonly fragment: WebGLShader;
    };
    createRenderBuffer(params: RenderbufferParams): WebGLRenderbuffer;
    createSampler(params: SamplerParams): WebGLSampler;
    createTexture(params: TextureParams): WebGLTexture;
    createTransformFeedback(): WebGLTransformFeedback;
    createVertexArray(params: VertexArrayParams): WebGLVertexArrayObject;
    private add;
    subordinate(owner: WebGLVertexArrayObject | WebGLFramebuffer, ...resources: readonly (WebGLResource | null)[]): void;
    delete(...resources: readonly (WebGLResource | null)[]): void;
    private del;
    deleteAll(): void;
    dispose(): void;
}
declare const resourceKinds: readonly ["Buffer", "Framebuffer", "Program", "Query", "Renderbuffer", "Sampler", "Shader", "Sync", "TransformFeedback", "Texture", "VertexArray"];
export type ResourceKind = typeof resourceKinds[number];
export type ResourceTarget = BufferTargetString | TextureTargetString | "FRAMEBUFFER";
export interface ResourceInfo {
    readonly kind: ResourceKind;
    readonly target?: ResourceTarget;
    readonly byteSize?: number;
    readonly tag?: string;
}
export {};
//# sourceMappingURL=resource.d.ts.map