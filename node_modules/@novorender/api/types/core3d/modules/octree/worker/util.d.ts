export type U8 = Uint8Array;
export type U16 = Uint16Array;
export type U32 = Uint32Array;
export type I8 = Int8Array;
export type I16 = Int16Array;
export type I32 = Int32Array;
export type F16 = Uint16Array;
export type F32 = Float32Array;
export type F64 = Float64Array;
export type EnumArray<T> = {
    readonly [index: number]: T;
};
export type Float16Array = Uint16Array;
export declare const Float16Array: Uint16ArrayConstructor;
export declare class BufferReader {
    readonly buffer: ArrayBuffer;
    pos: number;
    private readonly _u8;
    private readonly _u16;
    private readonly _u32;
    private readonly _i8;
    private readonly _i16;
    private readonly _i32;
    private readonly _f16;
    private readonly _f32;
    private readonly _f64;
    constructor(buffer: ArrayBuffer);
    private read;
    get eof(): boolean;
    u8(size: number): Uint8Array;
    u16(size: number): Uint16Array;
    u32(size: number): Uint32Array;
    i8(size: number): Int8Array;
    i16(size: number): Int16Array;
    i32(size: number): Int32Array;
    f16(size: number): Uint16Array;
    f32(size: number): Float32Array;
    f64(size: number): Float64Array;
}
//# sourceMappingURL=util.d.ts.map