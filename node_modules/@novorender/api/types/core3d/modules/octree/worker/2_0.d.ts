import { BufferReader } from "./util.js";
import type { EnumArray, U8, U32, I8, I16, F16, F32, F64 } from "./util.js";
export declare const version = "2.0";
export declare const enum PrimitiveType {
    points = 0,
    lines = 1,
    line_loops = 2,
    line_strip = 3,
    triangles = 4,
    triangle_strip = 5,
    triangle_fan = 6
}
export declare const enum OptionalVertexAttribute {
    normal = 1,
    color = 2,
    texCoord = 4,
    projectedPos = 8
}
export declare const enum MaterialType {
    opaque = 0,
    opaqueDoubleSided = 1,
    transparent = 2,
    elevation = 3
}
export declare const enum TextureSemantic {
    baseColor = 0
}
export interface HashRange {
    readonly start: U32;
    readonly count: U32;
}
export interface SubMeshProjectionRange {
    readonly start: U32;
    readonly count: U32;
}
export interface VertexRange {
    readonly start: U32;
    readonly count: U32;
}
export interface VertexIndexRange {
    readonly start: U32;
    readonly count: U32;
}
export interface TextureInfoRange {
    readonly start: U8;
    readonly count: U8;
}
export interface PixelRange {
    readonly start: U32;
    readonly count: U32;
}
export interface ChildInfo {
    readonly length: number;
    readonly hash: HashRange;
    readonly childIndex: U8;
    readonly childMask: U32;
    readonly tolerance: I8;
    readonly totalByteSize: U32;
    readonly offset: Double3;
    readonly scale: F32;
    readonly bounds: Bounds;
    readonly subMeshes: SubMeshProjectionRange;
}
export interface Double3 {
    readonly length: number;
    readonly x: F64;
    readonly y: F64;
    readonly z: F64;
}
export interface Bounds {
    readonly length: number;
    readonly box: AABB;
    readonly sphere: BoundingSphere;
}
export interface AABB {
    readonly length: number;
    readonly min: Float3;
    readonly max: Float3;
}
export interface Float3 {
    readonly length: number;
    readonly x: F32;
    readonly y: F32;
    readonly z: F32;
}
export interface BoundingSphere {
    readonly length: number;
    readonly origo: Float3;
    readonly radius: F32;
}
export interface SubMeshProjection {
    readonly length: number;
    readonly objectId: U32;
    readonly primitiveType: EnumArray<PrimitiveType>;
    readonly attributes: EnumArray<OptionalVertexAttribute>;
    readonly numDeviations: U8;
    readonly numIndices: U32;
    readonly numVertices: U32;
    readonly numTextureBytes: U32;
}
export interface SubMesh {
    readonly length: number;
    readonly childIndex: U8;
    readonly objectId: U32;
    readonly materialIndex: U8;
    readonly primitiveType: EnumArray<PrimitiveType>;
    readonly materialType: EnumArray<MaterialType>;
    readonly attributes: EnumArray<OptionalVertexAttribute>;
    readonly numDeviations: U8;
    readonly vertices: VertexRange;
    readonly primitiveVertexIndices: VertexIndexRange;
    readonly edgeVertexIndices: VertexIndexRange;
    readonly cornerVertexIndices: VertexIndexRange;
    readonly textures: TextureInfoRange;
}
export interface TextureInfo {
    readonly length: number;
    readonly semantic: EnumArray<TextureSemantic>;
    readonly transform: Float3x3;
    readonly pixelRange: PixelRange;
}
export interface Float3x3 {
    readonly length: number;
    readonly e00: F32;
    readonly e01: F32;
    readonly e02: F32;
    readonly e10: F32;
    readonly e11: F32;
    readonly e12: F32;
    readonly e20: F32;
    readonly e21: F32;
    readonly e22: F32;
}
export interface Vertex {
    readonly length: number;
    readonly position: Int16_3;
    readonly normal?: Int8_3;
    readonly color?: RGBA_U8;
    readonly texCoord?: Half2;
    readonly projectedPos?: Int16_3;
    readonly deviations: Deviations;
}
export interface Int16_3 {
    readonly length: number;
    readonly x: I16;
    readonly y: I16;
    readonly z: I16;
}
export interface Int8_3 {
    readonly length: number;
    readonly x: I8;
    readonly y: I8;
    readonly z: I8;
}
export interface RGBA_U8 {
    readonly length: number;
    readonly red: U8;
    readonly green: U8;
    readonly blue: U8;
    readonly alpha: U8;
}
export interface Half2 {
    readonly length: number;
    readonly x: F16;
    readonly y: F16;
}
export interface Deviations {
    readonly length: number;
    readonly a?: F16;
    readonly b?: F16;
    readonly c?: F16;
    readonly d?: F16;
}
export interface Triangle {
    readonly length: number;
    readonly topologyFlags?: U8;
}
export declare function readSchema(r: BufferReader): {
    readonly version: "2.0";
    readonly childInfo: ChildInfo;
    readonly hashBytes: Uint8Array;
    readonly subMeshProjection: SubMeshProjection;
    readonly subMesh: SubMesh;
    readonly textureInfo: TextureInfo;
    readonly vertex: Vertex;
    readonly triangle: Triangle;
    readonly vertexIndex: Uint16Array | undefined;
    readonly texturePixels: Uint8Array;
};
export type Schema = ReturnType<typeof readSchema>;
//# sourceMappingURL=2_0.d.ts.map