export declare function glExtensions(gl: WebGL2RenderingContext, refresh?: boolean): {
    readonly colorBufferFloat: WEBGL_color_buffer_float | null;
    readonly parallelShaderCompile: KHR_parallel_shader_compile | null;
    readonly loseContext: WEBGL_lose_context | null;
    readonly multiDraw: WEBGL_multi_draw | null;
    readonly drawBuffersIndexed: OES_draw_buffers_indexed_ext | null;
    readonly disjointTimerQuery: EXT_disjoint_timer_query_webgl2_ext;
    readonly provokingVertex: WEBGL_provoking_vertex | null;
};
declare function getWebGL2Extensions(gl: WebGL2RenderingContext): {
    readonly colorBufferFloat: WEBGL_color_buffer_float | null;
    readonly parallelShaderCompile: KHR_parallel_shader_compile | null;
    readonly loseContext: WEBGL_lose_context | null;
    readonly multiDraw: WEBGL_multi_draw | null;
    readonly drawBuffersIndexed: OES_draw_buffers_indexed_ext | null;
    readonly disjointTimerQuery: EXT_disjoint_timer_query_webgl2_ext;
    readonly provokingVertex: WEBGL_provoking_vertex | null;
};
export type ExtensionsGL = ReturnType<typeof getWebGL2Extensions>;
export interface OES_draw_buffers_indexed_ext {
    enableiOES(target: number, index: number): void;
    disableiOES(target: number, index: number): void;
    blendEquationiOES(buf: number, mode: number): void;
    blendEquationSeparateiOES(buf: number, modeRGB: number, modeAlpha: number): void;
    blendFunciOES(buf: number, src: number, dst: number): void;
    blendFuncSeparateiOES(buf: number, srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;
    colorMaskiOES(buf: number, r: boolean, g: boolean, b: boolean, a: boolean): void;
}
export interface EXT_disjoint_timer_query_webgl2_ext {
    readonly QUERY_COUNTER_BITS_EXT: 0x8864;
    readonly TIME_ELAPSED_EXT: 0x88BF;
    readonly TIMESTAMP_EXT: 0x8E28;
    readonly GPU_DISJOINT_EXT: 0x8FBB;
    queryCounterEXT(query: WebGLQuery, target: 0x8E28): void;
}
export interface WEBGL_provoking_vertex {
    readonly FIRST_VERTEX_CONVENTION_WEBGL: 0x8E4D;
    readonly LAST_VERTEX_CONVENTION_WEBGL: 0x8E4E;
    readonly PROVOKING_VERTEX_WEBGL: 0x8E4F;
    provokingVertexWEBGL(provokeMode: 0x8E4D | 0x8E4E): void;
}
export {};
//# sourceMappingURL=extensions.d.ts.map