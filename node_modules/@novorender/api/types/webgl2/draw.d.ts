export declare function glDraw(gl: WebGL2RenderingContext, params: DrawParams): DrawStatistics;
export type DrawStatistics = {
    readonly points: number;
    readonly lines: 0;
    readonly triangles: 0;
} | {
    readonly points: 0;
    readonly lines: number;
    readonly triangles: 0;
} | {
    readonly points: 0;
    readonly lines: 0;
    readonly triangles: number;
};
export type DrawParams = DrawParamsArrays | DrawParamsArraysMultiDraw | DrawParamsArraysInstanced | DrawParamsElements | DrawParamsElementsRange | DrawParamsElementsMultiDraw | DrawParamsElementsInstanced;
export type DrawMode = "POINTS" | "LINE_STRIP" | "LINE_LOOP" | "LINES" | "TRIANGLE_STRIP" | "TRIANGLE_FAN" | "TRIANGLES";
export interface DrawParamsBase {
    readonly mode?: DrawMode;
}
export interface DrawParamsArrays extends DrawParamsBase {
    /** Equivalent to gl.drawArrays() */
    readonly kind: "arrays";
    readonly count: number;
    readonly first?: number;
}
export interface DrawParamsArraysMultiDraw extends DrawParamsBase {
    /** Equivalent to `ext.multiDrawArraysWEBGL()` */
    readonly kind: "arrays_multidraw";
    readonly drawCount: number;
    readonly firstsList: Int32Array;
    readonly firstsOffset?: number;
    readonly counts: Int32Array;
    readonly countsOffset?: number;
}
export interface DrawParamsElements extends DrawParamsBase {
    /** Equivalent to gl.drawElements() */
    readonly kind: "elements";
    /** # of indices to draw */
    readonly count: number;
    /** Type of indices */
    readonly indexType: "UNSIGNED_BYTE" | "UNSIGNED_SHORT" | "UNSIGNED_INT";
    /** Byte offset in the element array buffer. Must be a valid multiple of the size of the given type. */
    readonly byteOffset?: number;
}
export interface DrawParamsElementsRange extends DrawParamsBase {
    /** Equivalent to gl.drawRangeElements() */
    readonly kind: "elements_range";
    /** # of indices to draw */
    readonly count: number;
    /** Type of indices */
    readonly indexType: "UNSIGNED_BYTE" | "UNSIGNED_SHORT" | "UNSIGNED_INT";
    /** Byte offset in the element array buffer. Must be a valid multiple of the size of the given type. */
    readonly byteOffset?: number;
    /** The minimum array index contained in buffer range. */
    readonly minIndex: number;
    /** The maximum array index contained in buffer range. */
    readonly maxIndex: number;
}
export interface DrawParamsElementsMultiDraw extends DrawParamsBase {
    /** Equivalent to `ext.multiDrawArraysWEBGL()` */
    readonly kind: "elements_multidraw";
    readonly drawCount: number;
    readonly indexType: "UNSIGNED_BYTE" | "UNSIGNED_SHORT" | "UNSIGNED_INT";
    readonly byteOffsets: Int32Array;
    readonly byteOffsetsOffset?: number;
    readonly counts: Int32Array;
    readonly countsOffset?: number;
}
export interface DrawParamsArraysInstanced extends DrawParamsBase {
    /** Equivalent to gl.drawArraysInstanced() */
    readonly kind: "arrays_instanced";
    readonly count: number;
    readonly instanceCount: number;
    readonly first?: number;
}
export interface DrawParamsElementsInstanced extends DrawParamsBase {
    /** Equivalent to gl.drawElementsInstanced() */
    readonly kind: "elements_instanced";
    readonly count: number;
    readonly instanceCount: number;
    readonly indexType: "UNSIGNED_BYTE" | "UNSIGNED_SHORT" | "UNSIGNED_INT";
    readonly byteOffset?: number;
}
//# sourceMappingURL=draw.d.ts.map