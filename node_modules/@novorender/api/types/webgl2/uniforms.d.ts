import { GL } from "./constants";
export declare function glGetUniformsInfo(gl: WebGL2RenderingContext, program: WebGLProgram): readonly UniformInfo[];
export declare function glGetUniformBlocks(gl: WebGL2RenderingContext, program: WebGLProgram): (string | null)[];
export type UniformType = GL.FLOAT | GL.FLOAT_VEC2 | GL.FLOAT_VEC3 | GL.FLOAT_VEC4 | GL.INT | GL.INT_VEC2 | GL.INT_VEC3 | GL.INT_VEC4 | GL.UNSIGNED_INT | GL.UNSIGNED_INT_VEC2 | GL.UNSIGNED_INT_VEC3 | GL.UNSIGNED_INT_VEC4 | GL.BOOL | GL.BOOL_VEC2 | GL.BOOL_VEC3 | GL.BOOL_VEC4 | GL.FLOAT_MAT2 | GL.FLOAT_MAT3 | GL.FLOAT_MAT4 | GL.FLOAT_MAT2x3 | GL.FLOAT_MAT2x4 | GL.FLOAT_MAT3x2 | GL.FLOAT_MAT3x4 | GL.FLOAT_MAT4x2 | GL.FLOAT_MAT4x3 | GL.SAMPLER_2D | GL.SAMPLER_2D_ARRAY | GL.SAMPLER_2D_ARRAY_SHADOW | GL.SAMPLER_2D_ARRAY_SHADOW | GL.SAMPLER_3D | GL.SAMPLER_CUBE | GL.SAMPLER_CUBE_SHADOW;
export interface UniformInfo {
    readonly name: string;
    readonly type: UniformType;
    readonly size: number;
    readonly blockIndex: number;
    readonly offset: number;
}
export declare function glUniformLocations<const T extends readonly string[]>(gl: WebGL2RenderingContext, program: WebGLProgram, names: T, prefix?: string): Record<T[number], WebGLUniformLocation | null>;
export declare function glUBOProxy<const T extends Record<string, UniformTypes>>(values: T): {
    readonly buffer: ArrayBuffer;
    readonly dirtyRange: DirtyRange;
    readonly values: { [P in Extract<keyof T, string>]: T[P] extends "bool" ? boolean : T[P] extends "float" | "int" | "uint" ? number : ArrayLike<number>; };
};
declare class DirtyRange {
    readonly size: number;
    begin: number;
    end: number;
    constructor(size: number);
    get isEmpty(): boolean;
    clear(): void;
    reset(): void;
    expand(begin: number, end: number): void;
}
export interface UniformsProxy {
    readonly buffer: ArrayBuffer;
    readonly dirtyRange: DirtyRange;
    readonly values: {
        [index: string]: boolean | number | ArrayLike<number>;
    };
}
declare const uniformTypes: {
    readonly bool: {
        readonly type: "i32";
        readonly alignment: 1;
        readonly components: 1;
        readonly rows: 1;
    };
    readonly int: {
        readonly type: "i32";
        readonly alignment: 1;
        readonly components: 1;
        readonly rows: 1;
    };
    readonly uint: {
        readonly type: "u32";
        readonly alignment: 1;
        readonly components: 1;
        readonly rows: 1;
    };
    readonly float: {
        readonly type: "f32";
        readonly alignment: 1;
        readonly components: 1;
        readonly rows: 1;
    };
    readonly ivec2: {
        readonly type: "i32";
        readonly alignment: 2;
        readonly components: 2;
        readonly rows: 1;
    };
    readonly uvec2: {
        readonly type: "u32";
        readonly alignment: 2;
        readonly components: 2;
        readonly rows: 1;
    };
    readonly vec2: {
        readonly type: "f32";
        readonly alignment: 2;
        readonly components: 2;
        readonly rows: 1;
    };
    readonly ivec3: {
        readonly type: "i32";
        readonly alignment: 4;
        readonly components: 3;
        readonly rows: 1;
    };
    readonly uvec3: {
        readonly type: "u32";
        readonly alignment: 4;
        readonly components: 3;
        readonly rows: 1;
    };
    readonly vec3: {
        readonly type: "f32";
        readonly alignment: 4;
        readonly components: 3;
        readonly rows: 1;
    };
    readonly ivec4: {
        readonly type: "i32";
        readonly alignment: 4;
        readonly components: 3;
        readonly rows: 1;
    };
    readonly uvec4: {
        readonly type: "u32";
        readonly alignment: 4;
        readonly components: 3;
        readonly rows: 1;
    };
    readonly vec4: {
        readonly type: "f32";
        readonly alignment: 4;
        readonly components: 4;
        readonly rows: 1;
    };
    readonly mat3: {
        readonly type: "f32";
        readonly alignment: 4;
        readonly components: 3;
        readonly rows: 3;
    };
    readonly mat4: {
        readonly type: "f32";
        readonly alignment: 4;
        readonly components: 4;
        readonly rows: 4;
    };
};
export type UniformTypes = keyof typeof uniformTypes;
export {};
//# sourceMappingURL=uniforms.d.ts.map