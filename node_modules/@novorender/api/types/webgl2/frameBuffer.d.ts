export declare function glCreateFrameBuffer(gl: WebGL2RenderingContext, params: FrameBufferParams): WebGLFramebuffer;
export declare function glInvalidateFrameBuffer(gl: WebGL2RenderingContext, params: InvalidateFrameBufferParams): void;
export interface FrameBufferParams {
    readonly depth?: FrameBufferBinding;
    readonly stencil?: FrameBufferBinding;
    readonly color: readonly (FrameBufferBinding | null)[];
}
export interface FrameBufferTextureBinding {
    readonly kind: "FRAMEBUFFER" | "DRAW_FRAMEBUFFER" | "READ_FRAMEBUFFER";
    readonly texture: WebGLTexture | null;
    readonly texTarget?: "TEXTURE_2D";
    readonly level?: number;
    readonly layer?: number;
}
export interface FrameBufferRenderBufferBinding {
    readonly kind: "FRAMEBUFFER" | "DRAW_FRAMEBUFFER" | "READ_FRAMEBUFFER";
    readonly renderBuffer: WebGLRenderbuffer | null;
}
export type FrameBufferBinding = FrameBufferTextureBinding | FrameBufferRenderBufferBinding;
export interface InvalidateFrameBufferParams {
    readonly kind: "FRAMEBUFFER" | "DRAW_FRAMEBUFFER" | "READ_FRAMEBUFFER";
    readonly frameBuffer: WebGLFramebuffer | null;
    readonly depth?: boolean;
    readonly stencil?: boolean;
    readonly color: readonly (boolean)[];
}
//# sourceMappingURL=frameBuffer.d.ts.map