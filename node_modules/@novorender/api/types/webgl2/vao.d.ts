export declare function glCreateVertexArray(gl: WebGL2RenderingContext, params: VertexArrayParams): WebGLVertexArrayObject;
export interface VertexArrayParams {
    readonly attributes: readonly (VertexAttribute | null)[];
    readonly indices?: WebGLBuffer;
}
export type VertexAttribute = VertexAttributeFloat | VertexAttributeFloatNormalized | VertexAttributeInt | VertexAttributeUint;
export type ComponentTypeFloat = "HALF_FLOAT" | "FLOAT";
export type ComponentTypeInt = "BYTE" | "SHORT" | "INT";
export type ComponentTypeUint = "UNSIGNED_BYTE" | "UNSIGNED_SHORT" | "UNSIGNED_INT";
export type ComponentType = ComponentTypeFloat | ComponentTypeInt | ComponentTypeUint;
export type ShaderTypeFloat = "FLOAT" | "FLOAT_VEC2" | "FLOAT_VEC3" | "FLOAT_VEC4" | "FLOAT_MAT2" | "FLOAT_MAT3" | "FLOAT_MAT4" | "FLOAT_MAT2x3" | "FLOAT_MAT2x4" | "FLOAT_MAT3x2" | "FLOAT_MAT3x4" | "FLOAT_MAT4x2" | "FLOAT_MAT4x3";
export type ShaderTypeInt = "INT" | "INT_VEC2" | "INT_VEC3" | "INT_VEC4";
export type ShaderTypeUint = "UNSIGNED_INT" | "UNSIGNED_INT_VEC2" | "UNSIGNED_INT_VEC3" | "UNSIGNED_INT_VEC4";
export type ShaderAttributeType = ShaderTypeFloat | ShaderTypeInt | ShaderTypeUint;
interface VertexAttributeCommon {
    readonly buffer: WebGLBuffer;
    readonly componentCount?: 1 | 2 | 3 | 4;
    readonly byteStride?: number;
    readonly byteOffset?: number;
    readonly divisor?: number;
}
export interface VertexAttributeFloat extends VertexAttributeCommon {
    readonly kind: ShaderTypeFloat;
    readonly componentType?: ComponentType;
    readonly normalized?: false;
}
export interface VertexAttributeFloatNormalized extends VertexAttributeCommon {
    readonly kind: ShaderTypeFloat;
    readonly componentType?: ComponentTypeInt | ComponentTypeUint;
    readonly normalized: true;
}
export interface VertexAttributeInt extends VertexAttributeCommon {
    readonly kind: ShaderTypeInt;
    readonly componentType?: ComponentTypeInt;
    readonly normalized?: undefined;
}
export {};
//# sourceMappingURL=vao.d.ts.map