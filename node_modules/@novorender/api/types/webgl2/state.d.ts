import { type LimitsGL } from "./limits";
export declare function glState(gl: WebGL2RenderingContext, params: StateParams | null): void;
export declare function glDefaultState(limits: LimitsGL): State;
type ScopedParamsKeys = "blend" | "cull" | "depth" | "polygon" | "sample" | "stencil" | "scissor";
export type StateParams = Partial<Omit<State, ScopedParamsKeys>> & {
    readonly [P in ScopedParamsKeys]?: Partial<State[P]>;
};
export interface State {
    readonly blend: {
        readonly enable: boolean;
        readonly color: RGBA;
        readonly dstAlpha: BlendFunction;
        readonly dstRGB: BlendFunction;
        readonly equationAlpha: BlendEquation;
        readonly equationRGB: BlendEquation;
        readonly srcAlpha: BlendFunction;
        readonly srcRGB: BlendFunction;
    };
    readonly cull: {
        readonly enable: boolean;
        readonly mode: CullMode;
        readonly frontFace: Winding;
    };
    readonly depth: {
        readonly test: boolean;
        readonly func: DepthFunc;
        readonly writeMask: boolean;
        readonly range: readonly [near: number, far: number];
    };
    readonly polygon: {
        readonly offsetFill: boolean;
        readonly offsetFactor: number;
        readonly offsetUnits: number;
    };
    readonly sample: {
        readonly alphaToCoverage: boolean;
        readonly coverage: boolean;
        readonly coverageValue: number;
        readonly coverageInvert: boolean;
    };
    readonly stencil: {
        readonly test: boolean;
        readonly func: DepthFunc;
        readonly valueMask: number;
        readonly ref: number;
        readonly backFunc: DepthFunc;
        readonly backValueMask: number;
        readonly backRef: number;
    };
    readonly scissor: {
        readonly test: boolean;
        readonly box: Rect;
    };
    readonly ditherEnable: boolean;
    readonly colorMask: readonly [red: boolean, green: boolean, blue: boolean, alpha: boolean];
    readonly viewport: Rect;
    readonly rasterizerDiscard: boolean;
    readonly frameBuffer: WebGLFramebuffer | null;
    readonly vertexArrayObject: WebGLVertexArrayObject | null;
    readonly program: WebGLProgram | null;
    readonly uniforms: readonly UniformBinding[];
    readonly uniformBuffers: readonly UniformBufferBinding[];
    readonly drawBuffers: readonly (ColorAttachment | "BACK" | "NONE")[];
    readonly attributeDefaults: readonly (AttributeDefault | null)[];
    readonly textures: readonly (TextureBinding | null)[];
}
export type BlendEquation = "FUNC_ADD" | "FUNC_SUBTRACT" | "FUNC_REVERSE_SUBTRACT" | "MIN" | "MAX";
export type BlendFunction = "ZERO" | "ONE" | "SRC_COLOR" | "ONE_MINUS_SRC_COLOR" | "DST_COLOR" | "ONE_MINUS_DST_COLOR" | "SRC_ALPHA" | "ONE_MINUS_SRC_ALPHA" | "DST_ALPHA" | "ONE_MINUS_DST_ALPHA" | "CONSTANT_COLOR" | "ONE_MINUS_CONSTANT_COLOR" | "CONSTANT_ALPHA" | "ONE_MINUS_CONSTANT_ALPHA" | "SRC_ALPHA_SATURATE";
export type CullMode = "FRONT" | "BACK" | "FRONT_AND_BACK";
export type DepthFunc = "NEVER" | "LESS" | "EQUAL" | "LEQUAL" | "GREATER" | "NOTEQUAL" | "GEQUAL" | "ALWAYS";
export type Winding = "CW" | "CCW";
export type ColorAttachment = `COLOR_ATTACHMENT${0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15}`;
export type RGBA = readonly [r: number, g: number, b: number, a: number];
export type XYZW = readonly [x: number, y: number, z: number, w: number];
export interface Rect {
    readonly x?: number;
    readonly y?: number;
    readonly width: number;
    readonly height: number;
}
export interface AttributeDefault {
    readonly type: "4f" | "I4i" | "I4ui";
    readonly values: XYZW;
}
export interface AttributeBinding {
    readonly type: "4f" | "I4i" | "I4ui";
    readonly values: XYZW;
}
export type UniformTypeScalar = "1f" | "1i" | "1ui";
export type UniformTypeVector = "2f" | "3f" | "4f" | "2i" | "3i" | "4i" | "2ui" | "3ui" | "4ui";
export type UniformTypeMatrix = "Matrix2f" | "Matrix3f" | "Matrix4f" | "Matrix2x3f" | "Matrix2x4f" | "Matrix3x2f" | "Matrix3x4f" | "Matrix4x2f" | "Matrix4x3f";
export interface UniformBindingScalar {
    readonly kind: UniformTypeScalar;
    readonly location: WebGLUniformLocation | null;
    readonly value: number;
}
export interface UniformBindingVector {
    readonly kind: UniformTypeVector;
    readonly location: WebGLUniformLocation | null;
    readonly value: readonly number[];
}
export interface UniformBindingMatrix {
    readonly kind: UniformTypeMatrix;
    readonly location: WebGLUniformLocation | null;
    readonly value: readonly number[];
    readonly transpose?: boolean;
}
export type UniformBinding = UniformBindingScalar | UniformBindingVector | UniformBindingMatrix;
export interface UniformBufferBindingRange {
    readonly buffer: WebGLBuffer;
    readonly byteOffset: number;
    readonly byteSize: number;
}
export type UniformBufferBinding = UniformBufferBindingRange | WebGLBuffer | null | undefined;
export interface TextureBinding {
    readonly kind: "TEXTURE_2D" | "TEXTURE_3D" | "TEXTURE_2D_ARRAY" | "TEXTURE_CUBE_MAP";
    readonly texture: WebGLTexture | null;
    readonly sampler: WebGLSampler | null;
    readonly uniform?: WebGLUniformLocation | null;
}
export {};
//# sourceMappingURL=state.d.ts.map