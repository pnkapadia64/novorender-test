import { type EXT_disjoint_timer_query_webgl2_ext } from "./extensions";
export declare function glCreateTimer(gl: WebGL2RenderingContext, cpuFallback?: boolean): Timer;
export type Timer = NullTimer | CPUTimer | GPUTimer | GPUTimerTS;
declare class NullTimer {
    readonly gl: WebGL2RenderingContext;
    readonly kind = "null";
    readonly promise: Promise<number | undefined>;
    readonly creationTime: number;
    constructor(gl: WebGL2RenderingContext);
    dispose(): void;
    begin(): void;
    end(): void;
    poll(): boolean;
}
declare class CPUTimer {
    readonly gl: WebGL2RenderingContext;
    readonly kind = "cpu";
    readonly promise: Promise<number | undefined>;
    readonly creationTime: number;
    private beginTime;
    private endTime;
    private resolve;
    constructor(gl: WebGL2RenderingContext);
    dispose(): void;
    begin(): void;
    end(): void;
    poll(): boolean;
}
declare class GPUTimer {
    readonly gl: WebGL2RenderingContext;
    readonly ext: EXT_disjoint_timer_query_webgl2_ext;
    readonly kind = "gpu_time_elapsed";
    readonly promise: Promise<number | undefined>;
    readonly creationTime: number;
    private readonly query;
    private resolve;
    constructor(gl: WebGL2RenderingContext, ext: EXT_disjoint_timer_query_webgl2_ext);
    dispose(): void;
    begin(): void;
    end(): void;
    poll(): boolean;
}
declare class GPUTimerTS {
    readonly gl: WebGL2RenderingContext;
    readonly ext: EXT_disjoint_timer_query_webgl2_ext;
    readonly kind = "gpu_timestamp";
    readonly promise: Promise<number | undefined>;
    readonly creationTime: number;
    private readonly startQuery;
    private readonly endQuery;
    private resolve;
    constructor(gl: WebGL2RenderingContext, ext: EXT_disjoint_timer_query_webgl2_ext);
    dispose(): void;
    begin(): void;
    end(): void;
    poll(): boolean;
}
export {};
//# sourceMappingURL=timer.d.ts.map