import { type ReadonlyVec3 } from "gl-matrix";
import type { MeasureSettings, ObjectId } from "../../measure_view";
import { BaseModule } from "../base";
import type { FollowParametricObject } from ".";
export declare class FollowModule extends BaseModule {
    /**
     * @ignore
     */
    private followParametricEntity;
    /** Returns an object that can be used to calculate camera positions that follow the object
     * Supports Edges, curve segments and cylinder
     * @param object The object being selected.
     * @param selectionPosition Function need the selected position to select a subpart of the object in case it is composed of several parts.
     * @param setting Settings.
     * @returns Follow path object that will conain information as well as a function to use for following the parametric object,
     *  undefined if the current picked part is not eligble for follow path
     */
    followParametricObjectFromPosition(id: ObjectId, selectionPosition: ReadonlyVec3, setting?: MeasureSettings): Promise<FollowParametricObject | undefined>;
    /** Returns an object that can be used to calculate camera posisiotns that follow the objects
     * Supports multiple cylinder,
     * In case of one object, and that object only containing one curve segment it will return curve segment
     * @param ids Set of object ids to follow, can be line segments or cylinders.
     * @param setting Settings.
     * @returns Follow path object that will conain information as well as a function to use for following the parametric object,
     *  undefined if there are no objects the can be followed in the ids list
     */
    followParametricObjects(ids: ObjectId[], setting?: MeasureSettings): Promise<FollowParametricObject | undefined>;
}
//# sourceMappingURL=module.d.ts.map