import type { ReadonlyVec2, ReadonlyVec3 } from "gl-matrix";
import type { MeasureEntity, MeasureSettings, MeasureWorker } from "../../measure_view";
import { MeasureView } from "../../measure_view";
import { BaseModule } from "../base";
import type { DrawContext, DrawObject, DrawProduct, DrawableEntity } from ".";
/**
 * Module for converting measure data to drawable objects.
 * functions will generally use Camera to object to project the objects to view space
 */
export declare class DrawModule extends BaseModule {
    readonly worker: MeasureWorker;
    readonly parent: MeasureView;
    readonly drawContext: DrawContext;
    constructor(worker: MeasureWorker, parent: MeasureView, drawContext: DrawContext);
    /** @ignore */
    getEntitiyObjects(entity: MeasureEntity, setting?: MeasureSettings): Promise<DrawObject | undefined>;
    /**
     * Updates the input draw objects with new 2d info based on camera properties
     * @param drawProduct The product that will be updated based on current camera.
     * @returns Corresponding 3D position at the view plane in world space, or undefined if there is no active render context.
     */
    updateProuct(drawProduct: DrawProduct): void;
    /** Converts world space lines to on screen space lines
     * @param points World space points that will be projected to screen space
     * @returns Screen space points, a path that will cut to the edge of the screen,
     * points2d, all the points in 2d space regadless if they are within the current canvas size
     * and the original points removed from screen points
     */
    toScreenSpace(points: ReadonlyVec3[]): {
        screenPoints: ReadonlyVec2[];
        points2d: ReadonlyVec2[];
        removedIndices: number[];
    } | undefined;
    /** Converts world space points to on screen space points
     * @param points World space points that will be projected to screen space
     * @returns Screen space points regadless if they are within the current canvas size
     */
    toMarkerPoints(points: ReadonlyVec3[]): (ReadonlyVec2 | undefined)[];
    /** Returns a hierarcical structure of the element, describing how it should be drawn in 2d
     * @param entity the entity that is being drawn to screen, this can be any object that furfill the DrawableEntity interface {@link DrawableEntity}
     * @param setting settings on how the entity is supposed to be displayed
     * @returns  hierarcical structure of the element, describing how it should be drawn in 2d, including labels and angles
     */
    getDrawEntity(entity: DrawableEntity, setting?: MeasureSettings): Promise<DrawProduct>;
    /** Converts a list of points to a drawable polygon or linestrip
     * @param points Set of points describing a polygon or linestrip
     * @param setting settings on how the entity is supposed to be displayed
     * @returns  hierarcical structure of the element, describing how it should be drawn in 2d, including labels and angles
     */
    getDrawObjectFromPoints(points: ReadonlyVec3[], closed?: boolean, angles?: boolean, generateLineLabels?: boolean): DrawProduct | undefined;
    /** Returns a draw object that places a text based on input points.
     * @param points Set of points for where the text should be placed.
     * @param text Text
     * @returns  Draw product for displaying the text at chosen locations
     */
    getDrawText(points: ReadonlyVec3[], text: string): DrawProduct | undefined;
    /** Returns a draw object that traces intersection between the 2d paths and displays the 3d distance as a label
     * @param objects Products that are being traced.
     * @param line Line that traces over objects.
     * @returns  Draw product for displaying lines between intersections and distance lables.
     */
    getTraceDrawOject(objects: DrawProduct[], line: {
        start: ReadonlyVec2;
        end: ReadonlyVec2;
    }): DrawProduct;
    /** returs the 2d normal of the first draw part the line hits
     * @param object Product with parts
     * @param line Line that needs to intersect the product.
     * @returns  The 2d normal of the drawn object at the intersection of the input line.
     */
    get2dNormal(object: DrawProduct, line: {
        start: ReadonlyVec2;
        end: ReadonlyVec2;
    }): {
        normal: ReadonlyVec2;
        position: ReadonlyVec2;
    } | undefined;
}
//# sourceMappingURL=module.d.ts.map