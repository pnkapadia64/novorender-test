import type { MeasureEntity, MeasureSettings, ObjectId } from "../../measure_view";
import { type Profile } from "..";
import { BaseModule } from "../base";
/**
 * Module for converting parametric data to profiles. which can easily be used for charts and graphs
 */
export declare class ProfileModule extends BaseModule {
    /**
     * Returns the profile view of a linestrip where x is the length of the line and y is the height
     * This function can be used if an object contains multiple unconnected entities.
     * @param entity The parametric entity used to create the profile
     * @param setting Settings
     * @returns Profile where x is the length of the line and y is the height,
     *  it supports curve segments and cylinders, othwerwise it retuns undefiend
     */
    viewFromEntity(entity: MeasureEntity, setting?: MeasureSettings): Promise<Profile | undefined>;
    /**
    * Returns the profile view of selected objects where x is the length of the line and y is the height,
    * currently only supports cylinders
    * @param products Products used to create a profile, this can be a list of line segments, line strips or connected cylinders
     * @param setting Settings
    * @returns Profile where x is the length of the line and y is the height,
    *  it supports curve segments and cylinders, othwerwise it retuns undefiend
    */
    viewFromMultiSelect(products: ObjectId[], setting?: MeasureSettings): Promise<Profile | undefined>;
    reverse(inProfile: Profile): Profile;
}
//# sourceMappingURL=module.d.ts.map