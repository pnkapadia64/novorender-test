import type { ReadonlyVec3 } from "gl-matrix";
import { vec3 } from "gl-matrix";
import type { MeasureEntity, MeasureSettings, ObjectId, ParametricEntity } from "../../measure_view";
import type { LoadStatus, DuoMeasurementValues, MeasurementValues, SnapTolerance, LineStripMeasureValues } from ".";
import type { ParametricProduct } from "../../worker/parametric_product";
import { BaseModule } from "../base";
import type { CameraValues } from "../followPath";
/**
 * Standard measure module for standard measure functions
 */
export declare class CoreModule extends BaseModule {
    /**
     * Measure object, if b is undefined then single measure values are returned else the measurement between 2 objects
     * Standard measuring function for measure single or between 2 parametric objects.
     * @param a The entity that is being measured, this can either be a parametric object or a single point
     * @param b If this is defined then the measure function will return the measurement between a and b.
     * @param settingA settings for object a
     * @param settingB settings for object b
     * @returns  Measurement values either for a single object or between the objects
     */
    measure(a: MeasureEntity, b?: MeasureEntity, settingA?: MeasureSettings, settingB?: MeasureSettings): Promise<MeasurementValues | undefined>;
    /** Returns the measure entity for given object and location, measure entity is a single part of a parametric object,
     * such as surface, edge or vertex. If the object and position does not contain parametric data a single vertex will be returned
     * @param id The object id of selected object
     * @param selectionPosition selected position, this is required to select the individual part of the parametric object
     * @param tolerance Tolerance for picking, the distance used is in meters
     * @returns Selected measure entity, this will be a vertex if nothing can be selected at the location
     * status if the object is loaded, and connection point where the parametric object has been selected.
     */
    pickMeasureEntity(id: ObjectId, selectionPosition: ReadonlyVec3, tolerance?: SnapTolerance): Promise<{
        entity: MeasureEntity;
        status: LoadStatus;
        connectionPoint?: vec3;
    }>;
    /** Returns the measure entity for given object and location if the current object is selected
     *  This is much faster than pickMeasureEntity and can be used for hover
     * @param id The object id of selected object
     * @param selectionPosition selected position, this is required to select the individual part of the parametric object
     * @param tolerance Tolerance for picking, the distance used is in meters
     * @returns Selected measure entity, this will be undefined if nothing is selectable at current position
     * **/
    pickMeasureEntityOnCurrentObject(id: ObjectId, selectionPosition: ReadonlyVec3, tolerance: SnapTolerance): Promise<{
        entity: MeasureEntity | undefined;
        status: LoadStatus;
        connectionPoint?: vec3;
    }>;
    /**
     * @ignore
     * @privateRemarks not currently in use
     */
    getParametricProduct(productId: number): Promise<ParametricProduct | undefined>;
    /**
     * @ignore
     * @privateRemarks not currently in use
     */
    getCameraValues(a: ParametricEntity, cameraDir: vec3): Promise<CameraValues | undefined>;
    /**
     * Swaps between inner and outer cylinder, returns undefined if there is only one
     * @param entity Entity to be swapped
     * @param to Force cylinder to either be inner or outer
     * @returns Returns a new entity of the selected cylinder, if there is only one cylinder undefined is returned.
     */
    swapCylinder(entity: MeasureEntity, to: "inner" | "outer"): Promise<MeasureEntity | undefined>;
    /**
     * Calculates the area from polygon. Treat polygon as closed, Z is treated as height and is ignored.
     * @param vertices Vertices defining the polygon, last and first vertex will be connected to create a closed polygon
     * @param normals Normals used to define the plane where the area is measured. IF the difference is too high it will use Z as the normal
     * @returns The area of the selected polygon, do note this is 2d calulation and height is ignored
     */
    areaFromPolygon(vertices: ReadonlyVec3[], normals: ReadonlyVec3[]): {
        area: number | undefined;
        polygon: ReadonlyVec3[];
    };
    /**
     * Measure between multiple points. Will return the angles, segment length and total length
     * @param vertices Vertices defining the line strip to be measured
     * @returns Angles, segment length and total length of the input linestrip
     */
    measureLineStrip(vertices: ReadonlyVec3[]): LineStripMeasureValues;
    /**
    * @ignore
    */
    private measurePair;
    /**
     * @ignore
     */
    private measureSingle;
    /**
     * @ignore
     */
    measureToPoint(a: MeasureEntity, b: ReadonlyVec3, setting?: MeasureSettings): Promise<DuoMeasurementValues | undefined>;
    /**
     * @ignore
     * Measure distance between 2 points
     */
    pointToPoint(a: ReadonlyVec3, b: ReadonlyVec3): DuoMeasurementValues;
}
//# sourceMappingURL=module.d.ts.map