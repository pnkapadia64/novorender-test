import type { ReadonlyMat4, ReadonlyVec3 } from "gl-matrix";
import { vec3 } from "gl-matrix";
import type { AABB3, CylinderData, FaceData, ProductData } from "./brep";
import type { Plane } from "./surfaces";
import type { CylinerMeasureType, DuoMeasurementValues, MeasureSettings } from "..";
export declare function isInsideAABB(point: vec3, aabb: AABB3, epsilon?: number): boolean;
export declare function cylinderLength(product: ProductData, cylinderFace: FaceData, origo: vec3, dir: vec3): number;
export declare function fullCircleCylinder(product: ProductData, cylinderFace: FaceData): boolean;
export declare function cylinderCenterLine(product: ProductData, cylinderFace: FaceData, cylinderData: CylinderData, instanceMat: ReadonlyMat4, measureType?: CylinerMeasureType): Promise<[vec3, vec3]>;
export declare function closestPointsToIntersection(startA: ReadonlyVec3, endA: ReadonlyVec3, startB: ReadonlyVec3, endB: ReadonlyVec3): vec3;
export declare function closestProjectedPoints(startA: ReadonlyVec3, endA: ReadonlyVec3, startB: ReadonlyVec3, endB: ReadonlyVec3): [number, vec3, vec3];
export declare function decomposePlane(product: ProductData, faceData: FaceData, instanceIdx: number, plane: Plane, centerPoint?: boolean): [vec3, vec3];
export declare function getEdgeToEdgeMeasureValues(productA: ProductData, edgeIdxA: number, instanceIdxA: number, productB: ProductData, edgeIdxB: number, instanceIdxB: number): Promise<DuoMeasurementValues | undefined>;
export declare function faceToPointMeasureValues(product: ProductData, faceIdx: number, instanceIdx: number, point: vec3, scale: number, setting?: MeasureSettings): Promise<DuoMeasurementValues | undefined>;
export declare function edgeToPointMeasureValues(product: ProductData, edgeIdx: number, instanceIdx: number, point: vec3): Promise<DuoMeasurementValues | undefined>;
export declare function segmentToPointMeasureValues(product: ProductData, segIdx: number, instanceIdx: number, point: vec3): Promise<DuoMeasurementValues | undefined>;
export declare function getEdgeToFaceMeasureValues(productA: ProductData, edgeIdx: number, edgeInstanceIdx: number, productB: ProductData, faceIdx: number, faceInstanceIdx: number, setting?: MeasureSettings): Promise<DuoMeasurementValues | undefined>;
export declare function getSegmentToFaceMeasureValues(productA: ProductData, segIdx: number, segInstanceIdx: number, productB: ProductData, faceIdx: number, faceInstanceIdx: number, setting?: MeasureSettings): Promise<DuoMeasurementValues | undefined>;
export declare function getSegmentToSegmentMeasureValues(productA: ProductData, segIdxA: number, instanceIdxA: number, productB: ProductData, segIdxB: number, instanceIdxB: number): Promise<DuoMeasurementValues | undefined>;
export declare function getSegmentToEdgeMeasureValues(productA: ProductData, segIdx: number, instanceIdxA: number, productB: ProductData, edgeIdx: number, instanceIdxB: number): Promise<DuoMeasurementValues | undefined>;
export declare function getFaceToFaceMeasureValues(productA: ProductData, faceIdxA: number, instanceIdxA: number, productB: ProductData, faceIdxB: number, instanceIdxB: number, settingA?: MeasureSettings, settingB?: MeasureSettings): Promise<DuoMeasurementValues | undefined>;
export declare function evalCurve(product: ProductData, pathIdx: number, instanceIdx: number, paramter: number, pathKind: "edge" | "curveSegment"): Promise<[ReadonlyVec3, ReadonlyVec3] | undefined>;
//# sourceMappingURL=calculations.d.ts.map