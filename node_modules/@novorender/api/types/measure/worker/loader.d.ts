import { mat4 } from "gl-matrix";
import { Line3D, LineStrip3D, NurbsCurve3D } from "./curves";
import { Arc3D, type Curve2D, type Curve3D } from "./curves";
import { Face } from "./face";
import type { ProductData, SurfaceData, FaceData, InstanceData, AABB2 } from "./brep";
import { type Surface } from "./surfaces";
import { Edge } from "./edge";
export declare function matFromInstance(instance: InstanceData): mat4;
export declare function unitToScale(unit: string): number;
export declare function createGeometryFactory(wasmUrl: string | ArrayBuffer): Promise<GeometryFactory>;
export declare function crawlInstance(product: ProductData, instanceData: InstanceData, faceFunc: (faceIdx: number) => void): void;
export declare class GeometryFactory {
    private readonly wasmInstance;
    private readonly buffer;
    constructor(wasmInstance: any, buffer: Float64Array);
    getCurve2D(data: ProductData, halfEdgeIndex: number): Curve2D;
    getCurve3D(data: ProductData, halfEdgeIndex: number): Curve3D | undefined;
    getHalfEdgeAABB(data: ProductData, halfEdgeIndex: number): AABB2 | undefined;
    private getCurve3DFromEdgeOrSegment;
    getCurve3DFromSegment(data: ProductData, segmentIndex: number): Line3D | Arc3D | NurbsCurve3D | LineStrip3D | undefined;
    getCurve3DFromEdge(data: ProductData, edgeIndex: number, sense?: 1 | -1): Curve3D | undefined;
    getSurface(data: SurfaceData, sense: -1 | 1, scale?: number): Surface;
    makeFace(face: FaceData, instance: InstanceData, instanceIndex: number, product: ProductData, curves2D: Curve2D[]): Face;
    getFaces(product: ProductData): Face[];
    getCurvesFromEdges(product: ProductData, edgeInstances: number[]): (Edge | undefined)[];
    getEdges(product: ProductData): (Edge | undefined)[];
}
//# sourceMappingURL=loader.d.ts.map