import { mat4, vec2, vec3 } from "gl-matrix";
import type { ReadonlyVec2, ReadonlyVec3 } from "gl-matrix";
type CurveKind = "line" | "arc" | "nurbs" | "lineStrip";
export interface LineSegment3D {
    dir: vec3;
    start: vec3;
    end: vec3;
}
export declare function lineToSegment(line: Line3D, mat: mat4): LineSegment3D;
export declare class DisposableCurve {
    dispose(): void;
}
export interface Curve3D {
    readonly kind: CurveKind;
    tesselationParameters: readonly number[];
    sense: number;
    eval(t: number, point: vec3 | undefined, tangent: vec3 | undefined): void;
    invert(pos: ReadonlyVec3): number;
}
export interface Curve2D {
    readonly kind: CurveKind;
    readonly beginParam: number;
    readonly endParam: number;
    eval(t: number, point: vec2 | undefined, tangent: vec2 | undefined): void;
    project(pos: ReadonlyVec2): number;
}
export declare class LineStrip3D implements Curve3D {
    readonly vertices: ReadonlyVec3[];
    readonly beginParam: number;
    readonly endParam: number;
    readonly tesselationParameters: readonly number[];
    readonly kind = "lineStrip";
    readonly sense = 1;
    constructor(vertices: ReadonlyVec3[], beginParam: number, endParam: number, tesselationParameters: readonly number[]);
    eval(t: number, point: vec3 | undefined, tangent: vec3 | undefined): void;
    invert(pos: ReadonlyVec3): number;
    toSegments(transform: mat4): LineSegment3D[];
    toProfile(transform: mat4): ReadonlyVec2[];
}
export declare class Line3D extends DisposableCurve implements Curve3D {
    readonly origin: ReadonlyVec3;
    readonly direction: ReadonlyVec3;
    readonly beginParam: number;
    readonly endParam: number;
    readonly sense: -1 | 1;
    readonly tesselationParameters: readonly number[];
    readonly kind = "line";
    constructor(origin: ReadonlyVec3, direction: ReadonlyVec3, beginParam: number, endParam: number, sense: -1 | 1, tesselationParameters: readonly number[]);
    eval(t: number, point: vec3 | undefined, tangent: vec3 | undefined): void;
    invert(pos: ReadonlyVec3): number;
}
export declare class Arc3D extends DisposableCurve implements Curve3D {
    readonly origin: ReadonlyVec3;
    readonly axisX: ReadonlyVec3;
    readonly axisY: ReadonlyVec3;
    readonly radius: number;
    readonly beginParam: number;
    readonly endParam: number;
    readonly sense: -1 | 1;
    readonly tesselationParameters: readonly number[];
    readonly kind = "arc";
    readonly tmp: vec3;
    constructor(origin: ReadonlyVec3, axisX: ReadonlyVec3, axisY: ReadonlyVec3, radius: number, beginParam: number, endParam: number, sense: -1 | 1, tesselationParameters: readonly number[]);
    eval(t: number, point: vec3 | undefined, tangent: vec3 | undefined): void;
    invert(pos: ReadonlyVec3): number;
}
export declare function pointAtAngle(point: ReadonlyVec3, arc3d: Arc3D): number;
type Pointer = number;
export declare class NurbsCurve3D extends DisposableCurve implements Curve3D {
    readonly order: number;
    readonly controlPoints: ReadonlyVec3[];
    readonly knots: number[];
    readonly weights: number[] | undefined;
    readonly beginParam: number;
    readonly endParam: number;
    readonly sense: -1 | 1;
    readonly tesselationParameters: readonly number[];
    private readonly wasmInstance;
    private readonly buffer;
    readonly kind = "nurbs";
    ptr: Pointer;
    constructor(order: number, controlPoints: ReadonlyVec3[], knots: number[], weights: number[] | undefined, beginParam: number, endParam: number, sense: -1 | 1, tesselationParameters: readonly number[], wasmInstance: any, buffer: Float64Array);
    dispose(): void;
    eval(t: number, point: vec3 | undefined, tangent: vec3 | undefined): void;
    invert(point: ReadonlyVec3): any;
}
export declare class Line2D extends DisposableCurve implements Curve2D {
    readonly origin: ReadonlyVec2;
    readonly direction: ReadonlyVec2;
    readonly beginParam: number;
    readonly endParam: number;
    readonly sense: -1 | 1;
    readonly kind = "line";
    constructor(origin: ReadonlyVec2, direction: ReadonlyVec2, beginParam: number, endParam: number, sense: -1 | 1);
    eval(t: number, point: vec2 | undefined, tangent: vec2 | undefined): void;
    project(point: ReadonlyVec2): number;
}
export declare class NurbsCurve2D extends DisposableCurve implements Curve2D {
    readonly order: number;
    readonly controlPoints: ReadonlyVec2[];
    readonly knots: number[];
    readonly weights: number[] | undefined;
    readonly beginParam: number;
    readonly endParam: number;
    readonly sense: -1 | 1;
    private readonly wasmInstance;
    private readonly buffer;
    readonly kind = "nurbs";
    ptr: Pointer;
    constructor(order: number, controlPoints: ReadonlyVec2[], knots: number[], weights: number[] | undefined, beginParam: number, endParam: number, sense: -1 | 1, wasmInstance: any, buffer: Float64Array);
    eval(t: number, point: vec2 | undefined, tangent: vec2 | undefined): void;
    project(point: ReadonlyVec2): number;
    dispose(): void;
}
export declare class Arc2D implements Curve2D {
    readonly origin: ReadonlyVec2;
    readonly radius: number;
    readonly beginParam: number;
    readonly endParam: number;
    readonly sense: 1 | -1;
    readonly kind = "arc";
    constructor(origin: ReadonlyVec2, radius: number, beginParam: number, endParam: number, sense: 1 | -1);
    eval(t: number, point: vec2 | undefined, tangent: vec2 | undefined): void;
    project(point: ReadonlyVec2): number;
}
export {};
//# sourceMappingURL=curves.d.ts.map