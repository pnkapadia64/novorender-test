import type { ReadonlyMat4, ReadonlyVec3 } from "gl-matrix";
import { vec3 } from "gl-matrix";
import type { AABB3, EdgeData, ProductData } from "./brep";
import type { Curve3D } from "./curves";
import type { Surface } from "./surfaces";
import type { SnapTolerance } from "../modules";
import type { MeasureEntity } from "measure/measure_view";
export interface EntityPicker {
    instanceIdx: number;
    worldToObject: ReadonlyMat4;
}
export interface EdgePickInfo {
    idx: number;
    curve: Curve3D;
    data: EdgeData;
}
export interface SegmentPickInfo {
    idx: number;
    readonly curve: Curve3D;
}
export interface PickSegments extends EntityPicker {
    segments: SegmentPickInfo[];
}
export interface PickEdges extends EntityPicker {
    instanceMat: ReadonlyMat4;
    edges: EdgePickInfo[];
}
export interface FacePickInfo {
    idx: number;
    aabb: AABB3;
    surface: Surface;
}
export interface PickFaces extends EntityPicker {
    instanceMat: ReadonlyMat4;
    faces: FacePickInfo[];
}
export interface PickInterface {
    objectId: number;
    unitScale: number;
    segments: PickSegments[];
    edges: PickEdges[];
    faces: PickFaces[];
}
export declare function getPickInterface(product: ProductData, objectId: number): Promise<PickInterface>;
export declare function pick(pickInterface: PickInterface, position: ReadonlyVec3, tolerance: SnapTolerance): {
    entity: MeasureEntity;
    connectionPoint: vec3;
} | undefined;
//# sourceMappingURL=snaps.d.ts.map