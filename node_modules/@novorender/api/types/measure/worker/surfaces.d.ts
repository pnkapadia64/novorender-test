import type { ReadonlyMat4, ReadonlyVec2, ReadonlyVec3 } from "gl-matrix";
import { vec2, vec3 } from "gl-matrix";
import { Ray } from "./ray";
type SurfaceKind = "plane" | "sphere" | "cylinder" | "cone" | "torus" | "nurbs";
export interface Surface {
    readonly kind: SurfaceKind;
    readonly sense: -1 | 1;
    evalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    evalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    invert(uvOut: vec2, pos: ReadonlyVec3): void;
    intersect(uvOut: vec2, ray: Ray): boolean;
}
export declare abstract class UnitSurface implements Surface {
    readonly kind: SurfaceKind;
    readonly sense: -1 | 1;
    readonly scale: number;
    private readonly surfaceToObjectSpaceTransform;
    private readonly objectToSurfaceSpaceTransform;
    private readonly surfaceToObjectSpaceTransformNormal;
    private readonly objectToSurfaceSpaceTransformNormal;
    constructor(kind: SurfaceKind, surfaceToObjectSpaceTransform: ReadonlyMat4 | undefined, sense: -1 | 1, scale: number);
    evalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    evalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    invert(uvOut: vec2, point: ReadonlyVec3): void;
    intersect(uvOut: vec2, ray: Ray): boolean;
    dispose(): void;
    protected abstract unitEvalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    protected abstract unitEvalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    protected abstract unitInvert(uvOut: vec2, point: ReadonlyVec3): void;
    protected abstract unitIntersect(ray: Ray): number | undefined;
}
export declare class Plane extends UnitSurface {
    constructor(surfaceToObjectSpaceTransform?: ReadonlyMat4, sense?: -1 | 1, scale?: number);
    unitEvalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    unitEvalNormal(normalOut: vec3, uv: ReadonlyVec2 | undefined): void;
    unitInvert(uvOut: vec2, point: ReadonlyVec3): vec2;
    unitIntersect(ray: Ray): number | undefined;
}
export declare class Sphere extends UnitSurface {
    readonly radius: number;
    constructor(radius?: number, surfaceToObjectSpaceTransform?: ReadonlyMat4, sense?: -1 | 1, scale?: number);
    unitEvalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    unitEvalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    unitInvert(uvOut: vec2, point: ReadonlyVec3): void;
    unitIntersect(ray: Ray): number | undefined;
}
export declare class Cylinder extends UnitSurface {
    readonly radius: number;
    constructor(radius?: number, surfaceToObjectSpaceTransform?: ReadonlyMat4, sense?: -1 | 1, scale?: number);
    unitEvalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    unitEvalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    unitInvert(uvOut: vec2, point: ReadonlyVec3): void;
    unitIntersect(ray: Ray): number | undefined;
}
export declare class Cone extends UnitSurface {
    readonly radius: number;
    readonly halfAngleTan: number;
    readonly scaleV: number;
    constructor(radius?: number, halfAngleTan?: number, surfaceToObjectSpaceTransform?: ReadonlyMat4, sense?: -1 | 1, scale?: number);
    unitEvalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    unitEvalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    unitInvert(uvOut: vec2, point: ReadonlyVec3): void;
    unitIntersect(ray: Ray): number | undefined;
}
export declare class Torus extends UnitSurface {
    readonly majorRadius: number;
    readonly minorRadius: number;
    constructor(majorRadius?: number, minorRadius?: number, surfaceToObjectSpaceTransform?: ReadonlyMat4, sense?: -1 | 1, scale?: number);
    unitEvalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    unitEvalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    unitInvert(uvOut: vec2, point: ReadonlyVec3): void;
    unitIntersect(ray: Ray): number | undefined;
}
type Pointer = number;
export declare class Nurbs extends UnitSurface {
    readonly orders: [number, number];
    readonly dim: [number, number];
    readonly controlPoints: ReadonlyVec3[];
    readonly knots: number[];
    readonly weights: number[] | undefined;
    readonly sense: -1 | 1;
    private readonly wasmInstance;
    private readonly buffer;
    readonly kind = "nurbs";
    ptr: Pointer;
    constructor(orders: [number, number], dim: [number, number], controlPoints: ReadonlyVec3[], knots: number[], weights: number[] | undefined, sense: -1 | 1, wasmInstance: any, buffer: Float64Array, scale?: number);
    dispose(): void;
    unitEvalPosition(positionOut: vec3, uv: ReadonlyVec2): void;
    unitEvalNormal(normalOut: vec3, uv: ReadonlyVec2): void;
    unitInvert(uvOut: vec2, pos: ReadonlyVec3): void;
    unitIntersect(ray: Ray): undefined;
}
export {};
//# sourceMappingURL=surfaces.d.ts.map