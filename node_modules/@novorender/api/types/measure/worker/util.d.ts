import { vec3, mat4 } from "gl-matrix";
import type { ReadonlyVec3, ReadonlyVec2 } from "gl-matrix";
import type { ProductData } from "./brep";
export declare function swapCylinderImpl(product: ProductData, faceIdx: number, instanceIdx: number, to: "inner" | "outer"): Promise<number | undefined>;
export declare function closestPointToLine(point: ReadonlyVec3, lineStart: ReadonlyVec3, lineEnd: ReadonlyVec3, projectedPoint?: vec3): {
    pos: vec3;
    parameter: number;
};
export declare function getProfile(vertices: ReadonlyVec3[], tesselationParameters: readonly number[] | undefined, transform: mat4 | undefined): ReadonlyVec2[];
export declare function reduceLineStrip(lineStrip: ReadonlyVec3[]): ReadonlyVec3[];
export declare class Downloader {
    baseUrl?: URL | undefined;
    activeDownloads: number;
    private abortController;
    static downloadImageFallback?: (url: string) => Promise<ImageData>;
    constructor(baseUrl?: URL | undefined);
    abort(): void;
    request(filename: string, abortController: AbortController | undefined): Promise<Response>;
    downloadJson(filename: string, abortController?: AbortController): Promise<any>;
    downloadArrayBuffer(filename: string, abortController?: AbortController): Promise<ArrayBuffer>;
    downloadBlob(filename: string, abortController?: AbortController): Promise<Blob>;
    downloadImage(filename: string, abortController?: AbortController): Promise<ImageBitmap | ImageData>;
    downloadImageFromBlob(blob: Blob, abortController?: AbortController): Promise<ImageBitmap | ImageData>;
}
//# sourceMappingURL=util.d.ts.map