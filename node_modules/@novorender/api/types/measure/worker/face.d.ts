import { vec2 } from "gl-matrix";
import type { ReadonlyMat4, ReadonlyVec2 } from "gl-matrix";
import type { Curve2D } from "./curves";
import type { IndexPair, Triangulation } from "./brep";
import type { Ray } from "./ray";
import type { Surface } from "./surfaces";
export interface Seam {
    vertexIndexPairs: IndexPair[];
}
export declare class Face {
    readonly surface: Surface;
    readonly sense: 1 | -1;
    readonly loops: readonly (readonly Curve2D[])[];
    readonly triangulation: Triangulation;
    readonly seams: Seam[];
    readonly instanceIndex: number;
    readonly geometryTransformation?: ReadonlyMat4 | undefined;
    constructor(surface: Surface, sense: 1 | -1, loops: readonly (readonly Curve2D[])[], triangulation: Triangulation, seams: Seam[], instanceIndex: number, geometryTransformation?: ReadonlyMat4 | undefined);
    raytrace(uvOut: vec2, ray: Ray): boolean;
    isInside(uv: ReadonlyVec2): boolean;
}
//# sourceMappingURL=face.d.ts.map