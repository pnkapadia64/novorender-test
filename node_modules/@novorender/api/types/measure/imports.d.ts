/**
 *  Core3D bundler/build resource imports.
 * @remarks
 * In order to adapt to any build/bundler system and inlining preferences, we declare all non-javascript imported resources here.
 * These must be created by some external function that is specific to your build/bundler environment.
 * @category Render View
 */
export interface MeasureImports {
    /** The nurbs web assembly instance.
     * @remarks This web assembly can be found in `measure/nurbs.wasm`.
     * @see {@link https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running | Loading and running WebAssembly code}
     */
    readonly nurbsWasm: ArrayBuffer;
    /** The  measure load/parse worker.
     * @remarks This worker root can be found in `measure/measureWorker.js`.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker | Worker: Worker() constructor}
     */
    readonly measureWorker: URL;
}
/**
 * A map describing inlined resources, or urls where to fetch them.
 */
export interface MeasureImportMap {
    /** The absolute base url to be applied to the other URLs.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL}
     */
    readonly baseUrl: URL;
    /** Inlined WASM instance, or URL to download.
     * @defaultValue `"./nurbs.wasm"`
     */
    readonly nurbsWasm?: string | URL | ArrayBuffer;
    /** Inlined measure worker, or URL to download.
     * @defaultValue `"./measureWorker.js"`
     */
    readonly measureWorker?: string | URL;
}
/** Download any missing imports.
 * @param map URLs or bundled asset map.
 * @remarks
 * This function will attempt to download any resource not inlined from the specified urls,
 * using the specified {@link MeasureImportMap.baseUrl | baseUrl}.
 * If map is undefined, it will look for the files in the same folder as the current script.
 *
 * @category Render View
 */
export declare function downloadMeasureImports(map: MeasureImportMap): Promise<MeasureImports>;
//# sourceMappingURL=imports.d.ts.map