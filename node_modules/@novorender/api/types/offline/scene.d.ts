import type { Logger } from ".";
import type { OfflineViewState } from "./state";
import { SceneManifest } from "./manifest";
import type { OfflineDirectory } from "./storage";
/**
 * An offline scene.
 * @remarks
 * This class supports incremental synchronization between offline and online storage.
 * Error and status updates are reported to the {@link logger} property.
 * By default it's undefined, so to display status, events and progress, you must assign your own object implementing the {@link Logger} interface.
 */
export declare class OfflineScene {
    /** The offline context for this scene. */
    readonly context: OfflineViewState;
    /** The storage directory for this scene. */
    readonly dir: OfflineDirectory;
    /** The file manifest this scene.
     * @remarks
     * Initially, this may be empty or partial.
     * It may change when the scene is synchronized.
     */
    manifest: SceneManifest;
    /** Logger for errors and status updates. */
    logger: Logger | undefined;
    constructor(
    /** The offline context for this scene. */
    context: OfflineViewState, 
    /** The storage directory for this scene. */
    dir: OfflineDirectory, 
    /** The file manifest this scene.
     * @remarks
     * Initially, this may be empty or partial.
     * It may change when the scene is synchronized.
     */
    manifest: SceneManifest);
    /** The scene id. */
    get id(): string;
    /** Delete all downloaded files for this scene and remove it from the context's list of offline scenes. */
    delete(): Promise<void>;
    /**
     * Incrementally synchronize scene files with online storage.
     * @param abortSignal A signal to abort downloads/synchronization.
     * @returns True, if completed successfully, false if not.
     * @remarks
     * Synchronization may be resumed after an abort/failure.
     * It compares the file manifest of local files with the online version and downloads only the difference.
     * Errors are logged in the {@link logger}.
     */
    sync(abortSignal: AbortSignal, sasKey: string): Promise<boolean>;
}
//# sourceMappingURL=scene.d.ts.map