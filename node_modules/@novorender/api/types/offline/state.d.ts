import { type Logger } from "./logger";
import { OfflineScene } from "./scene";
import { type OfflineStorage } from "./storage";
/**
 * Create and initialize an offline view state object.
 * @param storage The offline storage to use.
 */
export declare function createOfflineViewState(storage: OfflineStorage): Promise<OfflineViewState>;
/**
 * Viewstate for offline support UI.
 * @remarks
 * This view state serves as a base offline management UI.
 * The purpose is to view and manage offline scenes, such as updating/synchronizing with newer versions online.
 * A service worker will implement the actual offline support for the engine itself and will use the underlying storage objects for read access only.
 * Error and status updates are reported to the {@link logger} property.
 * By default it's undefined, so to display status, events and progress, you must assign your own object implementing the {@link Logger} interface.
 */
export declare class OfflineViewState {
    /** The offline storage used. */
    readonly storage: OfflineStorage;
    /** The initially estimated storage usage and quotas, if available. You may use `navigator.estimate()` to get the latest update, although this doesn't necessarily reflect recent changes, hence the term "estimate". See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate) for more details. */
    readonly initialStorageEstimate: StorageEstimate | undefined;
    /** Map of active offline scenes */
    readonly scenes: Map<string, OfflineScene>;
    /** Logger for errors and status updates. */
    logger: Logger | undefined;
    constructor(
    /** The offline storage used. */
    storage: OfflineStorage, 
    /** The initially estimated storage usage and quotas, if available. You may use `navigator.estimate()` to get the latest update, although this doesn't necessarily reflect recent changes, hence the term "estimate". See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate) for more details. */
    initialStorageEstimate: StorageEstimate | undefined);
    /**
     * Add a new scene to offline storage.
     * @param id: The scene id.
     * @returns The offline scene, or undefined if error.
     * @remarks
     * This function will merely mark the scene as an offline candidate.
     * You need to call {@link OfflineScene.sync} for the scene to be downloaded and ready for offline use.
     * Errors are logged in the {@link logger}.
     */
    addScene(id: string): Promise<OfflineScene | undefined>;
    /**
     * Delete all offline data and remove every offline scene.
     * @returns True if success, False if an error occurred.
     * @remarks
     * Errors are logged in the {@link logger}.
     */
    deleteAll(): Promise<boolean>;
}
//# sourceMappingURL=state.d.ts.map