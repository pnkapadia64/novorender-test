import { createCacheStorage } from "./cache";
import { OfflineViewState, createOfflineViewState } from "./state";
import { defaultRequestFormatter } from "./util";
export * from "./serviceWorker";
export type { Logger } from "./logger";
export type { OfflineScene } from "./scene";
export { createCacheStorage, createOfflineViewState, defaultRequestFormatter, type OfflineViewState };
/** Offline context object. */
export interface OfflineContext {
    /** I/O Worker for OPFS file access. */
    readonly ioWorker: Worker | undefined;
    /** Disable offline support. */
    dispose(): void;
}
/**
 * Enable offline support
 * @param serviceWorkerUrl The url to the service worker script, preferably at the root of the domain.
 * @param ioWorker The I/O worker for OFPS access, or undefined to fall back to Cache API instead.
 * @param sasKey The secure access signature (SAS) key used to access scene assets online.
 * @param abortSignal An abort signal for disabling/aborting offline support.
 * @returns A an offline context if successful, undefined otherwise.
 * @remarks
 * Offline won't work in incognito mode.
 * The first time this function is called, the service worker may not be activated, in which case this function also returns false.
 * If so, you must reload your page to activate it.
 *
 * Note that Cache API doesn't work well on chrome for large scenes with tens of thousands of files or more.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
 */
export declare function enableOffline(serviceWorkerUrl: URL | undefined, ioWorkerUrl: URL | undefined, sasKey?: string): Promise<OfflineContext | undefined>;
//# sourceMappingURL=index.d.ts.map