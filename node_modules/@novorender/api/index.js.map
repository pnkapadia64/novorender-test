{
  "version": 3,
  "sources": ["/projects/Novorender/ts/node_modules/gl-matrix/esm/common.js", "/projects/Novorender/ts/node_modules/gl-matrix/esm/mat3.js", "/projects/Novorender/ts/node_modules/gl-matrix/esm/mat4.js", "/projects/Novorender/ts/node_modules/gl-matrix/esm/quat.js", "/projects/Novorender/ts/node_modules/gl-matrix/esm/vec3.js", "/projects/Novorender/ts/node_modules/gl-matrix/esm/vec4.js", "/projects/Novorender/ts/node_modules/gl-matrix/esm/vec2.js", "/projects/Novorender/ts/dist/webgl2/blit.ts", "/projects/Novorender/ts/dist/webgl2/buffer.ts", "/projects/Novorender/ts/dist/webgl2/clear.ts", "/projects/Novorender/ts/dist/webgl2/extensions.ts", "/projects/Novorender/ts/dist/webgl2/draw.ts", "/projects/Novorender/ts/dist/webgl2/limits.ts", "/projects/Novorender/ts/dist/webgl2/frameBuffer.ts", "/projects/Novorender/ts/dist/webgl2/misc.ts", "/projects/Novorender/ts/dist/webgl2/program.ts", "/projects/Novorender/ts/dist/webgl2/read.ts", "/projects/Novorender/ts/dist/webgl2/renderBuffer.ts", "/projects/Novorender/ts/dist/webgl2/sampler.ts", "/projects/Novorender/ts/dist/webgl2/state.ts", "/projects/Novorender/ts/dist/webgl2/texture.ts", "/projects/Novorender/ts/dist/webgl2/timer.ts", "/projects/Novorender/ts/dist/webgl2/transformFeedback.ts", "/projects/Novorender/ts/dist/webgl2/uniforms.ts", "/projects/Novorender/ts/dist/webgl2/vao.ts", "/projects/Novorender/ts/dist/core3d/state/default.ts", "/projects/Novorender/ts/dist/core3d/state/modify.ts", "/projects/Novorender/ts/dist/core3d/state/validate.ts", "/projects/Novorender/ts/dist/core3d/state/index.ts", "/projects/Novorender/ts/dist/core3d/matrices.ts", "/projects/Novorender/ts/dist/core3d/viewFrustum.ts", "/projects/Novorender/ts/dist/core3d/buffers.ts", "/projects/Novorender/ts/dist/core3d/resource.ts", "/projects/Novorender/ts/dist/core3d/util.ts", "/projects/Novorender/ts/dist/core3d/ktx.ts", "/projects/Novorender/ts/dist/core3d/modules/background/index.ts", "/projects/Novorender/ts/dist/core3d/modules/grid/index.ts", "/projects/Novorender/ts/dist/core3d/offline.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/download.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/mutex.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/util.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/2_1.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/2_0.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/parser.ts", "/projects/Novorender/ts/node_modules/@novorender/wasm-parser/wasm_parser_bg.js", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/wasm_loader.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/handler.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/worker/index.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/mesh.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/loader.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/node.ts", "/projects/Novorender/ts/dist/core3d/scene.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/gradient.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/context.ts", "/projects/Novorender/ts/dist/core3d/modules/octree/module.ts", "/projects/Novorender/ts/dist/core3d/modules/tonemap/index.ts", "/projects/Novorender/ts/dist/core3d/modules/cube/index.ts", "/projects/Novorender/ts/dist/core3d/modules/clipping/index.ts", "/projects/Novorender/ts/dist/core3d/modules/watermark/index.ts", "/projects/Novorender/ts/dist/core3d/modules/dynamic/index.ts", "/projects/Novorender/ts/dist/core3d/modules/toon_outline/index.ts", "/projects/Novorender/ts/dist/core3d/modules/default.ts", "/projects/Novorender/ts/dist/core3d/context.ts", "/projects/Novorender/ts/dist/core3d/init.ts", "/projects/Novorender/ts/dist/core3d/imports/index.ts", "/projects/Novorender/ts/dist/core3d/benchmark/benchmark.ts", "/projects/Novorender/ts/dist/core3d/benchmark/util.ts", "/projects/Novorender/ts/dist/core3d/benchmark/fillrate.ts", "/projects/Novorender/ts/dist/core3d/benchmark/pointrate.ts", "/projects/Novorender/ts/dist/core3d/gltf/loader.ts", "/projects/Novorender/ts/dist/core3d/gltf/parser.ts", "/projects/Novorender/ts/dist/core3d/gltf/index.ts", "/projects/Novorender/ts/dist/offline/storage.ts", "/projects/Novorender/ts/dist/offline/cache.ts", "/projects/Novorender/ts/dist/offline/opfs/promiseBag.ts", "/projects/Novorender/ts/dist/offline/opfs/index.ts", "/projects/Novorender/ts/dist/offline/manifest.ts", "/projects/Novorender/ts/dist/offline/util.ts", "/projects/Novorender/ts/dist/offline/scene.ts", "/projects/Novorender/ts/dist/offline/state.ts", "/projects/Novorender/ts/dist/offline/serviceWorker/index.ts", "/projects/Novorender/ts/dist/offline/index.ts", "../../src/comlink.ts", "/projects/Novorender/ts/dist/measure/modules/base.ts", "/projects/Novorender/ts/dist/measure/modules/collision/module.ts", "/projects/Novorender/ts/dist/measure/calculations_2d.ts", "/projects/Novorender/ts/dist/measure/modules/draw/module.ts", "/projects/Novorender/ts/dist/measure/modules/followPath/module.ts", "/projects/Novorender/ts/dist/measure/modules/manhole/module.ts", "/projects/Novorender/ts/dist/measure/modules/core/module.ts", "/projects/Novorender/ts/dist/measure/modules/profile/module.ts", "/projects/Novorender/ts/dist/measure/modules/road/module.ts", "/projects/Novorender/ts/dist/measure/measure_view.ts", "/projects/Novorender/ts/dist/measure/imports.ts", "/projects/Novorender/ts/dist/web_app/device.ts", "/projects/Novorender/ts/dist/web_app/controller/input.ts", "/projects/Novorender/ts/dist/web_app/controller/base.ts", "/projects/Novorender/ts/dist/web_app/controller/orientation.ts", "/projects/Novorender/ts/dist/web_app/controller/flight.ts", "/projects/Novorender/ts/dist/web_app/controller/null.ts", "/projects/Novorender/ts/dist/web_app/controller/orbit.ts", "/projects/Novorender/ts/dist/web_app/controller/ortho.ts", "/projects/Novorender/ts/dist/web_app/controller/panorama.ts", "/projects/Novorender/ts/dist/web_app/controller/builtin.ts", "/projects/Novorender/ts/dist/web_app/flip.ts", "/projects/Novorender/ts/dist/web_app/buffer_inspect.ts", "/projects/Novorender/ts/dist/web_app/view.ts", "/projects/Novorender/ts/dist/web_app/highlight.ts", "/projects/Novorender/ts/dist/web_app/geometry.ts", "/projects/Novorender/ts/dist/web_app/index.ts"],
  "sourcesContent": ["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "/** @public */\r\nexport function glBlit(gl: WebGL2RenderingContext, params: BlitParams) {\r\n    const w = gl.drawingBufferWidth;\r\n    const h = gl.drawingBufferHeight;\r\n    let mask = 0;\r\n    if (params.color)\r\n        mask |= gl.COLOR_BUFFER_BIT;\r\n    if (params.depth)\r\n        mask |= gl.DEPTH_BUFFER_BIT;\r\n    if (params.stencil)\r\n        mask |= gl.STENCIL_BUFFER_BIT;\r\n    const filter = gl[params.filter ?? \"NEAREST\"];\r\n    const srcX0 = params.srcX0 ?? 0;\r\n    const srcY0 = params.srcY0 ?? 0;\r\n    const srcX1 = params.srcX1 ?? w;\r\n    const srcY1 = params.srcY1 ?? h;\r\n    const dstX0 = params.dstX0 ?? 0;\r\n    const dstY0 = params.dstY0 ?? 0;\r\n    const dstX1 = params.dstX1 ?? w;\r\n    const dstY1 = params.dstY1 ?? h;\r\n    const src = params.source == null ? null : params.source;\r\n    const dst = params.destination == null ? null : params.destination;\r\n\r\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, src);\r\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dst);\r\n    gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n}\r\n\r\nexport interface BlitParams {\r\n    readonly source: WebGLFramebuffer | null;\r\n    readonly destination: WebGLFramebuffer | null;\r\n\r\n    readonly color?: true;\r\n    readonly depth?: true;\r\n    readonly stencil?: true;\r\n\r\n    readonly filter?: \"NEAREST\" | \"LINEAR\"; // \"NEAREST\"\r\n\r\n    readonly srcX0?: number; // default: 0\r\n    readonly srcY0?: number; // default: 0\r\n    readonly srcX1?: number; // default: width\r\n    readonly srcY1?: number; // default: height\r\n\r\n    readonly dstX0?: number; // default: 0\r\n    readonly dstY0?: number; // default: 0\r\n    readonly dstX1?: number; // default: width\r\n    readonly dstY1?: number; // default: height\r\n}\r\n", "\r\nexport function glCreateBuffer(gl: WebGL2RenderingContext, params: BufferParams): WebGLBuffer {\r\n    const target = gl[params.kind];\r\n    const usage = gl[params.usage ?? \"STATIC_DRAW\"];\r\n    const buffer = gl.createBuffer()!;\r\n    gl.bindBuffer(target, buffer);\r\n    if (\"byteSize\" in params) {\r\n        gl.bufferData(target, params.byteSize, usage);\r\n    } else {\r\n        gl.bufferData(target, params.srcData, usage);\r\n    }\r\n    gl.bindBuffer(target, null);\r\n    return buffer;\r\n}\r\n\r\nexport function glUpdateBuffer(gl: WebGL2RenderingContext, params: UpdateParams) {\r\n    const target = gl[params.kind];\r\n    const srcOffset = params.srcElementOffset ?? 0;\r\n    const targetOffset = params.dstByteOffset ?? 0;\r\n    const src = params.srcData;\r\n    const srcData = ArrayBuffer.isView(src) ? src : new Uint8Array(src);\r\n    gl.bindBuffer(target, params.targetBuffer);\r\n    gl.bufferSubData(target, targetOffset, srcData, srcOffset, params.byteSize);\r\n    gl.bindBuffer(target, null);\r\n}\r\n\r\nexport type BufferParams = BufferParamsSize | BufferParamsData;\r\n\r\nexport type BufferTargetString = \"ARRAY_BUFFER\" | \"ELEMENT_ARRAY_BUFFER\" | \"COPY_READ_BUFFER\" | \"COPY_WRITE_BUFFER\" | \"TRANSFORM_FEEDBACK_BUFFER\" | \"UNIFORM_BUFFER\" | \"PIXEL_PACK_BUFFER\" | \"PIXEL_UNPACK_BUFFER\";\r\nexport type BufferUsageString = \"STATIC_DRAW\" | \"DYNAMIC_DRAW\" | \"STREAM_DRAW\" | \"STATIC_READ\" | \"DYNAMIC_READ\" | \"STREAM_READ\" | \"STATIC_COPY\" | \"DYNAMIC_COPY\" | \"STREAM_COPY\";\r\n\r\nexport interface BufferParamsSize {\r\n    readonly kind: BufferTargetString;\r\n    readonly byteSize: GLsizeiptr;\r\n    readonly usage?: BufferUsageString; // default: \"STATIC_DRAW\"\r\n}\r\n\r\nexport interface BufferParamsData {\r\n    readonly kind: BufferTargetString;\r\n    readonly srcData: BufferSource;\r\n    readonly usage?: BufferUsageString; // default: \"STATIC_DRAW\"\r\n}\r\n\r\nexport interface UpdateParams {\r\n    readonly kind: BufferTargetString;\r\n    readonly srcData: BufferSource;\r\n    readonly targetBuffer: WebGLBuffer;\r\n    readonly srcElementOffset?: number; // start element (in typed view) index. default: 0\r\n    readonly dstByteOffset?: number; // default: 0\r\n    readonly byteSize?: number; // default: 0, which will copy entire srcData\r\n}\r\n", "export function glClear(gl: WebGL2RenderingContext, params: ClearParams) {\r\n    const { kind } = params;\r\n    switch (kind) {\r\n        case \"back_buffer\": {\r\n            let bits = 0;\r\n            if (params.color != undefined) {\r\n                gl.clearColor(...params.color);\r\n                bits |= gl.COLOR_BUFFER_BIT;\r\n            }\r\n            if (params.depth != undefined) {\r\n                gl.clearDepth(params.depth);\r\n                bits |= gl.DEPTH_BUFFER_BIT;\r\n            }\r\n            if (params.stencil != undefined) {\r\n                gl.clearStencil(params.stencil);\r\n                bits |= gl.STENCIL_BUFFER_BIT;\r\n            }\r\n            if (bits) {\r\n                gl.clear(bits);\r\n            }\r\n            break;\r\n        }\r\n        case \"DEPTH\":\r\n        case \"STENCIL\":\r\n        case \"DEPTH_STENCIL\": {\r\n            const { drawBuffer } = params;\r\n            const depth = \"depth\" in params ? params.depth : 1.0;\r\n            const stencil = \"stencil\" in params ? params.stencil : 0;\r\n            gl.clearBufferfi(gl[kind], drawBuffer ?? 0, depth, stencil);\r\n            break;\r\n        }\r\n        case \"COLOR\": {\r\n            const { drawBuffer } = params;\r\n            const type = params.type ?? \"Float\";\r\n            const target = gl.COLOR;\r\n            const color = params.color ?? [0, 0, 0, 0];\r\n            switch (type) {\r\n                case \"Float\": gl.clearBufferfv(target, drawBuffer ?? 0, color); break;\r\n                case \"Int\": gl.clearBufferiv(target, drawBuffer ?? 0, color); break;\r\n                case \"Uint\": gl.clearBufferuiv(target, drawBuffer ?? 0, color); break;\r\n                default: exhaustiveColorCheck(type);\r\n            }\r\n            break;\r\n        }\r\n        default: exhaustiveBufferCheck(kind);\r\n    }\r\n}\r\n\r\nexport type ClearParams = ClearParamsBack | ClearParamsColor | ClearDepth | ClearStencil | ClearDepthStencil;\r\n\r\nexport interface ClearParamsBack {\r\n    readonly kind: \"back_buffer\";\r\n    readonly color?: readonly [red: number, green: number, blue: number, alpha: number]; // default: [0, 0, 0, 1]\r\n    readonly depth?: number;\r\n    readonly stencil?: number;\r\n}\r\n\r\nexport interface ClearParamsColor {\r\n    readonly kind: \"COLOR\";\r\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\r\n    readonly color?: readonly [red: number, green: number, blue: number, alpha: number]; // default: [0, 0, 0, 1]\r\n    readonly type?: \"Int\" | \"Uint\" | \"Float\"; // default: Float\r\n}\r\n\r\nexport interface ClearDepth {\r\n    readonly kind: \"DEPTH\";\r\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\r\n    readonly depth: number;\r\n}\r\nexport interface ClearStencil {\r\n    readonly kind: \"STENCIL\";\r\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\r\n    readonly stencil: number;\r\n}\r\nexport interface ClearDepthStencil {\r\n    readonly kind: \"DEPTH_STENCIL\";\r\n    readonly drawBuffer?: number; // 0 - MAX_DRAW_BUFFERS, default: 0\r\n    readonly depth: number;\r\n    readonly stencil: number;\r\n}\r\n\r\nfunction exhaustiveBufferCheck(value: never) {\r\n    throw new Error(`Unknown buffer type: ${value}!`);\r\n}\r\n\r\nfunction exhaustiveColorCheck(value: never) {\r\n    throw new Error(`Unknown clear color type: ${value}!`);\r\n}\r\n\r\n", "export function glExtensions(gl: WebGL2RenderingContext, refresh = false) {\r\n    let ext = glExtensionsMap.get(gl);\r\n    if (!ext || refresh) {\r\n        ext = getWebGL2Extensions(gl);\r\n        glExtensionsMap.set(gl, ext);\r\n    }\r\n    return ext;\r\n}\r\n\r\nfunction getWebGL2Extensions(gl: WebGL2RenderingContext) {\r\n    return {\r\n        colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\") as WEBGL_color_buffer_float | null, // also includes half floats\r\n        parallelShaderCompile: gl.getExtension(\"KHR_parallel_shader_compile\") as KHR_parallel_shader_compile | null,\r\n        loseContext: gl.getExtension(\"WEBGL_lose_context\") as WEBGL_lose_context | null,\r\n        multiDraw: gl.getExtension(\"WEBGL_MULTI_DRAW\") as WEBGL_multi_draw | null,\r\n        drawBuffersIndexed: gl.getExtension(\"OES_draw_buffers_indexed\") as OES_draw_buffers_indexed_ext | null,\r\n        disjointTimerQuery: gl.getExtension('EXT_disjoint_timer_query_webgl2') as EXT_disjoint_timer_query_webgl2_ext,\r\n        provokingVertex: gl.getExtension('WEBGL_provoking_vertex') as WEBGL_provoking_vertex | null,\r\n    } as const;\r\n}\r\n\r\nconst glExtensionsMap = new WeakMap<WebGL2RenderingContext, ExtensionsGL>();\r\n\r\nexport type ExtensionsGL = ReturnType<typeof getWebGL2Extensions>;\r\n\r\n// temporary types until extensions become part of standard ts lib\r\nexport interface OES_draw_buffers_indexed_ext {\r\n    enableiOES(target: number, index: number): void;\r\n    disableiOES(target: number, index: number): void;\r\n    blendEquationiOES(buf: number, mode: number): void;\r\n    blendEquationSeparateiOES(buf: number, modeRGB: number, modeAlpha: number): void;\r\n    blendFunciOES(buf: number, src: number, dst: number): void;\r\n    blendFuncSeparateiOES(buf: number, srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;\r\n    colorMaskiOES(buf: number, r: boolean, g: boolean, b: boolean, a: boolean): void;\r\n};\r\n\r\nexport interface EXT_disjoint_timer_query_webgl2_ext {\r\n    readonly QUERY_COUNTER_BITS_EXT: 0x8864; // GL.QUERY_COUNTER_BITS_EXT;\r\n    readonly TIME_ELAPSED_EXT: 0x88BF; // GL.TIME_ELAPSED_EXT;\r\n    readonly TIMESTAMP_EXT: 0x8E28; // GL.TIMESTAMP_EXT;\r\n    readonly GPU_DISJOINT_EXT: 0x8FBB;  // GL.GPU_DISJOINT_EXT;\r\n    queryCounterEXT(query: WebGLQuery, target: 0x8E28 /*GL.TIMESTAMP_EXT*/): void;\r\n}\r\n\r\nexport interface WEBGL_provoking_vertex {\r\n    readonly FIRST_VERTEX_CONVENTION_WEBGL: 0x8E4D;\r\n    readonly LAST_VERTEX_CONVENTION_WEBGL: 0x8E4E; // default\r\n    readonly PROVOKING_VERTEX_WEBGL: 0x8E4F;\r\n    provokingVertexWEBGL(provokeMode: 0x8E4D | 0x8E4E): void;\r\n};", "import { glExtensions } from \"./extensions\";\r\n\r\nexport function glDraw(gl: WebGL2RenderingContext, params: DrawParams): DrawStatistics {\r\n    let numPrimitives = 0;\r\n    const mode = params.mode ?? \"TRIANGLES\";\r\n    const primitiveType = gl[mode];\r\n    if (isMultiDraw(params)) {\r\n        const { multiDraw } = glExtensions(gl);\r\n        if (multiDraw) {\r\n            const { drawCount, counts, countsOffset } = params;\r\n            switch (params.kind) {\r\n                case \"arrays_multidraw\":\r\n                    const { firstsList, firstsOffset } = params;\r\n                    multiDraw.multiDrawArraysWEBGL(primitiveType, firstsList, firstsOffset ?? 0, counts, countsOffset ?? 0, drawCount);\r\n                    break;\r\n                case \"elements_multidraw\":\r\n                    const { byteOffsets, byteOffsetsOffset, indexType } = params;\r\n                    multiDraw.multiDrawElementsWEBGL(primitiveType, counts, countsOffset ?? 0, gl[indexType], byteOffsets, byteOffsetsOffset ?? 0, drawCount);\r\n                    break;\r\n            }\r\n            const offs = countsOffset ?? 0;\r\n            for (let i = 0; i < drawCount; i++) {\r\n                numPrimitives += calcNumPrimitives(counts[i + offs], mode);\r\n            }\r\n        } else {\r\n            console.warn(\"no multi_draw gl extension!\");\r\n        }\r\n    } else {\r\n        const { count } = params;\r\n        if (isInstanced(params)) {\r\n            const { instanceCount } = params;\r\n            numPrimitives = calcNumPrimitives(count, mode) * instanceCount;\r\n            if (isElements(params)) {\r\n                gl.drawElementsInstanced(primitiveType, count, gl[params.indexType], params.byteOffset ?? 0, instanceCount);\r\n            } else {\r\n                gl.drawArraysInstanced(primitiveType, params.first ?? 0, count, instanceCount);\r\n            }\r\n        } else {\r\n            numPrimitives = calcNumPrimitives(count, mode);\r\n            if (isElements(params)) {\r\n                if (isRange(params)) {\r\n                    gl.drawRangeElements(primitiveType, params.minIndex, params.maxIndex, count, gl[params.indexType], params.byteOffset ?? 0);\r\n                } else {\r\n                    gl.drawElements(primitiveType, count, gl[params.indexType], params.byteOffset ?? 0);\r\n                }\r\n            } else {\r\n                gl.drawArrays(primitiveType, params.first ?? 0, count);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (primitiveType >= gl.TRIANGLES) {\r\n        return { points: 0, lines: 0, triangles: numPrimitives };\r\n    } else if (primitiveType >= gl.LINES) {\r\n        return { points: 0, lines: numPrimitives, triangles: 0 };\r\n    } else {\r\n        return { points: numPrimitives, lines: 0, triangles: 0 };\r\n    }\r\n}\r\n\r\nfunction calcNumPrimitives(vertexCount: number, primitiveType: string) {\r\n    switch (primitiveType) {\r\n        case \"TRIANGLES\":\r\n            return vertexCount / 3;\r\n        case \"TRIANGLE_STRIP\":\r\n        case \"TRIANGLE_FAN\":\r\n            return vertexCount - 2;\r\n        case \"LINES\":\r\n            return vertexCount / 2;\r\n        case \"LINE_STRIP\":\r\n            return vertexCount - 1;\r\n        default:\r\n            return vertexCount;\r\n    }\r\n}\r\n\r\nfunction isInstanced(params: DrawParams): params is DrawParamsArraysInstanced | DrawParamsElementsInstanced {\r\n    return \"instanceCount\" in params && params.instanceCount != undefined;\r\n}\r\n\r\nfunction isElements(params: DrawParams): params is DrawParamsElements | DrawParamsElementsInstanced | DrawParamsElementsRange | DrawParamsElementsMultiDraw {\r\n    return \"indexType\" in params && params.indexType != undefined;\r\n}\r\n\r\nfunction isRange(params: DrawParams): params is DrawParamsElementsRange {\r\n    return \"start\" in params && \"end\" in params && params.start != undefined;\r\n}\r\n\r\nfunction isMultiDraw(params: DrawParams): params is DrawParamsArraysMultiDraw | DrawParamsElementsMultiDraw {\r\n    return \"drawCount\" in params && params.drawCount != undefined;\r\n}\r\n\r\nexport type DrawStatistics =\r\n    { readonly points: number; readonly lines: 0; readonly triangles: 0 } |\r\n    { readonly points: 0; readonly lines: number; readonly triangles: 0 } |\r\n    { readonly points: 0; readonly lines: 0; readonly triangles: number };\r\n\r\nexport type DrawParams =\r\n    DrawParamsArrays | DrawParamsArraysMultiDraw | DrawParamsArraysInstanced |\r\n    DrawParamsElements | DrawParamsElementsRange | DrawParamsElementsMultiDraw | DrawParamsElementsInstanced;\r\n// TODO: Add multi_draw_instanced variants for arrays and elements\r\n\r\nexport type DrawMode = \"POINTS\" | \"LINE_STRIP\" | \"LINE_LOOP\" | \"LINES\" | \"TRIANGLE_STRIP\" | \"TRIANGLE_FAN\" | \"TRIANGLES\";\r\n\r\nexport interface DrawParamsBase {\r\n    readonly mode?: DrawMode; // default: TRIANGLES\r\n}\r\n\r\nexport interface DrawParamsArrays extends DrawParamsBase {\r\n    /** Equivalent to gl.drawArrays() */\r\n    readonly kind: \"arrays\",\r\n    readonly count: number;\r\n    readonly first?: number; // default: 0\r\n}\r\n\r\nexport interface DrawParamsArraysMultiDraw extends DrawParamsBase {\r\n    /** Equivalent to `ext.multiDrawArraysWEBGL()` */\r\n    readonly kind: \"arrays_multidraw\",\r\n    readonly drawCount: number;\r\n    readonly firstsList: Int32Array;\r\n    readonly firstsOffset?: number; // default: 0\r\n    readonly counts: Int32Array;\r\n    readonly countsOffset?: number; // default: 0\r\n}\r\n\r\nexport interface DrawParamsElements extends DrawParamsBase {\r\n    /** Equivalent to gl.drawElements() */\r\n    readonly kind: \"elements\",\r\n    /** # of indices to draw */\r\n    readonly count: number;\r\n    /** Type of indices */\r\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\r\n    /** Byte offset in the element array buffer. Must be a valid multiple of the size of the given type. */\r\n    readonly byteOffset?: number; // default: 0\r\n}\r\n\r\nexport interface DrawParamsElementsRange extends DrawParamsBase {\r\n    /** Equivalent to gl.drawRangeElements() */\r\n    readonly kind: \"elements_range\",\r\n    /** # of indices to draw */\r\n    readonly count: number;\r\n    /** Type of indices */\r\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\r\n    /** Byte offset in the element array buffer. Must be a valid multiple of the size of the given type. */\r\n    readonly byteOffset?: number; // default: 0\r\n    /** The minimum array index contained in buffer range. */\r\n    readonly minIndex: number; // start vertex index\r\n    /** The maximum array index contained in buffer range. */\r\n    readonly maxIndex: number; // end vertex index\r\n}\r\n\r\nexport interface DrawParamsElementsMultiDraw extends DrawParamsBase {\r\n    /** Equivalent to `ext.multiDrawArraysWEBGL()` */\r\n    readonly kind: \"elements_multidraw\",\r\n    readonly drawCount: number;\r\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\r\n    readonly byteOffsets: Int32Array;\r\n    readonly byteOffsetsOffset?: number; // default: 0\r\n    readonly counts: Int32Array;\r\n    readonly countsOffset?: number; // default: 0\r\n}\r\n\r\nexport interface DrawParamsArraysInstanced extends DrawParamsBase {\r\n    /** Equivalent to gl.drawArraysInstanced() */\r\n    readonly kind: \"arrays_instanced\",\r\n    readonly count: number;\r\n    readonly instanceCount: number;\r\n    readonly first?: number; // default: 0\r\n}\r\n\r\nexport interface DrawParamsElementsInstanced extends DrawParamsBase {\r\n    /** Equivalent to gl.drawElementsInstanced() */\r\n    readonly kind: \"elements_instanced\",\r\n    readonly count: number;\r\n    readonly instanceCount: number;\r\n    readonly indexType: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\r\n    readonly byteOffset?: number; // default: 0\r\n}\r\n\r\n", "export function glLimits(gl: WebGL2RenderingContext) {\r\n    let ext = glLimitsMap.get(gl);\r\n    if (!ext) {\r\n        ext = getWebGL2Limits(gl);\r\n        glLimitsMap.set(gl, ext);\r\n    }\r\n    return ext;\r\n}\r\n\r\nconst glLimitsMap = new WeakMap<WebGL2RenderingContext, LimitsGL>();\r\n\r\nfunction getWebGL2Limits(gl: WebGL2RenderingContext) {\r\n    const names = [\r\n        \"MAX_TEXTURE_SIZE\",\r\n        \"MAX_VIEWPORT_DIMS\",\r\n        \"MAX_TEXTURE_IMAGE_UNITS\",\r\n        \"MAX_VERTEX_UNIFORM_VECTORS\",\r\n        \"MAX_VARYING_VECTORS\",\r\n        \"MAX_VERTEX_ATTRIBS\",\r\n        \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",\r\n        \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",\r\n        \"MAX_TEXTURE_IMAGE_UNITS\",\r\n        \"MAX_FRAGMENT_UNIFORM_VECTORS\",\r\n        \"MAX_CUBE_MAP_TEXTURE_SIZE\",\r\n        \"MAX_RENDERBUFFER_SIZE\",\r\n        \"MAX_3D_TEXTURE_SIZE\",\r\n        \"MAX_ELEMENTS_VERTICES\",\r\n        \"MAX_ELEMENTS_INDICES\",\r\n        \"MAX_TEXTURE_LOD_BIAS\",\r\n        \"MAX_FRAGMENT_UNIFORM_COMPONENTS\",\r\n        \"MAX_VERTEX_UNIFORM_COMPONENTS\",\r\n        \"MAX_ARRAY_TEXTURE_LAYERS\",\r\n        \"MIN_PROGRAM_TEXEL_OFFSET\",\r\n        \"MAX_PROGRAM_TEXEL_OFFSET\",\r\n        \"MAX_VARYING_COMPONENTS\",\r\n        \"MAX_VERTEX_OUTPUT_COMPONENTS\",\r\n        \"MAX_FRAGMENT_INPUT_COMPONENTS\",\r\n        \"MAX_SERVER_WAIT_TIMEOUT\",\r\n        \"MAX_ELEMENT_INDEX\",\r\n        \"MAX_DRAW_BUFFERS\",\r\n        \"MAX_COLOR_ATTACHMENTS\",\r\n        \"MAX_SAMPLES\",\r\n        \"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS\",\r\n        \"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS\",\r\n        \"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS\",\r\n        \"MAX_VERTEX_UNIFORM_BLOCKS\",\r\n        \"MAX_FRAGMENT_UNIFORM_BLOCKS\",\r\n        \"MAX_COMBINED_UNIFORM_BLOCKS\",\r\n        \"MAX_UNIFORM_BUFFER_BINDINGS\",\r\n        \"MAX_UNIFORM_BLOCK_SIZE\",\r\n        \"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS\",\r\n        \"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS\",\r\n    ] as const;\r\n\r\n    type Limits = { [P in typeof names[number]]: number };\r\n    const limits = {} as Limits;\r\n    for (const name of names) {\r\n        limits[name] = gl.getParameter(gl[name]) as number;\r\n    }\r\n    return limits as Readonly<Limits>;\r\n}\r\n\r\nexport type LimitsGL = ReturnType<typeof getWebGL2Limits>;\r\n", "import { glLimits } from \"./limits\";\r\nimport type { ResourceBin } from \"../core3d/resource\";\r\n\r\nexport function glCreateFrameBuffer(gl: WebGL2RenderingContext, params: FrameBufferParams): WebGLFramebuffer {\r\n    const frameBuffer = gl.createFramebuffer()!;\r\n    const limits = glLimits(gl);\r\n    console.assert(params.color.length <= limits.MAX_COLOR_ATTACHMENTS);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n\r\n    function bind(binding: FrameBufferBinding, attachment: number) {\r\n        const target = gl[binding.kind];\r\n        if (isTextureAttachment(binding)) {\r\n            const { texture } = binding;\r\n            if (binding.layer === undefined) {\r\n                const texTarget = gl[binding.texTarget ?? \"TEXTURE_2D\"];\r\n                gl.framebufferTexture2D(target, attachment, texTarget, texture, binding.level ?? 0);\r\n            } else {\r\n                gl.framebufferTextureLayer(target, attachment, texture, binding.level ?? 0, binding.layer);\r\n            }\r\n        } else {\r\n            const { renderBuffer } = binding;\r\n            gl.framebufferRenderbuffer(target, attachment, gl.RENDERBUFFER, renderBuffer);\r\n        }\r\n    }\r\n    if (params.depth)\r\n        bind(params.depth, gl.DEPTH_ATTACHMENT);\r\n    if (params.stencil)\r\n        bind(params.stencil, gl.STENCIL_ATTACHMENT);\r\n    let i = gl.COLOR_ATTACHMENT0;\r\n    for (const color of params.color) {\r\n        if (color) {\r\n            bind(color, i);\r\n        }\r\n        i++;\r\n    }\r\n\r\n    const debug = false; // TODO: get from build environment\r\n    if (debug) {\r\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n        switch (status) {\r\n            case gl.FRAMEBUFFER_COMPLETE:\r\n                break;\r\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                throw new Error(\"Framebuffer incomplete attachment!\");\r\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                throw new Error(\"Framebuffer missing attachment!\")\r\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                throw new Error(\"Framebuffer incomplete dimensions!\")\r\n            case gl.FRAMEBUFFER_UNSUPPORTED:\r\n                throw new Error(\"Framebuffer unsupported!\")\r\n            case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\r\n                throw new Error(\"Framebuffer incomplete multisample!\")\r\n            default:\r\n                throw new Error(\"Unknown framebuffer error!\")\r\n        }\r\n    }\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    return frameBuffer;\r\n}\r\n\r\nexport function glInvalidateFrameBuffer(gl: WebGL2RenderingContext, params: InvalidateFrameBufferParams) {\r\n    if (!params.frameBuffer) {\r\n        return;\r\n    }\r\n    const attachments: number[] = [];\r\n    if (params.depth && params.stencil) {\r\n        attachments.push(gl.DEPTH_STENCIL_ATTACHMENT);\r\n    } else if (params.depth) {\r\n        attachments.push(gl.DEPTH_ATTACHMENT);\r\n    } else if (params.stencil) {\r\n        attachments.push(gl.STENCIL_ATTACHMENT);\r\n    }\r\n    let i = 0;\r\n    for (const invalidate of params.color) {\r\n        if (invalidate) {\r\n            attachments.push(gl.COLOR_ATTACHMENT0 + i);\r\n        }\r\n        i++;\r\n    }\r\n    const { frameBuffer, kind } = params;\r\n    const target = gl[kind];\r\n    gl.bindFramebuffer(target, frameBuffer);\r\n    gl.invalidateFramebuffer(target, attachments);\r\n    gl.bindFramebuffer(target, null);\r\n}\r\n\r\nfunction isTextureAttachment(attachment: FrameBufferBinding): attachment is FrameBufferTextureBinding {\r\n    return typeof attachment == \"object\" && \"texture\" in attachment;\r\n}\r\n\r\nexport interface FrameBufferParams {\r\n    readonly depth?: FrameBufferBinding;\r\n    readonly stencil?: FrameBufferBinding;\r\n    readonly color: readonly (FrameBufferBinding | null)[]; // length: [0, MAX_COLOR_ATTACHMENTS>\r\n}\r\n\r\nexport interface FrameBufferTextureBinding {\r\n    readonly kind: \"FRAMEBUFFER\" | \"DRAW_FRAMEBUFFER\" | \"READ_FRAMEBUFFER\";\r\n    readonly texture: WebGLTexture | null;\r\n    readonly texTarget?: \"TEXTURE_2D\";\r\n    readonly level?: number; // default: 0, mip-map level\r\n    readonly layer?: number; // default: 0, face in cube map, z in 3d and index in 2d array\r\n}\r\n\r\nexport interface FrameBufferRenderBufferBinding {\r\n    readonly kind: \"FRAMEBUFFER\" | \"DRAW_FRAMEBUFFER\" | \"READ_FRAMEBUFFER\";\r\n    readonly renderBuffer: WebGLRenderbuffer | null;\r\n}\r\n\r\nexport type FrameBufferBinding = FrameBufferTextureBinding | FrameBufferRenderBufferBinding;\r\n\r\n\r\nexport interface InvalidateFrameBufferParams {\r\n    readonly kind: \"FRAMEBUFFER\" | \"DRAW_FRAMEBUFFER\" | \"READ_FRAMEBUFFER\";\r\n    readonly frameBuffer: WebGLFramebuffer | null;\r\n    readonly depth?: boolean;\r\n    readonly stencil?: boolean;\r\n    readonly color: readonly (boolean)[]; // length: [0, MAX_COLOR_ATTACHMENTS>\r\n}\r\n", "import { GL } from \"./constants.js\";\r\n\r\nexport function glErrorMessage(status: number) {\r\n    switch (status) {\r\n        case GL.NO_ERROR: break;\r\n        case GL.INVALID_ENUM:\r\n            return \"Invalid enum\";\r\n        case GL.INVALID_VALUE:\r\n            return \"Invalid value\";\r\n        case GL.INVALID_OPERATION:\r\n            return \"Invalid operation\";\r\n        case GL.INVALID_FRAMEBUFFER_OPERATION:\r\n            return \"Invalid framebuffer operation\";\r\n        case GL.OUT_OF_MEMORY:\r\n            return \"Out of memory\";\r\n        case GL.CONTEXT_LOST_WEBGL:\r\n            return \"Context lost\";\r\n        default:\r\n            return \"Unknown status\";\r\n    }\r\n}\r\n\r\nexport function glAttributesInfo(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n    const numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    const attributes: WebGLActiveInfo[] = [];\r\n    for (let i = 0; i < numAttributes; ++i) {\r\n        const attrib = gl.getActiveAttrib(program, i)!;\r\n        attributes.push(attrib);\r\n    }\r\n    return attributes;\r\n}\r\n\r\nexport function resizeCanvasToDisplaySize(canvas: HTMLCanvasElement, scale: number = window.devicePixelRatio) {\r\n    // Lookup the size the browser is displaying the canvas in CSS pixels.\r\n    const { width, height } = canvas.getBoundingClientRect();\r\n    const displayWidth = Math.round(width * scale);\r\n    const displayHeight = Math.round(height * scale);\r\n\r\n    // Check if the canvas is not the same size.\r\n    const needResize = canvas.width != displayWidth || canvas.height != displayHeight;\r\n\r\n    if (needResize) {\r\n        // Make the canvas the same size\r\n        canvas.width = displayWidth;\r\n        canvas.height = displayHeight;\r\n    }\r\n\r\n    return needResize;\r\n}\r\n\r\nexport function getPixelFormatChannels(format: string) {\r\n    switch (format) {\r\n        case \"ALPHA\":\r\n        case \"RED\":\r\n        case \"RED_INTEGER\":\r\n            return 1;\r\n        case \"RG\":\r\n        case \"RG_INTEGER\":\r\n            return 2;\r\n        case \"RGB\":\r\n        case \"RGB_INTEGER\":\r\n            return 3;\r\n        case \"RGBA\":\r\n        case \"RGBA_INTEGER\":\r\n            return 4;\r\n    }\r\n    throw new Error(`Unknown pixel format: ${format}!`);\r\n}\r\n\r\nexport function getBufferViewType(type: string) {\r\n    switch (type) {\r\n        case \"BYTE\":\r\n            return Int8Array;\r\n        case \"UNSIGNED_BYTE\":\r\n            return Uint8Array;\r\n        case \"SHORT\":\r\n            return Int16Array;\r\n        case \"UNSIGNED_SHORT_5_6_5\":\r\n        case \"UNSIGNED_SHORT_4_4_4_4\":\r\n        case \"UNSIGNED_SHORT_5_5_5_1\":\r\n        case \"HALF_FLOAT\":\r\n        case \"HALF_FLOAT_OES\":\r\n            return Uint16Array;\r\n        case \"UNSIGNED_INT\":\r\n        case \"UNSIGNED_INT_24_8_WEBGL\":\r\n        case \"UNSIGNED_INT_5_9_9_9_REV\":\r\n        case \"UNSIGNED_INT_2_10_10_10_REV\":\r\n        case \"UNSIGNED_INT_10F_11F_11F_REV\":\r\n            return Uint32Array;\r\n        case \"INT\":\r\n            return Int32Array;\r\n        case \"FLOAT\":\r\n            return Float32Array;\r\n        // case \"FLOAT_32_UNSIGNED_INT_24_8_REV\":\r\n        //     return null;\r\n    }\r\n    throw new Error(`Unknown buffer type: ${type}!`);\r\n}\r\n", "import { glExtensions } from \"./extensions\";\r\n\r\nexport type ShaderExtensionName = \"GL_ANGLE_multi_draw\";\r\n\r\nexport function* glShaderExtensions(gl: WebGL2RenderingContext): IterableIterator<ShaderExtension> {\r\n    if (glExtensions(gl).multiDraw) {\r\n        yield {\r\n            name: \"GL_ANGLE_multi_draw\",\r\n            behaviour: \"require\",\r\n        } as const satisfies ShaderExtension;\r\n    }\r\n}\r\n\r\n\r\nexport function glCompile(gl: WebGL2RenderingContext, params: ShaderParams): WebGLShader {\r\n    const source = params.shader;\r\n    const shader = gl.createShader(gl[params.kind])!;\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    return shader;\r\n}\r\n\r\n// remember to call gl.LinkProgram(program) on the returned program\r\n// call glCheckProgram() to check for completely and verify status\r\nexport function glCreateProgramAsync(gl: WebGL2RenderingContext, params: ProgramAsyncParams) {\r\n    const { header } = params;\r\n    const headerCode = formatHeader(gl, header);\r\n    const vertex = glCompile(gl, { kind: \"VERTEX_SHADER\", shader: headerCode + params.vertexShader });\r\n    const fragment = glCompile(gl, { kind: \"FRAGMENT_SHADER\", shader: headerCode + (params.fragmentShader ?? \"void main() {}\") });\r\n    const program = gl.createProgram()!;\r\n    gl.attachShader(program, vertex);\r\n    gl.attachShader(program, fragment);\r\n    return { program, vertex, fragment } as const;\r\n}\r\n\r\nexport function glCheckProgram(gl: WebGL2RenderingContext, params: ReturnType<typeof glCreateProgramAsync>) {\r\n    const { program, vertex, fragment } = params;\r\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) || gl.isContextLost()) {\r\n        console.assert(gl.getProgramParameter(program, gl.ATTACHED_SHADERS) == 2); // make sure not to call this function again after it returns true!\r\n        gl.detachShader(program, vertex);\r\n        gl.detachShader(program, fragment);\r\n        gl.deleteShader(vertex);\r\n        gl.deleteShader(fragment);\r\n    } else {\r\n        const status = { link: gl.getProgramInfoLog(program), vertex: gl.getShaderInfoLog(vertex), fragment: gl.getShaderInfoLog(fragment) } as const;\r\n        return status;\r\n    }\r\n}\r\n\r\nexport function glCreateProgram(gl: WebGL2RenderingContext, params: ProgramParams) {\r\n    const { flags, transformFeedback, uniformBufferBlocks, textureUniforms, headerChunk, commonChunk } = params;\r\n    const extensions: string[] = [];\r\n    if (glExtensions(gl).multiDraw) {\r\n        extensions.push(\"#extension GL_ANGLE_multi_draw : require\\n\");\r\n    }\r\n    const defaultHeader = `#version 300 es\\n${extensions.join(\"\")}precision highp float;\\nprecision highp int;\\nprecision highp usampler2D;\\n`;\r\n    const header = headerChunk ?? defaultHeader;\r\n    const defines = flags?.map(flag => `#define ${flag}\\n`)?.join(\"\") ?? \"\";\r\n    const common = commonChunk ?? \"\";\r\n    const vs = header + defines + common + params.vertexShader;\r\n    const fs = header + defines + common + (params.fragmentShader ?? \"void main() {}\");\r\n    const vertexShader = compileShader(gl, \"VERTEX_SHADER\", vs);\r\n    const fragmentShader = compileShader(gl, \"FRAGMENT_SHADER\", fs);\r\n    const program = gl.createProgram()!;\r\n\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n\r\n    if (transformFeedback) {\r\n        const { varyings, bufferMode } = transformFeedback;\r\n        gl.transformFeedbackVaryings(program, varyings, gl[bufferMode]);\r\n    }\r\n\r\n    // TODO: Consider doing async linking, so as to take advantage of parallel shader compilation. (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#Compile_Shaders_and_Link_Programs_in_parallel)\r\n    gl.linkProgram(program);\r\n    gl.validateProgram(program);\r\n\r\n    gl.detachShader(program, vertexShader);\r\n    gl.detachShader(program, fragmentShader);\r\n    gl.deleteShader(vertexShader);\r\n    gl.deleteShader(fragmentShader);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS) && !gl.isContextLost())\r\n        throw new Error(`Failed to compile link shaders!\\r\\n${gl.getProgramInfoLog(program)}`);\r\n\r\n    gl.useProgram(program);\r\n\r\n    if (uniformBufferBlocks) {\r\n        let idx = 0;\r\n        for (const name of uniformBufferBlocks) {\r\n            if (name) {\r\n                const blockIndex = gl.getUniformBlockIndex(program, name);\r\n                if (blockIndex != gl.INVALID_INDEX) {\r\n                    gl.uniformBlockBinding(program, blockIndex, idx);\r\n                } else {\r\n                    console.warn(`Shader has no uniform block named: ${name}!`);\r\n                }\r\n            }\r\n            idx++;\r\n        }\r\n    }\r\n\r\n    if (textureUniforms) {\r\n        let i = 0;\r\n        for (const name of textureUniforms) {\r\n            const location = gl.getUniformLocation(program, name);\r\n            gl.uniform1i(location, i++);\r\n        }\r\n    }\r\n\r\n    gl.useProgram(null);\r\n    return program;\r\n}\r\n\r\nfunction compileShader(gl: WebGL2RenderingContext, type: \"VERTEX_SHADER\" | \"FRAGMENT_SHADER\", source: string): WebGLShader {\r\n    const shader = gl.createShader(gl[type])!;\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS) && !gl.isContextLost()) {\r\n        const typeName = type.split(\"_\")[0].toLocaleLowerCase();\r\n        const errorMsg = gl.getShaderInfoLog(shader);\r\n        throw new Error(`: Failed to compile glsl ${typeName} shader!\\r\\n${errorMsg}`);\r\n    }\r\n    return shader;\r\n}\r\n\r\nfunction defaultHeaderParams(gl: WebGL2RenderingContext): ShaderHeaderParams {\r\n    return {\r\n        version: \"300 es\",\r\n        extensions: [...glShaderExtensions(gl)],\r\n        defaultPrecisions: {\r\n            float: \"high\",\r\n            int: \"high\",\r\n            sampler2D: \"high\",\r\n            samplerCube: \"high\",\r\n            sampler3D: \"high\",\r\n            samplerCubeShadow: \"high\",\r\n            sampler2DShadow: \"high\",\r\n            sampler2DArray: \"high\",\r\n            sampler2DArrayShadow: \"high\",\r\n            isampler2D: \"high\",\r\n            isampler3D: \"high\",\r\n            isamplerCube: \"high\",\r\n            isampler2DArray: \"high\",\r\n            usampler2D: \"high\",\r\n            usampler3D: \"high\",\r\n            usamplerCube: \"high\",\r\n            usampler2DArray: \"high\",\r\n        },\r\n        flags: [],\r\n        defines: [],\r\n        commonChunk: \"\",\r\n    } as const satisfies ShaderHeaderParams;\r\n}\r\n\r\nfunction formatHeader(gl: WebGL2RenderingContext, params: string | Partial<ShaderHeaderParams> | undefined): string {\r\n    if (!params)\r\n        return \"\";\r\n    if (typeof params == \"string\")\r\n        return params;\r\n    const p = { ...defaultHeaderParams(gl), ...params };\r\n    const version = `#version ${p.version}\\n`;\r\n    const extensions = p.extensions.map(ext => `#extension ${ext.name} : ${ext.behaviour}\\n`).join(\"\");\r\n    const precisions = Object.entries(p.defaultPrecisions).map(([type, precision]) => (`precision ${precision}p ${type};\\n`)).join(\"\");\r\n    const flags = p.flags.map(flag => `#define ${flag}\\n`).join(\"\");\r\n    const defines = p.defines.map(def => `#define ${def.name} ${def.value}\\n`).join(\"\");\r\n    const common = p.commonChunk;\r\n    const header = version + extensions + precisions + flags + defines + common;\r\n    return header;\r\n}\r\n\r\nexport interface ProgramAsyncParams {\r\n    readonly header?: string | Partial<ShaderHeaderParams>;\r\n    readonly vertexShader: string;\r\n    readonly fragmentShader: string | undefined;\r\n}\r\n\r\nexport interface VertexShaderParams {\r\n    readonly kind: \"VERTEX_SHADER\";\r\n    readonly shader: string;\r\n}\r\n\r\nexport interface FragmentShaderParams {\r\n    readonly kind: \"FRAGMENT_SHADER\";\r\n    readonly shader: string;\r\n}\r\n\r\nexport type ShaderParams = VertexShaderParams | FragmentShaderParams;\r\n\r\nexport interface ShaderExtension {\r\n    readonly name: ShaderExtensionName | string;\r\n    readonly behaviour: \"enable\" | \"require\" | \"warn\" | \"disable\";\r\n}\r\n\r\nexport interface ShaderDefine {\r\n    readonly name: string;\r\n    readonly value?: string;\r\n}\r\n\r\nexport type ShaderPrecision = \"high\" | \"medium\" | \"low\";\r\n\r\nexport interface ShaderDefaultPrecisions {\r\n    readonly float: ShaderPrecision; // high in vert shader, no default value in frag shader\r\n    readonly int: ShaderPrecision; // high in vert shader, medium in frag shader.\r\n\r\n    // lowp by default\r\n    readonly sampler2D: ShaderPrecision;\r\n    readonly samplerCube: ShaderPrecision;\r\n\r\n    // no default value\r\n    readonly sampler3D: ShaderPrecision;\r\n    readonly samplerCubeShadow: ShaderPrecision;\r\n    readonly sampler2DShadow: ShaderPrecision;\r\n    readonly sampler2DArray: ShaderPrecision;\r\n    readonly sampler2DArrayShadow: ShaderPrecision;\r\n    readonly isampler2D: ShaderPrecision;\r\n    readonly isampler3D: ShaderPrecision;\r\n    readonly isamplerCube: ShaderPrecision;\r\n    readonly isampler2DArray: ShaderPrecision;\r\n    readonly usampler2D: ShaderPrecision;\r\n    readonly usampler3D: ShaderPrecision;\r\n    readonly usamplerCube: ShaderPrecision;\r\n    readonly usampler2DArray: ShaderPrecision;\r\n}\r\n\r\nexport interface ShaderHeaderParams {\r\n    readonly version: \"300 es\";\r\n    readonly extensions: readonly ShaderExtension[];\r\n    readonly defaultPrecisions: Partial<ShaderDefaultPrecisions>;\r\n    readonly flags: readonly string[]; // flags are turned into preprocessor #define's with no values (#ifdef)\r\n    readonly defines: readonly ShaderDefine[]; // Preprocessor #define statements.\r\n    readonly commonChunk: string; // this string is injected before the shader code prior to compilation\r\n}\r\n\r\nexport interface ProgramParams {\r\n    readonly vertexShader: string;\r\n    readonly fragmentShader?: string;\r\n    readonly headerChunk?: string; // this string is injected at the very top of shaders prior to compilation for things that must come before #define's, such as #version and extention directives\r\n    readonly flags?: readonly string[]; // flags are turned into preprocessor #define's with no values (#ifdef)\r\n    readonly commonChunk?: string; // this string is injected before the shader code prior to compilation\r\n    readonly uniformBufferBlocks?: string[]; // The names of the shader uniform blocks, which will be bound to the index in which the name appears in this array using gl.uniformBlockBinding().\r\n    readonly textureUniforms?: readonly string[]; // Texture uniforms will be bound to the index in which they appear in the name array.\r\n    readonly transformFeedback?: {\r\n        readonly bufferMode: \"INTERLEAVED_ATTRIBS\" | \"SEPARATE_ATTRIBS\";\r\n        readonly varyings: readonly string[];\r\n    }\r\n}\r\n\r\n", "export function glReadPixels(gl: WebGL2RenderingContext, params: ReadPixelsParams) {\r\n    const x = params.x ?? 0;\r\n    const y = params.y ?? 0;\r\n    const width = params.width ?? gl.drawingBufferWidth;\r\n    const height = params.height ?? gl.drawingBufferHeight;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, params.frameBuffer);\r\n    for (const { buffer, attachment, format, type } of params.buffers) {\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer);\r\n        gl.readBuffer(gl[attachment]);\r\n        gl.readPixels(x, y, width, height, gl[format], gl[type], 0);\r\n    }\r\n    // reset state\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n    gl.readBuffer(gl.BACK);\r\n}\r\nexport interface ReadPixelsParams {\r\n    readonly x?: number; // default: 0\r\n    readonly y?: number; // default: 0\r\n    readonly width?: number; // default: gl.drawingBufferWidth\r\n    readonly height?: number; // default: gl.drawingBufferHeight\r\n    readonly frameBuffer: WebGLFramebuffer | null;\r\n    readonly buffers: readonly ReadPixelsBuffer[];\r\n}\r\n\r\nexport interface ReadPixelsBuffer {\r\n    readonly attachment: AttachmentType;\r\n    readonly buffer: WebGLBuffer;\r\n    readonly format: PixelFormat;\r\n    readonly type: PixelType;\r\n}\r\n\r\nexport interface ReadPixelsAsyncParams {\r\n    readonly x: number;\r\n    readonly y: number;\r\n    readonly width?: number; // default: 1\r\n    readonly height?: number; // default: 1\r\n    readonly attachment?: AttachmentType; // default: BACK\r\n    readonly format?: PixelFormat; // default: RGBA\r\n    readonly type?: PixelType; // default: UNSIGNED_BYTE\r\n}\r\n\r\nexport type AttachmentType = \"BACK\" | `COLOR_ATTACHMENT${0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15}`;\r\nexport type PixelFormat = \"ALPHA\" | \"RGB\" | \"RGBA\" | \"RED\" | \"RG\" | \"RED_INTEGER\" | \"RG_INTEGER\" | \"RGB_INTEGER\" | \"RGBA_INTEGER\";\r\nexport type PixelType = \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_6_5\" | \"UNSIGNED_SHORT_4_4_4_4\" | \"UNSIGNED_SHORT_5_5_5_1\" | \"FLOAT\" | \"BYTE\" | \"UNSIGNED_INT_2_10_10_10_REV\" | \"HALF_FLOAT\" | \"SHORT\" | \"UNSIGNED_SHORT\" | \"INT\" | \"UNSIGNED_INT\" | \"UNSIGNED_INT_10F_11F_11F_REV\" | \"UNSIGNED_INT_10F_11F_11F_REV\";\r\nexport type Pixels = Float32Array | Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n", "import { glLimits } from \"./limits\";\r\n\r\nexport function glCreateRenderbuffer(gl: WebGL2RenderingContext, params: RenderbufferParams): WebGLRenderbuffer {\r\n    const limits = glLimits(gl);\r\n    const buffer = gl.createRenderbuffer()!;\r\n    const { internalFormat, width, height } = params;\r\n    const samples = params.samples == undefined ? 1 : params.samples === \"max\" ? limits.MAX_SAMPLES : params.samples;\r\n    console.assert(samples <= limits.MAX_SAMPLES);\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, buffer);\r\n    if (params.samples === undefined) {\r\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl[internalFormat], width, height);\r\n    } else {\r\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl[internalFormat], width, height);\r\n    }\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n    return buffer;\r\n}\r\n\r\nexport type RenderBufferFormat =\r\n    \"R8\" | \"R8UI\" | \"R8I\" | \"R16UI\" | \"R16I\" | \"R32UI\" | \"R32I\" |\r\n    \"RG8\" | \"RG8UI\" | \"RG8I\" | \"RG16UI\" | \"RG16I\" | \"RG32UI\" | \"RG32I\" | \"RGB8\" |\r\n    \"RGBA8\" | \"SRGB8_ALPHA8\" | \"RGBA4\" | \"RGB565\" | \"RGB5_A1\" | \"RGB10_A2\" | \"RGBA8UI\" | \"RGBA8I\" | \"RGB10_A2UI\" | \"RGBA16UI\" | \"RGBA16I\" | \"RGBA32I\" | \"RGBA32UI\" |\r\n    \"DEPTH_COMPONENT16\" | \"DEPTH_COMPONENT24\" | \"DEPTH_COMPONENT32F\" | \"DEPTH24_STENCIL8\" | \"DEPTH32F_STENCIL8\" | \"STENCIL_INDEX8\" |\r\n    \"R16F\" | \"RG16F\" | \"RGBA16F\" | \"R32F\" | \"RG32F\" | \"RGBA32F\" | \"R11F_G11F_B10F\"; // EXT_color_buffer_float\r\n\r\nexport interface RenderbufferParams {\r\n    readonly internalFormat: RenderBufferFormat;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly samples?: number | \"max\"; // default: undefined (single sampled)\r\n};\r\n", "export type WrapString = \"CLAMP_TO_EDGE\" | \"MIRRORED_REPEAT\" | \"REPEAT\";\r\nexport type MinFilterString = \"NEAREST\" | \"LINEAR\" | \"NEAREST_MIPMAP_NEAREST\" | \"LINEAR_MIPMAP_NEAREST\" | \"NEAREST_MIPMAP_LINEAR\" | \"LINEAR_MIPMAP_LINEAR\";\r\nexport type MagFilterString = \"NEAREST\" | \"LINEAR\";\r\nexport type CompareFuncString = \"NEVER\" | \"LESS\" | \"EQUAL\" | \"LEQUAL\" | \"GREATER\" | \"NOTEQUAL\" | \"GEQUAL\" | \"ALWAYS\";\r\nexport type CompareModeString = \"COMPARE_REF_TO_TEXTURE\" | \"NONE\";\r\n\r\nexport function glCreateSampler(gl: WebGL2RenderingContext, params: SamplerParams): WebGLSampler {\r\n    const sampler = gl.createSampler()!;\r\n    gl.bindSampler(0, sampler);\r\n    const { minificationFilter, magnificationFilter, minLOD, maxLOD, wrap, compareFunction, compareMode } = params;\r\n    if (minificationFilter)\r\n        gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, gl[minificationFilter]); // default: NEAREST_MIPMAP_LINEAR\r\n    if (magnificationFilter)\r\n        gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, gl[magnificationFilter]); // default: LINEAR\r\n    if (wrap) {\r\n        const [s, t, r] = wrap;\r\n        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, gl[s]); // default: REPEAT\r\n        gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, gl[t]); // default: REPEAT\r\n        if (r)\r\n            gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_R, gl[r]); // default: REPEAT\r\n    }\r\n    if (minLOD)\r\n        gl.samplerParameterf(sampler, gl.TEXTURE_MIN_LOD, minLOD); // default: -1000\r\n    if (maxLOD)\r\n        gl.samplerParameterf(sampler, gl.TEXTURE_MAX_LOD, maxLOD); // default: 1000\r\n    if (compareFunction)\r\n        gl.samplerParameteri(sampler, gl.TEXTURE_COMPARE_FUNC, gl[compareFunction]);\r\n    if (compareMode)\r\n        gl.samplerParameteri(sampler, gl.TEXTURE_COMPARE_MODE, gl[compareMode]);\r\n    return sampler;\r\n}\r\n\r\nexport interface SamplerParams {\r\n    readonly minificationFilter?: MinFilterString; // default: NEAREST_MIPMAP_LINEAR\r\n    readonly magnificationFilter?: MagFilterString; // default: LINEAR\r\n    readonly minLOD?: number; // default: -1000\r\n    readonly maxLOD?: number; // default: 1000\r\n    readonly compareFunction?: CompareFuncString;\r\n    readonly compareMode?: CompareModeString;\r\n    readonly wrap?: readonly [WrapString, WrapString] | readonly [WrapString, WrapString, WrapString]; // ST, or STR coordinate wrapping. default: REPEAT\r\n};\r\n\r\n", "import { glExtensions } from \"./extensions\";\r\nimport { glLimits, type LimitsGL } from \"./limits\";\r\n\r\nexport function glState(gl: WebGL2RenderingContext, params: StateParams | null) {\r\n    if (!params) {\r\n        const limits = glLimits(gl);\r\n        params = glDefaultState(limits);\r\n    }\r\n\r\n    const { blend, cull, depth, polygon, sample, scissor, stencil, frameBuffer, vertexArrayObject, drawBuffers, attributeDefaults, textures, uniforms, uniformBuffers } = params;\r\n\r\n    function setFlag(cap: FilteredKeys<WebGL2RenderingContext, number>, value: boolean | undefined) {\r\n        if (value !== undefined) {\r\n            if (value) {\r\n                gl.enable(gl[cap]);\r\n            } else {\r\n                gl.disable(gl[cap]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function set<T>(setter: (this: WebGLRenderingContext, ...values: any) => void, values: T, defaultValues: any, ...keys: readonly (keyof T)[]) {\r\n        if (keys.some(key => values![key] !== undefined)) {\r\n            const args = keys.map(key => {\r\n                const v = values![key] ?? defaultValues[key];\r\n                return typeof v == \"string\" ? gl[v as keyof WebGL2RenderingContext] : v;\r\n            });\r\n            (<Function>setter).apply(gl, args);\r\n        }\r\n    }\r\n\r\n    setFlag(\"DITHER\", params.ditherEnable);\r\n    setFlag(\"RASTERIZER_DISCARD\", params.rasterizerDiscard);\r\n    set((rgba: readonly [boolean, boolean, boolean, boolean]) => { gl.colorMask(...rgba); }, params, \"colorMask\");\r\n    set(rect => gl.viewport(rect.x ?? 0, rect.y ?? 0, rect.width, rect.height), params, defaultConstants, \"viewport\");\r\n\r\n    if (blend) {\r\n        const defaultValues = defaultConstants.blend;\r\n        const { drawBuffersIndexed } = glExtensions(gl);\r\n        if (drawBuffersIndexed) {\r\n            // only change settings for drawbuffer 0.\r\n            if (blend.enable) {\r\n                drawBuffersIndexed.enableiOES(gl.BLEND, 0);\r\n            } else {\r\n                drawBuffersIndexed.disableiOES(gl.BLEND, 0);\r\n            }\r\n            set((modeRGB, modeAlpha) => drawBuffersIndexed.blendEquationSeparateiOES(0, modeRGB, modeAlpha), blend, defaultValues, \"equationRGB\", \"equationAlpha\");\r\n            set((srcRGB, dstRGB, srcAlpha, dstAlpha) => drawBuffersIndexed.blendFuncSeparateiOES(0, srcRGB, dstRGB, srcAlpha, dstAlpha), blend, defaultValues, \"srcRGB\", \"dstRGB\", \"srcAlpha\", \"dstAlpha\");\r\n        } else {\r\n            setFlag(\"BLEND\", blend.enable);\r\n            set(gl.blendEquationSeparate, blend, defaultValues, \"equationRGB\", \"equationAlpha\");\r\n            set(gl.blendFuncSeparate, blend, defaultValues, \"srcRGB\", \"dstRGB\", \"srcAlpha\", \"dstAlpha\");\r\n        }\r\n        set((rgba: readonly [number, number, number, number]) => { gl.blendColor(...rgba); }, blend, defaultValues, \"color\");\r\n    }\r\n\r\n    if (cull) {\r\n        const defaultValues = defaultConstants.cull;\r\n        setFlag(\"CULL_FACE\", cull.enable);\r\n        set(gl.cullFace, cull, defaultValues, \"mode\");\r\n        set(gl.frontFace, cull, defaultValues, \"frontFace\");\r\n    }\r\n\r\n    if (depth) {\r\n        const defaultValues = defaultConstants.depth;\r\n        setFlag(\"DEPTH_TEST\", depth.test);\r\n        set(gl.depthFunc, depth, defaultValues, \"func\");\r\n        set(gl.depthMask, depth, defaultValues, \"writeMask\");\r\n        set((range: readonly [number, number]) => gl.depthRange(...range), depth, defaultValues, \"range\");\r\n    }\r\n\r\n    if (polygon) {\r\n        const defaultValues = defaultConstants.polygon;\r\n        setFlag(\"POLYGON_OFFSET_FILL\", polygon.offsetFill);\r\n        set(gl.polygonOffset, polygon, defaultValues, \"offsetFactor\", \"offsetUnits\");\r\n    }\r\n\r\n    if (sample) {\r\n        const defaultValues = defaultConstants.sample;\r\n        setFlag(\"SAMPLE_ALPHA_TO_COVERAGE\", sample.alphaToCoverage);\r\n        setFlag(\"SAMPLE_COVERAGE\", sample.coverage);\r\n        set(gl.sampleCoverage, sample, defaultValues, \"coverageValue\", \"coverageInvert\");\r\n    }\r\n\r\n    if (scissor) {\r\n        const defaultValues = defaultConstants.scissor;\r\n        setFlag(\"SCISSOR_TEST\", scissor.test);\r\n        set(rect => gl.scissor(rect.x ?? 0, rect.y ?? 0, rect.width, rect.height), scissor, defaultValues, \"box\");\r\n    }\r\n\r\n    if (stencil) {\r\n        const defaultValues = defaultConstants.stencil;\r\n        setFlag(\"STENCIL_TEST\", stencil.test);\r\n        set((func, ref, mask) => gl.stencilFuncSeparate(gl.FRONT, func, ref, mask), stencil, defaultValues, \"func\", \"ref\", \"valueMask\");\r\n        set((func, ref, mask) => gl.stencilFuncSeparate(gl.BACK, func, ref, mask), stencil, defaultValues, \"backFunc\", \"backRef\", \"backValueMask\");\r\n    }\r\n\r\n    if (vertexArrayObject !== undefined) {\r\n        gl.bindVertexArray(vertexArrayObject);\r\n    }\r\n\r\n    if (frameBuffer !== undefined) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    }\r\n\r\n    if (drawBuffers) {\r\n        gl.drawBuffers(drawBuffers.map(b => gl[b!]));\r\n    }\r\n\r\n    const { program } = params;\r\n    if (program !== undefined) {\r\n        gl.useProgram(program);\r\n    }\r\n\r\n    if (attributeDefaults) {\r\n        for (let i = 0; i < attributeDefaults.length; i++) {\r\n            const defaults = attributeDefaults[i];\r\n            if (defaults) {\r\n                const { type, values } = defaults;\r\n                gl[`vertexAttrib${type}v`](i, values);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (textures) {\r\n        const texture0 = gl.TEXTURE0;\r\n        for (let i = 0; i < textures.length; i++) {\r\n            const binding = textures[i];\r\n            const texture = binding?.texture ?? null;\r\n            gl.activeTexture(texture0 + i);\r\n            gl.bindTexture(gl[binding?.kind ?? \"TEXTURE_2D\"], texture);\r\n            const sampler = binding?.sampler ?? null;\r\n            gl.bindSampler(i, sampler);\r\n            gl.uniform1i(binding?.uniform ?? null, i);\r\n        }\r\n        gl.activeTexture(texture0);\r\n    }\r\n\r\n    if (uniforms) {\r\n        function isMatrix(binding: UniformBinding): binding is UniformBindingMatrix {\r\n            return binding.kind.startsWith(\"Matrix\");\r\n        }\r\n        function isScalar(binding: UniformBinding): binding is UniformBindingScalar {\r\n            return binding.kind.startsWith(\"1\");\r\n        }\r\n        for (const binding of uniforms) {\r\n            if (isMatrix(binding)) {\r\n                const methodName = `uniform${binding.kind}v` as const;\r\n                gl[methodName](binding.location, binding.transpose ?? false, binding.value);\r\n            } else if (isScalar(binding)) {\r\n                const methodName = `uniform${binding.kind}` as const;\r\n                gl[methodName](binding.location, binding.value);\r\n            } else {\r\n                const methodName = `uniform${binding.kind}v` as const;\r\n                gl[methodName](binding.location, binding.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (uniformBuffers) {\r\n        let idx = 0;\r\n        for (const uniformBindingParams of uniformBuffers) {\r\n            if (uniformBindingParams === undefined)\r\n                continue;\r\n            if (isUniformBufferBindingRange(uniformBindingParams)) {\r\n                const { buffer, byteOffset, byteSize } = uniformBindingParams;\r\n                gl.bindBufferRange(gl.UNIFORM_BUFFER, idx, buffer, byteOffset, byteSize);\r\n            } else {\r\n                gl.bindBufferBase(gl.UNIFORM_BUFFER, idx, uniformBindingParams);\r\n            }\r\n            idx++;\r\n        }\r\n    }\r\n}\r\n\r\nexport function glDefaultState(limits: LimitsGL): State {\r\n    return {\r\n        ...defaultConstants,\r\n        drawBuffers: [\"BACK\"] as ReadonlyArray<ColorAttachment | \"BACK\" | \"NONE\">,\r\n        attributeDefaults: Array<AttributeDefault | null>(limits.MAX_VERTEX_ATTRIBS).fill({ type: \"4f\", values: [0, 0, 0, 1] }) as ReadonlyArray<AttributeDefault | null>,\r\n        textures: Array<TextureBinding | null>(limits.MAX_COMBINED_TEXTURE_IMAGE_UNITS).fill(null) as ReadonlyArray<TextureBinding | null>,\r\n    } as const;\r\n}\r\n\r\ntype ScopedParamsKeys = \"blend\" | \"cull\" | \"depth\" | \"polygon\" | \"sample\" | \"stencil\" | \"scissor\";\r\nexport type StateParams = Partial<Omit<State, ScopedParamsKeys>> & { readonly [P in ScopedParamsKeys]?: Partial<State[P]> };\r\n\r\nexport interface State {\r\n    // blend state (except constant color) only applies to COLOR_ATTACHMENT0 if OES_draw_buffers_indexed is supported.\r\n    readonly blend: {\r\n        readonly enable: boolean; // BLEND\r\n        readonly color: RGBA; // BLEND_COLOR\r\n        readonly dstAlpha: BlendFunction; // BLEND_DST_ALPHA\r\n        readonly dstRGB: BlendFunction; // BLEND_DST_RGB\r\n        readonly equationAlpha: BlendEquation; // BLEND_EQUATION_ALPHA\r\n        readonly equationRGB: BlendEquation; // BLEND_EQUATION_RGB\r\n        readonly srcAlpha: BlendFunction; // BLEND_EQUATION_ALPHA\r\n        readonly srcRGB: BlendFunction; // BLEND_SRC_RGB\r\n    };\r\n\r\n    readonly cull: {\r\n        readonly enable: boolean; // CULL_FACE\r\n        readonly mode: CullMode; // CULL_FACE_MODE\r\n        readonly frontFace: Winding; // FRONT_FACE\r\n    };\r\n\r\n    readonly depth: {\r\n        readonly test: boolean; // DEPTH_TEST\r\n        readonly func: DepthFunc; // DEPTH_FUNC\r\n        readonly writeMask: boolean; // DEPTH_WRITEMASK\r\n        readonly range: readonly [near: number, far: number]; // DEPTH_RANGE\r\n    };\r\n\r\n    readonly polygon: {\r\n        readonly offsetFill: boolean; // POLYGON_OFFSET_FILL\r\n        readonly offsetFactor: number; // POLYGON_OFFSET_FACTOR\r\n        readonly offsetUnits: number; // POLYGON_OFFSET_UNITS\r\n    };\r\n\r\n    readonly sample: {\r\n        readonly alphaToCoverage: boolean; // SAMPLE_ALPHA_TO_COVERAGE\r\n        readonly coverage: boolean; // SAMPLE_COVERAGE\r\n        readonly coverageValue: number; // SAMPLE_COVERAGE_VALUE\r\n        readonly coverageInvert: boolean; // SAMPLE_COVERAGE_INVERT\r\n    };\r\n\r\n    readonly stencil: {\r\n        readonly test: boolean; // STENCIL_TEST\r\n        readonly func: DepthFunc; // STENCIL_FUNC\r\n        readonly valueMask: number; // STENCIL_VALUE_MASK\r\n        readonly ref: number; // STENCIL_REF\r\n        readonly backFunc: DepthFunc; // STENCIL_BACK_FUNC\r\n        readonly backValueMask: number; // STENCIL_BACK_VALUE_MASK\r\n        readonly backRef: number; // STENCIL_BACK_REF\r\n    };\r\n\r\n    readonly scissor: {\r\n        readonly test: boolean; // SCISSOR_TEST\r\n        readonly box: Rect;\r\n    }\r\n\r\n    readonly ditherEnable: boolean; // DITHER\r\n    readonly colorMask: readonly [red: boolean, green: boolean, blue: boolean, alpha: boolean];\r\n    readonly viewport: Rect;\r\n    readonly rasterizerDiscard: boolean; // RASTERIZER_DISCARD\r\n    readonly frameBuffer: WebGLFramebuffer | null;\r\n    readonly vertexArrayObject: WebGLVertexArrayObject | null;\r\n    readonly program: WebGLProgram | null;\r\n    readonly uniforms: readonly UniformBinding[];\r\n    readonly uniformBuffers: readonly UniformBufferBinding[]; // max length: MAX_UNIFORM_BUFFER_BINDINGS\r\n    readonly drawBuffers: readonly (ColorAttachment | \"BACK\" | \"NONE\")[];\r\n    readonly attributeDefaults: readonly (AttributeDefault | null)[];\r\n    readonly textures: readonly (TextureBinding | null)[];\r\n}\r\n\r\n\r\nexport type BlendEquation = \"FUNC_ADD\" | \"FUNC_SUBTRACT\" | \"FUNC_REVERSE_SUBTRACT\" | \"MIN\" | \"MAX\";\r\nexport type BlendFunction = \"ZERO\" | \"ONE\" | \"SRC_COLOR\" | \"ONE_MINUS_SRC_COLOR\" | \"DST_COLOR\" | \"ONE_MINUS_DST_COLOR\" | \"SRC_ALPHA\" | \"ONE_MINUS_SRC_ALPHA\" | \"DST_ALPHA\" | \"ONE_MINUS_DST_ALPHA\" | \"CONSTANT_COLOR\" | \"ONE_MINUS_CONSTANT_COLOR\" | \"CONSTANT_ALPHA\" | \"ONE_MINUS_CONSTANT_ALPHA\" | \"SRC_ALPHA_SATURATE\";\r\nexport type CullMode = \"FRONT\" | \"BACK\" | \"FRONT_AND_BACK\";\r\nexport type DepthFunc = \"NEVER\" | \"LESS\" | \"EQUAL\" | \"LEQUAL\" | \"GREATER\" | \"NOTEQUAL\" | \"GEQUAL\" | \"ALWAYS\";\r\nexport type Winding = \"CW\" | \"CCW\";\r\nexport type ColorAttachment = `COLOR_ATTACHMENT${0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15}`;\r\nexport type RGBA = readonly [r: number, g: number, b: number, a: number];\r\nexport type XYZW = readonly [x: number, y: number, z: number, w: number];\r\n\r\nexport interface Rect {\r\n    readonly x?: number;\r\n    readonly y?: number;\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport interface AttributeDefault {\r\n    readonly type: \"4f\" | \"I4i\" | \"I4ui\";\r\n    readonly values: XYZW;\r\n}\r\n\r\nexport interface AttributeBinding {\r\n    readonly type: \"4f\" | \"I4i\" | \"I4ui\";\r\n    readonly values: XYZW;\r\n}\r\n\r\nexport type UniformTypeScalar = \"1f\" | \"1i\" | \"1ui\";\r\n\r\nexport type UniformTypeVector =\r\n    \"2f\" | \"3f\" | \"4f\" |\r\n    \"2i\" | \"3i\" | \"4i\" |\r\n    \"2ui\" | \"3ui\" | \"4ui\";\r\n\r\nexport type UniformTypeMatrix =\r\n    \"Matrix2f\" | \"Matrix3f\" | \"Matrix4f\" |\r\n    \"Matrix2x3f\" | \"Matrix2x4f\" |\r\n    \"Matrix3x2f\" | \"Matrix3x4f\" |\r\n    \"Matrix4x2f\" | \"Matrix4x3f\";\r\n\r\nexport interface UniformBindingScalar {\r\n    readonly kind: UniformTypeScalar;\r\n    readonly location: WebGLUniformLocation | null;\r\n    readonly value: number;\r\n}\r\n\r\nexport interface UniformBindingVector {\r\n    readonly kind: UniformTypeVector;\r\n    readonly location: WebGLUniformLocation | null;\r\n    readonly value: readonly number[];\r\n}\r\n\r\nexport interface UniformBindingMatrix {\r\n    readonly kind: UniformTypeMatrix;\r\n    readonly location: WebGLUniformLocation | null;\r\n    readonly value: readonly number[];\r\n    readonly transpose?: boolean; // default: false\r\n}\r\n\r\nexport type UniformBinding = UniformBindingScalar | UniformBindingVector | UniformBindingMatrix;\r\n\r\n\r\nexport interface UniformBufferBindingRange {\r\n    readonly buffer: WebGLBuffer;\r\n    readonly byteOffset: number;\r\n    readonly byteSize: number;\r\n}\r\n\r\nexport type UniformBufferBinding = UniformBufferBindingRange | WebGLBuffer | null | undefined; // if undefined, the buffer binding will not be changed\r\n\r\nexport interface TextureBinding {\r\n    readonly kind: \"TEXTURE_2D\" | \"TEXTURE_3D\" | \"TEXTURE_2D_ARRAY\" | \"TEXTURE_CUBE_MAP\";\r\n    readonly texture: WebGLTexture | null;\r\n    readonly sampler: WebGLSampler | null;\r\n    readonly uniform?: WebGLUniformLocation | null;\r\n}\r\n\r\ntype FilteredKeys<T, U> = { [P in keyof T]: T[P] extends U ? P : never }[keyof T];\r\n\r\nfunction isUniformBufferBindingRange(params: UniformBufferBindingRange | WebGLBuffer | null): params is UniformBufferBindingRange {\r\n    return params != null && \"byteOffset\" in params && \"byteSize\" in params;\r\n}\r\n\r\nconst defaultConstants = {\r\n    blend: {\r\n        enable: false, // BLEND\r\n        color: [0, 0, 0, 0], // BLEND_COLOR\r\n        dstAlpha: \"ZERO\", // BLEND_DST_ALPHA\r\n        dstRGB: \"ZERO\", // BLEND_DST_RGB\r\n        equationAlpha: \"FUNC_ADD\", // BLEND_EQUATION_ALPHA\r\n        equationRGB: \"FUNC_ADD\", // BLEND_EQUATION_RGB\r\n        srcAlpha: \"ONE\", // BLEND_EQUATION_ALPHA\r\n        srcRGB: \"ONE\", // BLEND_SRC_RGB\r\n    },\r\n\r\n    cull: {\r\n        enable: false, // CULL_FACE\r\n        mode: \"BACK\", // CULL_FACE_MODE\r\n        frontFace: \"CCW\", // FRONT_FACE\r\n    },\r\n\r\n    depth: {\r\n        test: false, // DEPTH_TEST\r\n        func: \"LESS\", // DEPTH_FUNC\r\n        writeMask: true, // DEPTH_WRITEMASK\r\n        range: [0, 1], // DEPTH_RANGE\r\n    },\r\n\r\n    ditherEnable: true, // DITHER\r\n\r\n    colorMask: [true, true, true, true],\r\n\r\n    polygon: {\r\n        offsetFill: false, // POLYGON_OFFSET_FILL\r\n        offsetFactor: 0, // POLYGON_OFFSET_FACTOR\r\n        offsetUnits: 0, // POLYGON_OFFSET_UNITS\r\n    },\r\n\r\n    sample: {\r\n        alphaToCoverage: false, // SAMPLE_ALPHA_TO_COVERAGE\r\n        coverage: false, // SAMPLE_COVERAGE\r\n        coverageValue: 1, // SAMPLE_COVERAGE_VALUE\r\n        coverageInvert: false, // SAMPLE_COVERAGE_INVERT\r\n    },\r\n\r\n    stencil: {\r\n        test: false, // STENCIL_TEST\r\n        func: \"ALWAYS\", // STENCIL_FUNC\r\n        valueMask: 0x7FFFFFFF, // STENCIL_VALUE_MASK\r\n        ref: 0, // STENCIL_REF\r\n        backFunc: \"ALWAYS\", // STENCIL_BACK_FUNC\r\n        backValueMask: 0x7FFFFFFF, // STENCIL_BACK_VALUE_MASK\r\n        backRef: 0, // STENCIL_BACK_REF\r\n    },\r\n\r\n    viewport: { // VIEWPORT\r\n        x: 0,\r\n        y: 0,\r\n        width: 0,\r\n        height: 0,\r\n    } as Rect,\r\n\r\n    scissor: {\r\n        test: false, // SCISSOR_TEST\r\n        box: { // SCISSOR_BOX\r\n            x: 0,\r\n            y: 0,\r\n            width: 0,\r\n            height: 0,\r\n        } as Rect,\r\n    },\r\n\r\n    rasterizerDiscard: false, // RASTERIZER_DISCARD\r\n\r\n    frameBuffer: null,\r\n    vertexArrayObject: null,\r\n\r\n    program: null,\r\n    uniforms: [],\r\n    uniformBuffers: [], // max length: MAX_UNIFORM_BUFFER_BINDINGS\r\n} as const;\r\n", "import { GL } from \"./constants.js\";\r\nimport { getBufferViewType } from \"./misc.js\";\r\n\r\nexport function glCreateTexture(gl: WebGL2RenderingContext, params: TextureParams) {\r\n    const texture = gl.createTexture()!;\r\n    const width = params.width ?? params.image.width;\r\n    const height = params.height ?? params.image.height;\r\n    const target = gl[params.kind];\r\n    const depth = \"depth\" in params ? params.depth : undefined;\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(target, texture);\r\n\r\n    const { internalFormat, format, type, arrayType } = getFormatInfo(gl, params.internalFormat, \"type\" in params ? params.type : undefined);\r\n\r\n    type ImageTarget = typeof gl[TextureImageTargetString];\r\n\r\n    function textureImage(imgTarget: ImageTarget, data: BufferSource | null, level: number, sizeX: number, sizeY: number, sizeZ = 0) {\r\n        if (!data)\r\n            return;\r\n        const source = data;\r\n        const view = ArrayBuffer.isView(source) ? source : undefined;\r\n        const buffer = ArrayBuffer.isView(view) ? view.buffer : source as ArrayBufferLike;\r\n        const byteOffset = view?.byteOffset ?? 0;\r\n        const byteLength = view?.byteLength ?? buffer?.byteLength;\r\n        const pixels = buffer === null ? null : new arrayType(buffer, byteOffset, byteLength / arrayType.BYTES_PER_ELEMENT);\r\n        const offsetX = 0;\r\n        const offsetY = 0\r\n        const offsetZ = 0;\r\n        if (type) {\r\n            if (sizeZ) {\r\n                gl.texSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, format as number, type, pixels);\r\n            } else {\r\n                gl.texSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, format as number, type, pixels);\r\n            }\r\n        } else {\r\n            if (sizeZ) {\r\n                gl.compressedTexSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, internalFormat, pixels!);\r\n            } else {\r\n                gl.compressedTexSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, internalFormat, pixels!);\r\n            }\r\n        }\r\n    }\r\n\r\n    function textureMipLevel(level: number, image: BufferSource | readonly BufferSource[] | null) {\r\n        function isArray(img: typeof image): img is readonly BufferSource[] {\r\n            return Array.isArray(img);\r\n        }\r\n        const n = 1 << level;\r\n        if (isArray(image)) {\r\n            console.assert(target == gl.TEXTURE_CUBE_MAP);\r\n            const cubeImages = image[level];\r\n            if (cubeImages) {\r\n                let side = gl.TEXTURE_CUBE_MAP_POSITIVE_X;\r\n                for (let img of image) {\r\n                    textureImage((side++) as ImageTarget, img, level, width / n, height / n);\r\n                }\r\n            }\r\n        } else {\r\n            if (depth) {\r\n                if (target == gl.TEXTURE_3D) {\r\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth / n);\r\n                }\r\n                else {\r\n                    console.assert(target == gl.TEXTURE_2D_ARRAY);\r\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth);\r\n                }\r\n            } else {\r\n                console.assert(target == gl.TEXTURE_2D);\r\n                textureImage(gl.TEXTURE_2D, image, level, width, height);\r\n            }\r\n        }\r\n    }\r\n\r\n    function textureStorage(levels: number = 1) {\r\n        if (depth) {\r\n            gl.texStorage3D(target, levels, internalFormat, width, height, depth);\r\n        } else {\r\n            gl.texStorage2D(target, levels, internalFormat, width, height);\r\n        }\r\n    }\r\n\r\n    if (\"mipMaps\" in params) {\r\n        // mip mapped\r\n        const { mipMaps } = params;\r\n        const isNumber = typeof mipMaps == \"number\";\r\n        const levels = isNumber ? mipMaps : mipMaps.length;\r\n        textureStorage(levels);\r\n        if (!isNumber) {\r\n            for (let level = 0; level < levels; level++) {\r\n                const mipMap = mipMaps[level];\r\n                if (mipMap) {\r\n                    textureMipLevel(level, mipMap);\r\n                }\r\n            }\r\n        }\r\n    } else if (isBufferSource(params.image)) {\r\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\r\n        if (generateMipMaps && !(isPowerOf2(width) && isPowerOf2(height) && type)) {\r\n            throw new Error(`Cannot generate mip maps on a texture of non-power of two sizes (${width}, ${height})!`);\r\n        }\r\n        const levels = generateMipMaps ? Math.log2(Math.min(width, height)) : 1;\r\n        textureStorage(levels);\r\n        textureMipLevel(0, params.image);\r\n        if (generateMipMaps && params.image) {\r\n            gl.generateMipmap(target);\r\n        }\r\n    } else {\r\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format!, type!, params.image as TextureImageSource);\r\n        if (generateMipMaps && isPowerOf2(width) && isPowerOf2(height)) {\r\n            gl.generateMipmap(target);\r\n        }\r\n    }\r\n    gl.bindTexture(target, null);\r\n    return texture;\r\n}\r\n\r\nexport function glUpdateTexture(gl: WebGL2RenderingContext, targetTexture: WebGLTexture, params: TextureParams) {\r\n    const width = params.width ?? params.image.width;\r\n    const height = params.height ?? params.image.height;\r\n    const target = gl[params.kind];\r\n    const depth = \"depth\" in params ? params.depth : undefined;\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(target, targetTexture);\r\n\r\n    const { internalFormat, format, type, arrayType } = getFormatInfo(gl, params.internalFormat, \"type\" in params ? params.type : undefined);\r\n\r\n    type ImageTarget = typeof gl[TextureImageTargetString];\r\n\r\n    function textureImage(imgTarget: typeof gl[TextureImageTargetString], data: BufferSource | null, level: number, sizeX: number, sizeY: number, sizeZ = 0) {\r\n        if (!data)\r\n            return;\r\n        const source = data;\r\n        const view = ArrayBuffer.isView(source) ? source : undefined;\r\n        const buffer = ArrayBuffer.isView(view) ? view.buffer : source as ArrayBufferLike;\r\n        const byteOffset = view?.byteOffset ?? 0;\r\n        const byteLength = view?.byteLength ?? buffer?.byteLength;\r\n        const pixels = buffer === null ? null : new arrayType(buffer, byteOffset, byteLength / arrayType.BYTES_PER_ELEMENT);\r\n        const offsetX = 0;\r\n        const offsetY = 0\r\n        const offsetZ = 0;\r\n        if (type) {\r\n            if (sizeZ) {\r\n                gl.texSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, format as number, type, pixels);\r\n            } else {\r\n                gl.texSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, format as number, type, pixels);\r\n            }\r\n        } else {\r\n            if (sizeZ) {\r\n                gl.compressedTexSubImage3D(imgTarget, level, offsetX, offsetY, offsetZ, sizeX, sizeY, sizeZ, internalFormat, pixels!);\r\n            } else {\r\n                gl.compressedTexSubImage2D(imgTarget, level, offsetX, offsetY, sizeX, sizeY, internalFormat, pixels!);\r\n            }\r\n        }\r\n    }\r\n\r\n    function textureMipLevel(level: number, image: BufferSource | readonly BufferSource[] | null) {\r\n        function isArray(img: typeof image): img is readonly BufferSource[] {\r\n            return Array.isArray(img);\r\n        }\r\n        const n = 1 << level;\r\n        if (isArray(image)) {\r\n            console.assert(target == gl.TEXTURE_CUBE_MAP);\r\n            const cubeImages = image[level];\r\n            if (cubeImages) {\r\n                let side = gl.TEXTURE_CUBE_MAP_POSITIVE_X;\r\n                for (let img of image) {\r\n                    textureImage((side++) as ImageTarget, img, level, width / n, height / n);\r\n                }\r\n            }\r\n        } else {\r\n            if (depth) {\r\n                if (target == gl.TEXTURE_3D) {\r\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth / n);\r\n                }\r\n                else {\r\n                    console.assert(target == gl.TEXTURE_2D_ARRAY);\r\n                    textureImage(gl.TEXTURE_3D, image, level, width / n, height / n, depth);\r\n                }\r\n            } else {\r\n                console.assert(target == gl.TEXTURE_2D);\r\n                textureImage(gl.TEXTURE_2D, image, level, width, height);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (\"mipMaps\" in params) {\r\n        // mip mapped\r\n        const { mipMaps } = params;\r\n        const isNumber = typeof mipMaps == \"number\";\r\n        const levels = isNumber ? mipMaps : mipMaps.length;\r\n        if (!isNumber) {\r\n            for (let level = 0; level < levels; level++) {\r\n                const mipMap = mipMaps[level];\r\n                if (mipMap) {\r\n                    textureMipLevel(level, mipMap);\r\n                }\r\n            }\r\n        }\r\n    } else if (isBufferSource(params.image)) {\r\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\r\n        if (generateMipMaps && !(isPowerOf2(width) && isPowerOf2(height) && type)) {\r\n            throw new Error(`Cannot generate mip maps on a texture of non-power of two sizes (${width}, ${height})!`);\r\n        }\r\n        const levels = generateMipMaps ? Math.log2(Math.min(width, height)) : 1;\r\n        textureMipLevel(0, params.image);\r\n        if (generateMipMaps && params.image) {\r\n            gl.generateMipmap(target);\r\n        }\r\n    } else {\r\n        const generateMipMaps = \"generateMipMaps\" in params && params.generateMipMaps;\r\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, format!, type!, params.image as TextureImageSource);\r\n        if (generateMipMaps && isPowerOf2(width) && isPowerOf2(height)) {\r\n            gl.generateMipmap(target);\r\n        }\r\n    }\r\n    gl.bindTexture(target, null);\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n    return (value & (value - 1)) == 0;\r\n}\r\n\r\nfunction isFormatCompressed(format: UncompressedTextureFormatString | CompressedTextureFormatString): format is CompressedTextureFormatString {\r\n    return format.startsWith(\"COMPRESSED\");\r\n}\r\n\r\nfunction isBufferSource(image: unknown): image is BufferSource {\r\n    return image == undefined || Array.isArray(image) || image instanceof ArrayBuffer || ArrayBuffer.isView(image);\r\n}\r\n\r\nfunction getFormatInfo(gl: WebGL2RenderingContext, internalFormatString: UncompressedTextureFormatString | CompressedTextureFormatString, typeString?: TexelTypeString) {\r\n    if (isFormatCompressed(internalFormatString)) {\r\n        const internalFormat = compressedFormats[internalFormatString];\r\n        const format = undefined;\r\n        const type = undefined;\r\n        const arrayType = Uint8Array;\r\n        return { internalFormat, format, type, arrayType };\r\n    } else {\r\n        const internalFormat = gl[internalFormatString] as keyof typeof internalFormat2FormatLookup;\r\n        const format = internalFormat2FormatLookup[internalFormat];\r\n        const type = gl[typeString!];\r\n        const arrayType = getBufferViewType(typeString!);\r\n        return { internalFormat, format, type, arrayType };\r\n    }\r\n}\r\n\r\nexport type TextureParams =\r\n    TextureParams2DUncompressedImage | TextureParams2DUncompressed | TextureParams2DCompressed | TextureParams2DUncompressedMipMapped | TextureParams2DCompressedMipMapped |\r\n    TextureParamsCubeUncompressed | TextureParamsCubeCompressed | TextureParamsCubeUncompressedMipMapped | TextureParamsCubeCompressedMipMapped |\r\n    TextureParams3DUncompressed | TextureParams3DCompressed | TextureParams3DUncompressedMipMapped | TextureParams3DCompressedMipMapped |\r\n    TextureParams2DArrayUncompressed | TextureParams2DArrayCompressed | TextureParams2DArrayUncompressedMipMapped | TextureParams2DArrayCompressedMipMapped;\r\n\r\nexport type TextureTargetString = TextureParams[\"kind\"];\r\n\r\nexport type TextureImageSource = ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas;\r\n\r\n// 2D\r\nexport type TextureParams2DUncompressedImage = Uncompressed & Partial<Size2D> & GenMipMap & {\r\n    readonly kind: \"TEXTURE_2D\";\r\n    readonly image: TextureImageSource;\r\n};\r\n\r\nexport type TextureParams2DUncompressed = Uncompressed & Size2D & GenMipMap & {\r\n    readonly kind: \"TEXTURE_2D\";\r\n    readonly image: BufferSource | TextureImageSource | null;\r\n};\r\n\r\nexport interface TextureParams2DCompressed extends Compressed, Size2D {\r\n    readonly kind: \"TEXTURE_2D\";\r\n    readonly image: BufferSource;\r\n};\r\n\r\nexport type TextureParams2DUncompressedMipMapped = Uncompressed & Size2D<Pow2> & GenMipMap & {\r\n    readonly kind: \"TEXTURE_2D\";\r\n    readonly mipMaps: number | readonly (BufferSource | null)[];\r\n};\r\n\r\nexport interface TextureParams2DCompressedMipMapped extends Compressed, Size2D<Pow2> {\r\n    readonly kind: \"TEXTURE_2D\";\r\n    readonly mipMaps: readonly (BufferSource)[];\r\n};\r\n\r\n// Cube\r\nexport type TextureParamsCubeUncompressed = Uncompressed & Size2D & GenMipMap & {\r\n    readonly kind: \"TEXTURE_CUBE_MAP\";\r\n    readonly image: CubeImages | null;\r\n}\r\n\r\nexport interface TextureParamsCubeCompressed extends Compressed, Size2D {\r\n    readonly kind: \"TEXTURE_CUBE_MAP\";\r\n    readonly image: CubeImages;\r\n}\r\n\r\nexport type TextureParamsCubeUncompressedMipMapped = Uncompressed & Size2D<Pow2> & {\r\n    readonly kind: \"TEXTURE_CUBE_MAP\";\r\n    readonly mipMaps: number | readonly (CubeImages | null)[];\r\n}\r\n\r\nexport interface TextureParamsCubeCompressedMipMapped extends Compressed, Size2D<Pow2> {\r\n    readonly kind: \"TEXTURE_CUBE_MAP\";\r\n    readonly mipMaps: readonly (CubeImages)[];\r\n}\r\n\r\n// 3D\r\nexport type TextureParams3DUncompressed = Uncompressed & Size3D & GenMipMap & {\r\n    readonly kind: \"TEXTURE_3D\";\r\n    readonly image: BufferSource | null;\r\n}\r\n\r\nexport interface TextureParams3DCompressed extends Compressed, Size3D {\r\n    readonly kind: \"TEXTURE_3D\";\r\n    readonly image: BufferSource;\r\n}\r\n\r\nexport type TextureParams3DUncompressedMipMapped = Uncompressed & Size3D<Pow2> & {\r\n    readonly kind: \"TEXTURE_3D\";\r\n    readonly mipMaps: number | readonly (BufferSource | null)[];\r\n}\r\n\r\nexport interface TextureParams3DCompressedMipMapped extends Compressed, Size3D<Pow2> {\r\n    readonly kind: \"TEXTURE_3D\";\r\n    readonly mipMaps: readonly (BufferSource)[];\r\n}\r\n\r\n// 2D Array\r\nexport type TextureParams2DArrayUncompressed = Uncompressed & Size3D & GenMipMap & {\r\n    readonly kind: \"TEXTURE_2D_ARRAY\";\r\n    readonly image: BufferSource | null;\r\n}\r\n\r\nexport interface TextureParams2DArrayCompressed extends Compressed, Size3D {\r\n    readonly kind: \"TEXTURE_2D_ARRAY\";\r\n    readonly image: BufferSource;\r\n}\r\n\r\nexport type TextureParams2DArrayUncompressedMipMapped = Uncompressed & Size3D<Pow2> & {\r\n    readonly kind: \"TEXTURE_2D_ARRAY\";\r\n    readonly mipMaps: number | readonly (BufferSource | null)[];\r\n}\r\n\r\nexport interface TextureParams2DArrayCompressedMipMapped extends Compressed, Size3D<Pow2> {\r\n    readonly kind: \"TEXTURE_2D_ARRAY\";\r\n    readonly mipMaps: readonly (BufferSource)[];\r\n}\r\n\r\nexport type TextureImageTargetString = \"TEXTURE_2D\" | \"TEXTURE_3D\" | \"TEXTURE_2D_ARRAY\" | \"TEXTURE_CUBE_MAP_POSITIVE_X\" | \"TEXTURE_CUBE_MAP_NEGATIVE_X\" | \"TEXTURE_CUBE_MAP_POSITIVE_Y\" | \"TEXTURE_CUBE_MAP_NEGATIVE_Y\" | \"TEXTURE_CUBE_MAP_POSITIVE_Z\" | \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\r\n\r\n// https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexStorage2D.xhtml\r\nexport type UncompressedTextureFormatType =\r\n    { internalFormat: \"R8\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"R8_SNORM\", type: \"BYTE\" } |\r\n    { internalFormat: \"R16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\r\n    { internalFormat: \"R32F\", type: \"FLOAT\" } |\r\n    { internalFormat: \"R8UI\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"R8I\", type: \"BYTE\" } |\r\n    { internalFormat: \"R16UI\", type: \"UNSIGNED_SHORT\" } |\r\n    { internalFormat: \"R16I\", type: \"SHORT\" } |\r\n    { internalFormat: \"R32UI\", type: \"UNSIGNED_INT\" } |\r\n    { internalFormat: \"R32I\", type: \"INT\" } |\r\n    { internalFormat: \"RG8\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"RG8_SNORM\", type: \"BYTE\" } |\r\n    { internalFormat: \"RG16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\r\n    { internalFormat: \"RG32F\", type: \"FLOAT\" } |\r\n    { internalFormat: \"RG8UI\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"RG8I\", type: \"BYTE\" } |\r\n    { internalFormat: \"RG16UI\", type: \"UNSIGNED_SHORT\" } |\r\n    { internalFormat: \"RG16I\", type: \"SHORT\" } |\r\n    { internalFormat: \"RG32UI\", type: \"UNSIGNED_INT\" } |\r\n    { internalFormat: \"RG32I\", type: \"INT\" } |\r\n    { internalFormat: \"RGB8\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"SRGB8\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"RGB565\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_6_5\" } |\r\n    { internalFormat: \"RGB8_SNORM\", type: \"BYTE\" } |\r\n    { internalFormat: \"R11F_G11F_B10F\", type: \"UNSIGNED_INT_10F_11F_11F_REV\" | \"HALF_FLOAT\" | \"FLOAT\" } |\r\n    { internalFormat: \"RGB9_E5\", type: \"UNSIGNED_INT_5_9_9_9_REV\" | \"HALF_FLOAT\" | \"FLOAT\" } |\r\n    { internalFormat: \"RGB16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\r\n    { internalFormat: \"RGB32F\", type: \"FLOAT\" } |\r\n    { internalFormat: \"RGB8UI\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"RGB8I\", type: \"BYTE\" } |\r\n    { internalFormat: \"RGB16UI\", type: \"UNSIGNED_SHORT\" } |\r\n    { internalFormat: \"RGB16I\", type: \"SHORT\" } |\r\n    { internalFormat: \"RGB32UI\", type: \"UNSIGNED_INT\" } |\r\n    { internalFormat: \"RGB32I\", type: \"INT\" } |\r\n    { internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"SRGB8_ALPHA8\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"RGBA8_SNORM\", type: \"BYTE\" } |\r\n    { internalFormat: \"RGB5_A1\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_5_5_5_1\" | \"UNSIGNED_INT_2_10_10_10_REV\" } |\r\n    { internalFormat: \"RGBA4\", type: \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT_4_4_4_4\" } |\r\n    { internalFormat: \"RGB10_A2\", type: \"UNSIGNED_INT_2_10_10_10_REV\" } |\r\n    { internalFormat: \"RGBA16F\", type: \"HALF_FLOAT\" | \"FLOAT\" } |\r\n    { internalFormat: \"RGBA32F\", type: \"FLOAT\" } |\r\n    { internalFormat: \"RGBA8UI\", type: \"UNSIGNED_BYTE\" } |\r\n    { internalFormat: \"RGBA8I\", type: \"BYTE\" } |\r\n    { internalFormat: \"RGB10_A2UI\", type: \"UNSIGNED_INT_2_10_10_10_REV\" } |\r\n    { internalFormat: \"RGBA16UI\", type: \"UNSIGNED_SHORT\" } |\r\n    { internalFormat: \"RGBA16I\", type: \"SHORT\" } |\r\n    { internalFormat: \"RGBA32I\", type: \"INT\" } |\r\n    { internalFormat: \"RGBA32UI\", type: \"UNSIGNED_INT\" } |\r\n    { internalFormat: \"DEPTH_COMPONENT16\", type: \"UNSIGNED_SHORT\" } |\r\n    { internalFormat: \"DEPTH_COMPONENT24\", type: \"UNSIGNED_INT\" } |\r\n    { internalFormat: \"DEPTH_COMPONENT32F\", type: \"FLOAT\" } |\r\n    { internalFormat: \"DEPTH24_STENCIL8\", type: \"UNSIGNED_INT_24_8\" } |\r\n    { internalFormat: \"DEPTH32F_STENCIL8\", type: \"FLOAT_32_UNSIGNED_INT_24_8_REV\" }; // FLOAT_32_UNSIGNED_INT_24_8_REV is for reading z-buffer and can't be created from an image: https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage3D;\r\n\r\nexport type UncompressedTextureFormatString = UncompressedTextureFormatType[\"internalFormat\"];\r\nexport type TexelTypeString = UncompressedTextureFormatType[\"type\"];\r\n\r\nexport type CompressedTextureFormatString =\r\n    // WEBGL_compressed_texture_s3tc\r\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\" | \"COMPRESSED_RGBA_S3TC_DXT1_EXT\" | \"COMPRESSED_RGBA_S3TC_DXT3_EXT\" | \"COMPRESSED_RGBA_S3TC_DXT5_EXT\" |\r\n\r\n    // WEBGL_compressed_texture_s3tc_srgb    \r\n    \"COMPRESSED_SRGB_S3TC_DXT1_EXT\" | \"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\" | \"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\" | \"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\" |\r\n\r\n    // WEBGL_compressed_texture_etc\r\n    \"COMPRESSED_R11_EAC\" | \"COMPRESSED_SIGNED_R11_EAC\" | \"COMPRESSED_RG11_EAC\" | \"COMPRESSED_SIGNED_RG11_EAC\" | \"COMPRESSED_RGB8_ETC2\" | \"COMPRESSED_RGBA8_ETC2_EAC\" | \"COMPRESSED_SRGB8_ETC2\" | \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\" | \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\" | \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\" |\r\n\r\n    // WEBGL_compressed_texture_pvrtc\r\n    \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\" | \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\" | \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\" | \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\" |\r\n\r\n    // WEBGL_compressed_texture_etc1\r\n    \"COMPRESSED_RGB_ETC1_WEBGL\" |\r\n\r\n    // WEBGL_compressed_texture_astc    \r\n    \"COMPRESSED_RGBA_ASTC_4x4_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_5x4_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_5x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_6x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_6x6_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_8x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_8x6_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_8x8_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_10x5_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_10x6_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_10x10_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_12x10_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR\" |\r\n    \"COMPRESSED_RGBA_ASTC_12x12_KHR\" | \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR\" |\r\n\r\n    // EXT_texture_compression_bptc\r\n    \"COMPRESSED_RGBA_BPTC_UNORM_EXT\" | \"COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\" | \"COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT\" | \"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT\" |\r\n\r\n    // EXT_texture_compression_rgtc\r\n    \"COMPRESSED_RED_RGTC1_EXT\" | \"COMPRESSED_SIGNED_RED_RGTC1_EXT\" | \"COMPRESSED_RED_GREEN_RGTC2_EXT\" | \"COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT\";\r\n\r\nexport type Pow2 = 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32758 | 65536;\r\nexport type CubeImages = readonly [posX: BufferSource, negX: BufferSource, posY: BufferSource, negZ: BufferSource, posZ: BufferSource, negZ: BufferSource];\r\n\r\ntype Uncompressed = UncompressedTextureFormatType;\r\n\r\ninterface Compressed {\r\n    readonly internalFormat: CompressedTextureFormatString;\r\n}\r\n\r\ninterface GenMipMap {\r\n    readonly generateMipMaps?: boolean; //  default: false. Mip maps can only be created for textures with power of 2 sizes.\r\n}\r\n\r\ninterface Size2D<T extends number = number> {\r\n    readonly width: T;\r\n    readonly height: T;\r\n}\r\n\r\ninterface Size3D<T extends number = number> {\r\n    readonly width: T;\r\n    readonly height: T;\r\n    readonly depth: T;\r\n}\r\n\r\n// https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\nconst internalFormat2FormatLookup = {\r\n    [GL.RGB]: GL.RGB,\r\n    [GL.RGBA]: GL.RGBA,\r\n    [GL.LUMINANCE_ALPHA]: GL.LUMINANCE_ALPHA,\r\n    [GL.LUMINANCE]: GL.LUMINANCE,\r\n    [GL.ALPHA]: GL.ALPHA,\r\n    [GL.R8]: GL.RED,\r\n    [GL.R8_SNORM]: GL.RED,\r\n    [GL.RG8]: GL.RG,\r\n    [GL.RG8_SNORM]: GL.RG,\r\n    [GL.RGB8]: GL.RGB,\r\n    [GL.RGB8_SNORM]: GL.RGB,\r\n    [GL.RGB565]: GL.RGB,\r\n    [GL.RGBA4]: GL.RGBA,\r\n    [GL.RGB5_A1]: GL.RGBA,\r\n    [GL.RGBA8]: GL.RGBA,\r\n    [GL.RGBA8_SNORM]: GL.RGBA,\r\n    [GL.RGB10_A2]: GL.RGBA,\r\n    [GL.RGB10_A2UI]: GL.RGBA_INTEGER,\r\n    [GL.SRGB8]: GL.RGB,\r\n    [GL.SRGB8_ALPHA8]: GL.RGBA,\r\n    [GL.R16F]: GL.RED,\r\n    [GL.RG16F]: GL.RG,\r\n    [GL.RGB16F]: GL.RGB,\r\n    [GL.RGBA16F]: GL.RGBA,\r\n    [GL.R32F]: GL.RED,\r\n    [GL.RG32F]: GL.RG,\r\n    [GL.RGB32F]: GL.RGB,\r\n    [GL.RGBA32F]: GL.RGBA,\r\n    [GL.R11F_G11F_B10F]: GL.RGB,\r\n    [GL.RGB9_E5]: GL.RGB,\r\n    [GL.R8I]: GL.RED_INTEGER,\r\n    [GL.R8UI]: GL.RED_INTEGER,\r\n    [GL.R16I]: GL.RED_INTEGER,\r\n    [GL.R16UI]: GL.RED_INTEGER,\r\n    [GL.R32I]: GL.RED_INTEGER,\r\n    [GL.R32UI]: GL.RED_INTEGER,\r\n    [GL.RG8I]: GL.RG_INTEGER,\r\n    [GL.RG8UI]: GL.RG_INTEGER,\r\n    [GL.RG16I]: GL.RG_INTEGER,\r\n    [GL.RG16UI]: GL.RG_INTEGER,\r\n    [GL.RG32I]: GL.RG_INTEGER,\r\n    [GL.RG32UI]: GL.RG_INTEGER,\r\n    [GL.RGB8I]: GL.RGB_INTEGER,\r\n    [GL.RGB8UI]: GL.RGB_INTEGER,\r\n    [GL.RGB16I]: GL.RGB_INTEGER,\r\n    [GL.RGB16UI]: GL.RGB_INTEGER,\r\n    [GL.RGB32I]: GL.RGB_INTEGER,\r\n    [GL.RGB32UI]: GL.RGB_INTEGER,\r\n    [GL.RGBA8I]: GL.RGBA_INTEGER,\r\n    [GL.RGBA8UI]: GL.RGBA_INTEGER,\r\n    [GL.RGBA16I]: GL.RGBA_INTEGER,\r\n    [GL.RGBA16UI]: GL.RGBA_INTEGER,\r\n    [GL.RGBA32I]: GL.RGBA_INTEGER,\r\n    [GL.RGBA32UI]: GL.RGBA_INTEGER,\r\n    [GL.DEPTH_COMPONENT16]: GL.DEPTH_COMPONENT,\r\n    [GL.DEPTH_COMPONENT24]: GL.DEPTH_COMPONENT,\r\n    [GL.DEPTH_COMPONENT32F]: GL.DEPTH_COMPONENT,\r\n    [GL.DEPTH24_STENCIL8]: GL.DEPTH_STENCIL,\r\n    [GL.DEPTH32F_STENCIL8]: GL.DEPTH_STENCIL,\r\n} as const;\r\n\r\n// we could read these from extensions instead...\r\nconst compressedFormats = {\r\n    // WEBGL_compressed_texture_s3tc\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT: GL.COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: GL.COMPRESSED_RGBA_S3TC_DXT1_EXT,\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: GL.COMPRESSED_RGBA_S3TC_DXT3_EXT,\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: GL.COMPRESSED_RGBA_S3TC_DXT5_EXT,\r\n    // WEBGL_compressed_texture_s3tc_srgb\r\n    COMPRESSED_SRGB_S3TC_DXT1_EXT: GL.COMPRESSED_SRGB_S3TC_DXT1_EXT,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\r\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GL.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\r\n    // WEBGL_compressed_texture_etc\r\n    COMPRESSED_R11_EAC: GL.COMPRESSED_R11_EAC,\r\n    COMPRESSED_SIGNED_R11_EAC: GL.COMPRESSED_SIGNED_R11_EAC,\r\n    COMPRESSED_RG11_EAC: GL.COMPRESSED_RG11_EAC,\r\n    COMPRESSED_SIGNED_RG11_EAC: GL.COMPRESSED_SIGNED_RG11_EAC,\r\n    COMPRESSED_RGB8_ETC2: GL.COMPRESSED_RGB8_ETC2,\r\n    COMPRESSED_RGBA8_ETC2_EAC: GL.COMPRESSED_RGBA8_ETC2_EAC,\r\n    COMPRESSED_SRGB8_ETC2: GL.COMPRESSED_SRGB8_ETC2,\r\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\r\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\r\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\r\n    // WEBGL_compressed_texture_pvrtc\r\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG: GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\r\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\r\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG: GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG,\r\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG,\r\n    // WEBGL_compressed_texture_etc1    \r\n    COMPRESSED_RGB_ETC1_WEBGL: GL.COMPRESSED_RGB_ETC1_WEBGL,\r\n    // WEBGL_compressed_texture_astc    \r\n    COMPRESSED_RGBA_ASTC_4x4_KHR: GL.COMPRESSED_RGBA_ASTC_4x4_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\r\n    COMPRESSED_RGBA_ASTC_5x4_KHR: GL.COMPRESSED_RGBA_ASTC_5x4_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\r\n    COMPRESSED_RGBA_ASTC_5x5_KHR: GL.COMPRESSED_RGBA_ASTC_5x5_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\r\n    COMPRESSED_RGBA_ASTC_6x5_KHR: GL.COMPRESSED_RGBA_ASTC_6x5_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\r\n    COMPRESSED_RGBA_ASTC_6x6_KHR: GL.COMPRESSED_RGBA_ASTC_6x6_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\r\n    COMPRESSED_RGBA_ASTC_8x5_KHR: GL.COMPRESSED_RGBA_ASTC_8x5_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\r\n    COMPRESSED_RGBA_ASTC_8x6_KHR: GL.COMPRESSED_RGBA_ASTC_8x6_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\r\n    COMPRESSED_RGBA_ASTC_8x8_KHR: GL.COMPRESSED_RGBA_ASTC_8x8_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\r\n    COMPRESSED_RGBA_ASTC_10x5_KHR: GL.COMPRESSED_RGBA_ASTC_10x5_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\r\n    COMPRESSED_RGBA_ASTC_10x6_KHR: GL.COMPRESSED_RGBA_ASTC_10x6_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\r\n    COMPRESSED_RGBA_ASTC_10x10_KHR: GL.COMPRESSED_RGBA_ASTC_10x10_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\r\n    COMPRESSED_RGBA_ASTC_12x10_KHR: GL.COMPRESSED_RGBA_ASTC_12x10_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\r\n    COMPRESSED_RGBA_ASTC_12x12_KHR: GL.COMPRESSED_RGBA_ASTC_12x12_KHR,\r\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GL.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,\r\n    // EXT_texture_compression_bptc    \r\n    COMPRESSED_RGBA_BPTC_UNORM_EXT: GL.COMPRESSED_RGBA_BPTC_UNORM_EXT,\r\n    COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: GL.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,\r\n    COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: GL.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\r\n    COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: GL.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\r\n    // EXT_texture_compression_rgtc    \r\n    COMPRESSED_RED_RGTC1_EXT: GL.COMPRESSED_RED_RGTC1_EXT,\r\n    COMPRESSED_SIGNED_RED_RGTC1_EXT: GL.COMPRESSED_SIGNED_RED_RGTC1_EXT,\r\n    COMPRESSED_RED_GREEN_RGTC2_EXT: GL.COMPRESSED_RED_GREEN_RGTC2_EXT,\r\n    COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: GL.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,\r\n} as const;\r\n", "import { type EXT_disjoint_timer_query_webgl2_ext, glExtensions } from \"./extensions\";\r\n\r\nexport function glCreateTimer(gl: WebGL2RenderingContext, cpuFallback = false): Timer {\r\n    const { disjointTimerQuery } = glExtensions(gl);\r\n    if (disjointTimerQuery) {\r\n        // Clear the disjoint state before starting to work with queries to increase the chances that the results will be valid.\r\n        gl.getParameter(disjointTimerQuery.GPU_DISJOINT_EXT);\r\n        const useTimestamps = gl.getQuery(disjointTimerQuery.TIMESTAMP_EXT, disjointTimerQuery.QUERY_COUNTER_BITS_EXT) ?? 0 > 0;\r\n        if (useTimestamps)\r\n            return new GPUTimerTS(gl, disjointTimerQuery);\r\n        else\r\n            return new GPUTimer(gl, disjointTimerQuery);\r\n    } else {\r\n        if (cpuFallback) {\r\n            return new CPUTimer(gl);\r\n        } else {\r\n            return new NullTimer(gl);\r\n        }\r\n    }\r\n}\r\n\r\nexport type Timer = NullTimer | CPUTimer | GPUTimer | GPUTimerTS;\r\n\r\nclass NullTimer {\r\n    readonly kind = \"null\";\r\n    readonly promise: Promise<number | undefined>;\r\n    readonly creationTime;\r\n\r\n    constructor(readonly gl: WebGL2RenderingContext) {\r\n        this.creationTime = performance.now();\r\n        this.promise = Promise.resolve(undefined);\r\n    }\r\n\r\n    dispose() { }\r\n    begin() { }\r\n    end() { }\r\n    poll() {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass CPUTimer {\r\n    readonly kind = \"cpu\";\r\n    readonly promise: Promise<number | undefined>;\r\n    readonly creationTime;\r\n    private beginTime = 0;\r\n    private endTime = 0;\r\n    private resolve: ((value: number | PromiseLike<number> | undefined) => void) | undefined;\r\n\r\n    constructor(readonly gl: WebGL2RenderingContext) {\r\n        this.creationTime = performance.now();\r\n        this.promise = new Promise<number | undefined>(resolve => { this.resolve = resolve; });\r\n    }\r\n\r\n    dispose() {\r\n        this.resolve?.(undefined);\r\n        this.resolve = undefined;\r\n    }\r\n\r\n    begin() {\r\n        this.gl.getError(); // flush gpu pipeline\r\n        this.beginTime = performance.now();\r\n    }\r\n\r\n    end() {\r\n        this.gl.getError(); // flush gpu pipeline\r\n        this.endTime = performance.now();\r\n    }\r\n\r\n    poll() {\r\n        this.resolve?.(this.endTime - this.beginTime) // in milliseconds \r\n        this.resolve = undefined;\r\n        return true;\r\n    }\r\n}\r\n\r\nclass GPUTimer {\r\n    readonly kind = \"gpu_time_elapsed\";\r\n    readonly promise: Promise<number | undefined>;\r\n    readonly creationTime;\r\n    private readonly query;\r\n    private resolve: ((value: number | PromiseLike<number> | undefined) => void) | undefined;\r\n\r\n    constructor(readonly gl: WebGL2RenderingContext, readonly ext: EXT_disjoint_timer_query_webgl2_ext) {\r\n        this.creationTime = performance.now();\r\n        this.query = gl.createQuery()!;\r\n        this.promise = new Promise<number | undefined>(resolve => { this.resolve = resolve; });\r\n    }\r\n\r\n    dispose() {\r\n        const { gl, query, resolve } = this;\r\n        gl.deleteQuery(query);\r\n        resolve?.(undefined);\r\n        this.resolve = undefined;\r\n    }\r\n\r\n    begin() {\r\n        const { gl, ext, query } = this;\r\n        gl.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n    }\r\n\r\n    end() {\r\n        const { gl, ext } = this;\r\n        gl.endQuery(ext.TIME_ELAPSED_EXT);\r\n    }\r\n\r\n    poll() {\r\n        const { gl, ext, query, resolve } = this;\r\n        let disjoint = gl.getParameter(ext.GPU_DISJOINT_EXT);\r\n        if (!disjoint) {\r\n            const available = gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE);\r\n            if (available) {\r\n                const timeElapsed = gl.getQueryParameter(query, gl.QUERY_RESULT) as number; // in nanoseconds\r\n                resolve?.(timeElapsed / 1000000); // in milliseconds\r\n                this.resolve = undefined;\r\n                return true;\r\n            }\r\n        }\r\n        if (performance.now() > this.creationTime + 1000) {\r\n            resolve?.(undefined);\r\n            this.resolve = undefined;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nclass GPUTimerTS {\r\n    readonly kind = \"gpu_timestamp\";\r\n    readonly promise: Promise<number | undefined>;\r\n    readonly creationTime;\r\n    private readonly startQuery;\r\n    private readonly endQuery;\r\n    private resolve: ((value: number | PromiseLike<number> | undefined) => void) | undefined;\r\n\r\n    constructor(readonly gl: WebGL2RenderingContext, readonly ext: EXT_disjoint_timer_query_webgl2_ext) {\r\n        this.creationTime = performance.now();\r\n        this.startQuery = gl.createQuery()!;\r\n        this.endQuery = gl.createQuery()!;\r\n        this.promise = new Promise<number | undefined>((resolve, reject) => { this.resolve = resolve; });\r\n    }\r\n\r\n    dispose() {\r\n        const { gl, startQuery, endQuery, resolve } = this;\r\n        gl.deleteQuery(startQuery);\r\n        gl.deleteQuery(endQuery);\r\n        resolve?.(undefined);\r\n        this.resolve = undefined;\r\n    }\r\n\r\n    begin() {\r\n        const { ext, startQuery } = this;\r\n        ext.queryCounterEXT(startQuery, ext.TIMESTAMP_EXT);\r\n    }\r\n\r\n    end() {\r\n        const { ext, endQuery } = this;\r\n        ext.queryCounterEXT(endQuery, ext.TIMESTAMP_EXT);\r\n    }\r\n\r\n    poll() {\r\n        const { gl, ext, startQuery, endQuery, resolve } = this;\r\n        let disjoint = gl.getParameter(ext.GPU_DISJOINT_EXT);\r\n        if (!disjoint) {\r\n            const available = gl.getQueryParameter(endQuery, gl.QUERY_RESULT_AVAILABLE);\r\n            if (available) {\r\n                const timeStart = gl.getQueryParameter(startQuery, gl.QUERY_RESULT);\r\n                const timeEnd = gl.getQueryParameter(endQuery, gl.QUERY_RESULT);\r\n                const timeElapsed = timeEnd - timeStart; // in nanoseconds\r\n                resolve?.(timeElapsed / 1000000); // in milliseconds\r\n                this.resolve = undefined;\r\n                return true;\r\n            }\r\n        }\r\n        if (performance.now() > this.creationTime + 1000) {\r\n            resolve?.(undefined);\r\n            this.resolve = undefined;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "export function glTransformFeedback(gl: WebGL2RenderingContext, params: TransformFeedbackParams) {\r\n    const { kind, transformFeedback, outputBuffers, count, first } = params;\r\n    const mode = gl[kind];\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedback);\r\n    for (let i = 0; i < outputBuffers.length; i++) {\r\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, outputBuffers[i]);\r\n    }\r\n    gl.beginTransformFeedback(mode);\r\n    gl.enable(gl.RASTERIZER_DISCARD);\r\n    gl.drawArrays(mode, first ?? 0, count);\r\n    gl.disable(gl.RASTERIZER_DISCARD);\r\n    gl.endTransformFeedback();\r\n    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n    for (let i = 0; i < outputBuffers.length; i++) {\r\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i, null);\r\n    }\r\n}\r\n\r\nexport type TransformFeedbackPrimitiveMode = \"POINTS\" | \"LINES\" | \"TRIANGLES\";\r\n\r\nexport interface TransformFeedbackParams {\r\n    readonly kind: TransformFeedbackPrimitiveMode;\r\n    readonly count: number;\r\n    readonly first?: number; // default: 0\r\n    readonly transformFeedback: WebGLTransformFeedback\r\n    readonly outputBuffers: readonly WebGLBuffer[];\r\n}\r\n", "import { glCreateBuffer } from \"./buffer\";\r\nimport { GL } from \"./constants\";\r\n\r\nexport function glGetUniformsInfo(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n    const numUniforms = gl.getProgramParameter(program, GL.ACTIVE_UNIFORMS);\r\n    const uniformData: any[] = [];\r\n    const uniformIndices: number[] = [];\r\n\r\n    for (let i = 0; i < numUniforms; ++i) {\r\n        uniformIndices.push(i);\r\n        uniformData.push({});\r\n        const uniformInfo = gl.getActiveUniform(program, i)!;\r\n        uniformData[i].name = uniformInfo.name;\r\n    }\r\n\r\n    function getInfo(pname: number, key: string) {\r\n        gl.getActiveUniforms(program, uniformIndices, pname).forEach(function (value: string, idx: number) {\r\n            uniformData[idx][key] = value;\r\n        });\r\n    }\r\n    getInfo(GL.UNIFORM_TYPE, \"type\");\r\n    getInfo(GL.UNIFORM_SIZE, \"size\");\r\n    getInfo(GL.UNIFORM_BLOCK_INDEX, \"blockIndex\");\r\n    getInfo(GL.UNIFORM_OFFSET, \"offset\");\r\n    return uniformData as readonly UniformInfo[];\r\n}\r\n\r\nexport function glGetUniformBlocks(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n    const numBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\r\n    const names: (string | null)[] = [];\r\n    for (let i = 0; i < numBlocks; i++) {\r\n        names[i] = gl.getActiveUniformBlockName(program, i);\r\n    }\r\n    return names;\r\n}\r\n\r\nexport type UniformType =\r\n    GL.FLOAT | GL.FLOAT_VEC2 | GL.FLOAT_VEC3 | GL.FLOAT_VEC4 |\r\n    GL.INT | GL.INT_VEC2 | GL.INT_VEC3 | GL.INT_VEC4 |\r\n    GL.UNSIGNED_INT | GL.UNSIGNED_INT_VEC2 | GL.UNSIGNED_INT_VEC3 | GL.UNSIGNED_INT_VEC4 |\r\n    GL.BOOL | GL.BOOL_VEC2 | GL.BOOL_VEC3 | GL.BOOL_VEC4 |\r\n    GL.FLOAT_MAT2 | GL.FLOAT_MAT3 | GL.FLOAT_MAT4 |\r\n    GL.FLOAT_MAT2x3 | GL.FLOAT_MAT2x4 | GL.FLOAT_MAT3x2 | GL.FLOAT_MAT3x4 | GL.FLOAT_MAT4x2 | GL.FLOAT_MAT4x3 |\r\n    GL.SAMPLER_2D | GL.SAMPLER_2D_ARRAY | GL.SAMPLER_2D_ARRAY_SHADOW | GL.SAMPLER_2D_ARRAY_SHADOW | GL.SAMPLER_3D | GL.SAMPLER_CUBE | GL.SAMPLER_CUBE_SHADOW;\r\n\r\nexport interface UniformInfo {\r\n    readonly name: string;\r\n    readonly type: UniformType;\r\n    readonly size: number; // num elements\r\n    readonly blockIndex: number; // -1 if not in block\r\n    readonly offset: number; // -1 if not in block\r\n}\r\n\r\nexport function glUniformLocations<const T extends readonly string[]>(gl: WebGL2RenderingContext, program: WebGLProgram, names: T, prefix?: string) {\r\n    const locations: any = {};\r\n    for (const name of names) {\r\n        locations[name] = gl.getUniformLocation(program, `${prefix ?? \"\"}${name}`);\r\n    }\r\n    return locations as Record<T[number], WebGLUniformLocation | null>;\r\n}\r\n\r\n// apply std140 layout rules (https://registry.khronos.org/OpenGL/specs/gl/glspec45.core.pdf#page=159)\r\nexport function glUBOProxy<const T extends Record<string, UniformTypes>>(values: T) {\r\n    type Keys = Extract<keyof T, string>;\r\n    const offsetsMap: Record<string, readonly number[]> = {};\r\n    let offset = 0;\r\n    for (const [key, value] of Object.entries(values)) {\r\n        const { alignment, components, rows } = uniformTypes[value];\r\n        const padding = (alignment - 1) - ((offset + alignment - 1) % alignment);\r\n        offset += padding;\r\n        const offsets: number[] = [];\r\n        for (let row = 0; row < rows; row++) {\r\n            for (let component = 0; component < components; component++) {\r\n                offsets.push(offset++);\r\n            }\r\n            if (rows > 1) {\r\n                offset = (offset + 3) & ~3; // align to the next vec4, regardless of component size\r\n            }\r\n        }\r\n        offsetsMap[key] = offsets;\r\n    }\r\n    const byteSize = ((offset + 3) & ~3) * 4;\r\n\r\n    const buffer = new ArrayBuffer(byteSize);\r\n    const views = {\r\n        i32: new Int32Array(buffer),\r\n        u32: new Uint32Array(buffer),\r\n        f32: new Float32Array(buffer),\r\n    };\r\n    const validators = {\r\n        i32: (value: number) => {\r\n            if (!Number.isInteger(value)) {\r\n                throw new Error(\"Uniform value not an integer!\");\r\n            }\r\n        },\r\n        u32: (value: number) => {\r\n            if (value < 0 || !Number.isInteger(value)) {\r\n                throw new Error(\"Uniform value not an unsigned integer!\");\r\n            }\r\n        },\r\n        f32: (value: number) => { },\r\n    };\r\n\r\n    const dirtyRange = new DirtyRange(byteSize);\r\n\r\n    const proxy = {\r\n        buffer,\r\n        dirtyRange,\r\n        values: {} as { [P in Keys]: T[P] extends \"bool\" ? boolean : T[P] extends \"int\" | \"uint\" | \"float\" ? number : ArrayLike<number> },\r\n    } as const;\r\n\r\n    for (const [key, value] of Object.entries(values)) {\r\n        const componentType = uniformTypes[value].type;\r\n        const view = views[componentType];\r\n        const validate = validators[componentType];\r\n        const offsets = offsetsMap[key];\r\n        const begin = offsets[0] * 4;\r\n        const end = offsets[offsets.length - 1] * 4 + 4;\r\n        const type = values[key];\r\n        const get =\r\n            type == \"bool\" ? () => {\r\n                return view[offsets[0]] != 0;\r\n            } : type == \"int\" || type == \"uint\" || type == \"float\" ? () => {\r\n                return view[offsets[0]];\r\n            } : () => {\r\n                return offsets.map(o => view[o]);\r\n            };\r\n\r\n        const set =\r\n            type == \"bool\" ? (value: boolean) => {\r\n                view[offsets[0]] = value ? -1 : 0;\r\n                dirtyRange.expand(begin, end);\r\n            } : type == \"int\" || type == \"uint\" || type == \"float\" ? (value: number) => {\r\n                validate(value);\r\n                view[offsets[0]] = value;\r\n                dirtyRange.expand(begin, end);\r\n            } : (values: ArrayLike<number>) => {\r\n                console.assert(values.length == offsets.length);\r\n                for (let i = 0; i < values.length; i++) {\r\n                    validate(values[i]);\r\n                    view[offsets[i]] = values[i];\r\n                }\r\n                dirtyRange.expand(begin, end);\r\n            };\r\n\r\n        Reflect.defineProperty(proxy.values, key, {\r\n            configurable: false,\r\n            enumerable: true,\r\n            get,\r\n            set,\r\n        });\r\n    }\r\n\r\n    return proxy;\r\n}\r\n\r\nclass DirtyRange {\r\n    begin: number;\r\n    end: number;\r\n\r\n    constructor(readonly size: number) {\r\n        this.begin = 0;\r\n        this.end = size;\r\n    }\r\n\r\n    get isEmpty() {\r\n        return this.begin >= this.end;\r\n    }\r\n\r\n    clear() {\r\n        this.begin = this.size;\r\n        this.end = 0;\r\n    }\r\n\r\n    reset() {\r\n        this.begin = 0;\r\n        this.end = this.size;\r\n    }\r\n\r\n    expand(begin: number, end: number) {\r\n        if (this.begin > begin) {\r\n            this.begin = begin;\r\n        }\r\n        if (this.end < end) {\r\n            this.end = end;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface UniformsProxy {\r\n    readonly buffer: ArrayBuffer;\r\n    readonly dirtyRange: DirtyRange;\r\n    readonly values: { [index: string]: boolean | number | ArrayLike<number> };\r\n}\r\n\r\nconst uniformTypes = {\r\n    bool: { type: \"i32\", alignment: 1, components: 1, rows: 1 },\r\n    int: { type: \"i32\", alignment: 1, components: 1, rows: 1 },\r\n    uint: { type: \"u32\", alignment: 1, components: 1, rows: 1 },\r\n    float: { type: \"f32\", alignment: 1, components: 1, rows: 1 },\r\n\r\n    ivec2: { type: \"i32\", alignment: 2, components: 2, rows: 1 },\r\n    uvec2: { type: \"u32\", alignment: 2, components: 2, rows: 1 },\r\n    vec2: { type: \"f32\", alignment: 2, components: 2, rows: 1 },\r\n\r\n    ivec3: { type: \"i32\", alignment: 4, components: 3, rows: 1 },\r\n    uvec3: { type: \"u32\", alignment: 4, components: 3, rows: 1 },\r\n    vec3: { type: \"f32\", alignment: 4, components: 3, rows: 1 },\r\n\r\n    ivec4: { type: \"i32\", alignment: 4, components: 3, rows: 1 },\r\n    uvec4: { type: \"u32\", alignment: 4, components: 3, rows: 1 },\r\n    vec4: { type: \"f32\", alignment: 4, components: 4, rows: 1 },\r\n\r\n    mat3: { type: \"f32\", alignment: 4, components: 3, rows: 3 },\r\n    mat4: { type: \"f32\", alignment: 4, components: 4, rows: 4 },\r\n} as const;\r\n\r\nexport type UniformTypes = keyof typeof uniformTypes;\r\n", "import { glLimits } from \"./limits\";\r\n\r\nexport function glCreateVertexArray(gl: WebGL2RenderingContext, params: VertexArrayParams): WebGLVertexArrayObject {\r\n    const vao = gl.createVertexArray()!;\r\n    const { MAX_VERTEX_ATTRIBS } = glLimits(gl);\r\n    gl.bindVertexArray(vao);\r\n    const { attributes } = params;\r\n    for (let i = 0; i < MAX_VERTEX_ATTRIBS; i++) {\r\n        const attribParams = attributes[i];\r\n        if (attribParams) {\r\n            const { size, isInteger, defaultComponentType } = shaderTypeInfo[attribParams.kind];\r\n            const componentType = attribParams.componentType ?? defaultComponentType;\r\n            const divisor = attribParams.divisor ?? 0;\r\n            const byteStride = attribParams.byteStride ?? 0;\r\n            const byteOffset = attribParams.byteOffset ?? 0;\r\n            const componentCount = attribParams.componentCount ?? (isMatrix(size) ? size[0] : size);\r\n            const normalized = attribParams.normalized ?? false;\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, attribParams.buffer);\r\n            gl.enableVertexAttribArray(i);\r\n            if (isInteger) {\r\n                gl.vertexAttribIPointer(i, componentCount, gl[componentType], byteStride, byteOffset);\r\n            } else {\r\n                gl.vertexAttribPointer(i, componentCount, gl[componentType], normalized, byteStride, byteOffset);\r\n            }\r\n            gl.vertexAttribDivisor(i, divisor);\r\n        } else {\r\n            gl.disableVertexAttribArray(i);\r\n        }\r\n    };\r\n    if (params.indices) {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, params.indices);\r\n    }\r\n    gl.bindVertexArray(null);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    return vao;\r\n}\r\n\r\nexport interface VertexArrayParams {\r\n    readonly attributes: readonly (VertexAttribute | null)[];\r\n    readonly indices?: WebGLBuffer;\r\n}\r\n\r\nexport type VertexAttribute = VertexAttributeFloat | VertexAttributeFloatNormalized | VertexAttributeInt | VertexAttributeUint;\r\n\r\nexport type ComponentTypeFloat = \"HALF_FLOAT\" | \"FLOAT\";\r\nexport type ComponentTypeInt = \"BYTE\" | \"SHORT\" | \"INT\";\r\nexport type ComponentTypeUint = \"UNSIGNED_BYTE\" | \"UNSIGNED_SHORT\" | \"UNSIGNED_INT\";\r\nexport type ComponentType = ComponentTypeFloat | ComponentTypeInt | ComponentTypeUint;\r\nexport type ShaderTypeFloat = \"FLOAT\" | \"FLOAT_VEC2\" | \"FLOAT_VEC3\" | \"FLOAT_VEC4\" |\r\n    // we allow matrix types as a convenience because gl.getActiveAttrib() could return such a type from a shader program.\r\n    // each matrix row still has to be bound separately when defining attributes.\r\n    \"FLOAT_MAT2\" | \"FLOAT_MAT3\" | \"FLOAT_MAT4\" | \"FLOAT_MAT2x3\" | \"FLOAT_MAT2x4\" | \"FLOAT_MAT3x2\" | \"FLOAT_MAT3x4\" | \"FLOAT_MAT4x2\" | \"FLOAT_MAT4x3\";\r\nexport type ShaderTypeInt = \"INT\" | \"INT_VEC2\" | \"INT_VEC3\" | \"INT_VEC4\";\r\nexport type ShaderTypeUint = \"UNSIGNED_INT\" | \"UNSIGNED_INT_VEC2\" | \"UNSIGNED_INT_VEC3\" | \"UNSIGNED_INT_VEC4\";\r\nexport type ShaderAttributeType = ShaderTypeFloat | ShaderTypeInt | ShaderTypeUint;\r\n\r\ninterface VertexAttributeCommon {\r\n    readonly buffer: WebGLBuffer;\r\n    readonly componentCount?: 1 | 2 | 3 | 4; // default: same as shader type\r\n    readonly byteStride?: number; // default: 0\r\n    readonly byteOffset?: number; // default: 0\r\n    readonly divisor?: number; // default: 0\r\n}\r\n\r\nexport interface VertexAttributeFloat extends VertexAttributeCommon {\r\n    readonly kind: ShaderTypeFloat;\r\n    readonly componentType?: ComponentType; // default: FLOAT\r\n    readonly normalized?: false;\r\n}\r\n\r\nexport interface VertexAttributeFloatNormalized extends VertexAttributeCommon {\r\n    readonly kind: ShaderTypeFloat;\r\n    readonly componentType?: ComponentTypeInt | ComponentTypeUint; // default: FLOAT\r\n    readonly normalized: true;\r\n}\r\n\r\nexport interface VertexAttributeInt extends VertexAttributeCommon {\r\n    readonly kind: ShaderTypeInt;\r\n    readonly componentType?: ComponentTypeInt; // default: INT\r\n    readonly normalized?: undefined;\r\n}\r\n\r\n/** @internal */\r\nexport interface VertexAttributeUint extends VertexAttributeCommon {\r\n    readonly kind: ShaderTypeUint;\r\n    readonly componentType?: ComponentTypeUint; // default: UNSIGNED_INT\r\n    readonly normalized?: undefined;\r\n}\r\n\r\ntype MatrixDim = 2 | 3 | 4;\r\n\r\nfunction isMatrix(size: unknown): size is readonly [MatrixDim, MatrixDim] {\r\n    return Array.isArray(size);\r\n}\r\n\r\nconst shaderTypeInfo = {\r\n    \"INT\": { size: 1, isInteger: true, defaultComponentType: \"INT\" },\r\n    \"INT_VEC2\": { size: 2, isInteger: true, defaultComponentType: \"INT\" },\r\n    \"INT_VEC3\": { size: 3, isInteger: true, defaultComponentType: \"INT\" },\r\n    \"INT_VEC4\": { size: 4, isInteger: true, defaultComponentType: \"INT\" },\r\n    \"UNSIGNED_INT\": { size: 1, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\r\n    \"UNSIGNED_INT_VEC2\": { size: 2, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\r\n    \"UNSIGNED_INT_VEC3\": { size: 3, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\r\n    \"UNSIGNED_INT_VEC4\": { size: 4, isInteger: true, defaultComponentType: \"UNSIGNED_INT\" },\r\n    \"FLOAT\": { size: 1, isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_VEC2\": { size: 2, isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_VEC3\": { size: 3, isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_VEC4\": { size: 4, isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT2\": { size: [2, 2], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT3\": { size: [3, 3], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT4\": { size: [4, 4], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT2x3\": { size: [2, 3], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT2x4\": { size: [2, 4], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT3x2\": { size: [3, 2], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT3x4\": { size: [3, 4], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT4x2\": { size: [4, 2], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n    \"FLOAT_MAT4x3\": { size: [4, 3], isInteger: false, defaultComponentType: \"FLOAT\" },\r\n} as const;\r\n", "import { type RenderState, TonemappingMode } from \".\";\r\n\r\n/** Create a default render state. */\r\nexport function defaultRenderState(): RenderState {\r\n    const state: RenderState = {\r\n        output: {\r\n            width: 512,\r\n            height: 256,\r\n            samplesMSAA: 1,\r\n        },\r\n        background: {\r\n        },\r\n        camera: {\r\n            kind: \"pinhole\",\r\n            position: [0, 0, 0],\r\n            rotation: [0, 0, 0, 1],\r\n            pivot: undefined,\r\n            fov: 45,\r\n            near: 0.1,\r\n            far: 10000,\r\n        },\r\n        quality: {\r\n            detail: 1,\r\n        },\r\n        debug: {\r\n            showNodeBounds: false,\r\n        },\r\n        grid: {\r\n            enabled: false,\r\n            color1: [.5, .5, .5],\r\n            color2: [1, 1, 1],\r\n            origin: [0, 0, 0],\r\n            axisX: [1, 0, 0],\r\n            axisY: [0, 0, 1],\r\n            size1: 1,\r\n            size2: 10,\r\n            distance: 500,\r\n        },\r\n        cube: {\r\n            enabled: false,\r\n            position: [0, 0, 0],\r\n            scale: 1,\r\n        },\r\n        scene: undefined,\r\n        terrain: {\r\n            elevationGradient: {\r\n                knots: [\r\n                    { position: -10, color: [0, 0, 0.5] },\r\n                    { position: 0, color: [0.5, 0.5, 1] },\r\n                    { position: 0, color: [0, 0.5, 0] },\r\n                    { position: 10, color: [0.5, 1, 0.5] },\r\n                ],\r\n            },\r\n            asBackground: false,\r\n        },\r\n        dynamic: {\r\n            objects: [],\r\n        },\r\n        clipping: {\r\n            enabled: false,\r\n            draw: false,\r\n            mode: 0,\r\n            planes: [],\r\n        },\r\n        highlights: {\r\n            defaultAction: undefined,\r\n            groups: [],\r\n        },\r\n        outlines: {\r\n            on: false,\r\n            enabled: false,\r\n            color: [10, 10, 10], // bright white (overexposed)\r\n            plane: [0, 0, 1, 0],\r\n        },\r\n        tonemapping: {\r\n            exposure: 0,\r\n            mode: TonemappingMode.color,\r\n        },\r\n        points: {\r\n            size: {\r\n                pixel: 1,\r\n                maxPixel: undefined,\r\n                metric: 0,\r\n                toleranceFactor: 0,\r\n            },\r\n            deviation: {\r\n                index: 0,\r\n                mixFactor: 0,\r\n                colorGradient: {\r\n                    knots: [\r\n                        { position: -1, color: [1, 0, 0, 1] },\r\n                        { position: -0.5, color: [1, 1, 0, 1] },\r\n                        { position: -0.25, color: [0, 1, 0, 1] },\r\n                        { position: 0.25, color: [0, 1, 0, 1] },\r\n                        { position: 0.5, color: [1, 1, 0, 1] },\r\n                        { position: 1, color: [0, 1, 0, 1] },\r\n                    ],\r\n                }\r\n            },\r\n            useProjectedPosition: false\r\n        },\r\n        toonOutline: {\r\n            on: false,\r\n            enabled: false,\r\n            color: [0, 0, 0],\r\n        },\r\n        pick: {\r\n            opacityThreshold: 1,\r\n        },\r\n    };\r\n    return state;\r\n}\r\n", "\r\nimport type { RenderState, RenderStateChanges } from \".\";\r\n\r\n/**\r\n * Create a new copy of render state with specified modifications.\r\n * @param state The baseline render state.\r\n * @param changes The changes to apply to the baseline state.\r\n * @returns A new render state with all the changes applied.\r\n * @remarks\r\n * This function helps you modify render state in an immutable fashion,\r\n * which is key for correct and efficient render updates.\r\n * More specifically, it leaves all the unchanged sub objects of the returned render state alone.\r\n * This enables checking for changes using {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality | strict equality}.\r\n * Making unnecessary copies of unchanged sub objects will reduce render/update performance.\r\n * \r\n * This function also performs some basic validation of the new state changes, at a slight performance cost.\r\n * If validation fails, it will throw an error of `Error` objects, one per problem.\r\n * To mitigate this overhead, accumulating all the changes for a frame into a single object may be beneficial.\r\n * The {@link mergeRecursive} function may be useful in for this.\r\n * @category Render State\r\n */\r\nexport function modifyRenderState(state: RenderState, changes: RenderStateChanges): RenderState {\r\n    const newState = mergeRecursive(state, changes) as RenderState;\r\n    return newState;\r\n}\r\n\r\n/**\r\n * Utility function for merging the properties of two objects recursively\r\n * @param original Original, baseline object.\r\n * @param changes Changes to be applied to baseline object.\r\n * @returns A clone of the original with all the changes applied.\r\n * @remarks\r\n * This function is similar to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign | Object.assign}, only recursive.\r\n */\r\nexport function mergeRecursive(original: any, changes: any) {\r\n    const clone = { ...original };\r\n    for (const key in changes) {\r\n        const originalValue = original ? original[key] : undefined;\r\n        const changedValue = changes[key];\r\n        if (changedValue != undefined && typeof changedValue == \"object\" && !Array.isArray(changedValue) && !ArrayBuffer.isView(changedValue) && !(changedValue instanceof Set)) {\r\n            clone[key] = mergeRecursive(originalValue, changedValue);\r\n        } else {\r\n            clone[key] = changedValue;\r\n        }\r\n    }\r\n    return clone;\r\n}\r\n", "import { vec3, type ReadonlyVec3, type ReadonlyVec4 } from \"gl-matrix\";\r\nimport type { RGB, RenderState, RenderStateBackground, RenderStateCamera, RenderStateChanges, RenderStateClipping, RenderStateColorGradient, RenderStateDynamicObjects, RenderStateGrid, RenderStateHighlightGroups, RenderStateOutlines, RenderStateOutput, RenderStatePick, RenderStatePointCloud, RenderStateQuality, RenderStateScene, RenderStateTerrain, RenderStateTonemapping, RenderStateToonOutline } from \".\";\r\nimport type { RGBA } from \"webgl2\";\r\n\r\n/**\r\n * Validate render state changes.\r\n * @param newState The new render state to validate.\r\n * @param changes The changes that was applied to the baseline state to produce this state.\r\n * @returns Array of validation errors, if any.\r\n * @remarks\r\n * This function performs some basic validation of the state changes, focusing on value ranges and states that would generate run-time exceptions.\r\n * @category Render State\r\n */\r\nexport function validateRenderState(newState: RenderState, changes: RenderStateChanges): readonly Error[] {\r\n    const validate = new ValidationContext();\r\n    if (changes.background) {\r\n        validate.background(newState.background);\r\n    }\r\n    if (changes.camera) {\r\n        validate.camera(newState.camera);\r\n    }\r\n    if (changes.clipping) {\r\n        validate.clipping(newState.clipping);\r\n    }\r\n    if (changes.dynamic) {\r\n        validate.dynamic(newState.dynamic);\r\n    }\r\n    if (changes.grid) {\r\n        validate.grid(newState.grid);\r\n    }\r\n    if (changes.highlights) {\r\n        validate.highlights(newState.highlights);\r\n    }\r\n    if (changes.output) {\r\n        validate.output(newState.output);\r\n    }\r\n    if (changes.pick) {\r\n        validate.pick(newState.pick);\r\n    }\r\n    if (changes.points) {\r\n        validate.points(newState.points);\r\n    }\r\n    if (changes.quality) {\r\n        validate.quality(newState.quality);\r\n    }\r\n    if (changes.scene && newState.scene) {\r\n        validate.scene(newState.scene);\r\n    }\r\n    if (changes.terrain) {\r\n        validate.terrain(newState.terrain);\r\n    }\r\n    if (changes.toonOutline) {\r\n        validate.toonOutline(newState.toonOutline);\r\n    }\r\n    if (changes.tonemapping) {\r\n        validate.tonemapping(newState.tonemapping);\r\n    }\r\n    return validate.errors;\r\n}\r\n\r\nclass ValidationContext {\r\n    readonly errors: Error[] = [];\r\n\r\n    background(state: RenderStateBackground) {\r\n        const { blur, url } = state;\r\n        if (blur != undefined) {\r\n            this.numeric(blur).rangeInclusive(0, 1).report(\"background.blur\");\r\n        }\r\n        if (url != undefined) {\r\n            this.url(url).valid().report(\"background.url\");\r\n        }\r\n    }\r\n\r\n    camera(state: RenderStateCamera) {\r\n        const { fov, near, far } = state;\r\n        // TODO: verify rotation quaternion?\r\n        this.numeric(fov).rangeExclusive(0, 180).report(\"camera.fov\");\r\n        this.numeric(near).positive().report(\"camera.near\");\r\n        this.numeric(far).min(near, \"camera.near\").report(\"camera.far\");\r\n    }\r\n\r\n    clipping(state: RenderStateClipping) {\r\n        const { planes } = state;\r\n        this.numeric(planes.length).max(6).report(\"clipping.planes.length\");\r\n        for (let i = 0; i < planes.length; i++) {\r\n            const plane = planes[i];\r\n            this.plane(plane.normalOffset).valid().hasErrors()?.report(`clipping.planes[${i}].normalOffset`);\r\n        }\r\n    }\r\n\r\n    dynamic(state: RenderStateDynamicObjects) {\r\n        const { objects } = state;\r\n        for (let i = 0; i < objects.length; i++) {\r\n            const obj = objects[i];\r\n            if (obj.baseObjectId != undefined) {\r\n                this.numeric(obj.baseObjectId).integer().min(0xf000_0000).lessThan(0xffff_fff0).hasErrors()?.report(`dynamic.objects[${i}].baseObjectId`);\r\n            }\r\n            const { primitives } = obj.mesh;\r\n            for (let j = 0; j < primitives.length; j++) {\r\n                const primitive = primitives[j];\r\n                const primitivePath = (name: string) => `dynamic.objects[${i}].mesh.primitives[${j}].${name}`; // we don't want to execute this unless there is an error, hence the .hasError() predicate.\r\n                const { material, geometry } = primitive;\r\n                if (material.kind == \"ggx\") {\r\n                    const metallicFactor = material.metallicFactor ?? 1;\r\n                    const roughnessFactor = material.roughnessFactor ?? 1;\r\n                    this.numeric(metallicFactor).rangeInclusive(0, 1).hasErrors()?.report(primitivePath(\"material.metallicFactor\"));\r\n                    this.numeric(roughnessFactor).rangeInclusive(0, 1).hasErrors()?.report(primitivePath(\"material.roughnessFactor\"));\r\n                }\r\n                var indices = typeof geometry.indices == \"number\" ? geometry.indices : geometry.indices.length;\r\n                let numericValidator = this.numeric(indices).integer().positive();\r\n                switch (geometry.primitiveType) {\r\n                    case \"LINES\": {\r\n                        numericValidator = numericValidator.divisibleBy(2);\r\n                        break;\r\n                    }\r\n                    case \"LINE_STRIP\": {\r\n                        numericValidator = numericValidator.min(2);\r\n                        break;\r\n                    }\r\n                    case \"TRIANGLES\": {\r\n                        numericValidator = numericValidator.divisibleBy(3);\r\n                        break;\r\n                    }\r\n                    case \"TRIANGLE_STRIP\":\r\n                    case \"TRIANGLE_FAN\": {\r\n                        numericValidator = numericValidator.min(3);\r\n                        break;\r\n                    }\r\n                }\r\n                numericValidator.hasErrors()?.report(primitivePath(\"geometry.indices\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    highlights(state: RenderStateHighlightGroups) {\r\n        const { groups } = state;\r\n        this.numeric(groups.length).max(250).report(\"groups.length\");\r\n    }\r\n\r\n    grid(state: RenderStateGrid) {\r\n        const { size1, size2, distance, axisX, axisY } = state;\r\n        this.numeric(size1).positive().report(\"grid.size1\");\r\n        this.numeric(size2).positive().report(\"grid.size2\");\r\n        this.numeric(distance).positive().report(\"grid.distance\");\r\n        this.vector3(axisX).normal().report(\"grid.axisX\");\r\n        this.vector3(axisY).normal().report(\"grid.axisY\");\r\n        this.vector3(axisX).perpendicularTo(axisY, \"grid.axisY\").report(\"grid.axisX\");\r\n    }\r\n\r\n    outlines(state: RenderStateOutlines) {\r\n        const { plane } = state;\r\n        this.plane(plane).valid().report(\"outline.plane.normalOffset\");\r\n    }\r\n\r\n    output(state: RenderStateOutput) {\r\n        const { width, height, samplesMSAA } = state;\r\n        this.numeric(width).integer().positive().report(\"output.width\");\r\n        this.numeric(height).integer().positive().report(\"output.height\");\r\n        this.numeric(samplesMSAA).integer().rangeInclusive(1, 16).report(\"output.samplesMSAA\");\r\n    }\r\n\r\n    pick(state: RenderStatePick) {\r\n        const { opacityThreshold } = state;\r\n        this.numeric(opacityThreshold).rangeInclusive(0, 1).report(\"pick.opacityThreshold\");\r\n    }\r\n\r\n    points(state: RenderStatePointCloud) {\r\n        const { size, deviation } = state;\r\n        if (size.pixel) {\r\n            this.numeric(size.pixel).positive().report(\"points.size.pixel\");\r\n        }\r\n        if (size.maxPixel) {\r\n            this.numeric(size.maxPixel).positive().report(\"points.size.maxPixel\");\r\n        }\r\n        if (size.metric) {\r\n            this.numeric(size.metric).positive().report(\"points.size.metric\");\r\n        }\r\n        this.numeric(deviation.index).rangeInclusive(0, 4).report(\"points.deviation.index\");\r\n        this.numeric(deviation.mixFactor).rangeInclusive(0, 1).report(\"points.deviation.mixFactor\");\r\n        this.gradient(deviation.colorGradient).valid().report(\"points.deviation.colorGradient\");\r\n    }\r\n\r\n    quality(state: RenderStateQuality) {\r\n        const { detail } = state;\r\n        this.numeric(detail).positive().report(\"quality.detail\");\r\n    }\r\n\r\n    scene(state: RenderStateScene) {\r\n        const { url } = state;\r\n        if (url != undefined) {\r\n            this.url(url).valid().report(\"scene.url\");\r\n        }\r\n    }\r\n\r\n    terrain(state: RenderStateTerrain) {\r\n        const { elevationGradient } = state;\r\n        this.gradient(elevationGradient).valid().report(\"terrain.elevationGradient\");\r\n    }\r\n\r\n    toonOutline(state: RenderStateToonOutline) {\r\n    }\r\n\r\n    tonemapping(state: RenderStateTonemapping) {\r\n    }\r\n\r\n    numeric(value: number) {\r\n        return new NumericValidator(this, value);\r\n    }\r\n\r\n    vector3(value: ReadonlyVec3) {\r\n        return new Vector3Validator(this, value);\r\n    }\r\n\r\n    plane(value: ReadonlyVec4) {\r\n        return new PlaneValidator(this, value);\r\n    }\r\n\r\n    gradient(value: RenderStateColorGradient<RGB | RGBA>) {\r\n        return new GradientValidator(this, value);\r\n    }\r\n\r\n    url(value: string) {\r\n        return new UrlValidator(this, value);\r\n    }\r\n}\r\n\r\nclass BaseValidator<T extends { toString: () => string }> {\r\n    errors: string[] = [];\r\n    constructor(readonly context: ValidationContext, readonly value: T) { }\r\n\r\n    error(message: string) {\r\n        this.errors.push(message);\r\n    }\r\n\r\n    hasErrors() {\r\n        return this.errors.length > 0 ? this : undefined;\r\n    }\r\n\r\n    report(path: string) {\r\n        if (this.errors.length) {\r\n            const message = `${path}=${this.formatValue()}: ${this.errors.join(\" \")}`;\r\n            this.context.errors.push(new Error(message));\r\n        }\r\n    }\r\n\r\n    formatValue() {\r\n        return this.value.toString();\r\n    }\r\n}\r\n\r\nclass NumericValidator extends BaseValidator<number> {\r\n    integer() {\r\n        if (!Number.isInteger(this.value)) {\r\n            this.error(`must be an integer!`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    positive() {\r\n        if (this.value <= 0) {\r\n            this.error(`must be larger than zero!`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    min(min: number, minText?: string) {\r\n        if (this.value < min) {\r\n            this.error(`must be greater or equal to ${minText ?? min}!`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    max(max: number, maxText?: string) {\r\n        if (this.value > max) {\r\n            this.error(`must be less or equal to ${maxText ?? max}!`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    greaterThan(ref: number, refText?: string) {\r\n        if (this.value <= ref) {\r\n            this.error(`must be greater than ${refText ?? ref}!`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    lessThan(ref: number, refText?: string) {\r\n        if (this.value >= ref) {\r\n            this.error(`must be less than ${refText ?? ref}!`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    rangeInclusive(min = 0, max = 1) {\r\n        this.min(min);\r\n        this.max(max);\r\n        return this;\r\n    }\r\n\r\n    rangeExclusive(min = 0, max = 1) {\r\n        this.greaterThan(min);\r\n        this.lessThan(max);\r\n        return this;\r\n    }\r\n\r\n    divisibleBy(divisor: number) {\r\n        if (!Number.isInteger(this.value / divisor)) {\r\n            this.error(`is not divisible by ${divisor}!`);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nclass Vector3Validator extends BaseValidator<ReadonlyVec3> {\r\n    normal(epsilon = 1E-6) {\r\n        const len = vec3.length(this.value);\r\n        if (len < 1 - epsilon || len > 1 + epsilon) {\r\n            this.error(`must be normal, i.e. length = 1!`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    perpendicularTo(vec: ReadonlyVec3, vecText?: string, epsilon = 1E-6) {\r\n        const dp = vec3.dot(this.value, vec);\r\n        if (dp < -epsilon || dp > 1 + epsilon) {\r\n            this.error(`must be perpendicular to ${vecText ?? vec.toString()}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    nonZero() {\r\n        if (vec3.dot(this.value, this.value) == 0) {\r\n            this.error(`must be non-zero!`);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nclass PlaneValidator extends BaseValidator<ReadonlyVec4> {\r\n    valid(epsilon = 1E-6) {\r\n        const [x, y, z] = this.value;\r\n        const len = Math.sqrt(x * x + y * y + z * z);\r\n        if (len < 1 - epsilon || len > 1 + epsilon) {\r\n            this.error(`plane must have a valid normal, i.e. [xyz].length = 1!`);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nclass GradientValidator extends BaseValidator<RenderStateColorGradient<RGB | RGBA>> {\r\n    valid() {\r\n        const { knots } = this.value;\r\n        if (knots.length > 0) {\r\n            var prevPos = knots[0].position;\r\n            for (let i = 1; i < knots.length; i++) {\r\n                const nextPos = knots[i].position;\r\n                if (nextPos < prevPos) {\r\n                    this.error(\"must have knot positions in ascending order!\")\r\n                }\r\n                prevPos = nextPos;\r\n            }\r\n        } else {\r\n            this.error('must have more than zero knots!');\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nclass UrlValidator extends BaseValidator<string> {\r\n    valid() {\r\n        try {\r\n            new URL(this.value);\r\n        } catch {\r\n            this.error(\"is not a valid absolute url!\")\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\n", "import type { ReadonlyQuat, ReadonlyVec3, ReadonlyVec4, ReadonlyMat4, ReadonlyMat3, vec4 } from \"gl-matrix\";\r\nimport type { RGB, RGBA, FixedSizeArray, RecursivePartial } from \"./types\";\r\nimport type { RenderStateScene } from \"./scene\";\r\nimport type { RenderStateDynamicObjects } from \"./dynamic\";\r\nimport type { RenderContext, modifyRenderState } from \"../\";\r\nexport * from \"./dynamic\";\r\nexport * from \"./types\";\r\nexport * from \"./scene\";\r\nexport * from \"./default\";\r\nexport * from \"./modify\";\r\nexport * from \"./validate\";\r\n\r\n/**\r\n * An object describing the what to be rendered and how by {@link RenderContext.render}.\r\n * @remarks\r\n * The render state is immutable by design.\r\n * You should not attempt to mutate existing objects.\r\n * The correct way to change render state is to use the {@link modifyRenderState} function.\r\n * This function will create a new copy of objects with new/modified properties, while retaining all objects that hasn't changed.\r\n * It will also perform basic validation.\r\n * The engine uses {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality | strict equality} to determine if some portion of the state has changed.\r\n * Hence, it's important that unchanged sub objects are not copied.\r\n * \r\n * The render state is serializable via JSON or {@link https://developer.mozilla.org/en-US/docs/Web/API/structuredClone | structuredClone()}.\r\n * This can be useful for test/diagnostics purposes, since the render state should define how the output image eventually is rendered.\r\n * It may take a while for downloads of streamed resources to complete, however, so the output image will not be fully resolved until all pending downloads are complete.\r\n * There are also other runtime factors, such as device specific limitations or variations, that may contribute to small deviations in the output image.\r\n * A direct pixel to pixel comparison between two output images generated by identical render state is thus likely to fail unless it's rendered on the same device and same version of our API, browser, OS and drivers.\r\n * @category Render State\r\n */\r\nexport interface RenderState {\r\n    /** Output image related state. */\r\n    readonly output: RenderStateOutput;\r\n\r\n    /** background/environment related state. */\r\n    readonly background: RenderStateBackground;\r\n\r\n    /** camera related state. */\r\n    readonly camera: RenderStateCamera;\r\n\r\n    /** Render quality related state. */\r\n    readonly quality: RenderStateQuality;\r\n\r\n    /** Grid helper related state. */\r\n    readonly grid: RenderStateGrid;\r\n\r\n    /** @ignore */\r\n    readonly debug: RenderStateDebug;\r\n\r\n    /** @internal. */\r\n    readonly cube: RenderStateCube;\r\n\r\n    /** Static, streamable scene related state. */\r\n    readonly scene: RenderStateScene | undefined;\r\n\r\n    /** Terrain rendering related state. */\r\n    readonly terrain: RenderStateTerrain;\r\n\r\n    /** Dynamic objects related state. */\r\n    readonly dynamic: RenderStateDynamicObjects;\r\n\r\n    /** Clipping planes related state. */\r\n    readonly clipping: RenderStateClipping;\r\n\r\n    /** Highlights related state. */\r\n    readonly highlights: RenderStateHighlightGroups;\r\n\r\n    /** Outlines related state. */\r\n    readonly outlines: RenderStateOutlines;\r\n\r\n    /** Tonemapping related state. */\r\n    readonly tonemapping: RenderStateTonemapping;\r\n\r\n    /** Point cloud rendering related state. */\r\n    readonly points: RenderStatePointCloud;\r\n\r\n    /** Toon outline rendering related state. */\r\n    readonly toonOutline: RenderStateToonOutline;\r\n\r\n    /** Pick info rendering related state. */\r\n    readonly pick: RenderStatePick;\r\n}\r\n\r\n/** An extended variant of RenderState with additional derived properties.\r\n * @category Render State\r\n */\r\nexport interface DerivedRenderState extends RenderState {\r\n    /** Local space is a variant of world space that is close to camera to avoid excessively large coordinates and thus float32 rounding errors in shader. */\r\n    readonly localSpaceTranslation: ReadonlyVec3; // \r\n    /** The set of matrices that used to transform coordinate between spaces. */\r\n    readonly matrices: Matrices;\r\n    /** The 6 planes of the view frustum, defined in world space. */\r\n    readonly viewFrustum: ViewFrustum;\r\n    /** The effective number of MSAA samples uses for this frame.\r\n     * @remarks This originates from {@link RenderStateOutput.samplesMSAA} but is potentially capped to the device's MSAA sample limit.\r\n     */\r\n    readonly effectiveSamplesMSAA: number;\r\n}\r\n\r\n/** A partial view of render state used for modifications.\r\n * @category Render State\r\n */\r\nexport type RenderStateChanges = RecursivePartial<RenderState>;\r\n\r\n/** The 6 planes of a {@link https://en.wikipedia.org/wiki/Viewing_frustum | view frustum}, defined in world space.\r\n * @remarks \r\n * Planes are defined as 4D {@link https://en.wikipedia.org/wiki/Half-space_(geometry) | half-space} vectors.\r\n * Points are inside the halfspace when the dot product of the half-space vector and a 4D variant of the point with w=1 is negative.\r\n * \r\n * `inside = dot(vec4(point, 1.), plane) < 0.;`\r\n * @category Render State\r\n */\r\nexport interface ViewFrustum {\r\n    /** The left screen edge plane of the frustum */\r\n    readonly left: ReadonlyVec4;\r\n    /** The right screen edge plane of the frustum */\r\n    readonly right: ReadonlyVec4;\r\n    /** The top screen edge plane of the frustum */\r\n    readonly top: ReadonlyVec4;\r\n    /** The bottom screen edge plane of the frustum */\r\n    readonly bottom: ReadonlyVec4;\r\n    /** The camera's near clipping plane. */\r\n    readonly near: ReadonlyVec4;\r\n    /** The camera's far clipping plane. */\r\n    readonly far: ReadonlyVec4;\r\n    /** A plane coincident with camera position and parallel to screen/image plane in world space. */\r\n    readonly image: ReadonlyVec4;\r\n    /** All tuple of all planes used for {@link https://en.wikipedia.org/wiki/Hidden-surface_determination#Viewing-frustum_culling | culling}. */\r\n    readonly planes: readonly [left: ReadonlyVec4, right: ReadonlyVec4, top: ReadonlyVec4, bottom: ReadonlyVec4, near: ReadonlyVec4, far: ReadonlyVec4];\r\n}\r\n\r\n/** Transformation coordinate space.\r\n * @see {@link https://learnopengl.com/Getting-started/Coordinate-Systems}.\r\n * @category Render State\r\n */\r\nexport enum CoordSpace {\r\n    /** World space. */\r\n    World,\r\n    /** View space. */\r\n    View,\r\n    /** Clip space. */\r\n    Clip,\r\n};\r\n\r\n/** A helper object for computing transformation matrices between {@link CoordSpace | spaces} on demand.\r\n * @category Render State\r\n */\r\nexport interface Matrices {\r\n    /**\r\n     * Return a 4x4 matrix for transforming coordinate from one space to another.\r\n     * @param from The original space.\r\n     * @param to The destination space.\r\n     */\r\n    getMatrix(from: CoordSpace, to: CoordSpace): ReadonlyMat4;\r\n\r\n    /**\r\n     * Return a 3X3 matrix for transforming normals from one space to another.\r\n     * @param from The original space.\r\n     * @param to The destination space.\r\n     * @remarks\r\n     * Normals has to be normalized after transformation.\r\n     */\r\n    getMatrixNormal(from: CoordSpace, to: CoordSpace): ReadonlyMat3;\r\n}\r\n\r\n\r\n/** Output image related state.\r\n * @category Render State\r\n */\r\nexport interface RenderStateOutput {\r\n    /** Image pixel width. */\r\n    readonly width: number;\r\n\r\n    /** Image pixel height. */\r\n    readonly height: number;\r\n\r\n    /** Number of {@link https://en.wikipedia.org/wiki/Multisample_anti-aliasing | MSAA} samples used to anti-alias the output image.\r\n     * @remarks\r\n     * This number should be an integer between 1 and 16, inclusive.\r\n     * The more samples, the better the anti aliasing, but also the more memory and render time.\r\n     * Most devices have a max cap on this value, in which case that smaller of the two will be used.\r\n     */\r\n    readonly samplesMSAA: number;\r\n}\r\n\r\n/** Background/environment related render state.\r\n * @category Render State\r\n */\r\nexport interface RenderStateBackground {\r\n    /** The background color to be used if no url is specified.\r\n     * @remarks\r\n     * If undefined, the default background will be used instead.\r\n     * If alpha < 1, the rendered image will be transparent, which could be useful for 2D compositing.\r\n     */\r\n    readonly color?: RGBA;\r\n\r\n    /** The absolute url of the background/environment.\r\n     * @remarks\r\n     * This should point to the folder that contains the textures files of the desired environment, e.g. `https://api.novorender/env/lake/'.\r\n     */\r\n    readonly url?: string;\r\n\r\n    /** A blur factor to use when rendering the background image.\r\n     * @remarks\r\n     * 0 will yield no blur, while 1 will yield max blur.\r\n     * Blurring is useful for not overly cluttering up the image with backgrounds while still retaining the ambience and lighting characteristics.\r\n     */\r\n    readonly blur?: number;\r\n}\r\n\r\n/** Camera related render state.\r\n * @category Render State\r\n */\r\nexport interface RenderStateCamera {\r\n    /** The type of camera projection to use.\r\n     * @see\r\n     * {@link https://en.wikipedia.org/wiki/Pinhole_camera_model | pinhole}\r\n     * {@link https://en.wikipedia.org/wiki/Orthographic_projection | orthographic}\r\n     */\r\n    readonly kind: \"pinhole\" | \"orthographic\";\r\n\r\n    /** Camera position in world space. */\r\n    readonly position: ReadonlyVec3;\r\n\r\n    /** Camera rotation in world space.\r\n     * @remarks \r\n     * This rotation is from camera->world space, much like that of a local->world space transformation of any rendered object.\r\n     * It should not be confused with the inverse transformation, i.e. world->camera space, commonly used in shaders.\r\n     */\r\n    readonly rotation: ReadonlyQuat;\r\n\r\n    /** Camera pivot point in world space.\r\n     * @remarks \r\n     * This is used to visualize a point around which the camera will pivot when moved.\r\n     * (Currently not implemented)\r\n     */\r\n    readonly pivot: ReadonlyVec3 | undefined;\r\n\r\n    /** Camera's vertical field of view.\r\n     * @remarks\r\n     * For pinhole cameras, this value is interpreted as the angle between the top and bottom edge of the frustum in degrees.\r\n     * For orthographic cameras, this value is interpreted as the distance between the top and bottom edge of the view frustum in meters.\r\n     */\r\n    readonly fov: number;\r\n\r\n    /** Camera's near clipping plane distance.\r\n     * @remarks\r\n     * This value must be larger than 0, preferable as large as it can comfortable be without excessive visual clipping artifacts.\r\n     * Any pixels that are closer to the image plane will be clipped.\r\n     * Larger values will greatly improve z-buffer resolution,\r\n     * which helps reduce {@link https://en.wikipedia.org/wiki/Z-fighting | z-fighting}.\r\n     */\r\n    readonly near: number;\r\n\r\n    /** Camera's far clipping plane distance.\r\n     * @remarks\r\n     * This value must be larger than the {@link near} clipping plane.\r\n     * Any pixels that are farther away from the image plane will be clipped.\r\n     * Smaller values improves z-buffer resolution, which helps reduce {@link https://en.wikipedia.org/wiki/Z-fighting | z-fighting}.\r\n     * Smaller values also increases the # objects culled, which could help improve rendering performance.\r\n     */\r\n    readonly far: number;\r\n}\r\n\r\n/** Quality related render state.\r\n * @category Render State\r\n */\r\nexport interface RenderStateQuality {\r\n    /**\r\n     * A detail bias factor used to modify the acceptable geometric error, and consequently the amount of geometric detail.\r\n     * @remarks\r\n     * The value must be larger than 0.\r\n     * 1.0 is the baseline value.\r\n     * Lower values will reduce geometric detail, but also improve performance and memory usage.\r\n     * Higher values will increase geometric detail, at the cost of performance and memory consumption.\r\n     * At some point the amount of detail is capped by device specific constraints.\r\n     */\r\n    readonly detail: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface RenderStateDebug {\r\n    readonly showNodeBounds: boolean;\r\n}\r\n\r\n/** Grid related render state.\r\n * @category Render State\r\n */\r\nexport interface RenderStateGrid {\r\n    /** Turn grid on and off.*/\r\n    readonly enabled: boolean;\r\n\r\n    /** Color of minor grid lines.*/\r\n    readonly color1: RGB;\r\n\r\n    /** Color of major grid lines.*/\r\n    readonly color2: RGB;\r\n\r\n    /** The grid's origin/center coordinate in world space.*/\r\n    readonly origin: ReadonlyVec3;\r\n\r\n    /** The grid's x-axis in world space.*/\r\n    readonly axisX: ReadonlyVec3;\r\n\r\n    /** The grid's y-axis in world space.*/\r\n    readonly axisY: ReadonlyVec3;\r\n\r\n    /** Minor grid cell size\r\n     * @defaultValue 1\r\n     */\r\n    readonly size1: number;\r\n\r\n    /** Major grid cell size\r\n     * @defaultValue 10\r\n     */\r\n    readonly size2: number;\r\n\r\n    /** Max distance to render grid in meters. */\r\n    readonly distance: number;\r\n}\r\n\r\n/** @internal */\r\nexport const CubeId = 0xfffffff8; // object_id for picking of cube test object\r\n\r\n/** @internal */\r\nexport interface RenderStateCube {\r\n    readonly enabled: boolean; // default = false\r\n    readonly position: ReadonlyVec3; // default = (0,0,0)\r\n    readonly scale: number; // default = 1\r\n}\r\n\r\n/** Gradient curve knot node.\r\n * @category Render State\r\n */\r\nexport interface RenderStateColorGradientKnot<T extends RGB | RGBA> {\r\n    /** Knot position on the gradient ramp. */\r\n    readonly position: number;\r\n    /** Color to use at this gradient position. */\r\n    readonly color: T;\r\n}\r\n\r\n/** A color gradient curve.\r\n * @remarks\r\n * This curve is used to visualize some scalar value as a color gradient, e.g. terrain evelvation or point cloud devience.\r\n * @category Render State\r\n */\r\nexport interface RenderStateColorGradient<T extends RGB | RGBA> {\r\n    /**A set of knots defining a non-uniform linear spline curve.\r\n     * @remarks\r\n     * Nodes must be sorted in ascending order of position!\r\n     * At least two nodes are required for any sort of gradient.\r\n     * Nodes do not have to be uniformly distributed position-wise.\r\n     * To create a discontinuity in the gradient, two adjacent nodes with identical position, but different colors may be used.\r\n     * Any position outside the min/max range defined by this list will be clamped to the color of the nearest node (min or max), i.e., no extrapolation will occur.\r\n     */\r\n    readonly knots: readonly RenderStateColorGradientKnot<T>[];\r\n}\r\n\r\n/** Terrain render state.\r\n * @category Render State\r\n */\r\nexport interface RenderStateTerrain {\r\n    /** Elevation gradient color curve.\r\n     * @remarks\r\n     * Elevations are defined as in meters above/below sea level (using negative values for sub sea terrain).\r\n     */\r\n    readonly elevationGradient: RenderStateColorGradient<RGB>;\r\n    /** Flag for whether to draw terrain as background. */\r\n    readonly asBackground: boolean;\r\n};\r\n\r\n/** Point cloud related render state.\r\n * @remarks\r\n * The sizes are cumulative and computed as follows:\r\n * ``effective_point_pixel_size = max(1, pixelSize + projectedSizeOf(metricSize + tolerance * toleranceFactor))``.\r\n * Metric size is projected as a 3D sphere at the point origo to deterine pixel size.\r\n * The term pixel refers to the size of a pixel in the target canvas element, which resolution may differ from that of the render buffer.\r\n * @category Render State\r\n */\r\nexport interface RenderStatePointCloud {\r\n    /** Point size state. */\r\n    readonly size: {\r\n        /** Point size in pixels. */\r\n        readonly pixel: number | undefined;\r\n\r\n        /** Max point size in pixels. */\r\n        readonly maxPixel: number | undefined;\r\n\r\n        /** Point size in meters. */\r\n        readonly metric: number | undefined;\r\n\r\n        /** The scaling factor for applying the tolerance of the current level of detail to point size.\r\n         * @remarks\r\n         * Different levels of detail (LOD) will have different point densities.\r\n         * Taking this difference into account may result in a more uniform point coverage and visually pleasing result.\r\n         * The tolerance of each LOD reflects the point merging distance threshold in meters used to reduce # points, or 0 for the original level of detail.\r\n         */\r\n        readonly toleranceFactor: number;\r\n    };\r\n\r\n    /** Point deviation state.\r\n     * @remarks\r\n     * Deviation is pre-computed for some point clouds as a signed, linear distance from the point to some reference/baseline geometry.\r\n     * This is useful to visualize as-built deviances, e.g. in tunnel projects, and whether they are within tolerance and not.\r\n     * Several channels of deviation may be computed.\r\n     * \r\n     * This state will not have any effect on geometry that does not have pre-computed deviance data baked into it.\r\n     */\r\n    readonly deviation: {\r\n        /** Index of deviation channel (0-3).\r\n         * @remarks\r\n         * This index specifies which deviation channel to currently render on screen and into pick buffers.\r\n         */\r\n        readonly index: number;\r\n\r\n        /** Mix factor [0.0, 1.0], where 0 is 100% original vertex color and 1 is 100% color gradient color */\r\n        readonly mixFactor: number;\r\n\r\n        /** Color gradient to use for visualizing deviation and tolerances.\r\n         * @remarks May define different gradients for negative and positive numbers.\r\n         */\r\n        readonly colorGradient: RenderStateColorGradient<RGBA>;\r\n\r\n        /** \r\n         * The color of undefined points\r\n         */\r\n        readonly undefinedColor?: RGBA;\r\n    };\r\n\r\n    /** Use pre-computed projected point cloud positions instead of original.\r\n     * @remarks This is currently used to render an unwrapped 2D variant of tunnels.\r\n     */\r\n    readonly useProjectedPosition: boolean;\r\n}\r\n\r\n/** How to combine the half-spaces of multiple clipping planes into a clipping volume.\r\n * @category Render State\r\n */\r\nexport enum ClippingMode {\r\n    /** Use the intersection of the clipping plane half-spaces.\r\n     * @remarks\r\n     * This is useful for creating a clipping space where everything outside e.g. a slab or a box is clipped/hidden.\r\n     * \r\n     * `inside_volume = inside(plane0) AND inside(plane1) AND ...`\r\n     */\r\n    intersection,\r\n\r\n    /** Use the union of the clipping plane half-spaces.\r\n     * @remarks\r\n     * This is useful for creating spaces where everything inside e.g. a slab or a box is clipped/hidden.\r\n     * \r\n     * `inside_volume = inside(plane0) OR inside(plane1) OR ...`\r\n     */\r\n    union,\r\n}\r\n\r\n/** Object id/indices for picking of rendered clipping planes.\r\n * @category Render State\r\n */\r\nexport enum ClippingId {\r\n    plane0 = 0xfffffff0, plane1, plane2, plane3, plane4, plane5, plane6\r\n}\r\n\r\n/** Render state for a single clipping plane.\r\n * @category Render State\r\n */\r\nexport interface RenderStateClippingPlane {\r\n    /** The half-space normal (xyz) and signed offset/distance (w) of the plane. */\r\n    readonly normalOffset: ReadonlyVec4,\r\n\r\n    /** The color to use when visualizing the clipping plane, or undefined to not visualize. */\r\n    readonly color?: RGBA,\r\n\r\n    /** Geometry outline settings for this clipping plane. */\r\n    readonly outline?: {\r\n        /** Whether to render outlines or not.\r\n         * @remarks\r\n         * Currently, due to limitations in WebGL2,\r\n         * outlines are a costly features that is disabled on weaker devices.\r\n         * Even on more powerful GPUs this feature should be used sparingly.\r\n         */\r\n        enabled: boolean,\r\n\r\n        /**\r\n         * The color to use for the outlines of this plane, or undefined to use the {@link RenderStateOutlines.color | default outline color}.\r\n         */\r\n        color?: RGB\r\n    }\r\n}\r\n\r\n/** Clipping related render state.\r\n * @category Render State\r\n */\r\nexport interface RenderStateClipping {\r\n    /** Whether to enable or disable geometry clipping.\r\n     * @remarks\r\n     * Clipping only applies to static/streamble geometry.\r\n     * Enabling clipping comes at a minor cost of rendering performance.\r\n     */\r\n    readonly enabled: boolean;\r\n\r\n    /**\r\n     * Whether or not to visualize the clipping planes themselves.\r\n     */\r\n    readonly draw: boolean;\r\n\r\n    /** How to combine multiple clipping planes. */\r\n    readonly mode: ClippingMode;\r\n\r\n    /** An array of up to 6 clipping planes. */\r\n    readonly planes: readonly RenderStateClippingPlane[];\r\n}\r\n\r\n/** 5x4 row-major matrix for color/opacity transform.\r\n * @remarks\r\n * This matrix defines the linear transformation that is applied to the original RGBA color before rendering.\r\n * The fifth column is multiplied by a constant 1, making it useful for translation.\r\n * The resulting colors are computed thus:\r\n * ```\r\n * output_red = r*m[0] + g*m[1] + b*m[2] + a*m[3] + m[4]\r\n * output_green = r*m[5] + g*m[6] + b*m[7] + a*m[8] + m[9]\r\n * output_blue = r*m[10] + g*m[11] + b*m[12] + a*m[13] + m[14]\r\n * output_alpha = r*m[15] + g*m[16] + b*m[17] + a*m[18] + m[19]\r\n * ```\r\n * All input values are between 0 and 1 and output value will be clamped to this range.\r\n * @category Render State\r\n */\r\nexport type RGBATransform = FixedSizeArray<20, number>;\r\n\r\n/**\r\n * How to render the geometry of a {@link RenderStateHighlightGroup | highlight group}.\r\n * @remarks\r\n * {@link RGBATransform | Color transforms} allows you to modify the color, brightness and transparency of objects within the group.\r\n * \r\n * `\"hide\"` will hide the objects within the group more effectively than using alpha/opacity = 0,\r\n *  while still retaining them in memory for quick re-rendering.\r\n * \r\n * `\"filter\"` will remove the objects from memory entirely, which helps improve rendering performance and memory usage.\r\n * Unlike hidden group, changes to filtered groups will trigger a complete reload of the streamable scene.\r\n * @category Render State\r\n */\r\nexport type RenderStateGroupAction = RGBATransform | \"hide\" | \"filter\";\r\n\r\n/**\r\n * Render state for a specific highlight group.\r\n * @remarks\r\n * Group of objects may be visually highlighted through {@link RGBATransform | color transforms}, hidden or filtered out.\r\n * @category Render State\r\n */\r\nexport interface RenderStateHighlightGroup {\r\n    /** How to treat this particular group. */\r\n    readonly action: RenderStateGroupAction;\r\n    /** Outline highlight color. */\r\n    readonly outlineColor?: RGB;\r\n    /** A set of unique object_id belonging to this group, sorted in ascending order. */\r\n    readonly objectIds: Iterable<number>;\r\n}\r\n\r\n/**\r\n * Highlight related render state.\r\n * @remarks\r\n * Highlight comes as a modest performance cost.\r\n * \r\n * Group of objects may be visually highlighted through {@link RGBATransform | color transforms}, hidden or filtered out.\r\n * Currently, a maximum of 250 groups may be defined.\r\n * Any objects that are not part of a highlight group will be treated according to the {@link defaultAction} property.\r\n * This could help save memory when \"everything else\" needs to be hidden or highlighted.\r\n * \r\n * A particular object can only be rendered using a single highlight.\r\n * If the object id belongs to multiple groups, the last group in the {@link groups} array will determine how it's highlighted.\r\n * \r\n * Hiding a group is more effective than using alpha=0.\r\n * \r\n * Filtering of large group can greatly improve performance and memory consumption.\r\n * Adding or removing objects to filtered groups will trigger a complete reload of the scene, however.\r\n * It it thus recommended that this be used for relatively static groups only.\r\n * @category Render State\r\n */\r\nexport interface RenderStateHighlightGroups {\r\n    /** Highlight action for all objects current not in a highlight group.\r\n     * @defaultValue `undefined`\r\n     */\r\n    readonly defaultAction: RenderStateGroupAction | undefined;\r\n\r\n    /** Highlight groups, max 250. */\r\n    readonly groups: readonly RenderStateHighlightGroup[];\r\n}\r\n\r\n/** Used to visualize internal render buffers.\r\n * @defaultValue `TonemappingMode.color`.\r\n * @category Render State\r\n */\r\nexport enum TonemappingMode {\r\n    /** Render the regular color output using HDR tone-mapping. */\r\n    color,\r\n    /** Visualize the normal buffer. */\r\n    normal,\r\n    /** Visualize the normal buffer. */\r\n    depth,\r\n    /** Visualize the object id/index buffer. */\r\n    objectId,\r\n    /** Visualize the deviation buffer, if any. */\r\n    deviation,\r\n    /** Visualize the z-buffer. */\r\n    zbuffer,\r\n};\r\n\r\n/** Outline related render state.\r\n * @remarks\r\n * Enabling this feature will render the intersection of geometry surface with the specified plane as lines.\r\n * This is particularly useful when in orthographic mode on surfaces that are perfectly perpendicular to the image plane.\r\n * These surfaces would otherwise be invisible and unpickable.\r\n * \r\n * > Due to limitations of WebGL2, outline rendering comes as at potentially significant performance and memory cost.\r\n * Thus, is may be unavailable on weaker devices and should be used sparingly otherwise.\r\n * @category Render State\r\n */\r\nexport interface RenderStateOutlines {\r\n    /** \r\n * @ignore\r\n * @privateRemarks Ability to turn all clipping outlines on and off based on conditions in the render loop.\r\n * Will be overwritten every frame \r\n*/\r\n    readonly on: boolean;\r\n    /** Whether to do outline rendering. */\r\n    readonly enabled: boolean;\r\n    /** Color of outline.\r\n     * @remarks\r\n     * Due to {@link RenderStateTonemapping | tone mapping} the color displayed on screen will a bit duller.\r\n     * If you require bright colors, you may \"overexpose\" them, e.g. `[10,0,0]` for bright red.\r\n     */\r\n    readonly color: RGB;\r\n    /** The outline intersection plane. */\r\n    readonly plane: ReadonlyVec4;\r\n}\r\n\r\n/** Tone mapping related render state.\r\n * @remarks\r\n * Internally, the output image is rendered in a {@link https://en.wikipedia.org/wiki/High_dynamic_range | HDRI} format.\r\n * Before it can be displayed onto a regular screen,\r\n * it needs to be {@link https://en.wikipedia.org/wiki/Tone_mapping tone mapped} and truncated into a displayable format.\r\n * Currently we use {@link https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl | ACES filmic tone map approximation} for this.\r\n * @category Render State\r\n */\r\nexport interface RenderStateTonemapping {\r\n    /** Camera light exposure as stops of power of 2.\r\n     * @remarks\r\n     * Negative values darkens the image, while positive ones brightens it.\r\n     * @defaultValue 0.0\r\n     */\r\n    readonly exposure: number;\r\n\r\n    /** Debug/diagnostics option to display internal render buffers.\r\n     * @defaultValue TonemappingMode.color\r\n     */\r\n    readonly mode: TonemappingMode;\r\n}\r\n\r\n/** Toon shader related outline.\r\n * @remarks\r\n * Toon shader is a deliberate misnomer of what is commonly referred to as {@link https://roystan.net/articles/outline-shader/ outline shader}.\r\n * It is a post-effect that is applied on the output pixels to help visualize geometric edges and contours.\r\n * Enabling it comes at a potentially significant performance penalty, depending on your device.\r\n * It should thus be used sparingly, preferably only on idle frames, i.e. while the camera is not moving.\r\n * @category Render State\r\n */\r\nexport interface RenderStateToonOutline {\r\n    /** \r\n     * @ignore\r\n     * @privateRemarks Ability to turn the \"toon\" outlines on and off based on conditions in the render loop.\r\n     * Will be overwritten every frame \r\n    */\r\n    readonly on: boolean;\r\n    /** Whether to do render \"toon\" outlines or not. */\r\n    readonly enabled: boolean;\r\n    /** Color to use for edges and contours. */\r\n    readonly color: RGB;\r\n}\r\n\r\n/** Pick related render state.\r\n * @category Render State\r\n */\r\nexport interface RenderStatePick {\r\n    /** The opacity/alpha minimum (inclusive) threshold at which to include a pixel in the pick output.\r\n     * @public\r\n     * @remarks\r\n     * A value between 0 and 1, where 0 includes all pixels no matter how transparent and 1 only includes 100% opaque pixels.\r\n     * The default value is 1.\r\n     */\r\n    readonly opacityThreshold: number;\r\n}", "import { mat3, mat4, type ReadonlyMat3, type ReadonlyMat4 } from \"gl-matrix\";\r\nimport { CoordSpace, type Matrices, type RenderStateCamera, type RenderStateOutput } from \"./state\";\r\n\r\nfunction index(from: CoordSpace, to: CoordSpace): number {\r\n    return from * 3 + to;\r\n}\r\n\r\n/** @internal */\r\nexport function matricesFromRenderState(state: { output: RenderStateOutput; camera: RenderStateCamera; }): Matrices {\r\n    const { camera, output } = state;\r\n    const { width, height } = output;\r\n    const aspectRatio = width / height;\r\n    const fovY = camera.fov * Math.PI / 180;\r\n    const viewWorld = mat4.fromRotationTranslation(mat4.create(), camera.rotation, camera.position);\r\n    const viewClip = mat4.create();\r\n    if (camera.kind == \"orthographic\") {\r\n        const aspect = output.width / output.height;\r\n        const halfHeight = camera.fov / 2;\r\n        const halfWidth = halfHeight * aspect;\r\n        mat4.ortho(viewClip, -halfWidth, halfWidth, -halfHeight, halfHeight, camera.near, camera.far);\r\n    }\r\n    else {\r\n        mat4.perspective(viewClip, fovY, aspectRatio, camera.near, camera.far);\r\n    }\r\n    return new MatricesImpl(viewWorld, viewClip);\r\n}\r\n\r\nclass MatricesImpl implements Matrices {\r\n    private _mtx4 = new Array<mat4 | undefined>(4 * 4);\r\n    private _mtx3 = new Array<mat3 | undefined>(4 * 4);\r\n\r\n    constructor(viewWorld: mat4, viewClip: mat4) {\r\n        this._mtx4[index(CoordSpace.View, CoordSpace.World)] = viewWorld;\r\n        this._mtx4[index(CoordSpace.View, CoordSpace.Clip)] = viewClip;\r\n        const worldView = this._mtx4[index(CoordSpace.World, CoordSpace.View)] = mat4.create();\r\n        const clipView = this._mtx4[index(CoordSpace.Clip, CoordSpace.View)] = mat4.create();\r\n        mat4.invert(worldView, viewWorld);\r\n        mat4.invert(clipView, viewClip);\r\n    }\r\n\r\n    getMatrix(from: CoordSpace, to: CoordSpace): ReadonlyMat4 {\r\n        console.assert(from != to);\r\n        const idx = index(from, to);\r\n        let m = this._mtx4[idx];\r\n        if (!m) {\r\n            this._mtx4[idx] = m = mat4.create();\r\n            // recursively combine from neighbor matrices\r\n            if (to > from) {\r\n                mat4.multiply(m, this.getMatrix(to - 1, to), this.getMatrix(from, to - 1));\r\n            } else {\r\n                mat4.multiply(m, this.getMatrix(from - 1, to), this.getMatrix(from, from - 1));\r\n            }\r\n        }\r\n        return m;\r\n    }\r\n\r\n    getMatrixNormal(from: CoordSpace, to: CoordSpace): ReadonlyMat3 {\r\n        console.assert(from != to);\r\n        const idx = index(from, to);\r\n        let m = this._mtx3[idx];\r\n        if (!m) {\r\n            this._mtx3[idx] = m = mat3.create();\r\n            mat3.normalFromMat4(m, this.getMatrix(from, to));\r\n        }\r\n        return m;\r\n    }\r\n}\r\n", "import { glMatrix, mat4, vec3, vec4 } from \"gl-matrix\";\r\nimport { type RenderState, CoordSpace, type Matrices, type ViewFrustum } from \"./state\";\r\n\r\n/**\r\n * Create a view frustum.\r\n * @param state The render state to use.\r\n * @param state The transformation matrices to use.\r\n * @returns A view frustum, in world space.\r\n * @category Render Module\r\n*/\r\nexport function createViewFrustum(state: RenderState, matrices: Matrices): ViewFrustum {\r\n    const { camera, output } = state;\r\n    const { width, height } = output;\r\n    const aspect = width / height;\r\n    const halfHeight = camera.fov / 2;\r\n    const halfWidth = halfHeight * aspect;\r\n\r\n    const left = vec4.create();\r\n    const right = vec4.create();\r\n    const top = vec4.create();\r\n    const bottom = vec4.create();\r\n    const near = vec4.create();\r\n    const far = vec4.create();\r\n    const image = vec4.create();\r\n\r\n    vec4.set(near, 0, 0, 1, -camera.near);\r\n    vec4.set(far, 0, 0, -1, camera.far);\r\n    vec4.set(image, 0, 0, -1, 0);\r\n\r\n    if (camera.kind == \"orthographic\") {\r\n        vec4.set(left, -1, 0, 0, halfWidth);\r\n        vec4.set(right, 1, 0, 0, halfWidth);\r\n        vec4.set(top, 0, 1, 0, halfHeight);\r\n        vec4.set(bottom, 0, -1, 0, halfHeight);\r\n    } else {\r\n        const halfAngleY = glMatrix.toRadian(camera.fov / 2);\r\n        const halfAngleX = Math.atan(Math.tan(halfAngleY) * aspect);\r\n        vec4.set(left, -Math.cos(halfAngleX), 0, Math.sin(halfAngleX), 0);\r\n        vec4.set(right, Math.cos(halfAngleX), 0, Math.sin(halfAngleX), 0);\r\n        vec4.set(top, 0, Math.cos(halfAngleY), Math.sin(halfAngleY), 0);\r\n        vec4.set(bottom, 0, -Math.cos(halfAngleY), Math.sin(halfAngleY), 0);\r\n    }\r\n\r\n    // transform into world space\r\n    const normal = vec3.create();\r\n    const position = vec3.create();\r\n    const matrix = matrices.getMatrix(CoordSpace.View, CoordSpace.World);\r\n    const matrixNormal = matrices.getMatrixNormal(CoordSpace.View, CoordSpace.World);\r\n    mat4.getTranslation(position, matrix);\r\n    const planes = [left, right, top, bottom, near, far, image];\r\n    for (const plane of planes) {\r\n        const [x, y, z, offset] = plane;\r\n        vec3.set(normal, x, y, z);\r\n        vec3.transformMat3(normal, normal, matrixNormal);\r\n        const distance = offset + vec3.dot(position, normal);\r\n        vec4.set(plane, normal[0], normal[1], normal[2], -distance);\r\n    }\r\n    return { left, right, top, bottom, near, far, image, planes: [left, right, top, bottom, near, far] };\r\n}", "import { glBlit, glInvalidateFrameBuffer, glReadPixels } from \"webgl2\";\r\nimport type { ResourceBin } from \"./resource\";\r\n\r\nexport const enum BufferFlags {\r\n    color = 0x01,\r\n    pick = 0x02,\r\n    depth = 0x04,\r\n    all = color | pick | depth,\r\n};\r\n\r\n/*\r\npick buffer layout\r\n  object_id: u32\r\n  normal: 3 x f16\r\n  deviation: f16\r\n  linear_depth f32\r\n*/\r\n\r\n\r\n/**\r\n * Set of buffers uses for rendering and pick.\r\n * @remarks\r\n * These buffers are only useful for advanced developers who aim to extend this API with their own custom 3D module.\r\n * @category Render Module\r\n */\r\nexport class RenderBuffers {\r\n    /** Flag to indicate the CPU/read buffers needs to be updated. */\r\n    readBuffersNeedUpdate = true;\r\n    /** Texture resources. */\r\n    readonly textures;\r\n    /** Renderbuffer resources. */\r\n    readonly renderBuffers;\r\n    /** Frame buffer resources. */\r\n    readonly frameBuffers;\r\n    /** CPU/JS copy of pick buffers. */\r\n    readonly readBuffers;\r\n    private typedArrays;\r\n    private pickFence: {\r\n        readonly sync: WebGLSync,\r\n        readonly promises: { readonly resolve: () => void, readonly reject: (reason: string) => void }[],\r\n    } | undefined;\r\n\r\n    /** @internal */\r\n    constructor(\r\n        /** The underlying webgl2 rendering context. */\r\n        readonly gl: WebGL2RenderingContext,\r\n        /** The buffer width in pixels. */\r\n        readonly width: number,\r\n        /** The buffer height in pixels. */\r\n        readonly height: number,\r\n        /** # of MSAA samples. */\r\n        readonly samples: number,\r\n        /** The resource bin to manage resource tracking and disposal. */\r\n        readonly resourceBin: ResourceBin\r\n    ) {\r\n        const textures = this.textures = {\r\n            // color: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"RGBA16F\", type: \"HALF_FLOAT\", image: null }),\r\n            color: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"R11F_G11F_B10F\", type: \"HALF_FLOAT\", image: null }),\r\n            pick: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"RGBA32UI\", type: \"UNSIGNED_INT\", image: null }), // TODO: Pack linearDepth into this buffer instead.\r\n            depth: resourceBin.createTexture({ kind: \"TEXTURE_2D\", width, height, internalFormat: \"DEPTH_COMPONENT32F\", type: \"FLOAT\", image: null }),\r\n        } as const;\r\n\r\n        const renderBuffers = this.renderBuffers = {\r\n            colorMSAA: samples > 1 ? resourceBin.createRenderBuffer({ internalFormat: \"R11F_G11F_B10F\", width, height, samples }) : null,\r\n            depthMSAA: samples > 1 ? resourceBin.createRenderBuffer({ internalFormat: \"DEPTH_COMPONENT32F\", width, height, samples }) : null,\r\n        } as const;\r\n\r\n        this.frameBuffers = {\r\n            color: resourceBin.createFrameBuffer({\r\n                color: [\r\n                    { kind: \"FRAMEBUFFER\", texture: textures.color },\r\n                    null, // Even without MSAA, we can't render pick buffer in the same pass as color buffer. This both due to transparency dithering and pick.opacityThreshold. We cannot selectively exclude one output channel only in frag shader.\r\n                ],\r\n                depth: { kind: \"DRAW_FRAMEBUFFER\", texture: textures.depth },\r\n            }),\r\n            colorMSAA: samples > 1 ? resourceBin.createFrameBuffer({\r\n                color: [\r\n                    { kind: \"DRAW_FRAMEBUFFER\", renderBuffer: renderBuffers.colorMSAA },\r\n                ],\r\n                depth: { kind: \"DRAW_FRAMEBUFFER\", renderBuffer: renderBuffers.depthMSAA },\r\n            }) : null,\r\n            pick: resourceBin.createFrameBuffer({\r\n                color: [\r\n                    null,\r\n                    { kind: \"DRAW_FRAMEBUFFER\", texture: textures.pick },\r\n                ],\r\n                depth: { kind: \"DRAW_FRAMEBUFFER\", texture: textures.depth },\r\n            }),\r\n        } as const;\r\n\r\n        this.readBuffers = {\r\n            pick: resourceBin.createBuffer({ kind: \"PIXEL_PACK_BUFFER\", byteSize: width * height * 16, usage: \"STREAM_READ\" }),\r\n        } as const;\r\n\r\n        this.typedArrays = {\r\n            pick: new Uint32Array(width * height * 4),\r\n        } as const;\r\n    }\r\n\r\n    /** @internal */\r\n    resolveMSAA() {\r\n        const { gl, frameBuffers, width, height } = this;\r\n        const { colorMSAA, color } = frameBuffers;\r\n        if (colorMSAA) {\r\n            glBlit(gl, { source: colorMSAA, destination: color, color: true, srcX1: width, srcY1: height, dstX1: width, dstY1: height }); // TODO: check if we can/should use a frag shader to do tonemapping on MSAA instead.\r\n            glInvalidateFrameBuffer(gl, { kind: \"FRAMEBUFFER\", frameBuffer: colorMSAA, color: [true], depth: true });\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    invalidate(frameBuffer: keyof RenderBuffers[\"frameBuffers\"], buffers: BufferFlags) {\r\n        const { gl, frameBuffers } = this;\r\n        var color = (buffers & BufferFlags.color) != 0;\r\n        var pick = (buffers & BufferFlags.pick) != 0;\r\n        var depth = (buffers & BufferFlags.depth) != 0;\r\n        glInvalidateFrameBuffer(gl, { kind: \"DRAW_FRAMEBUFFER\", frameBuffer: frameBuffers[frameBuffer], color: [color, pick], depth });\r\n    }\r\n\r\n    // copy framebuffer into read buffers\r\n    private read() {\r\n        const { gl, width, height, frameBuffers, readBuffers } = this;\r\n        glReadPixels(gl, {\r\n            width, height, frameBuffer: frameBuffers.pick, buffers: [\r\n                { attachment: \"COLOR_ATTACHMENT1\", buffer: readBuffers.pick, format: \"RGBA_INTEGER\", type: \"UNSIGNED_INT\" },\r\n            ]\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    async pickBuffers() {\r\n        if (this.readBuffersNeedUpdate && !this.pickFence) {\r\n            const { gl } = this;\r\n            this.read();\r\n            this.readBuffersNeedUpdate = false;\r\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!;\r\n            this.pickFence = { sync, promises: [] };\r\n        }\r\n        if (this.pickFence) {\r\n            const { promises } = this.pickFence;\r\n            let promiseCallbacks: typeof promises[0] | undefined;\r\n            const timeout = setTimeout(() => {//Sometimes it will never poll so set timeout, especially during setup\r\n                for (let i = 0; i < promises.length; ++i) {\r\n                    if (promiseCallbacks == promises[i]) {\r\n                        promises.splice(i, 1);\r\n                        promiseCallbacks.resolve();\r\n                    }\r\n                }\r\n            }, 100);\r\n            const promise = new Promise<void>((resolve, reject) => {\r\n                promiseCallbacks = {\r\n                    resolve: () => {\r\n                        clearTimeout(timeout);\r\n                        resolve()\r\n                    },\r\n                    reject\r\n                };\r\n                promises.push(promiseCallbacks);\r\n            });\r\n\r\n\r\n            await promise;\r\n            return this.typedArrays;\r\n        } else {\r\n            return Promise.resolve(this.typedArrays);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    dispose() {\r\n        this.deletePickFence();\r\n        this.resourceBin.dispose();\r\n    }\r\n\r\n    /** @internal */\r\n    pollPickFence() {\r\n        const { gl, pickFence, readBuffers, typedArrays } = this;\r\n        if (pickFence) {\r\n            const { sync, promises } = pickFence;\r\n            const status = gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0);\r\n            if (status == gl.WAIT_FAILED) {\r\n                for (const promise of promises) {\r\n                    promise.reject(\"Pick failed!\");\r\n                }\r\n                this.deletePickFence();\r\n            } else if (status != gl.TIMEOUT_EXPIRED) {\r\n                // we must copy read buffers into typed arrays in one go, or get annoying gl pipeline stalled warning on chrome\r\n                // this means we allocate more memory, but this also makes subsequent picks faster.\r\n                gl.bindBuffer(gl.PIXEL_PACK_BUFFER, readBuffers.pick);\r\n                gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, typedArrays.pick);\r\n                gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n                // resolve promises\r\n                for (const promise of promises) {\r\n                    promise.resolve();\r\n                }\r\n                this.deletePickFence();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    private deletePickFence() {\r\n        this.gl.deleteSync(this.pickFence?.sync ?? null);\r\n        this.pickFence = undefined;\r\n    }\r\n}\r\n", "import { glCreateBuffer, glCreateFrameBuffer, glCreateProgram, glCreateRenderbuffer, glCreateSampler, glCreateTexture, glCreateVertexArray, type WebGLResource, type BufferParams, type BufferTargetString, type FrameBufferParams, type ProgramParams, type RenderbufferParams, type SamplerParams, type TextureParams, type TextureTargetString, type VertexArrayParams, glCreateProgramAsync, type ProgramAsyncParams, glLimits } from \"webgl2\";\r\n\r\n/**\r\n * A WebGL resource tracking helper class.\r\n * @remarks\r\n * Resource bins are used to track allocation of WebGL resources and assist with automatic disposal.\r\n * @category Render Module\r\n */\r\nexport class ResourceBin {\r\n    private readonly resourceMap = new Map<WebGLResource, ResourceInfo[]>();\r\n\r\n    /** @internal */\r\n    constructor(\r\n        /** The underlying WebGL2 rendering context. */\r\n        readonly gl: WebGL2RenderingContext,\r\n        /** The name of the resource bin. */\r\n        readonly name: string,\r\n        private readonly collection: Set<ResourceBin>) {\r\n        this.collection.add(this);\r\n    }\r\n\r\n    get resourceInfo(): IterableIterator<ResourceInfo> {\r\n        const { resourceMap } = this;\r\n        function* iterate() {\r\n            for (const infos of resourceMap.values()) {\r\n                for (const info of infos) {\r\n                    yield { ...info } as const satisfies ResourceInfo;\r\n                }\r\n            }\r\n        }\r\n        return iterate();\r\n    }\r\n\r\n    get size() {\r\n        return this.resourceMap.size;\r\n    }\r\n\r\n    createBuffer(params: BufferParams) {\r\n        return this.add(glCreateBuffer(this.gl, params), { kind: \"Buffer\", target: params.kind, byteSize: bufferBytes(params) });\r\n    }\r\n\r\n    createFrameBuffer(params: FrameBufferParams) {\r\n        return this.add(glCreateFrameBuffer(this.gl, params), { kind: \"Framebuffer\" });\r\n    }\r\n\r\n    createProgram(params: ProgramParams) {\r\n        return this.add(glCreateProgram(this.gl, params), { kind: \"Program\" });\r\n    }\r\n\r\n    createProgramAsync(params: ProgramAsyncParams) {\r\n        const ret = glCreateProgramAsync(this.gl, params);\r\n        this.add(ret.program, { kind: \"Program\" });\r\n        return ret;\r\n    }\r\n\r\n    createRenderBuffer(params: RenderbufferParams) {\r\n        return this.add(glCreateRenderbuffer(this.gl, params), { kind: \"Renderbuffer\", byteSize: renderBufferBytes(this.gl, params) });\r\n    }\r\n\r\n    createSampler(params: SamplerParams) {\r\n        return this.add(glCreateSampler(this.gl, params), { kind: \"Sampler\" });\r\n    }\r\n\r\n    createTexture(params: TextureParams) {\r\n        return this.add(glCreateTexture(this.gl, params), { kind: \"Texture\", target: params.kind, byteSize: textureBytes(params) });\r\n    }\r\n\r\n    createTransformFeedback() {\r\n        return this.add(this.gl.createTransformFeedback()!, { kind: \"TransformFeedback\" });\r\n    }\r\n\r\n    createVertexArray(params: VertexArrayParams): WebGLVertexArrayObject {\r\n        return this.add(glCreateVertexArray(this.gl, params), { kind: \"VertexArray\" });\r\n    }\r\n\r\n    private add<T extends WebGLResource>(resource: T, info: ResourceInfo): T {\r\n        console.assert(resource.constructor.name.startsWith(\"WebGL\"));\r\n        if (!this.resourceMap.has(resource)) {\r\n            this.resourceMap.set(resource, [info]);\r\n        } else {\r\n            throw new Error(\"Resource added more than once!\");\r\n        }\r\n        return resource;\r\n    }\r\n\r\n    // delete resources that are already kept alive/referenced by other resources,\r\n    // e.g. a buffer referenced by a vertex array object or a texture referenced by a framebuffer.\r\n    // this will remove them from the list of attached resources but retain info for resource tracking purposes\r\n    subordinate(owner: WebGLVertexArrayObject | WebGLFramebuffer, ...resources: readonly (WebGLResource | null)[]) {\r\n        const deletedInfos: ResourceInfo[] = [];\r\n        console.assert(resources.length > 0);\r\n        this.del(resources, deletedInfos);\r\n        const ownerInfos = this.resourceMap.get(owner);\r\n        if (ownerInfos) {\r\n            ownerInfos.push(...deletedInfos);\r\n        }\r\n    }\r\n\r\n    delete(...resources: readonly (WebGLResource | null)[]) {\r\n        this.del(resources);\r\n    }\r\n\r\n    private del(resources: readonly (WebGLResource | null)[], deleteInfos?: ResourceInfo[]) {\r\n        const { gl, resourceMap } = this;\r\n        for (const resource of resources) {\r\n            if (!resource)\r\n                continue;\r\n            const infos = this.resourceMap.get(resource);\r\n            if (infos && infos.length > 0) {\r\n                for (const info of infos) {\r\n                    deleteInfos?.push(info);\r\n                }\r\n                const [primary] = infos;\r\n                gl[`delete${primary.kind}`](resource);\r\n                resourceMap.delete(resource);\r\n            } else {\r\n                throw new Error(\"Resource could not be found!\"); // removed twice or never added in the first place?\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteAll() {\r\n        this.delete(...this.resourceMap.keys());\r\n        this.resourceMap.clear(); // remove any detached entries\r\n    }\r\n\r\n    dispose() {\r\n        if (this.gl) {\r\n            this.deleteAll();\r\n            this.collection.delete(this);\r\n        }\r\n    }\r\n}\r\n\r\nfunction bufferBytes(params: BufferParams) {\r\n    return \"byteSize\" in params ? params.byteSize : params.srcData.byteLength;\r\n}\r\n\r\nfunction renderBufferBytes(gl: WebGL2RenderingContext, params: RenderbufferParams) {\r\n    const { width, height, internalFormat } = params;\r\n    const samples = params.samples == \"max\" ? glLimits(gl).MAX_SAMPLES : params.samples ?? 1;\r\n    const bytesPerPixel = Math.ceil(internalFormatTexelBytes[internalFormat]); // this is an approximation as drivers may choose a different, albeit compatible format, e.g. RGBA8 instead of RGB8.\r\n    return width * height * bytesPerPixel * samples;\r\n}\r\n\r\nfunction textureBytes(params: TextureParams) {\r\n    const width = params.width ?? params.image.width;\r\n    const height = params.height ?? params.image.height;\r\n    const depth = \"depth\" in params ? params.depth : 1;\r\n    const faces = params.kind == \"TEXTURE_CUBE_MAP\" ? 6 : 1;\r\n    const topLeveltexels = width * height * depth * faces;\r\n    let totalTexels = 0;\r\n    let levels = 1;\r\n    if (\"mipMaps\" in params) {\r\n        const { mipMaps } = params;\r\n        const isNumber = typeof mipMaps == \"number\";\r\n        levels = isNumber ? mipMaps : mipMaps.length;\r\n    }\r\n    if (\"generateMipMaps\" in params && params.generateMipMaps && isPowerOf2(width) && isPowerOf2(height)) {\r\n        levels = Math.min(Math.log2(width), Math.log2(height));\r\n    }\r\n    for (let level = 0; level < levels; level++) {\r\n        totalTexels += topLeveltexels >> level;\r\n    }\r\n    const bytesPerTexel = Math.ceil(internalFormatTexelBytes[params.internalFormat]);\r\n    return Math.ceil(totalTexels * bytesPerTexel);\r\n}\r\n\r\n// only makes sense if entire buffers are use exclusively for this vao.\r\nfunction vaoReferencedByteSize(gl: WebGL2RenderingContext, params: VertexArrayParams) {\r\n    const buffers = new Set<WebGLBuffer>();\r\n    for (const attrib of params.attributes) {\r\n        const buffer = attrib?.buffer;\r\n        if (buffer) {\r\n            buffers.add(buffer);\r\n        }\r\n    }\r\n    let byteSize = 0;\r\n    for (const buffer of buffers) {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n        byteSize += gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);\r\n    };\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    if (params.indices) {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, params.indices);\r\n        byteSize += gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n    return byteSize;\r\n}\r\n\r\nfunction isPowerOf2(value: number) {\r\n    return (value & (value - 1)) == 0;\r\n}\r\n\r\nconst resourceKinds = [\r\n    \"Buffer\",\r\n    \"Framebuffer\",\r\n    \"Program\",\r\n    \"Query\",\r\n    \"Renderbuffer\",\r\n    \"Sampler\",\r\n    \"Shader\",\r\n    \"Sync\",\r\n    \"TransformFeedback\",\r\n    \"Texture\",\r\n    \"VertexArray\",\r\n] as const;\r\n\r\nconst internalFormatTexelBytes = {\r\n    \"RGB\": 3,\r\n    \"RGBA\": 4,\r\n    \"LUMINANCE_ALPHA\": 2,\r\n    \"LUMINANCE\": 1,\r\n    \"ALPHA\": 1,\r\n    \"STENCIL_INDEX8\": 1,\r\n    \"R8\": 1,\r\n    \"R8_SNORM\": 1,\r\n    \"RG8\": 2,\r\n    \"RG8_SNORM\": 2,\r\n    \"RGB8\": 3,\r\n    \"RGB8_SNORM\": 3,\r\n    \"RGB565\": 2,\r\n    \"RGBA4\": 2,\r\n    \"RGB5_A1\": 2,\r\n    \"RGBA8\": 4,\r\n    \"RGBA8_SNORM\": 4,\r\n    \"RGB10_A2\": 4,\r\n    \"RGB10_A2UI\": 4,\r\n    \"SRGB8\": 3,\r\n    \"SRGB8_ALPHA8\": 4,\r\n    \"R16F\": 2,\r\n    \"RG16F\": 4,\r\n    \"RGB16F\": 6,\r\n    \"RGBA16F\": 8,\r\n    \"R32F\": 4,\r\n    \"RG32F\": 8,\r\n    \"RGB32F\": 16,\r\n    \"RGBA32F\": 32,\r\n    \"R11F_G11F_B10F\": 4,\r\n    \"RGB9_E5\": 4,\r\n    \"R8I\": 1,\r\n    \"R8UI\": 1,\r\n    \"R16I\": 2,\r\n    \"R16UI\": 2,\r\n    \"R32I\": 4,\r\n    \"R32UI\": 4,\r\n    \"RG8I\": 2,\r\n    \"RG8UI\": 2,\r\n    \"RG16I\": 4,\r\n    \"RG16UI\": 4,\r\n    \"RG32I\": 8,\r\n    \"RG32UI\": 8,\r\n    \"RGB8I\": 3,\r\n    \"RGB8UI\": 4,\r\n    \"RGB16I\": 6,\r\n    \"RGB16UI\": 6,\r\n    \"RGB32I\": 12,\r\n    \"RGB32UI\": 12,\r\n    \"RGBA8I\": 4,\r\n    \"RGBA8UI\": 4,\r\n    \"RGBA16I\": 8,\r\n    \"RGBA16UI\": 8,\r\n    \"RGBA32I\": 16,\r\n    \"RGBA32UI\": 16,\r\n    \"DEPTH_COMPONENT16\": 2,\r\n    \"DEPTH_COMPONENT24\": 3,\r\n    \"DEPTH_COMPONENT32F\": 4,\r\n    \"DEPTH24_STENCIL8\": 4,\r\n    \"DEPTH32F_STENCIL8\": 5,\r\n    // WEBGL_compressed_texture_s3tc\r\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\": .5,\r\n    \"COMPRESSED_RGBA_S3TC_DXT1_EXT\": .5,\r\n    \"COMPRESSED_RGBA_S3TC_DXT3_EXT\": 1,\r\n    \"COMPRESSED_RGBA_S3TC_DXT5_EXT\": 1,\r\n    // WEBGL_compressed_texture_s3tc_srgb\r\n    \"COMPRESSED_SRGB_S3TC_DXT1_EXT\": .5,\r\n    \"COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT\": .5,\r\n    \"COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT\": 1,\r\n    \"COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\": 1,\r\n    // WEBGL_compressed_texture_etc\r\n    \"COMPRESSED_R11_EAC\": .5,\r\n    \"COMPRESSED_SIGNED_R11_EAC\": .5,\r\n    \"COMPRESSED_RG11_EAC\": 1,\r\n    \"COMPRESSED_SIGNED_RG11_EAC\": 1,\r\n    \"COMPRESSED_RGB8_ETC2\": .5,\r\n    \"COMPRESSED_RGBA8_ETC2_EAC\": 1,\r\n    \"COMPRESSED_SRGB8_ETC2\": .5,\r\n    \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\": 1,\r\n    \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\": .5,\r\n    \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\": .5,\r\n    // WEBGL_compressed_texture_pvrtc\r\n    \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\": .5,\r\n    \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\": .5,\r\n    \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\": .25,\r\n    \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\": .25,\r\n    // WEBGL_compressed_texture_etc1    \r\n    \"COMPRESSED_RGB_ETC1_WEBGL\": .5,\r\n    // WEBGL_compressed_texture_astc    \r\n    \"COMPRESSED_RGBA_ASTC_4x4_KHR\": 16 / (4 * 4),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR\": 16 / (4 * 4),\r\n    \"COMPRESSED_RGBA_ASTC_5x4_KHR\": 16 / (5 * 4),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR\": 16 / (5 * 4),\r\n    \"COMPRESSED_RGBA_ASTC_5x5_KHR\": 16 / (5 * 5),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR\": 16 / (5 * 5),\r\n    \"COMPRESSED_RGBA_ASTC_6x5_KHR\": 16 / (6 * 5),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR\": 16 / (6 * 5),\r\n    \"COMPRESSED_RGBA_ASTC_6x6_KHR\": 16 / (6 * 6),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR\": 16 / (6 * 6),\r\n    \"COMPRESSED_RGBA_ASTC_8x5_KHR\": 16 / (8 * 5),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR\": 16 / (8 * 5),\r\n    \"COMPRESSED_RGBA_ASTC_8x6_KHR\": 16 / (8 * 6),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR\": 16 / (8 * 6),\r\n    \"COMPRESSED_RGBA_ASTC_8x8_KHR\": 16 / (8 * 8),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR\": 16 / (8 * 8),\r\n    \"COMPRESSED_RGBA_ASTC_10x5_KHR\": 16 / (10 * 5),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR\": 16 / (10 * 5),\r\n    \"COMPRESSED_RGBA_ASTC_10x6_KHR\": 16 / (10 * 6),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR\": 16 / (10 * 6),\r\n    \"COMPRESSED_RGBA_ASTC_10x10_KHR\": 16 / (10 * 10),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR\": 16 / (10 * 10),\r\n    \"COMPRESSED_RGBA_ASTC_12x10_KHR\": 16 / (12 * 10),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR\": 16 / (12 * 10),\r\n    \"COMPRESSED_RGBA_ASTC_12x12_KHR\": 16 / (12 * 12),\r\n    \"COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR\": 16 / (12 * 12),\r\n    // EXT_texture_compression_bptc    \r\n    \"COMPRESSED_RGBA_BPTC_UNORM_EXT\": 1,\r\n    \"COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\": 1,\r\n    \"COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT\": 1,\r\n    \"COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT\": 1,\r\n    // EXT_texture_compression_rgtc    \r\n    \"COMPRESSED_RED_RGTC1_EXT\": .5,\r\n    \"COMPRESSED_SIGNED_RED_RGTC1_EXT\": .5,\r\n    \"COMPRESSED_RED_GREEN_RGTC2_EXT\": 1,\r\n    \"COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT\": 1,\r\n} as const;\r\n\r\nexport type ResourceKind = typeof resourceKinds[number];\r\nexport type ResourceTarget = BufferTargetString | TextureTargetString | \"FRAMEBUFFER\";\r\n\r\nexport interface ResourceInfo {\r\n    readonly kind: ResourceKind;\r\n    readonly target?: ResourceTarget;\r\n    readonly byteSize?: number;\r\n    readonly tag?: string;\r\n}", "import { mat4, vec3, type ReadonlyMat4, type ReadonlyVec4 } from \"gl-matrix\";\r\n\r\n/** @internal */\r\nexport function decodeBase64(base64: string, type?: Uint8ArrayConstructor): Uint8Array;\r\nexport function decodeBase64(base64: string, type: Uint8ClampedArrayConstructor): Uint8ClampedArray;\r\nexport function decodeBase64(base64: string | undefined, type?: Uint8ArrayConstructor): Uint8Array | undefined;\r\nexport function decodeBase64(base64: string | undefined, type: Uint8ClampedArrayConstructor): Uint8ClampedArray | undefined;\r\nexport function decodeBase64(base64: string | undefined, type: Uint8ArrayConstructor | Uint8ClampedArrayConstructor = Uint8Array) {\r\n    if (base64) {\r\n        var binaryString = atob(base64);\r\n        var len = binaryString.length;\r\n        const bytes = new type(len);\r\n        for (let i = 0; i < len; i++) {\r\n            bytes[i] = binaryString.charCodeAt(i);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function orthoNormalBasisMatrixFromPlane(plane: ReadonlyVec4): ReadonlyMat4 {\r\n    const [nx, ny, nz, offs] = plane;\r\n    const axisZ = vec3.fromValues(nx, ny, nz);\r\n    const minI = Math.abs(nx) < Math.abs(ny) && Math.abs(nx) < Math.abs(nz) ? 0 : Math.abs(ny) < Math.abs(nz) ? 1 : 2;\r\n    const axisY = vec3.fromValues(0, 0, 0);\r\n    axisY[minI] = 1;\r\n    const axisX = vec3.cross(vec3.create(), axisY, axisZ);\r\n    vec3.cross(axisX, axisY, axisZ);\r\n    vec3.normalize(axisX, axisX);\r\n    vec3.cross(axisY, axisZ, axisX);\r\n    vec3.normalize(axisY, axisY);\r\n    const [bx, by, bz] = axisX;\r\n    const [tx, ty, tz] = axisY;\r\n    return mat4.fromValues(\r\n        bx, by, bz, 0,\r\n        tx, ty, tz, 0,\r\n        nx, ny, nz, 0,\r\n        nx * -offs, ny * -offs, nz * -offs, 1\r\n    );\r\n}", "import type { CubeImages, TextureParams } from \"webgl2\";\r\nimport { GL } from \"webgl2/constants\";\r\n\r\nconst identifier = new Uint8Array([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A]);\r\nconst HEADER_LEN = 12 + (13 * 4); // identifier + header elements (not including key value meta-data pairs)\r\n\r\nconst textureDataType = {\r\n    [GL.UNSIGNED_BYTE]: \"UNSIGNED_BYTE\",\r\n    [GL.UNSIGNED_SHORT_5_6_5]: \"UNSIGNED_SHORT_5_6_5\",\r\n    [GL.UNSIGNED_SHORT_4_4_4_4]: \"UNSIGNED_SHORT_4_4_4_4\",\r\n    [GL.UNSIGNED_SHORT_5_5_5_1]: \"UNSIGNED_SHORT_5_5_5_1\",\r\n    [GL.HALF_FLOAT]: \"HALF_FLOAT\",\r\n    // [GL.HALF_FLOAT_OES]: \"HALF_FLOAT_OES\",\r\n    [GL.FLOAT]: \"FLOAT\",\r\n    [GL.UNSIGNED_SHORT]: \"UNSIGNED_SHORT\",\r\n    [GL.UNSIGNED_INT]: \"UNSIGNED_INT\",\r\n    [GL.UNSIGNED_INT_24_8]: \"UNSIGNED_INT_24_8\",\r\n    [GL.BYTE]: \"BYTE\",\r\n    [GL.SHORT]: \"SHORT\",\r\n    [GL.INT]: \"INT\",\r\n    // [GL.FLOAT_32_UNSIGNED_INT_24_8_REV]: \"FLOAT_32_UNSIGNED_INT_24_8_REV\",\r\n    [GL.UNSIGNED_INT_5_9_9_9_REV]: \"UNSIGNED_INT_5_9_9_9_REV\",\r\n    [GL.UNSIGNED_INT_2_10_10_10_REV]: \"UNSIGNED_INT_2_10_10_10_REV\",\r\n    [GL.UNSIGNED_INT_10F_11F_11F_REV]: \"UNSIGNED_INT_10F_11F_11F_REV\",\r\n} as const;\r\ntype TextureDataType = keyof typeof textureDataType;\r\n\r\nconst textureFormatBase = {\r\n    [GL.RGB]: \"RGB\",\r\n    [GL.RGBA]: \"RGBA\",\r\n    [GL.ALPHA]: \"ALPHA\",\r\n    [GL.LUMINANCE]: \"LUMINANCE\",\r\n    [GL.LUMINANCE_ALPHA]: \"LUMINANCE_ALPHA\",\r\n    [GL.DEPTH_COMPONENT]: \"DEPTH_COMPONENT\",\r\n    [GL.DEPTH_STENCIL]: \"DEPTH_STENCIL\",\r\n    [GL.SRGB_EXT]: \"SRGB_EXT\",\r\n    [GL.SRGB_ALPHA_EXT]: \"SRGB_ALPHA_EXT\",\r\n    [GL.RED]: \"RED\",\r\n    [GL.RG]: \"RG\",\r\n    [GL.RED_INTEGER]: \"RED_INTEGER\",\r\n    [GL.RG_INTEGER]: \"RG_INTEGER\",\r\n    [GL.RGB_INTEGER]: \"RGB_INTEGER\",\r\n    [GL.RGBA_INTEGER]: \"RGBA_INTEGER\",\r\n} as const;\r\ntype TextureFormatBase = keyof typeof textureFormatBase;\r\n\r\nconst textureFormatUncompressed = {\r\n    [GL.R8]: \"R8\",\r\n    [GL.R8_SNORM]: \"R8_SNORM\",\r\n    [GL.RG8]: \"RG8\",\r\n    [GL.RG8_SNORM]: \"RG8_SNORM\",\r\n    [GL.RGB8]: \"RGB8\",\r\n    [GL.RGB8_SNORM]: \"RGB8_SNORM\",\r\n    [GL.RGB565]: \"RGB565\",\r\n    [GL.RGBA4]: \"RGBA4\",\r\n    [GL.RGB5_A1]: \"RGB5_A1\",\r\n    [GL.RGBA8]: \"RGBA8\",\r\n    [GL.RGBA8_SNORM]: \"RGBA8_SNORM\",\r\n    [GL.RGB10_A2]: \"RGB10_A2\",\r\n    [GL.RGB10_A2UI]: \"RGB10_A2UI\",\r\n    [GL.SRGB8]: \"SRGB8\",\r\n    [GL.SRGB8_ALPHA8]: \"SRGB8_ALPHA8\",\r\n    [GL.R16F]: \"R16F\",\r\n    [GL.RG16F]: \"RG16F\",\r\n    [GL.RGB16F]: \"RGB16F\",\r\n    [GL.RGBA16F]: \"RGBA16F\",\r\n    [GL.R32F]: \"R32F\",\r\n    [GL.RG32F]: \"RG32F\",\r\n    [GL.RGB32F]: \"RGB32F\",\r\n    [GL.RGBA32F]: \"RGBA32F\",\r\n    [GL.R11F_G11F_B10F]: \"R11F_G11F_B10F\",\r\n    [GL.RGB9_E5]: \"RGB9_E5\",\r\n    [GL.R8I]: \"R8I\",\r\n    [GL.R8UI]: \"R8UI\",\r\n    [GL.R16I]: \"R16I\",\r\n    [GL.R16UI]: \"R16UI\",\r\n    [GL.R32I]: \"R32I\",\r\n    [GL.R32UI]: \"R32UI\",\r\n    [GL.RG8I]: \"RG8I\",\r\n    [GL.RG8UI]: \"RG8UI\",\r\n    [GL.RG16I]: \"RG16I\",\r\n    [GL.RG16UI]: \"RG16UI\",\r\n    [GL.RG32I]: \"RG32I\",\r\n    [GL.RG32UI]: \"RG32UI\",\r\n    [GL.RGB8I]: \"RGB8I\",\r\n    [GL.RGB8UI]: \"RGB8UI\",\r\n    [GL.RGB16I]: \"RGB16I\",\r\n    [GL.RGB16UI]: \"RGB16UI\",\r\n    [GL.RGB32I]: \"RGB32I\",\r\n    [GL.RGB32UI]: \"RGB32UI\",\r\n    [GL.RGBA8I]: \"RGBA8I\",\r\n    [GL.RGBA8UI]: \"RGBA8UI\",\r\n    [GL.RGBA16I]: \"RGBA16I\",\r\n    [GL.RGBA16UI]: \"RGBA16UI\",\r\n    [GL.RGBA32I]: \"RGBA32I\",\r\n    [GL.RGBA32UI]: \"RGBA32UI\",\r\n    // [GL.SRGB8_ALPHA8_EXT]: \"SRGB8_ALPHA8_EXT\",\r\n} as const\r\ntype TextureFormatUncompressed = keyof typeof textureFormatUncompressed;\r\ntype TextureFormatUncompressedString = (typeof textureFormatUncompressed)[TextureFormatUncompressed]\r\n\r\nconst textureFormatCompressed = {\r\n    [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: \"COMPRESSED_RGB_S3TC_DXT1_EXT\",\r\n    [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: \"COMPRESSED_RGBA_S3TC_DXT1_EXT\",\r\n    [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: \"COMPRESSED_RGBA_S3TC_DXT3_EXT\",\r\n    [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: \"COMPRESSED_RGBA_S3TC_DXT5_EXT\",\r\n    [GL.COMPRESSED_R11_EAC]: \"COMPRESSED_R11_EAC\",\r\n    [GL.COMPRESSED_SIGNED_R11_EAC]: \"COMPRESSED_SIGNED_R11_EAC\",\r\n    [GL.COMPRESSED_RG11_EAC]: \"COMPRESSED_RG11_EAC\",\r\n    [GL.COMPRESSED_SIGNED_RG11_EAC]: \"COMPRESSED_SIGNED_RG11_EAC\",\r\n    [GL.COMPRESSED_RGB8_ETC2]: \"COMPRESSED_RGB8_ETC2\",\r\n    [GL.COMPRESSED_RGBA8_ETC2_EAC]: \"COMPRESSED_RGBA8_ETC2_EAC\",\r\n    [GL.COMPRESSED_SRGB8_ETC2]: \"COMPRESSED_SRGB8_ETC2\",\r\n    [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: \"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\",\r\n    [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: \"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\",\r\n    [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: \"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2\",\r\n    [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: \"COMPRESSED_RGB_PVRTC_4BPPV1_IMG\",\r\n    [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: \"COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\",\r\n    [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: \"COMPRESSED_RGB_PVRTC_2BPPV1_IMG\",\r\n    [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: \"COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\",\r\n    [GL.COMPRESSED_RGB_ETC1_WEBGL]: \"COMPRESSED_RGB_ETC1_WEBGL\",\r\n    // [GL.COMPRESSED_RGB_ATC_WEBGL]: \"COMPRESSED_RGB_ATC_WEBGL\",\r\n    // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: \"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\",\r\n    // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: \"COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL\",\r\n} as const;\r\ntype TextureFormatCompressed = keyof typeof textureFormatCompressed;\r\n\r\nconst textureFormatInternal = {\r\n    ...textureFormatUncompressed,\r\n    ...textureFormatCompressed,\r\n    // [GL.DEPTH_COMPONENT16]: \"DEPTH_COMPONENT16\",\r\n    // [GL.DEPTH_COMPONENT24]: \"DEPTH_COMPONENT24\",\r\n    // [GL.DEPTH_COMPONENT32F]: \"DEPTH_COMPONENT32F\",\r\n    // [GL.DEPTH32F_STENCIL8]: \"DEPTH32F_STENCIL8\",\r\n} as const;\r\ntype TextureFormatInternal = keyof typeof textureFormatInternal;\r\n\r\nfunction parseHeader(ktx: Uint8Array) {\r\n    const idDataView = new DataView(ktx.buffer, ktx.byteOffset, 12);\r\n    for (let i = 0; i < identifier.length; i++) {\r\n        if (idDataView.getUint8(i) != identifier[i]) {\r\n            throw new Error(\"texture missing KTX identifier\");\r\n        }\r\n    }\r\n\r\n    // load the rest of the header in native 32 bit uint\r\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\r\n    const headerDataView = new DataView(ktx.buffer, 12 + ktx.byteOffset, 13 * dataSize);\r\n    const endianness = headerDataView.getUint32(0, true);\r\n    const littleEndian = endianness === 0x04030201;\r\n\r\n    return {\r\n        glType: headerDataView.getUint32(1 * dataSize, littleEndian) as 0 | TextureDataType,// must be 0 for compressed textures\r\n        glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\r\n        glFormat: headerDataView.getUint32(3 * dataSize, littleEndian) as 0 | TextureFormatBase, // must be 0 for compressed textures\r\n        glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian) as TextureFormatInternal, // the value of arg passed to gl.texImage2D() or gl.compressedTexImage2D(,,x,,,,)\r\n        glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian) as TextureFormatBase, // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\r\n        pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\r\n        pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\r\n        pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\r\n        numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\r\n        numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\r\n        numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\r\n        bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\r\n        littleEndian,\r\n    };\r\n}\r\n\r\ntype Header = ReturnType<typeof parseHeader>;\r\n\r\nfunction* getImages(header: Header, ktx: Uint8Array, littleEndian: boolean) {\r\n    const mips = Math.max(1, header.numberOfMipmapLevels);\r\n    const elements = Math.max(1, header.numberOfArrayElements);\r\n    const faces = header.numberOfFaces;\r\n    const depth = Math.max(1, header.pixelDepth);\r\n    let dataOffset = HEADER_LEN + header.bytesOfKeyValueData;\r\n    const imageSizeDenom = (faces == 6 && header.numberOfArrayElements == 0) ? 1 : elements * faces * depth;\r\n    const dataView = new DataView(ktx.buffer, ktx.byteOffset);\r\n\r\n    for (let mip = 0; mip < mips; mip++) {\r\n        const width = header.pixelWidth >> mip;\r\n        const height = header.pixelHeight >> mip;\r\n        const imageSize = dataView.getInt32(dataOffset, littleEndian);\r\n        dataOffset += 4;\r\n        const imageStride = imageSize / imageSizeDenom;\r\n        console.assert(imageStride % 4 == 0);\r\n        for (let element = 0; element < elements; element++) {\r\n            for (let face = 0; face < faces; face++) {\r\n                for (let z_slice = 0; z_slice < depth; z_slice++) {\r\n                    // const target = faces == 6 ? GL.TEXTURE_CUBE_MAP_POSITIVE_X + face : GL.TEXTURE_2D;\r\n                    const begin = dataOffset;\r\n                    dataOffset += imageStride;\r\n                    const end = dataOffset;\r\n                    const image = { mip, element, face, width, height, blobRange: [begin, end], buffer: ktx.subarray(begin, end) } as const;\r\n                    yield image;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.assert(dataOffset == ktx.byteLength);\r\n}\r\n\r\n/** @internal */\r\nexport function parseKTX(ktx: Uint8Array): TextureParams {\r\n    const header = parseHeader(ktx);\r\n    const { littleEndian } = header;\r\n    const baseFormat = textureFormatBase[header.glBaseInternalFormat]; // we don't really need this here (but may be useful for debugging).\r\n    const isArray = header.numberOfArrayElements > 0;\r\n    const isCube = header.numberOfFaces == 6;\r\n    const is3D = header.pixelDepth > 0;\r\n    const hasMips = header.numberOfMipmapLevels > 1;\r\n    const numMips = Math.max(1, header.numberOfMipmapLevels);\r\n    const internalFormat = textureFormatInternal[header.glInternalFormat];\r\n    const kind = isArray ? \"TEXTURE_ARRAY\" : isCube ? \"TEXTURE_CUBE_MAP\" : is3D ? \"TEXTURE_3D\" : \"TEXTURE_2D\";\r\n    const type = header.glType ? textureDataType[header.glType] : undefined;\r\n    const dim = { width: header.pixelWidth, height: header.pixelHeight, ...(is3D ? { depth: header.pixelDepth } : undefined) };\r\n    let mips: CubeImages[] | BufferSource[] = undefined!;\r\n    if (isCube) {\r\n        const images = new Array(numMips).fill(null).map(_ => ([] as any[]));\r\n        for (const image of getImages(header, ktx, littleEndian)) {\r\n            images[image.mip][image.face] = image.buffer;\r\n        }\r\n        mips = images as unknown as CubeImages[];\r\n    } else {\r\n        mips = new Array<BufferSource>(numMips);\r\n        for (const image of getImages(header, ktx, littleEndian)) {\r\n            mips[image.mip] = image.buffer;\r\n        }\r\n    }\r\n    const imageData = hasMips ? { mipMaps: mips } as const : { image: mips[0] } as const;\r\n    return {\r\n        kind,\r\n        internalFormat,\r\n        type: type,\r\n        ...dim,\r\n        ...imageData,\r\n    } as TextureParams;\r\n    // throw new Error(\"UnsupportedKTX format!\");\r\n}\r\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\r\nimport { parseKTX } from \"core3d/ktx\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glUBOProxy, glClear, glDraw, glState } from \"webgl2\";\r\nimport { type TextureParams, type UniformTypes, type TextureParamsCubeUncompressed, type TextureParamsCubeUncompressedMipMapped } from \"webgl2\";\r\nimport { BufferFlags } from \"core3d/buffers\";\r\n\r\n/** @internal */\r\nexport class BackgroundModule implements RenderModule {\r\n    readonly kind = \"background\";\r\n    private abortController: AbortController | undefined;\r\n    url: string | undefined;\r\n    textureParams: {\r\n        readonly diffuse: TextureParamsCubeUncompressed;\r\n        readonly specular: TextureParamsCubeUncompressedMipMapped;\r\n        readonly skybox: TextureParamsCubeUncompressed;\r\n    } | undefined; // undefined means no change in textures\r\n\r\n    readonly uniforms = {\r\n        envBlurNormalized: \"float\",\r\n        mipCount: \"int\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n        return new BackgroundModuleContext(context, this, uniforms, resources);\r\n    }\r\n\r\n    createUniforms() {\r\n        return glUBOProxy(this.uniforms);\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\r\n        const { vertexShader, fragmentShader } = context.imports.shaders.background.render;\r\n        const bin = context.resourceBin(\"Background\");\r\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.buffer.byteLength });\r\n        const uniformBufferBlocks = [\"Camera\", \"Background\"];\r\n        const textureUniforms = [\"textures.skybox\", \"textures.ibl.specular\"];\r\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks, textureUniforms });\r\n        return { bin, uniforms, program } as const;\r\n    }\r\n\r\n    async downloadTextures(baseUrl: URL) {\r\n        if (this.abortController) {\r\n            this.abortController.abort();\r\n        }\r\n        const abortController = this.abortController = new AbortController();\r\n        const { signal } = abortController;\r\n        try {\r\n            const promises = [\r\n                download<TextureParamsCubeUncompressedMipMapped>(new URL(\"radiance.ktx\", baseUrl)),\r\n                download<TextureParamsCubeUncompressed>(new URL(\"irradiance.ktx\", baseUrl)),\r\n                download<TextureParamsCubeUncompressed>(new URL(\"background.ktx\", baseUrl)),\r\n            ] as const;\r\n            const [specular, diffuse, skybox] = await Promise.all(promises);\r\n            this.textureParams = { diffuse, specular, skybox } as const;\r\n        } finally {\r\n            this.abortController = undefined;\r\n        }\r\n\r\n        async function download<T extends TextureParams>(url: URL) {\r\n            const response = await fetch(url, { mode: \"cors\", signal });\r\n            if (response.ok) {\r\n                var ktxData = await response.arrayBuffer();\r\n                var params = parseKTX(new Uint8Array(ktxData));\r\n                return params as T;\r\n            } else {\r\n                throw new Error(`HTTP Error:${response.status} ${response.status}`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ntype Uniforms = ReturnType<BackgroundModule[\"createUniforms\"]>;\r\ntype Resources = Awaited<ReturnType<BackgroundModule[\"createResources\"]>>;\r\n\r\nclass BackgroundModuleContext implements RenderModuleContext {\r\n    skybox: WebGLTexture;\r\n\r\n    constructor(readonly context: RenderContext, readonly module: BackgroundModule, readonly uniforms: Uniforms, readonly resources: Resources) {\r\n        this.skybox = resources.bin.createTexture(context.defaultIBLTextureParams);\r\n    }\r\n\r\n    update(state: DerivedRenderState) {\r\n        const { context, resources, module, uniforms, skybox } = this;\r\n        const { bin } = resources;\r\n        const { background } = state;\r\n\r\n        if (context.hasStateChanged({ background })) {\r\n            uniforms.values.envBlurNormalized = background.blur ?? 0;\r\n            context.updateUniformBuffer(resources.uniforms, this.uniforms);\r\n            const { url } = state.background;\r\n            if (url) {\r\n                if (url != module.url) {\r\n                    module.downloadTextures(new URL(url)).then(() => { context.changed = true; });\r\n                }\r\n            } else {\r\n                context.updateIBLTextures(null);\r\n                bin.delete(skybox);\r\n                this.skybox = bin.createTexture(context.defaultIBLTextureParams);\r\n            }\r\n            module.url = url;\r\n        }\r\n\r\n        if (module.textureParams) {\r\n            context.updateIBLTextures(module.textureParams);\r\n            bin.delete(skybox);\r\n            this.skybox = bin.createTexture(module.textureParams.skybox);\r\n            uniforms.values.mipCount = context.iblTextures.numMipMaps;\r\n            context.updateUniformBuffer(resources.uniforms, this.uniforms);\r\n            module.textureParams = undefined; // we already copied the pixels into texture, so we no longer need the original.\r\n        }\r\n    }\r\n\r\n    render(state: DerivedRenderState) {\r\n        const { context, resources, skybox } = this;\r\n        const { program, uniforms } = resources;\r\n        const { gl, cameraUniforms, samplerSingle, samplerMip } = context;\r\n\r\n        const clearColor = state.background.color ?? [0.33, 0.33, 0.33, 1];\r\n\r\n        if ((!state.background.color || state.background.url) && state.camera.kind != \"orthographic\") {\r\n            const { specular } = context.iblTextures;\r\n            glState(gl, {\r\n                program,\r\n                uniformBuffers: [cameraUniforms, uniforms],\r\n                textures: [\r\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: skybox, sampler: samplerSingle },\r\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\r\n                ],\r\n                depth: {\r\n                    test: false,\r\n                    writeMask: false,\r\n                },\r\n            });\r\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\r\n            context.addRenderStatistics(stats);\r\n        } else {\r\n            glClear(gl, { kind: \"COLOR\", drawBuffer: 0, color: clearColor });\r\n        }\r\n    }\r\n\r\n    contextLost() {\r\n        const { module } = this;\r\n        module.url = undefined; // force an envmap texture reload\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n    }\r\n}\r\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glUBOProxy, glDraw, glState, type UniformTypes } from \"webgl2\";\r\nimport { mat4, vec3 } from \"gl-matrix\";\r\n\r\n/** @internal */\r\nexport class GridModule implements RenderModule {\r\n    readonly kind = \"grid\";\r\n    readonly uniforms = {\r\n        origin: \"vec3\",\r\n        axisX: \"vec3\",\r\n        axisY: \"vec3\",\r\n        size1: \"float\",\r\n        size2: \"float\",\r\n        color1: \"vec3\",\r\n        color2: \"vec3\",\r\n        distance: \"float\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n        return new GridModuleContext(context, this, uniforms, resources);\r\n    }\r\n\r\n    createUniforms() {\r\n        return glUBOProxy(this.uniforms);\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\r\n        const { vertexShader, fragmentShader } = context.imports.shaders.grid.render;\r\n        const bin = context.resourceBin(\"Grid\");\r\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\r\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Camera\", \"Grid\"] })\r\n        return { bin, uniforms, program } as const;\r\n    }\r\n}\r\n\r\ntype Uniforms = ReturnType<GridModule[\"createUniforms\"]>;\r\ntype Resources = Awaited<ReturnType<GridModule[\"createResources\"]>>;\r\n\r\nclass GridModuleContext implements RenderModuleContext {\r\n    constructor(readonly context: RenderContext, readonly module: GridModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\r\n\r\n    update(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { uniforms } = resources;\r\n        const { grid, localSpaceTranslation } = state;\r\n        if (context.hasStateChanged({ grid, localSpaceTranslation })) {\r\n            const { values } = this.uniforms;\r\n            const { axisX, axisY, origin } = grid;\r\n            const worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), localSpaceTranslation));\r\n            values.origin = vec3.transformMat4(vec3.create(), origin, worldLocalMatrix);\r\n            values.axisX = axisX;\r\n            values.axisY = axisY;\r\n            values.color1 = grid.color1;\r\n            values.color2 = grid.color2;\r\n            values.size1 = grid.size1;\r\n            values.size2 = grid.size2;\r\n            values.distance = grid.distance;\r\n            context.updateUniformBuffer(uniforms, this.uniforms);\r\n        }\r\n    }\r\n\r\n    render(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { program, uniforms } = resources;\r\n        const { gl, cameraUniforms } = context;\r\n\r\n        if (state.grid.enabled) {\r\n            glState(gl, {\r\n                program,\r\n                uniformBuffers: [cameraUniforms, uniforms],\r\n                depth: {\r\n                    test: true,\r\n                    writeMask: false,\r\n                },\r\n                sample: {\r\n                    alphaToCoverage: false\r\n                },\r\n                blend: {\r\n                    enable: true,\r\n                    srcRGB: \"SRC_ALPHA\",\r\n                    dstRGB: \"ONE_MINUS_SRC_ALPHA\",\r\n                    srcAlpha: \"ZERO\",\r\n                    dstAlpha: \"ONE\",\r\n                },\r\n            });\r\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\r\n            context.addRenderStatistics(stats);\r\n        }\r\n    }\r\n\r\n    contextLost(): void {\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n    }\r\n}", "const offlineDirs = new Map<string, WeakRef<FileSystemDirectoryHandle> | null>();\r\nconst rootPromise = navigator.storage.getDirectory();\r\n\r\n\r\nasync function getDirHandle(dirname: string) {\r\n    try {\r\n        const root = await rootPromise;\r\n        return await root.getDirectoryHandle(dirname);\r\n    } catch {\r\n    }\r\n}\r\n\r\n/** @internal attempt to read file from OPFS offline storage */\r\nexport async function requestOfflineFile(pathname: string): Promise<Response | undefined> {\r\n    const m = /\\/([\\da-f]{32})(?=\\/).*\\/(.+)$/.exec(pathname);\r\n    if (m && m.length == 3) {\r\n        const [_, dirname, filename] = m;\r\n        let dirHandleRef = await offlineDirs.get(dirname);\r\n        if (dirHandleRef !== null) {\r\n            let dirHandle = dirHandleRef?.deref();\r\n            if (!dirHandle) {\r\n                dirHandle = await getDirHandle(dirname);\r\n                if (dirHandle) {\r\n                    dirHandleRef = new WeakRef(dirHandle);\r\n                    offlineDirs.set(dirname, dirHandleRef);\r\n                } else {\r\n                    offlineDirs.set(dirname, null);\r\n                }\r\n            }\r\n            if (dirHandle) {\r\n                try {\r\n                    const fileHandle = await dirHandle.getFileHandle(filename);\r\n                    const file = await fileHandle.getFile();\r\n                    // console.log(`loading ${filename}`);\r\n                    return new Response(file, { status: 200, headers: { \"Content-Type\": \"application/octet-stream\" } });\r\n                } catch {\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // console.log(`skipping ${pathname}`);\r\n}\r\n", "import { requestOfflineFile } from \"core3d/offline\";\r\n\r\n/** @internal */\r\nexport class AbortableDownload {\r\n    result: Promise<ArrayBuffer | undefined> = Promise.resolve(undefined);\r\n    aborted = false;\r\n\r\n    constructor(private readonly download: () => Promise<ArrayBuffer | undefined>) {\r\n    }\r\n\r\n    start() {\r\n        this.result = this.download();\r\n    }\r\n\r\n    abort() {\r\n        this.aborted = true;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class Downloader {\r\n    activeDownloads = 0;\r\n    completeResolve: (() => void) | undefined;\r\n\r\n    constructor(public baseUrl?: URL) {\r\n    }\r\n\r\n    async complete() {\r\n        if (this.activeDownloads > 0) {\r\n            const completePromise = new Promise<void>((resolve, reject) => {\r\n                this.completeResolve = resolve;\r\n            });\r\n            await completePromise;\r\n            this.completeResolve = undefined;\r\n        }\r\n    }\r\n\r\n    private async request(filename: string) {\r\n        const url = new URL(filename, this.baseUrl);\r\n        if (!url.search)\r\n            url.search = this.baseUrl?.search ?? \"\";\r\n        const response = await requestOfflineFile(url.pathname) ?? await fetch(url, { mode: \"cors\" });\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP Error: ${response.status}: ${response.statusText} (${url})`);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    downloadArrayBufferAbortable(filename: string, buffer?: ArrayBuffer): AbortableDownload {\r\n        const self = this;\r\n        const download = new AbortableDownload(buffer != undefined ? downloadAsyncSize : downloadAsync);\r\n        download.start();\r\n        return download;\r\n\r\n        async function downloadAsyncSize() {\r\n            try {\r\n                self.activeDownloads++;\r\n                const response = await self.request(filename);\r\n                if (!response.ok)\r\n                    throw new Error(`HTTP error: ${response.status} ${response.statusText}!`);\r\n                const reader = response.body!.getReader(); // waiting for safari and typescript to include the byob mode here.\r\n                const content = new Uint8Array(buffer!);\r\n                let offset = 0;\r\n                while (!download.aborted) {\r\n                    const { done, value } = await reader.read();\r\n                    if (done)\r\n                        break;\r\n                    content.set(value, offset);\r\n                    offset += value.length;\r\n                }\r\n                if (!download.aborted) {\r\n                    console.assert(offset == content.length);\r\n                    return content.buffer;\r\n                } else {\r\n                    reader.cancel();\r\n                }\r\n            } finally {\r\n                self.activeDownloads--;\r\n                if (self.activeDownloads == 0 && self.completeResolve) {\r\n                    self.completeResolve();\r\n                }\r\n            }\r\n        }\r\n\r\n        async function downloadAsync() {\r\n            try {\r\n                self.activeDownloads++;\r\n                const response = await self.request(filename);\r\n                if (!response.ok)\r\n                    throw new Error(`HTTP error: ${response.status} ${response.statusText}!`);\r\n                // return await response.arrayBuffer(); // sometimes skips/gives up on downloads when previously cancelled, so we use streaming instead.\r\n                const reader = response.body!.getReader();\r\n                const chunks: Uint8Array[] = [];\r\n                let size = 0; // If compressed, we can't use content-length to determine uncompressed length up front, so we must store chunks and then assemble into final buffer.\r\n                while (!download.aborted) {\r\n                    const { done, value } = await reader.read();\r\n                    if (done)\r\n                        break;\r\n                    chunks.push(value);\r\n                    size += value.length;\r\n                }\r\n                if (!download.aborted) {\r\n                    const content = new Uint8Array(size);\r\n                    let offset = 0;\r\n                    for (const chunk of chunks) {\r\n                        content.set(chunk, offset);\r\n                        offset += chunk.length;\r\n                    }\r\n                    return content.buffer;\r\n                } else {\r\n                    reader.cancel();\r\n                }\r\n            } finally {\r\n                self.activeDownloads--;\r\n                if (self.activeDownloads == 0 && self.completeResolve) {\r\n                    self.completeResolve();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "const enum State { unlocked, locked };\r\n\r\n/** @internal */\r\nexport class Mutex {\r\n    readonly _view: Int32Array;\r\n\r\n    constructor(buffer: SharedArrayBuffer) {\r\n        this._view = new Int32Array(buffer, 0, 1);\r\n    }\r\n\r\n    // will loop until lock is available, so be careful using this in main thread\r\n    lockSpin() {\r\n        const { _view } = this;\r\n        for (; ;) {\r\n            if (Atomics.compareExchange(_view, 0, State.unlocked, State.locked) == State.unlocked) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    // blocking call, use in workers only!\r\n    lockSync() {\r\n        console.assert(self.Worker != undefined);\r\n        const { _view } = this;\r\n        for (; ;) {\r\n            if (Atomics.compareExchange(_view, 0, State.unlocked, State.locked) == State.unlocked) {\r\n                return;\r\n            }\r\n            Atomics.wait(_view, 0, State.locked);\r\n        }\r\n    }\r\n\r\n    // safe to use from main thread\r\n    async lockAsync() {\r\n        const { _view } = this;\r\n        for (; ;) {\r\n            if (Atomics.compareExchange(_view, 0, State.unlocked, State.locked) == State.unlocked) {\r\n                return;\r\n            }\r\n            const { async, value } = Atomics.waitAsync(_view, 0, State.locked);\r\n            if (async) {\r\n                await value;\r\n            }\r\n        }\r\n    }\r\n\r\n    unlock() {\r\n        const { _view } = this;\r\n        if (Atomics.compareExchange(_view, 0, State.locked, State.unlocked) != State.locked) {\r\n            throw new Error(\"Mutex is in inconsistent state: unlock on unlocked Mutex.\");\r\n        }\r\n        Atomics.notify(_view, 0);\r\n    }\r\n}", "export type U8 = Uint8Array;\r\nexport type U16 = Uint16Array;\r\nexport type U32 = Uint32Array;\r\nexport type I8 = Int8Array;\r\nexport type I16 = Int16Array;\r\nexport type I32 = Int32Array;\r\nexport type F16 = Uint16Array;\r\nexport type F32 = Float32Array;\r\nexport type F64 = Float64Array;\r\n\r\nexport type EnumArray<T> = { readonly [index: number]: T; };\r\n\r\ntype TypedArray = Uint8Array | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\r\nexport type Float16Array = Uint16Array;\r\nexport const Float16Array = Uint16Array;\r\n\r\nexport class BufferReader {\r\n    pos = 0;\r\n    private readonly _u8;\r\n    private readonly _u16;\r\n    private readonly _u32;\r\n    private readonly _i8;\r\n    private readonly _i16;\r\n    private readonly _i32;\r\n    private readonly _f16;\r\n    private readonly _f32;\r\n    private readonly _f64;\r\n\r\n    constructor(readonly buffer: ArrayBuffer) {\r\n        this._u8 = new Uint8Array(buffer, 0, Math.floor(buffer.byteLength / Uint8Array.BYTES_PER_ELEMENT));\r\n        this._u16 = new Uint16Array(buffer, 0, Math.floor(buffer.byteLength / Uint16Array.BYTES_PER_ELEMENT));\r\n        this._u32 = new Uint32Array(buffer, 0, Math.floor(buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT));\r\n        this._i8 = new Int8Array(buffer, 0, Math.floor(buffer.byteLength / Int8Array.BYTES_PER_ELEMENT));\r\n        this._i16 = new Int16Array(buffer, 0, Math.floor(buffer.byteLength / Int16Array.BYTES_PER_ELEMENT));\r\n        this._i32 = new Int32Array(buffer, 0, Math.floor(buffer.byteLength / Int32Array.BYTES_PER_ELEMENT));\r\n        this._f16 = new Uint16Array(buffer, 0, Math.floor(buffer.byteLength / Uint16Array.BYTES_PER_ELEMENT));\r\n        this._f32 = new Float32Array(buffer, 0, Math.floor(buffer.byteLength / Float32Array.BYTES_PER_ELEMENT));\r\n        this._f64 = new Float64Array(buffer, 0, Math.floor(buffer.byteLength / Float64Array.BYTES_PER_ELEMENT));\r\n    }\r\n\r\n    private read<T extends TypedArray>(ar: T, size: number): T {\r\n        if (size == 0)\r\n            return ar.subarray(0, 0) as T;\r\n        const align = ar.BYTES_PER_ELEMENT;\r\n        var padding = (align - 1) - ((this.pos + align - 1) % align);\r\n        console.assert(padding >= 0 && padding < align);\r\n        const begin = (this.pos + padding) / align;\r\n        const end = begin + size;\r\n        this.pos = end * ar.BYTES_PER_ELEMENT;\r\n        return ar.subarray(begin, end) as T;\r\n    }\r\n\r\n    get eof() {\r\n        return this.pos == this.buffer.byteLength;\r\n    }\r\n\r\n    u8(size: number) {\r\n        return this.read(this._u8, size);\r\n    }\r\n\r\n    u16(size: number) {\r\n        return this.read(this._u16, size);\r\n    }\r\n\r\n    u32(size: number) {\r\n        return this.read(this._u32, size);\r\n    }\r\n\r\n    i8(size: number) {\r\n        return this.read(this._i8, size);\r\n    }\r\n\r\n    i16(size: number) {\r\n        return this.read(this._i16, size);\r\n    }\r\n\r\n    i32(size: number) {\r\n        return this.read(this._i32, size);\r\n    }\r\n\r\n    f16(size: number) {\r\n        return this.read(this._f16, size);\r\n    }\r\n\r\n    f32(size: number) {\r\n        return this.read(this._f32, size);\r\n    }\r\n\r\n    f64(size: number) {\r\n        return this.read(this._f64, size);\r\n    }\r\n}\r\n", "// this file is auto generated - do not edit!\r\nimport { BufferReader } from \"./util.js\";\r\nimport type { EnumArray, U8, U16, U32, I8, I16, I32, F16, F32, F64 } from \"./util.js\";\r\n\r\nexport const version = \"2.1\";\r\n\r\n// Type of GL render primitive.\r\nexport const enum PrimitiveType {\r\n    points = 0,\r\n    lines = 1,\r\n    line_loops = 2,\r\n    line_strip = 3,\r\n    triangles = 4,\r\n    triangle_strip = 5,\r\n    triangle_fan = 6,\r\n};\r\n\r\n// Bitwise flags for which vertex attributes will be used in geometry.\r\nexport const enum OptionalVertexAttribute {\r\n    normal = 1,\r\n    color = 2,\r\n    texCoord = 4,\r\n    projectedPos = 8,\r\n};\r\n\r\n// Type of material.\r\nexport const enum MaterialType {\r\n    opaque = 0,\r\n    opaqueDoubleSided = 1,\r\n    transparent = 2,\r\n    elevation = 3,\r\n};\r\n\r\n// Texture semantic/purpose.\r\nexport const enum TextureSemantic {\r\n    baseColor = 0,\r\n};\r\n\r\n// Hash bytes\r\nexport interface HashRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Range into submesh projection.\r\nexport interface SubMeshProjectionRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Range into descendantObjectIdsRange.\r\nexport interface DescendantObjectIdsRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Mesh vertices\r\nexport interface VertexRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Mesh vertex indices\r\nexport interface VertexIndexRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Mesh Textures\r\nexport interface TextureInfoRange { readonly start: U8; readonly count: U8; };\r\n\r\n// Range into texture pixel blob.\r\nexport interface PixelRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Information about child nodes.\r\nexport interface ChildInfo {\r\n    readonly length: number;\r\n    readonly hash: HashRange; // Byte range into Hash bytes array. The hash, formatted as hex, is used for the filename of the child node.\r\n    readonly childIndex: U8;\r\n    readonly childMask: U32; // Set of bits (max 32) for which child indices are referenced by geometry.\r\n    readonly tolerance: I8; // A power of two exponent describing the error tolerance of this node, which is used to determine LOD.\r\n    readonly totalByteSize: U32; // # uncompressed bytes total for child binary file.\r\n    readonly offset: Double3; // Model -> world space translation vector.\r\n    readonly scale: F32; // Model -> world space uniform scale factor (from unit [-1,1] vectors).\r\n    readonly bounds: Bounds; // Bounding volume (in model space).\r\n    readonly subMeshes: SubMeshProjectionRange;\r\n    readonly descendantObjectIds: DescendantObjectIdsRange;\r\n};\r\n\r\nexport interface Double3 {\r\n    readonly length: number;\r\n    readonly x: F64;\r\n    readonly y: F64;\r\n    readonly z: F64;\r\n};\r\n\r\n// Node bounding volume.\r\nexport interface Bounds {\r\n    readonly length: number;\r\n    readonly box: AABB;\r\n    readonly sphere: BoundingSphere;\r\n};\r\n\r\n// Axis aligned bounding box.\r\nexport interface AABB {\r\n    readonly length: number;\r\n    readonly min: Float3;\r\n    readonly max: Float3;\r\n};\r\n\r\nexport interface Float3 {\r\n    readonly length: number;\r\n    readonly x: F32;\r\n    readonly y: F32;\r\n    readonly z: F32;\r\n};\r\n\r\n// Bounding sphere.\r\nexport interface BoundingSphere {\r\n    readonly length: number;\r\n    readonly origo: Float3;\r\n    readonly radius: F32;\r\n};\r\n\r\n// Information about child sub meshes used to predict cost before loading.\r\nexport interface SubMeshProjection {\r\n    readonly length: number;\r\n    readonly objectId: U32;\r\n    readonly primitiveType: EnumArray<PrimitiveType>;\r\n    readonly attributes: EnumArray<OptionalVertexAttribute>;\r\n    readonly numDeviations: U8; // # of deviation vertex attributes (0-3)\r\n    readonly numIndices: U32; // zero if no index buffer\r\n    readonly numVertices: U32;\r\n    readonly numTextureBytes: U32;\r\n};\r\n\r\n// Groups of 3D primitives with common attributes. These can further be split up to form e.g. 64K chunks for 16 bit indexing, i.e. there can be many submeshes with the same attributes. Groups are ordered by child, object and material indices.\r\nexport interface SubMesh {\r\n    readonly length: number;\r\n    readonly childIndex: U8;\r\n    readonly objectId: U32;\r\n    readonly materialIndex: U8;\r\n    readonly primitiveType: EnumArray<PrimitiveType>;\r\n    readonly materialType: EnumArray<MaterialType>;\r\n    readonly attributes: EnumArray<OptionalVertexAttribute>;\r\n    readonly numDeviations: U8; // # of deviation vertex attributes (0-4)\r\n    readonly vertices: VertexRange; // Vertices are local to each sub-mesh.\r\n    readonly primitiveVertexIndices: VertexIndexRange; // Triangle vertex index triplets, or line index pairs, if any, are 16-bit and relative to the local vertex range.\r\n    readonly edgeVertexIndices: VertexIndexRange; // \"Hard\" edge vertex index pairs, if any, are 16-bit and relative to the local vertex range.\r\n    readonly cornerVertexIndices: VertexIndexRange; // \"Hard\" corner vertex indices, if any, are 16-bit and relative to the local vertex range.\r\n    readonly textures: TextureInfoRange;\r\n};\r\n\r\nexport interface TextureInfo {\r\n    readonly length: number;\r\n    readonly semantic: EnumArray<TextureSemantic>;\r\n    readonly transform: Float3x3;\r\n    readonly pixelRange: PixelRange;\r\n};\r\n\r\n// 3x3 row major matrix\r\nexport interface Float3x3 {\r\n    readonly length: number;\r\n    readonly e00: F32;\r\n    readonly e01: F32;\r\n    readonly e02: F32;\r\n    readonly e10: F32;\r\n    readonly e11: F32;\r\n    readonly e12: F32;\r\n    readonly e20: F32;\r\n    readonly e21: F32;\r\n    readonly e22: F32;\r\n};\r\n\r\n// Mesh vertices\r\nexport interface Vertex {\r\n    readonly length: number;\r\n    readonly position: Int16_3;\r\n    readonly normal?: Int8_3;\r\n    readonly color?: RGBA_U8;\r\n    readonly texCoord?: Half2;\r\n    readonly projectedPos?: Int16_3;\r\n    readonly deviations: Deviations;\r\n};\r\n\r\nexport interface Int16_3 {\r\n    readonly length: number;\r\n    readonly x: I16;\r\n    readonly y: I16;\r\n    readonly z: I16;\r\n};\r\n\r\nexport interface Int8_3 {\r\n    readonly length: number;\r\n    readonly x: I8;\r\n    readonly y: I8;\r\n    readonly z: I8;\r\n};\r\n\r\nexport interface RGBA_U8 {\r\n    readonly length: number;\r\n    readonly red: U8;\r\n    readonly green: U8;\r\n    readonly blue: U8;\r\n    readonly alpha: U8;\r\n};\r\n\r\nexport interface Half2 {\r\n    readonly length: number;\r\n    readonly x: F16;\r\n    readonly y: F16;\r\n};\r\n\r\n// Mesh deviations vertex attributes\r\nexport interface Deviations {\r\n    readonly length: number;\r\n    readonly a?: F16;\r\n    readonly b?: F16;\r\n    readonly c?: F16;\r\n    readonly d?: F16;\r\n};\r\n\r\n// Mesh triangles\r\nexport interface Triangle {\r\n    readonly length: number;\r\n    readonly topologyFlags?: U8; // Bits [0-2] are edge flags (vertex pairs ab, bc, ca), and [3-5] are corner flags. True = edge/corner is a \"hard\", or true topological feature and should be rendered and/or snapped to.\r\n};\r\n\r\nexport function readSchema(r: BufferReader) {\r\n    const sizes = r.u32(10);\r\n    const flags = r.u8(10);\r\n    const schema = {\r\n        version: \"2.1\",\r\n        childInfo: {\r\n            length: sizes[0],\r\n            hash: { start: r.u32(sizes[0]), count: r.u32(sizes[0]) } as HashRange,\r\n            childIndex: r.u8(sizes[0]),\r\n            childMask: r.u32(sizes[0]),\r\n            tolerance: r.i8(sizes[0]),\r\n            totalByteSize: r.u32(sizes[0]),\r\n            offset: {\r\n                length: sizes[0],\r\n                x: r.f64(sizes[0]),\r\n                y: r.f64(sizes[0]),\r\n                z: r.f64(sizes[0]),\r\n            } as Double3,\r\n            scale: r.f32(sizes[0]),\r\n            bounds: {\r\n                length: sizes[0],\r\n                box: {\r\n                    length: sizes[0],\r\n                    min: {\r\n                        length: sizes[0],\r\n                        x: r.f32(sizes[0]),\r\n                        y: r.f32(sizes[0]),\r\n                        z: r.f32(sizes[0]),\r\n                    } as Float3,\r\n                    max: {\r\n                        length: sizes[0],\r\n                        x: r.f32(sizes[0]),\r\n                        y: r.f32(sizes[0]),\r\n                        z: r.f32(sizes[0]),\r\n                    } as Float3,\r\n                } as AABB,\r\n                sphere: {\r\n                    length: sizes[0],\r\n                    origo: {\r\n                        length: sizes[0],\r\n                        x: r.f32(sizes[0]),\r\n                        y: r.f32(sizes[0]),\r\n                        z: r.f32(sizes[0]),\r\n                    } as Float3,\r\n                    radius: r.f32(sizes[0]),\r\n                } as BoundingSphere,\r\n            } as Bounds,\r\n            subMeshes: { start: r.u32(sizes[0]), count: r.u32(sizes[0]) } as SubMeshProjectionRange,\r\n            descendantObjectIds: { start: r.u32(sizes[0]), count: r.u32(sizes[0]) } as DescendantObjectIdsRange,\r\n        } as ChildInfo,\r\n        hashBytes: r.u8(sizes[1]),\r\n        descendantObjectIds: r.u32(sizes[2]),\r\n        subMeshProjection: {\r\n            length: sizes[3],\r\n            objectId: r.u32(sizes[3]),\r\n            primitiveType: r.u8(sizes[3]) as EnumArray<PrimitiveType>,\r\n            attributes: r.u8(sizes[3]) as EnumArray<OptionalVertexAttribute>,\r\n            numDeviations: r.u8(sizes[3]),\r\n            numIndices: r.u32(sizes[3]),\r\n            numVertices: r.u32(sizes[3]),\r\n            numTextureBytes: r.u32(sizes[3]),\r\n        } as SubMeshProjection,\r\n        subMesh: {\r\n            length: sizes[4],\r\n            childIndex: r.u8(sizes[4]),\r\n            objectId: r.u32(sizes[4]),\r\n            materialIndex: r.u8(sizes[4]),\r\n            primitiveType: r.u8(sizes[4]) as EnumArray<PrimitiveType>,\r\n            materialType: r.u8(sizes[4]) as EnumArray<MaterialType>,\r\n            attributes: r.u8(sizes[4]) as EnumArray<OptionalVertexAttribute>,\r\n            numDeviations: r.u8(sizes[4]),\r\n            vertices: { start: r.u32(sizes[4]), count: r.u32(sizes[4]) } as VertexRange,\r\n            primitiveVertexIndices: { start: r.u32(sizes[4]), count: r.u32(sizes[4]) } as VertexIndexRange,\r\n            edgeVertexIndices: { start: r.u32(sizes[4]), count: r.u32(sizes[4]) } as VertexIndexRange,\r\n            cornerVertexIndices: { start: r.u32(sizes[4]), count: r.u32(sizes[4]) } as VertexIndexRange,\r\n            textures: { start: r.u8(sizes[4]), count: r.u8(sizes[4]) } as TextureInfoRange,\r\n        } as SubMesh,\r\n        textureInfo: {\r\n            length: sizes[5],\r\n            semantic: r.u8(sizes[5]) as EnumArray<TextureSemantic>,\r\n            transform: {\r\n                length: sizes[5],\r\n                e00: r.f32(sizes[5]),\r\n                e01: r.f32(sizes[5]),\r\n                e02: r.f32(sizes[5]),\r\n                e10: r.f32(sizes[5]),\r\n                e11: r.f32(sizes[5]),\r\n                e12: r.f32(sizes[5]),\r\n                e20: r.f32(sizes[5]),\r\n                e21: r.f32(sizes[5]),\r\n                e22: r.f32(sizes[5]),\r\n            } as Float3x3,\r\n            pixelRange: { start: r.u32(sizes[5]), count: r.u32(sizes[5]) } as PixelRange,\r\n        } as TextureInfo,\r\n        vertex: {\r\n            length: sizes[6],\r\n            position: {\r\n                length: sizes[6],\r\n                x: r.i16(sizes[6]),\r\n                y: r.i16(sizes[6]),\r\n                z: r.i16(sizes[6]),\r\n            } as Int16_3,\r\n            normal: !flags[0] ? undefined : {\r\n                length: sizes[6],\r\n                x: r.i8(sizes[6]),\r\n                y: r.i8(sizes[6]),\r\n                z: r.i8(sizes[6]),\r\n            } as Int8_3,\r\n            color: !flags[1] ? undefined : {\r\n                length: sizes[6],\r\n                red: r.u8(sizes[6]),\r\n                green: r.u8(sizes[6]),\r\n                blue: r.u8(sizes[6]),\r\n                alpha: r.u8(sizes[6]),\r\n            } as RGBA_U8,\r\n            texCoord: !flags[2] ? undefined : {\r\n                length: sizes[6],\r\n                x: r.f16(sizes[6]),\r\n                y: r.f16(sizes[6]),\r\n            } as Half2,\r\n            projectedPos: !flags[3] ? undefined : {\r\n                length: sizes[6],\r\n                x: r.i16(sizes[6]),\r\n                y: r.i16(sizes[6]),\r\n                z: r.i16(sizes[6]),\r\n            } as Int16_3,\r\n            deviations: {\r\n                length: sizes[6],\r\n                a: !flags[4] ? undefined : r.f16(sizes[6]),\r\n                b: !flags[5] ? undefined : r.f16(sizes[6]),\r\n                c: !flags[6] ? undefined : r.f16(sizes[6]),\r\n                d: !flags[7] ? undefined : r.f16(sizes[6]),\r\n            } as Deviations,\r\n        } as Vertex,\r\n        triangle: {\r\n            length: sizes[7],\r\n            topologyFlags: !flags[8] ? undefined : r.u8(sizes[7]),\r\n        } as Triangle,\r\n        vertexIndex: !flags[9] ? undefined : r.u16(sizes[8]),\r\n        texturePixels: r.u8(sizes[9]),\r\n    } as const;\r\n    console.assert(r.eof);\r\n    return schema;\r\n}\r\n\r\nexport type Schema = ReturnType<typeof readSchema>;\r\n", "// this file is auto generated - do not edit!\r\nimport { BufferReader } from \"./util.js\";\r\nimport type { EnumArray, U8, U16, U32, I8, I16, I32, F16, F32, F64 } from \"./util.js\";\r\n\r\nexport const version = \"2.0\";\r\n\r\n// Type of GL render primitive.\r\nexport const enum PrimitiveType {\r\n    points = 0,\r\n    lines = 1,\r\n    line_loops = 2,\r\n    line_strip = 3,\r\n    triangles = 4,\r\n    triangle_strip = 5,\r\n    triangle_fan = 6,\r\n};\r\n\r\n// Bitwise flags for which vertex attributes will be used in geometry.\r\nexport const enum OptionalVertexAttribute {\r\n    normal = 1,\r\n    color = 2,\r\n    texCoord = 4,\r\n    projectedPos = 8,\r\n};\r\n\r\n// Type of material.\r\nexport const enum MaterialType {\r\n    opaque = 0,\r\n    opaqueDoubleSided = 1,\r\n    transparent = 2,\r\n    elevation = 3,\r\n};\r\n\r\n// Texture semantic/purpose.\r\nexport const enum TextureSemantic {\r\n    baseColor = 0,\r\n};\r\n\r\n// Hash bytes\r\nexport interface HashRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Range into submesh projection.\r\nexport interface SubMeshProjectionRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Mesh vertices\r\nexport interface VertexRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Mesh vertex indices\r\nexport interface VertexIndexRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Mesh Textures\r\nexport interface TextureInfoRange { readonly start: U8; readonly count: U8; };\r\n\r\n// Range into texture pixel blob.\r\nexport interface PixelRange { readonly start: U32; readonly count: U32; };\r\n\r\n// Information about child nodes.\r\nexport interface ChildInfo {\r\n    readonly length: number;\r\n    readonly hash: HashRange; // Byte range into Hash bytes array. The hash, formatted as hex, is used for the filename of the child node.\r\n    readonly childIndex: U8;\r\n    readonly childMask: U32; // Set of bits (max 32) for which child indices are referenced by geometry.\r\n    readonly tolerance: I8; // A power of two exponent describing the error tolerance of this node, which is used to determine LOD.\r\n    readonly totalByteSize: U32; // # uncompressed bytes total for child binary file.\r\n    readonly offset: Double3; // Model -> world space translation vector.\r\n    readonly scale: F32; // Model -> world space uniform scale factor (from unit [-1,1] vectors).\r\n    readonly bounds: Bounds; // Bounding volume (in model space).\r\n    readonly subMeshes: SubMeshProjectionRange;\r\n};\r\n\r\nexport interface Double3 {\r\n    readonly length: number;\r\n    readonly x: F64;\r\n    readonly y: F64;\r\n    readonly z: F64;\r\n};\r\n\r\n// Node bounding volume.\r\nexport interface Bounds {\r\n    readonly length: number;\r\n    readonly box: AABB;\r\n    readonly sphere: BoundingSphere;\r\n};\r\n\r\n// Axis aligned bounding box.\r\nexport interface AABB {\r\n    readonly length: number;\r\n    readonly min: Float3;\r\n    readonly max: Float3;\r\n};\r\n\r\nexport interface Float3 {\r\n    readonly length: number;\r\n    readonly x: F32;\r\n    readonly y: F32;\r\n    readonly z: F32;\r\n};\r\n\r\n// Bounding sphere.\r\nexport interface BoundingSphere {\r\n    readonly length: number;\r\n    readonly origo: Float3;\r\n    readonly radius: F32;\r\n};\r\n\r\n// Information about child sub meshes used to predict cost before loading.\r\nexport interface SubMeshProjection {\r\n    readonly length: number;\r\n    readonly objectId: U32;\r\n    readonly primitiveType: EnumArray<PrimitiveType>;\r\n    readonly attributes: EnumArray<OptionalVertexAttribute>;\r\n    readonly numDeviations: U8; // # of deviation vertex attributes (0-3)\r\n    readonly numIndices: U32; // zero if no index buffer\r\n    readonly numVertices: U32;\r\n    readonly numTextureBytes: U32;\r\n};\r\n\r\n// Groups of 3D primitives with common attributes. These can further be split up to form e.g. 64K chunks for 16 bit indexing, i.e. there can be many submeshes with the same attributes. Groups are ordered by child, object and material indices.\r\nexport interface SubMesh {\r\n    readonly length: number;\r\n    readonly childIndex: U8;\r\n    readonly objectId: U32;\r\n    readonly materialIndex: U8;\r\n    readonly primitiveType: EnumArray<PrimitiveType>;\r\n    readonly materialType: EnumArray<MaterialType>;\r\n    readonly attributes: EnumArray<OptionalVertexAttribute>;\r\n    readonly numDeviations: U8; // # of deviation vertex attributes (0-4)\r\n    readonly vertices: VertexRange; // Vertices are local to each sub-mesh.\r\n    readonly primitiveVertexIndices: VertexIndexRange; // Triangle vertex index triplets, or line index pairs, if any, are 16-bit and relative to the local vertex range.\r\n    readonly edgeVertexIndices: VertexIndexRange; // \"Hard\" edge vertex index pairs, if any, are 16-bit and relative to the local vertex range.\r\n    readonly cornerVertexIndices: VertexIndexRange; // \"Hard\" corner vertex indices, if any, are 16-bit and relative to the local vertex range.\r\n    readonly textures: TextureInfoRange;\r\n};\r\n\r\nexport interface TextureInfo {\r\n    readonly length: number;\r\n    readonly semantic: EnumArray<TextureSemantic>;\r\n    readonly transform: Float3x3;\r\n    readonly pixelRange: PixelRange;\r\n};\r\n\r\n// 3x3 row major matrix\r\nexport interface Float3x3 {\r\n    readonly length: number;\r\n    readonly e00: F32;\r\n    readonly e01: F32;\r\n    readonly e02: F32;\r\n    readonly e10: F32;\r\n    readonly e11: F32;\r\n    readonly e12: F32;\r\n    readonly e20: F32;\r\n    readonly e21: F32;\r\n    readonly e22: F32;\r\n};\r\n\r\n// Mesh vertices\r\nexport interface Vertex {\r\n    readonly length: number;\r\n    readonly position: Int16_3;\r\n    readonly normal?: Int8_3;\r\n    readonly color?: RGBA_U8;\r\n    readonly texCoord?: Half2;\r\n    readonly projectedPos?: Int16_3;\r\n    readonly deviations: Deviations;\r\n};\r\n\r\nexport interface Int16_3 {\r\n    readonly length: number;\r\n    readonly x: I16;\r\n    readonly y: I16;\r\n    readonly z: I16;\r\n};\r\n\r\nexport interface Int8_3 {\r\n    readonly length: number;\r\n    readonly x: I8;\r\n    readonly y: I8;\r\n    readonly z: I8;\r\n};\r\n\r\nexport interface RGBA_U8 {\r\n    readonly length: number;\r\n    readonly red: U8;\r\n    readonly green: U8;\r\n    readonly blue: U8;\r\n    readonly alpha: U8;\r\n};\r\n\r\nexport interface Half2 {\r\n    readonly length: number;\r\n    readonly x: F16;\r\n    readonly y: F16;\r\n};\r\n\r\n// Mesh deviations vertex attributes\r\nexport interface Deviations {\r\n    readonly length: number;\r\n    readonly a?: F16;\r\n    readonly b?: F16;\r\n    readonly c?: F16;\r\n    readonly d?: F16;\r\n};\r\n\r\n// Mesh triangles\r\nexport interface Triangle {\r\n    readonly length: number;\r\n    readonly topologyFlags?: U8; // Bits [0-2] are edge flags (vertex pairs ab, bc, ca), and [3-5] are corner flags. True = edge/corner is a \"hard\", or true topological feature and should be rendered and/or snapped to.\r\n};\r\n\r\nexport function readSchema(r: BufferReader) {\r\n    const sizes = r.u32(9);\r\n    const flags = r.u8(10);\r\n    const schema = {\r\n        version: \"2.0\",\r\n        childInfo: {\r\n            length: sizes[0],\r\n            hash: { start: r.u32(sizes[0]), count: r.u32(sizes[0]) } as HashRange,\r\n            childIndex: r.u8(sizes[0]),\r\n            childMask: r.u32(sizes[0]),\r\n            tolerance: r.i8(sizes[0]),\r\n            totalByteSize: r.u32(sizes[0]),\r\n            offset: {\r\n                length: sizes[0],\r\n                x: r.f64(sizes[0]),\r\n                y: r.f64(sizes[0]),\r\n                z: r.f64(sizes[0]),\r\n            } as Double3,\r\n            scale: r.f32(sizes[0]),\r\n            bounds: {\r\n                length: sizes[0],\r\n                box: {\r\n                    length: sizes[0],\r\n                    min: {\r\n                        length: sizes[0],\r\n                        x: r.f32(sizes[0]),\r\n                        y: r.f32(sizes[0]),\r\n                        z: r.f32(sizes[0]),\r\n                    } as Float3,\r\n                    max: {\r\n                        length: sizes[0],\r\n                        x: r.f32(sizes[0]),\r\n                        y: r.f32(sizes[0]),\r\n                        z: r.f32(sizes[0]),\r\n                    } as Float3,\r\n                } as AABB,\r\n                sphere: {\r\n                    length: sizes[0],\r\n                    origo: {\r\n                        length: sizes[0],\r\n                        x: r.f32(sizes[0]),\r\n                        y: r.f32(sizes[0]),\r\n                        z: r.f32(sizes[0]),\r\n                    } as Float3,\r\n                    radius: r.f32(sizes[0]),\r\n                } as BoundingSphere,\r\n            } as Bounds,\r\n            subMeshes: { start: r.u32(sizes[0]), count: r.u32(sizes[0]) } as SubMeshProjectionRange,\r\n        } as ChildInfo,\r\n        hashBytes: r.u8(sizes[1]),\r\n        subMeshProjection: {\r\n            length: sizes[2],\r\n            objectId: r.u32(sizes[2]),\r\n            primitiveType: r.u8(sizes[2]) as EnumArray<PrimitiveType>,\r\n            attributes: r.u8(sizes[2]) as EnumArray<OptionalVertexAttribute>,\r\n            numDeviations: r.u8(sizes[2]),\r\n            numIndices: r.u32(sizes[2]),\r\n            numVertices: r.u32(sizes[2]),\r\n            numTextureBytes: r.u32(sizes[2]),\r\n        } as SubMeshProjection,\r\n        subMesh: {\r\n            length: sizes[3],\r\n            childIndex: r.u8(sizes[3]),\r\n            objectId: r.u32(sizes[3]),\r\n            materialIndex: r.u8(sizes[3]),\r\n            primitiveType: r.u8(sizes[3]) as EnumArray<PrimitiveType>,\r\n            materialType: r.u8(sizes[3]) as EnumArray<MaterialType>,\r\n            attributes: r.u8(sizes[3]) as EnumArray<OptionalVertexAttribute>,\r\n            numDeviations: r.u8(sizes[3]),\r\n            vertices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexRange,\r\n            primitiveVertexIndices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexIndexRange,\r\n            edgeVertexIndices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexIndexRange,\r\n            cornerVertexIndices: { start: r.u32(sizes[3]), count: r.u32(sizes[3]) } as VertexIndexRange,\r\n            textures: { start: r.u8(sizes[3]), count: r.u8(sizes[3]) } as TextureInfoRange,\r\n        } as SubMesh,\r\n        textureInfo: {\r\n            length: sizes[4],\r\n            semantic: r.u8(sizes[4]) as EnumArray<TextureSemantic>,\r\n            transform: {\r\n                length: sizes[4],\r\n                e00: r.f32(sizes[4]),\r\n                e01: r.f32(sizes[4]),\r\n                e02: r.f32(sizes[4]),\r\n                e10: r.f32(sizes[4]),\r\n                e11: r.f32(sizes[4]),\r\n                e12: r.f32(sizes[4]),\r\n                e20: r.f32(sizes[4]),\r\n                e21: r.f32(sizes[4]),\r\n                e22: r.f32(sizes[4]),\r\n            } as Float3x3,\r\n            pixelRange: { start: r.u32(sizes[4]), count: r.u32(sizes[4]) } as PixelRange,\r\n        } as TextureInfo,\r\n        vertex: {\r\n            length: sizes[5],\r\n            position: {\r\n                length: sizes[5],\r\n                x: r.i16(sizes[5]),\r\n                y: r.i16(sizes[5]),\r\n                z: r.i16(sizes[5]),\r\n            } as Int16_3,\r\n            normal: !flags[0] ? undefined : {\r\n                length: sizes[5],\r\n                x: r.i8(sizes[5]),\r\n                y: r.i8(sizes[5]),\r\n                z: r.i8(sizes[5]),\r\n            } as Int8_3,\r\n            color: !flags[1] ? undefined : {\r\n                length: sizes[5],\r\n                red: r.u8(sizes[5]),\r\n                green: r.u8(sizes[5]),\r\n                blue: r.u8(sizes[5]),\r\n                alpha: r.u8(sizes[5]),\r\n            } as RGBA_U8,\r\n            texCoord: !flags[2] ? undefined : {\r\n                length: sizes[5],\r\n                x: r.f16(sizes[5]),\r\n                y: r.f16(sizes[5]),\r\n            } as Half2,\r\n            projectedPos: !flags[3] ? undefined : {\r\n                length: sizes[5],\r\n                x: r.i16(sizes[5]),\r\n                y: r.i16(sizes[5]),\r\n                z: r.i16(sizes[5]),\r\n            } as Int16_3,\r\n            deviations: {\r\n                length: sizes[5],\r\n                a: !flags[4] ? undefined : r.f16(sizes[5]),\r\n                b: !flags[5] ? undefined : r.f16(sizes[5]),\r\n                c: !flags[6] ? undefined : r.f16(sizes[5]),\r\n                d: !flags[7] ? undefined : r.f16(sizes[5]),\r\n            } as Deviations,\r\n        } as Vertex,\r\n        triangle: {\r\n            length: sizes[6],\r\n            topologyFlags: !flags[8] ? undefined : r.u8(sizes[6]),\r\n        } as Triangle,\r\n        vertexIndex: !flags[9] ? undefined : r.u16(sizes[7]),\r\n        texturePixels: r.u8(sizes[8]),\r\n    } as const;\r\n    console.assert(r.eof);\r\n    return schema;\r\n}\r\n\r\nexport type Schema = ReturnType<typeof readSchema>;\r\n", "import { type ReadonlyVec3, vec3 } from \"gl-matrix\";\r\nimport type { AABB, BoundingSphere } from \"core3d/state\";\r\nimport { BufferReader, Float16Array } from \"./util\";\r\nimport type { ComponentType, ShaderAttributeType, TextureParams } from \"webgl2\";\r\nimport { parseKTX } from \"core3d/ktx\";\r\nimport type { Mutex } from \"../mutex\";\r\nimport * as Current from \"./2_1\";\r\nimport * as Previous from \"./2_0\";\r\nimport type { WasmInstance } from \"./wasm_loader\";\r\n\r\nconst { MaterialType, OptionalVertexAttribute, PrimitiveType, TextureSemantic } = Current;\r\ntype Current = typeof Current;\r\ntype Previous = typeof Previous;\r\n// extract common types and ensure that current and previous binary format versions of them are 100% overlapping\r\ntype Float3 = Current.Float3 | Previous.Float3;\r\ntype Double3 = Current.Double3 | Previous.Double3;\r\ntype Schema = Current.Schema | Previous.Schema;\r\ntype SubMeshProjection = Current.SubMeshProjection | Previous.SubMeshProjection;\r\ntype MaterialType = Current.MaterialType | Previous.MaterialType;\r\ntype TextureSemantic = Current.TextureSemantic | Previous.TextureSemantic;\r\ntype PrimitiveType = Current.PrimitiveType | Previous.PrimitiveType;\r\ntype OptionalVertexAttribute = Current.OptionalVertexAttribute | Previous.OptionalVertexAttribute;\r\n\r\nfunction isCurrentSchema(schema: Schema): schema is Current.Schema {\r\n    return schema.version == Current.version;\r\n}\r\n\r\nexport function isSupportedVersion(version: string) {\r\n    return version == Current.version || version == Previous.version;\r\n}\r\n\r\n/** @internal */\r\nexport interface MeshDrawRange {\r\n    readonly childIndex: number;\r\n    readonly byteOffset: number; // in bytes\r\n    readonly first: number; // # indices\r\n    readonly count: number; // # indices\r\n}\r\n\r\n/** @internal */\r\nexport interface MeshObjectRange {\r\n    readonly objectId: number;\r\n    readonly beginVertex: number;\r\n    readonly endVertex: number;\r\n    readonly beginTriangle: number;\r\n    readonly endTriangle: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface Highlights {\r\n    readonly indices: Uint8Array;\r\n    readonly mutex: Mutex;\r\n}\r\n\r\nconst primitiveTypeStrings = [\"POINTS\", \"LINES\", \"LINE_LOOP\", \"LINE_STRIP\", \"TRIANGLES\", \"TRIANGLE_STRIP\", \"TRIANGLE_FAN\"] as const;\r\n/** @internal */\r\nexport type PrimitiveTypeString = typeof primitiveTypeStrings[number];\r\n\r\n/** @internal */\r\nexport interface NodeBounds {\r\n    readonly box: AABB;\r\n    readonly sphere: BoundingSphere;\r\n};\r\n\r\n// node data contains everything needed to create a new node, except its geometry and textures\r\n// this data comes from the parent node and is used to determine visibility and whether to load node geometry or not\r\n/** @internal */\r\nexport interface NodeData {\r\n    readonly id: string;\r\n    readonly childIndex: number; // octant # (not mask, but index)\r\n    readonly childMask: number; // 32-bit mask for what child indices (octants) have geometry\r\n    readonly descendantObjectIds?: readonly number[]; // optional array of all object ids found in descendant nodes for filter optimization\r\n    readonly tolerance: number;\r\n    readonly byteSize: number; // uncompressed byte size of node file\r\n    readonly offset: ReadonlyVec3;\r\n    readonly scale: number;\r\n    readonly bounds: NodeBounds;\r\n    // readonly primitiveType: PrimitiveTypeString;\r\n    // Used to predict the cost of creating geometry, potentially with filtering. Note that this does not consider the cost of loading, which ideally is a streaming process with low memory footprint\r\n    readonly primitives: number;\r\n    readonly primitivesDelta: number; // # new primitives introduced compared to parent\r\n    readonly gpuBytes: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface VertexAttributeData {\r\n    readonly kind: ShaderAttributeType;\r\n    readonly componentType: ComponentType;\r\n    readonly buffer: number; // index into buffer array\r\n    readonly componentCount: 1 | 2 | 3 | 4;\r\n    readonly normalized: boolean;\r\n    readonly byteStride: number;\r\n    readonly byteOffset?: number;\r\n};\r\n\r\n/** @internal */\r\nexport interface VertexAttributes {\r\n    readonly position: VertexAttributeData;\r\n    readonly normal: VertexAttributeData | null;\r\n    readonly material: VertexAttributeData | null;\r\n    readonly objectId: VertexAttributeData | null;\r\n    readonly texCoord: VertexAttributeData | null;\r\n    readonly color: VertexAttributeData | null;\r\n    readonly projectedPos: VertexAttributeData | null;\r\n    readonly deviations: VertexAttributeData | null;\r\n    readonly triangles0: VertexAttributeData | null;\r\n    readonly triangles1: VertexAttributeData | null;\r\n    readonly triangles2: VertexAttributeData | null;\r\n    readonly trianglesObjId: VertexAttributeData | null;\r\n    readonly highlight: VertexAttributeData | null;\r\n    readonly highlightTri: VertexAttributeData | null;\r\n}\r\n\r\n/** @internal */\r\nexport const enum VertexAttribIndex {\r\n    triangles, position, normal, material, objectId, texCoord, color, projectedPos, deviations, highlight, highlightTri\r\n};\r\n\r\n/** @internal */\r\nexport interface NodeSubMesh {\r\n    readonly materialType: MaterialType;\r\n    readonly primitiveType: PrimitiveTypeString;\r\n    readonly vertexAttributes: VertexAttributes;\r\n    readonly numVertices: number;\r\n    readonly numTriangles: number;\r\n    readonly objectRanges: readonly MeshObjectRange[];\r\n    // either index range (if index buffer is defined) for use with drawElements(), or vertex range for use with drawArray()\r\n    readonly drawRanges: readonly MeshDrawRange[];\r\n    readonly vertexBuffers: readonly ArrayBuffer[];\r\n    readonly indices: Uint16Array | Uint32Array | number; // Index buffer, or # vertices of none\r\n    readonly baseColorTexture: number | undefined; // texture index\r\n}\r\n\r\n/** @internal */\r\nexport interface NodeTexture {\r\n    readonly semantic: TextureSemantic;\r\n    readonly transform: readonly number[]; // 3x3 matrix\r\n    readonly params: TextureParams;\r\n}\r\n\r\n// node geometry and textures\r\n/** @internal */\r\nexport interface NodeGeometry {\r\n    readonly subMeshes: readonly NodeSubMesh[];\r\n    readonly textures: readonly (NodeTexture | undefined)[];\r\n}\r\n\r\nfunction getVec3(v: Float3 | Double3, i: number) {\r\n    return vec3.fromValues(v.x[i], v.y[i], v.z[i]);\r\n}\r\n\r\ntype Range = readonly [begin: number, end: number];\r\ntype DeviationsCount = 0 | 1 | 2 | 3 | 4;\r\n\r\nfunction getRange(v: { readonly start: ArrayLike<number>, count: ArrayLike<number>; }, i: number): Range {\r\n    const begin = v.start[i];\r\n    const end = begin + v.count[i];\r\n    return [begin, end] as const;\r\n}\r\n\r\nfunction computePrimitiveCount(primitiveType: PrimitiveType, numIndices: number) {\r\n    switch (primitiveType) {\r\n        case PrimitiveType.points:\r\n            return numIndices;\r\n        case PrimitiveType.lines:\r\n            return numIndices / 2;\r\n        case PrimitiveType.line_loops:\r\n            return numIndices;\r\n        case PrimitiveType.line_strip:\r\n            return numIndices - 1;\r\n        case PrimitiveType.triangles:\r\n            return numIndices / 3;\r\n        case PrimitiveType.triangle_strip:\r\n            return numIndices - 2;\r\n        case PrimitiveType.triangle_fan:\r\n            return numIndices - 2;\r\n        default:\r\n            console.warn(`Unknown primitive type: ${primitiveType}!`);\r\n    }\r\n}\r\n\r\nfunction getVertexAttribs(deviations: number) {\r\n    return {\r\n        position: { type: Uint16Array, components: [\"x\", \"y\", \"z\"] },\r\n        normal: { type: Int8Array, components: [\"x\", \"y\", \"z\"] },\r\n        texCoord: { type: Float16Array, components: [\"x\", \"y\"] },\r\n        color: { type: Uint8Array, components: [\"red\", \"green\", \"blue\", \"alpha\"] },\r\n        projectedPos: { type: Uint16Array, components: [\"x\", \"y\", \"z\"] },\r\n        deviations: { type: Float16Array, components: [\"a\", \"b\", \"c\", \"d\"].slice(0, deviations) },\r\n        materialIndex: { type: Uint8Array },\r\n        objectId: { type: Uint32Array },\r\n    } as const;\r\n}\r\ntype VertexAttribs = ReturnType<typeof getVertexAttribs>;\r\ntype VertexAttribNames = keyof VertexAttribs;\r\ntype VertexAttrib = { readonly type: VertexAttribs[VertexAttribNames][\"type\"], readonly components?: readonly string[]; };\r\n\r\nfunction computeVertexOffsets(attribs: readonly VertexAttribNames[], deviations = 0) {\r\n    let offset = 0;\r\n    let offsets: any = {};\r\n    function alignOffset(alignment: number) {\r\n        const padding = alignment - 1 - (offset + alignment - 1) % alignment;\r\n        offset += padding; // pad offset to be memory aligned.\r\n    }\r\n    let maxAlign = 1;\r\n    const vertexAttribs = getVertexAttribs(deviations);\r\n    for (const attrib of attribs) {\r\n        const { type, components } = vertexAttribs[attrib] as VertexAttrib;\r\n        const count = components?.length ?? 1;\r\n        maxAlign = Math.max(maxAlign, type.BYTES_PER_ELEMENT);\r\n        alignOffset(type.BYTES_PER_ELEMENT);\r\n        offsets[attrib] = offset;\r\n        offset += type.BYTES_PER_ELEMENT * count;\r\n    }\r\n    alignOffset(maxAlign); // align stride to largest typed array\r\n    offsets.stride = offset;\r\n    return offsets as { readonly [P in VertexAttribNames]?: number; } & { readonly stride: number; };\r\n}\r\n\r\nfunction getVertexAttribNames(optionalAttributes: OptionalVertexAttribute, deviations: DeviationsCount, hasMaterials: boolean, hasObjectIds: boolean) {\r\n    const attribNames: VertexAttribNames[] = [\"position\"];\r\n    if (optionalAttributes & OptionalVertexAttribute.normal) attribNames.push(\"normal\");\r\n    if (optionalAttributes & OptionalVertexAttribute.texCoord) attribNames.push(\"texCoord\");\r\n    if (optionalAttributes & OptionalVertexAttribute.color) attribNames.push(\"color\");\r\n    if (optionalAttributes & OptionalVertexAttribute.projectedPos) attribNames.push(\"projectedPos\");\r\n    if (deviations > 0) attribNames.push(\"deviations\");\r\n    if (hasMaterials) {\r\n        attribNames.push(\"materialIndex\");\r\n    }\r\n    if (hasObjectIds) {\r\n        attribNames.push(\"objectId\");\r\n    }\r\n    return attribNames;\r\n}\r\n\r\n/** @internal */\r\nexport function aggregateSubMeshProjections(subMeshProjection: SubMeshProjection, range: Range, separatePositionBuffer: boolean, predicate?: (objectId: number) => boolean) {\r\n    let primitives = 0;\r\n    let totalTextureBytes = 0;\r\n    let totalNumIndices = 0;\r\n    let totalNumVertices = 0;\r\n    let totalNumVertexBytes = 0;\r\n\r\n    const [begin, end] = range;\r\n    for (let i = begin; i < end; i++) {\r\n        const objectId = subMeshProjection.objectId[i];\r\n        if (predicate?.(objectId) ?? true) {\r\n            const indices = subMeshProjection.numIndices[i];\r\n            const vertices = subMeshProjection.numVertices[i];\r\n            const textureBytes = subMeshProjection.numTextureBytes[i]; // TODO: adjust by device profile/resolution\r\n            const attributes = subMeshProjection.attributes[i];\r\n            const deviations = subMeshProjection.numDeviations[i] as DeviationsCount;\r\n            const primitiveType = subMeshProjection.primitiveType[i];\r\n            // we assume that textured nodes are terrain with no material index (but object_id?).\r\n            // TODO: state these values explicitly in binary format instead\r\n            const hasMaterials = textureBytes == 0;\r\n            const hasObjectIds = true;\r\n            const [pos, ...rest] = getVertexAttribNames(attributes, deviations, hasMaterials, hasObjectIds);\r\n            const numBytesPerVertex = separatePositionBuffer ?\r\n                computeVertexOffsets([pos]).stride + computeVertexOffsets(rest, deviations).stride :\r\n                computeVertexOffsets([pos, ...rest], deviations).stride;\r\n            primitives += computePrimitiveCount(primitiveType, indices ? indices : vertices) ?? 0;\r\n            totalNumIndices += indices;\r\n            totalNumVertices += vertices;\r\n            totalNumVertexBytes += vertices * numBytesPerVertex;\r\n            totalTextureBytes += textureBytes;\r\n        } else {\r\n            // debugger;\r\n        }\r\n    }\r\n    const idxStride = totalNumVertices < 0xffff ? 2 : 4;\r\n    const gpuBytes = totalTextureBytes + totalNumVertexBytes + totalNumIndices * idxStride;\r\n    return { primitives, gpuBytes } as const;\r\n}\r\n\r\nfunction toHex(bytes: Uint8Array) {\r\n    return Array.prototype.map.call(bytes, x => ('00' + x.toString(16).toUpperCase()).slice(-2)).join('');\r\n}\r\n\r\n/** @internal */\r\nexport function getChildren(parentId: string, schema: Schema, separatePositionBuffer: boolean, predicate?: (objectId: number) => boolean): NodeData[] {\r\n    const { childInfo, hashBytes } = schema;\r\n    const children: NodeData[] = [];\r\n\r\n\r\n    // compute parent/current mesh primitive counts per child partition\r\n    const parentPrimitiveCounts: number[] = [];\r\n\r\n    for (let i = 0; i < childInfo.length; i++) {\r\n        const childIndex = childInfo.childIndex[i];\r\n        const childMask = childInfo.childMask[i];\r\n        const [hashBegin, hashEnd] = getRange(childInfo.hash, i);\r\n        const hash = hashBytes.slice(hashBegin, hashEnd);\r\n        const id = toHex(hash); // parentId + childIndex.toString(32); // use radix 32 (0-9, a-v) encoding, which allows for max 32 children per node\r\n        const tolerance = childInfo.tolerance[i];\r\n        const byteSize = childInfo.totalByteSize[i];\r\n        const offset = getVec3(childInfo.offset, i);\r\n        const scale = childInfo.scale[i];\r\n        const bounds: NodeBounds = {\r\n            box: {\r\n                min: getVec3(childInfo.bounds.box.min, i),\r\n                max: getVec3(childInfo.bounds.box.max, i),\r\n            },\r\n            sphere: {\r\n                center: getVec3(childInfo.bounds.sphere.origo, i),\r\n                radius: childInfo.bounds.sphere.radius[i],\r\n            }\r\n        };\r\n        // offset bounds\r\n        const { sphere, box } = bounds;\r\n        vec3.add(sphere.center as vec3, sphere.center, offset);\r\n        vec3.add(box.min as vec3, box.min, offset);\r\n        vec3.add(box.max as vec3, box.max, offset);\r\n\r\n        const subMeshProjectionRange = getRange(childInfo.subMeshes, i);\r\n        const parentPrimitives = parentPrimitiveCounts[childIndex];\r\n        const { primitives, gpuBytes } = aggregateSubMeshProjections(schema.subMeshProjection, subMeshProjectionRange, separatePositionBuffer, predicate);\r\n        const primitivesDelta = primitives - (parentPrimitives ?? 0);\r\n        let descendantObjectIds: number[] | undefined;\r\n        if (isCurrentSchema(schema)) {\r\n            const [idsBegin, idsEnd] = getRange(schema.childInfo.descendantObjectIds, i);\r\n            if (idsBegin != idsEnd) {\r\n                descendantObjectIds = [...schema.descendantObjectIds.slice(idsBegin, idsEnd)];\r\n            }\r\n        }\r\n        // console.assert(parentId == \"0\" || primitivesDelta >= 0, \"negative primitive delta\");\r\n        children.push({ id, childIndex, childMask, tolerance, byteSize, offset, scale, bounds, primitives, primitivesDelta, gpuBytes, descendantObjectIds });\r\n    }\r\n    return children;\r\n}\r\n\r\n/** @internal */\r\nexport function* getSubMeshes(schema: Schema, predicate?: (objectId: number) => boolean) {\r\n    const { subMesh } = schema;\r\n    for (let i = 0; i < subMesh.length; i++) {\r\n        const objectId = subMesh.objectId[i];\r\n        const primitive = subMesh.primitiveType[i];\r\n        if (predicate?.(objectId) ?? true) {\r\n            const childIndex = subMesh.childIndex[i];\r\n            const objectId = subMesh.objectId[i];\r\n            const materialIndex = subMesh.materialIndex[i];\r\n            const materialType = materialIndex ==\r\n                0xff && subMesh.textures.count[i] == 0 && (primitive == PrimitiveType.triangle_strip || primitive == PrimitiveType.triangles) ?\r\n                MaterialType.elevation :\r\n                subMesh.materialType[i];\r\n            const primitiveType = subMesh.primitiveType[i];\r\n            const attributes = subMesh.attributes[i];\r\n            const deviations = subMesh.numDeviations[i] as DeviationsCount;\r\n            const vertexRange = getRange(subMesh.vertices, i);\r\n            const indexRange = getRange(subMesh.primitiveVertexIndices, i);\r\n            const textureRange = getRange(subMesh.textures, i);\r\n            yield { childIndex, objectId, materialIndex, materialType, primitiveType, attributes, deviations, vertexRange, indexRange, textureRange };\r\n        }\r\n    }\r\n}\r\ntype TypedArray = Uint8Array | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\r\n\r\n// Candidates for wasm implementation?\r\nfunction copyToInterleavedArray<T extends TypedArray>(wasm: WasmInstance, dst: T, src: T, byteOffset: number, byteStride: number, begin: number, end: number) {\r\n    const offset = byteOffset / dst.BYTES_PER_ELEMENT;\r\n    const stride = byteStride / dst.BYTES_PER_ELEMENT;\r\n    console.assert(Math.round(offset) == offset);\r\n    console.assert(Math.round(stride) == stride);\r\n    let j = offset;\r\n    for (let i = begin; i < end; i++) {\r\n        dst[j] = src[i];\r\n        j += stride;\r\n    }\r\n}\r\n\r\nfunction fillToInterleavedArray<T extends TypedArray>(wasm: WasmInstance, dst: T, src: number, byteOffset: number, byteStride: number, begin: number, end: number) {\r\n    const offset = byteOffset / dst.BYTES_PER_ELEMENT;\r\n    const stride = byteStride / dst.BYTES_PER_ELEMENT;\r\n    console.assert(Math.round(offset) == offset);\r\n    console.assert(Math.round(stride) == stride);\r\n    let j = offset;\r\n    for (let i = begin; i < end; i++) {\r\n        dst[j] = src;\r\n        j += stride;\r\n    }\r\n}\r\n\r\nfunction getGeometry(wasm: WasmInstance, schema: Schema, separatePositionBuffer: boolean, enableOutlines: boolean, highlights: Highlights, predicate?: (objectId: number) => boolean): NodeGeometry {\r\n    const { vertex, vertexIndex } = schema;\r\n\r\n    const filteredSubMeshes = [...getSubMeshes(schema, predicate)];\r\n\r\n    let subMeshes: NodeSubMesh[] = [];\r\n    const referencedTextures = new Set<number>();\r\n\r\n    // group submeshes into drawable meshes (with common attributes)\r\n    type Group = {\r\n        readonly materialType: number;\r\n        readonly primitiveType: number;\r\n        readonly attributes: number;\r\n        readonly deviations: DeviationsCount;\r\n        readonly subMeshIndices: number[];\r\n    };\r\n    const groups = new Map<string, Group>();\r\n    for (let i = 0; i < filteredSubMeshes.length; i++) {\r\n        const { materialType, primitiveType, attributes, deviations, childIndex } = filteredSubMeshes[i];\r\n        const key = `${materialType}_${primitiveType}_${attributes}_${deviations}_${childIndex}`;\r\n        let group = groups.get(key);\r\n        if (!group) {\r\n            group = { materialType, primitiveType, attributes, deviations, subMeshIndices: [] };\r\n            groups.set(key, group);\r\n        }\r\n        group.subMeshIndices.push(i);\r\n    }\r\n\r\n    // we don't want highlights to change during parsing, so we hold the lock for the entire file\r\n    highlights.mutex.lockSync();\r\n\r\n    // create drawable meshes\r\n    for (const { materialType, primitiveType, attributes, deviations, subMeshIndices } of groups.values()) {\r\n        if (subMeshIndices.length == 0)\r\n            continue;\r\n        const groupMeshes = subMeshIndices.map(i => filteredSubMeshes[i]);\r\n        const hasMaterials = groupMeshes.some(m => m.materialIndex != 0xff);\r\n        const hasObjectIds = groupMeshes.some(m => m.objectId != 0xffffffff);\r\n\r\n        const allAttribNames = getVertexAttribNames(attributes, deviations, hasMaterials, hasObjectIds);\r\n        const [posName, ...extraAttribNames] = allAttribNames; // pop off positions since we're potentially putting them in a separate buffer\r\n        const attribNames = separatePositionBuffer ? extraAttribNames : allAttribNames;\r\n        const positionStride = computeVertexOffsets([posName], deviations).stride;\r\n        const trianglePosStride = positionStride * 3;\r\n        const attribOffsets = computeVertexOffsets(attribNames, deviations);\r\n        const vertexStride = attribOffsets.stride;\r\n\r\n        const childIndices = [...new Set<number>(groupMeshes.map(sm => sm.childIndex))].sort();\r\n        let numVertices = 0;\r\n        let numIndices = 0;\r\n        let numTriangles = 0;\r\n        for (let i = 0; i < groupMeshes.length; i++) {\r\n            const sm = groupMeshes[i];\r\n            const vtxCnt = sm.vertexRange[1] - sm.vertexRange[0];\r\n            const idxCnt = sm.indexRange[1] - sm.indexRange[0];\r\n            numVertices += vtxCnt;\r\n            numIndices += idxCnt;\r\n            if (primitiveType == PrimitiveType.triangles) {\r\n                numTriangles += Math.round((idxCnt > 0 ? idxCnt : vtxCnt) / 3);\r\n            }\r\n        }\r\n        const vertexBuffer = new ArrayBuffer(numVertices * vertexStride);\r\n        let trianglePosBuffer: Int16Array | undefined;\r\n        let triangleObjectIdBuffer: Uint32Array | undefined;\r\n        let highlightBufferTri: Uint8Array | undefined;\r\n        if (enableOutlines && primitiveType == PrimitiveType.triangles) { // TODO: support triangle strips and fans too\r\n            trianglePosBuffer = new Int16Array(new ArrayBuffer(numTriangles * trianglePosStride));\r\n            triangleObjectIdBuffer = new Uint32Array(numTriangles);\r\n            highlightBufferTri = new Uint8Array(numTriangles);\r\n        }\r\n        const positionBuffer = separatePositionBuffer ? new ArrayBuffer(numVertices * positionStride) : undefined;\r\n        let indexBuffer: Uint32Array | Uint16Array | undefined;\r\n        if (vertexIndex) {\r\n            indexBuffer = new (numVertices < 0xffff ? Uint16Array : Uint32Array)(numIndices);\r\n        }\r\n        const highlightBuffer = new Uint8Array(numVertices);\r\n        let indexOffset = 0;\r\n        let vertexOffset = 0;\r\n        let triangleOffset = 0;\r\n        let drawRanges: MeshDrawRange[] = [];\r\n        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n        const objectRanges: Mutable<MeshObjectRange>[] = [];\r\n\r\n        function enumerateBuffers<K extends string>(possibleBuffers: { readonly [P in K]: ArrayBuffer | undefined }) {\r\n            const buffers: ArrayBuffer[] = [];\r\n            const indices = {} as { readonly [P in K]: number };\r\n            for (const [key, value] of Object.entries(possibleBuffers)) {\r\n                const buffer = value as ArrayBuffer | undefined;\r\n                let index = -1;\r\n                if (buffer) {\r\n                    index = buffers.indexOf(buffer);\r\n                    if (index < 0) {\r\n                        index = buffers.length;\r\n                        buffers.push(buffer);\r\n                    }\r\n                }\r\n                Reflect.set(indices, key, index);\r\n            }\r\n            return [buffers, indices] as const;\r\n        }\r\n\r\n        const [vertexBuffers, bufIdx] = enumerateBuffers({\r\n            primary: vertexBuffer,\r\n            highlight: highlightBuffer?.buffer,\r\n            pos: positionBuffer,\r\n            triPos: trianglePosBuffer?.buffer,\r\n            triId: triangleObjectIdBuffer?.buffer,\r\n            highlightTri: highlightBufferTri?.buffer,\r\n        });\r\n\r\n        for (const childIndex of childIndices) {\r\n            const meshes = groupMeshes.filter(sm => sm.childIndex == childIndex);\r\n            if (meshes.length == 0)\r\n                continue;\r\n\r\n            const drawRangeBegin = indexBuffer ? indexOffset : vertexOffset;\r\n\r\n            for (const subMesh of meshes) {\r\n                const { vertexRange, indexRange, materialIndex, deviations, objectId } = subMesh;\r\n                const context = { materialIndex, objectId };\r\n                const [beginVtx, endVtx] = vertexRange;\r\n                const [beginIdx, endIdx] = indexRange;\r\n\r\n                // initialize vertex buffer\r\n                const vertexAttribs = getVertexAttribs(deviations);\r\n                for (const attribName of attribNames) {\r\n                    const { type, components } = vertexAttribs[attribName] as VertexAttrib;\r\n                    const dst = new type(vertexBuffer, vertexOffset * vertexStride);\r\n                    const count = components?.length ?? 1;\r\n                    for (var c = 0; c < count; c++) {\r\n                        const offs = attribOffsets[attribName]! + c * type.BYTES_PER_ELEMENT;\r\n                        if (attribName in vertex) {\r\n                            let src = Reflect.get(vertex, attribName) as typeof dst;\r\n                            if (components) {\r\n                                src = Reflect.get(src, components[c]);\r\n                            }\r\n                            copyToInterleavedArray(wasm, dst, src, offs, vertexStride, beginVtx, endVtx);\r\n                        } else {\r\n                            const src = Reflect.get(context, attribName) as number;\r\n                            fillToInterleavedArray(wasm, dst, src, offs, vertexStride, beginVtx, endVtx);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // initialize triangle vertex buffer for clipping intersection\r\n                let numTrianglesInSubMesh = 0;\r\n                if (trianglePosBuffer && triangleObjectIdBuffer) {\r\n                    const { x, y, z } = vertex.position;\r\n                    let j = triangleOffset * 3 * 3;\r\n                    if (vertexIndex && indexBuffer) {\r\n                        numTrianglesInSubMesh = (endIdx - beginIdx) / 3;\r\n                        for (let i = beginIdx; i < endIdx; i++) {\r\n                            // TODO: Add support for triangle strips and fans as well...\r\n                            const idx = vertexIndex[i] + beginVtx;\r\n                            trianglePosBuffer[j++] = x[idx];\r\n                            trianglePosBuffer[j++] = y[idx];\r\n                            trianglePosBuffer[j++] = z[idx];\r\n                        }\r\n                    } else {\r\n                        numTrianglesInSubMesh = (endVtx - beginVtx) / 3;\r\n                        for (let i = beginVtx; i < endVtx; i++) {\r\n                            const idx = i;\r\n                            trianglePosBuffer[j++] = x[idx];\r\n                            trianglePosBuffer[j++] = y[idx];\r\n                            trianglePosBuffer[j++] = z[idx];\r\n                        }\r\n                    }\r\n                    triangleObjectIdBuffer.fill(objectId, triangleOffset, triangleOffset + numTrianglesInSubMesh);\r\n                }\r\n\r\n                if (positionBuffer) {\r\n                    // initialize separate positions buffer\r\n                    const i16 = new Int16Array(positionBuffer, vertexOffset * positionStride);\r\n                    copyToInterleavedArray(wasm, i16, vertex.position.x, 0, positionStride, beginVtx, endVtx);\r\n                    copyToInterleavedArray(wasm, i16, vertex.position.y, 2, positionStride, beginVtx, endVtx);\r\n                    copyToInterleavedArray(wasm, i16, vertex.position.z, 4, positionStride, beginVtx, endVtx);\r\n                }\r\n\r\n                // initialize index buffer (if any)\r\n                if (vertexIndex && indexBuffer) {\r\n                    for (let i = beginIdx; i < endIdx; i++) {\r\n                        indexBuffer[indexOffset++] = vertexIndex[i] + vertexOffset;\r\n                    }\r\n                }\r\n\r\n                const endVertex = vertexOffset + (endVtx - beginVtx);\r\n                const endTriangle = triangleOffset + (endIdx - beginIdx) / 3;\r\n                // initialize highlight buffer\r\n                const highlightIndex = highlights.indices[objectId] ?? 0;\r\n                if (highlightIndex) {\r\n                    highlightBuffer.fill(highlightIndex, vertexOffset, endVertex);\r\n                    highlightBufferTri?.fill(highlightIndex, triangleOffset, endTriangle);\r\n                }\r\n\r\n                // update object ranges\r\n                const prev = objectRanges.length - 1;\r\n                if (prev >= 0 && objectRanges[prev].objectId == objectId) {\r\n                    // merge with previous entry\r\n                    objectRanges[prev].endVertex = endVertex;\r\n                    objectRanges[prev].endTriangle = endTriangle;\r\n                } else {\r\n                    objectRanges.push({ objectId, beginVertex: vertexOffset, endVertex, beginTriangle: triangleOffset, endTriangle });\r\n                }\r\n                triangleOffset += numTrianglesInSubMesh;\r\n                vertexOffset += endVtx - beginVtx;\r\n            }\r\n\r\n            const drawRangeEnd = indexBuffer ? indexOffset : vertexOffset;\r\n            const byteOffset = drawRangeBegin * (indexBuffer ? indexBuffer.BYTES_PER_ELEMENT : vertexStride);\r\n            const count = drawRangeEnd - drawRangeBegin;\r\n            drawRanges.push({ childIndex, byteOffset, first: drawRangeBegin, count });\r\n        }\r\n\r\n        console.assert(vertexOffset == numVertices);\r\n        console.assert(indexOffset == numIndices);\r\n        console.assert(triangleOffset == (triangleObjectIdBuffer?.length ?? 0));\r\n        const indices = indexBuffer ?? numVertices;\r\n\r\n        const [beginTexture, endTexture] = groupMeshes[0].textureRange;\r\n        let baseColorTexture: number | undefined;\r\n        if (endTexture > beginTexture) {\r\n            baseColorTexture = beginTexture;\r\n        }\r\n\r\n        if (baseColorTexture != undefined) {\r\n            referencedTextures.add(baseColorTexture);\r\n        }\r\n\r\n        const stride = vertexStride;\r\n        const deviationsKind = deviations == 0 || deviations == 1 ? \"FLOAT\" as const : `FLOAT_VEC${deviations}` as const;\r\n        const vertexAttributes = {\r\n            position: { kind: \"FLOAT_VEC4\", buffer: bufIdx.pos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: attribOffsets[\"position\"], byteStride: separatePositionBuffer ? 0 : stride },\r\n            normal: (attributes & OptionalVertexAttribute.normal) != 0 ? { kind: \"FLOAT_VEC3\", buffer: bufIdx.primary, componentCount: 3, componentType: \"BYTE\", normalized: true, byteOffset: attribOffsets[\"normal\"], byteStride: stride } : null,\r\n            material: hasMaterials ? { kind: \"UNSIGNED_INT\", buffer: bufIdx.primary, componentCount: 1, componentType: \"UNSIGNED_BYTE\", normalized: false, byteOffset: attribOffsets[\"materialIndex\"], byteStride: stride } : null,\r\n            objectId: hasObjectIds ? { kind: \"UNSIGNED_INT\", buffer: bufIdx.primary, componentCount: 1, componentType: \"UNSIGNED_INT\", normalized: false, byteOffset: attribOffsets[\"objectId\"], byteStride: stride } : null,\r\n            texCoord: (attributes & OptionalVertexAttribute.texCoord) != 0 ? { kind: \"FLOAT_VEC2\", buffer: bufIdx.primary, componentCount: 2, componentType: \"HALF_FLOAT\", normalized: false, byteOffset: attribOffsets[\"texCoord\"], byteStride: stride } : null,\r\n            color: (attributes & OptionalVertexAttribute.color) != 0 ? { kind: \"FLOAT_VEC4\", buffer: bufIdx.primary, componentCount: 4, componentType: \"UNSIGNED_BYTE\", normalized: true, byteOffset: attribOffsets[\"color\"], byteStride: stride } : null,\r\n            projectedPos: (attributes & OptionalVertexAttribute.projectedPos) != 0 ? { kind: \"FLOAT_VEC4\", buffer: bufIdx.primary, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: attribOffsets[\"projectedPos\"], byteStride: stride } : null,\r\n            deviations: deviations != 0 ? { kind: deviationsKind, buffer: bufIdx.primary, componentCount: deviations, componentType: \"HALF_FLOAT\", normalized: false, byteOffset: attribOffsets[\"deviations\"], byteStride: stride } : null,\r\n            triangles0: trianglePosBuffer ? { kind: \"FLOAT_VEC4\", buffer: bufIdx.triPos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: 0, byteStride: 18 } : null,\r\n            triangles1: trianglePosBuffer ? { kind: \"FLOAT_VEC4\", buffer: bufIdx.triPos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: 6, byteStride: 18 } : null,\r\n            triangles2: trianglePosBuffer ? { kind: \"FLOAT_VEC4\", buffer: bufIdx.triPos, componentCount: 3, componentType: \"SHORT\", normalized: true, byteOffset: 12, byteStride: 18 } : null,\r\n            trianglesObjId: trianglePosBuffer ? { kind: \"UNSIGNED_INT\", buffer: bufIdx.triId, componentCount: 1, componentType: \"UNSIGNED_INT\", normalized: false, byteOffset: 0, byteStride: 4 } : null,\r\n            highlight: { kind: \"UNSIGNED_INT\", buffer: bufIdx.highlight, componentCount: 1, componentType: \"UNSIGNED_BYTE\", normalized: false, byteOffset: 0, byteStride: 0 },\r\n            highlightTri: { kind: \"UNSIGNED_INT\", buffer: bufIdx.highlightTri, componentCount: 1, componentType: \"UNSIGNED_BYTE\", normalized: false, byteOffset: 0, byteStride: 0 },\r\n        } as const satisfies VertexAttributes;\r\n\r\n        objectRanges.sort((a, b) => (a.objectId - b.objectId));\r\n\r\n        subMeshes.push({\r\n            materialType,\r\n            primitiveType: primitiveTypeStrings[primitiveType],\r\n            numVertices,\r\n            numTriangles,\r\n            objectRanges,\r\n            vertexAttributes,\r\n            vertexBuffers,\r\n            indices,\r\n            baseColorTexture,\r\n            drawRanges\r\n        });\r\n    }\r\n\r\n    highlights.mutex.unlock();\r\n\r\n    const textures = new Array<NodeTexture | undefined>(schema.textureInfo.length);\r\n    const { textureInfo } = schema;\r\n    for (const i of referencedTextures) {\r\n        const [begin, end] = getRange(textureInfo.pixelRange, i);\r\n        const semantic = textureInfo.semantic[i];\r\n        const transform = [\r\n            textureInfo.transform.e00[i],\r\n            textureInfo.transform.e01[i],\r\n            textureInfo.transform.e02[i],\r\n            textureInfo.transform.e10[i],\r\n            textureInfo.transform.e11[i],\r\n            textureInfo.transform.e12[i],\r\n            textureInfo.transform.e20[i],\r\n            textureInfo.transform.e21[i],\r\n            textureInfo.transform.e22[i],\r\n        ] as const;\r\n        const ktx = schema.texturePixels.subarray(begin, end);\r\n        const params = parseKTX(ktx);\r\n        textures[i] = { semantic, transform, params };\r\n    }\r\n\r\n\r\n    return { subMeshes, textures } as const satisfies NodeGeometry;\r\n}\r\n\r\nexport function parseNode(wasm: WasmInstance, id: string, separatePositionBuffer: boolean, enableOutlines: boolean, version: string, buffer: ArrayBuffer, highlights: Highlights, applyFilter: boolean) {\r\n    console.assert(isSupportedVersion(version));\r\n    const r = new BufferReader(buffer);\r\n    var schema = version == Current.version ? Current.readSchema(r) : Previous.readSchema(r);\r\n    let predicate: ((objectId: number) => boolean) | undefined;\r\n    predicate = applyFilter ? (objectId =>\r\n        highlights.indices[objectId] != 0xff\r\n    ) : undefined;\r\n    const childInfos = getChildren(id, schema, separatePositionBuffer, predicate);\r\n    const geometry = getGeometry(wasm, schema, separatePositionBuffer, enableOutlines, highlights, predicate);\r\n    return { childInfos, geometry } as const;\r\n}\r\n", "let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function init() {\n    wasm.init();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n* @param {Uint8Array} dst\n* @param {Uint8Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_u8(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray8ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_i8(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\nlet cachedUint16Memory0 = null;\n\nfunction getUint16Memory0() {\n    if (cachedUint16Memory0 === null || cachedUint16Memory0.byteLength === 0) {\n        cachedUint16Memory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16Memory0;\n}\n\nfunction passArray16ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 2, 2) >>> 0;\n    getUint16Memory0().set(arg, ptr / 2);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint16Array} dst\n* @param {Uint16Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_u16(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray16ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray16ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_i16(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\nlet cachedUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint32Array} dst\n* @param {Uint32Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_u32(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray32ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray32ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_i32(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Int8Array} dst\n* @param {Int8Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_i8(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray8ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_i8(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Int16Array} dst\n* @param {Int16Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_i16(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray16ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray16ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_i16(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Int32Array} dst\n* @param {Int32Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_i32(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray32ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray32ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_i32(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\nlet cachedFloat32Memory0 = null;\n\nfunction getFloat32Memory0() {\n    if (cachedFloat32Memory0 === null || cachedFloat32Memory0.byteLength === 0) {\n        cachedFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachedFloat32Memory0;\n}\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Float32Array} dst\n* @param {Float32Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_f32(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArrayF32ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArrayF32ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_f32(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\nlet cachedFloat64Memory0 = null;\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0 === null || cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8, 8) >>> 0;\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Float64Array} dst\n* @param {Float64Array} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function copy_to_interleaved_array_f64(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArrayF64ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArrayF64ToWasm0(src, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    wasm.copy_to_interleaved_array_f64(ptr0, len0, addHeapObject(dst), ptr1, len1, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Uint8Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_u8(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray8ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_i8(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Uint16Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_u16(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray16ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_i16(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Uint32Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_u32(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray32ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_i32(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Int8Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_i8(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray8ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_i8(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Int16Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_i16(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray16ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_i16(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Int32Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_i32(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArray32ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_i32(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Float32Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_f32(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArrayF32ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_f32(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\n/**\n* @param {Float64Array} dst\n* @param {number} src\n* @param {number} byte_offset\n* @param {number} byte_stride\n* @param {number} begin\n* @param {number} end\n*/\nexport function fill_to_interleaved_array_f64(dst, src, byte_offset, byte_stride, begin, end) {\n    var ptr0 = passArrayF64ToWasm0(dst, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.fill_to_interleaved_array_f64(ptr0, len0, addHeapObject(dst), src, byte_offset, byte_stride, begin, end);\n}\n\nexport function __wbindgen_copy_to_typed_array(arg0, arg1, arg2) {\n    new Uint8Array(getObject(arg2).buffer, getObject(arg2).byteOffset, getObject(arg2).byteLength).set(getArrayU8FromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\n", "import type * as WasmNamespace from \"@novorender/wasm-parser\";\r\n// @ts-ignore\r\nimport * as wasmWrapper from \"@novorender/wasm-parser/wasm_parser_bg\";\r\n\r\nexport type WasmInstance = typeof WasmNamespace;\r\n\r\n/** @internal */\r\nexport async function esbuildWasmInstance(wasmData: ArrayBuffer): Promise<WasmInstance> {\r\n    let imports = {\r\n        [\"./wasm_parser_bg.js\"]: wasmWrapper,\r\n    };\r\n    const { instance } = await WebAssembly.instantiate(wasmData, imports);\r\n    wasmWrapper.__wbg_set_wasm(instance.exports);\r\n    return wasmWrapper;\r\n}", "import { AbortableDownload, Downloader } from \"./download\";\r\nimport { Mutex } from \"../mutex\";\r\nimport { parseNode } from \"./parser\";\r\nimport type { AbortAllMessage, AbortMessage, AbortedAllMessage, AbortedMessage, ParseMessage, ErrorMessage, LoadMessage, ReadyMessage, MessageRequest, MessageResponse, ParseParams, BufferSet, InitMessage } from \"./messages\";\r\nimport { esbuildWasmInstance, type WasmInstance } from \"./wasm_loader\";\r\n\r\nexport interface HighlightsBuffer {\r\n    readonly buffer: SharedArrayBuffer;\r\n    readonly indices: Uint8Array;\r\n    readonly mutex: Mutex;\r\n}\r\n/** @internal */\r\nexport class LoaderHandler {\r\n    readonly downloader = new Downloader();\r\n    readonly downloads = new Map<string, AbortableDownload>();\r\n    highlights: HighlightsBuffer = undefined!; // will be set right after construction by \"buffer\" message\r\n    wasm: WasmInstance | undefined;\r\n\r\n    constructor(readonly send: (msg: MessageResponse, transfer?: Transferable[]) => void) {\r\n    }\r\n\r\n    receive(msg: MessageRequest) {\r\n        switch (msg.kind) {\r\n            case \"init\":\r\n                this.init(msg);\r\n                break;\r\n            case \"parse\":\r\n                this.parse(msg);\r\n                break;\r\n            case \"load\":\r\n                this.load(msg);\r\n                break;\r\n            case \"abort\":\r\n                this.abort(msg);\r\n                break;\r\n            case \"abort_all\":\r\n                this.abortAll(msg);\r\n                break;\r\n            // default:\r\n            //     console.warn(`Unknown load message: ${msg}!`);\r\n            //     break;\r\n        }\r\n    }\r\n\r\n    private async init(msg: InitMessage) {\r\n        const {wasmData, buffer} = msg;\r\n\r\n        this.wasm = await esbuildWasmInstance(wasmData);\r\n\r\n        const indices = new Uint8Array(buffer, 4);\r\n        const mutex = new Mutex(buffer);\r\n        this.highlights = { buffer, indices, mutex };\r\n        const setBufferMsg = { kind: \"buffer\" } as BufferSet;\r\n        this.send(setBufferMsg);\r\n    }\r\n\r\n    private parseBuffer(buffer: ArrayBuffer, params: ParseParams) {\r\n        if(this.wasm) {\r\n            const { highlights } = this;\r\n            const { id, version, separatePositionsBuffer, enableOutlines, applyFilter } = params;\r\n            const { childInfos, geometry } = parseNode(this.wasm, id, separatePositionsBuffer, enableOutlines, version, buffer, highlights, applyFilter);\r\n            const readyMsg: ReadyMessage = { kind: \"ready\", id, childInfos, geometry };\r\n            const transfer: Transferable[] = [];\r\n            for (const { vertexBuffers, indices } of geometry.subMeshes) {\r\n                transfer.push(...vertexBuffers);\r\n                if (typeof indices != \"number\") {\r\n                    transfer.push(indices.buffer);\r\n                }\r\n            }\r\n            this.send(readyMsg, transfer);\r\n        }else{\r\n            console.error(\"Wasm is not initialized yet\");\r\n        }\r\n    }\r\n\r\n    private async parse(params: ParseMessage) {\r\n        const { id, buffer } = params;\r\n        try {\r\n            this.parseBuffer(buffer, params);\r\n        } catch (error) {\r\n            this.error(id, error);\r\n        }\r\n    }\r\n\r\n    private async load(params: LoadMessage) {\r\n        const { downloader, downloads } = this;\r\n        const { url, id, byteSize } = params;\r\n        try {\r\n            const download = downloader.downloadArrayBufferAbortable(url, new ArrayBuffer(byteSize));\r\n            downloads.set(id, download);\r\n            const buffer = await download.result;\r\n            downloads.delete(id);\r\n            if (buffer) {\r\n                this.parseBuffer(buffer, params);\r\n            } else {\r\n                const abortedMsg: AbortedMessage = { kind: \"aborted\", id };\r\n                this.send(abortedMsg);\r\n            }\r\n        } catch (error) {\r\n            this.error(id, error);\r\n        }\r\n    }\r\n\r\n    private removeNode(id: string) {\r\n        const { downloads } = this;\r\n        const download = downloads.get(id);\r\n        downloads.delete(id);\r\n        return { download };\r\n    }\r\n\r\n    private error(id: string, error: any) {\r\n        const { download } = this.removeNode(id);\r\n        const errorMsg = { kind: \"error\", id, error } as ErrorMessage;\r\n        this.send(errorMsg);\r\n    }\r\n\r\n    private abort(params: AbortMessage) {\r\n        const { id } = params;\r\n        const { download } = this.removeNode(id);\r\n        download?.abort();\r\n    }\r\n\r\n    private async abortAll(params: AbortAllMessage) {\r\n        const { downloads, downloader } = this;\r\n        for (const download of downloads.values()) {\r\n            download.abort();\r\n        }\r\n        await downloader.complete();\r\n        console.assert(downloads.size == 0);\r\n        const abortedAllMsg = { kind: \"aborted_all\" } as AbortedAllMessage;\r\n        this.send(abortedAllMsg);\r\n    }\r\n}", "import { LoaderHandler } from \"./handler\";\r\nimport type { MessageResponse, MessageRequest } from \"./messages\";\r\nimport { esbuildWasmInstance } from \"./wasm_loader\";\r\nexport type * from \"./parser\";\r\nexport type * from \"./messages\";\r\n\r\n\r\nconst handler = new LoaderHandler((msg: MessageResponse, transfer?: Transferable[]) => {\r\n    postMessage(msg, { transfer });\r\n});\r\n\r\nonmessage = e => {\r\n    const msg = e.data as MessageRequest;\r\n    if (msg.kind == \"close\") {\r\n        close();\r\n    } else {\r\n        handler.receive(msg);\r\n    }\r\n};\r\n", "import { glUpdateBuffer, type DrawParams, type VertexAttribute, type DrawParamsArraysMultiDraw, type DrawParamsElementsMultiDraw } from \"webgl2\";\r\nimport { type MeshDrawRange, type MeshObjectRange, type NodeGeometry, type VertexAttributeData, type VertexAttributes } from \"./worker\";\r\nimport { ResourceBin } from \"core3d/resource\";\r\n\r\nexport const enum MaterialType {\r\n    opaque = 0,\r\n    opaqueDoubleSided = 1,\r\n    transparent = 2,\r\n    elevation = 3,\r\n};\r\n\r\n\r\n/** @internal */\r\nexport interface Mesh {\r\n    readonly materialType: MaterialType;\r\n    readonly vao: WebGLVertexArrayObject;\r\n    readonly vaoPosOnly: WebGLVertexArrayObject | null;\r\n    readonly vaoTriangles: WebGLVertexArrayObject | null;\r\n    readonly highlightVB: WebGLBuffer | null;\r\n    readonly highlightTriVB: WebGLBuffer | null;\r\n    readonly numVertices: number;\r\n    readonly numTriangles: number;\r\n    readonly drawParams: DrawParams;\r\n    readonly drawRanges: readonly MeshDrawRange[];\r\n    readonly objectRanges: readonly MeshObjectRange[];\r\n    readonly baseColorTexture: WebGLTexture | null;\r\n}\r\n\r\n\r\nfunction convertAttributes(attributes: VertexAttributes, buffers: readonly WebGLBuffer[]) {\r\n    const ret: any = {};\r\n    function convertAttrib(a: VertexAttributeData | null) {\r\n        return a ? { ...a, buffer: buffers[a.buffer] } as VertexAttribute : null;\r\n    }\r\n    for (const [key, value] of Object.entries(attributes)) {\r\n        ret[key] = convertAttrib(value);\r\n    }\r\n    type ConvAttr<T> = T extends null ? VertexAttribute | null : VertexAttribute;\r\n    return ret as { [P in keyof VertexAttributes]: ConvAttr<VertexAttributes[P]> };\r\n}\r\n\r\n/** @internal */\r\nexport function* createMeshes(resourceBin: ResourceBin, geometry: NodeGeometry) {\r\n    const textures = geometry.textures.map(ti => {\r\n        if (ti) {\r\n            return resourceBin.createTexture(ti.params);\r\n        }\r\n    });\r\n\r\n    for (const subMesh of geometry.subMeshes) {\r\n        // if (subMesh.materialType == MaterialType.transparent)\r\n        //     continue;\r\n        const { vertexAttributes, vertexBuffers, indices, numVertices, numTriangles, drawRanges, objectRanges, materialType } = subMesh;\r\n        const buffers = vertexBuffers.map(vb => {\r\n            return resourceBin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: vb });\r\n        })\r\n        const ib = typeof indices != \"number\" ? resourceBin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: indices }) : undefined;\r\n        const count = typeof indices == \"number\" ? indices : indices.length;\r\n        const indexType = indices instanceof Uint16Array ? \"UNSIGNED_SHORT\" : \"UNSIGNED_INT\";\r\n        const { triangles0, triangles1, triangles2, trianglesObjId, position, normal, material, objectId, texCoord, color, projectedPos, deviations, highlight, highlightTri } = convertAttributes(vertexAttributes, buffers);\r\n        const triangleAttributes = [triangles0, triangles1, triangles2, trianglesObjId, highlightTri];\r\n        const renderAttributes = [position, normal, material, objectId, texCoord, color, projectedPos, deviations, highlight];\r\n        // // add extra highlight vertex buffer and attribute\r\n        // const highlightVB = resourceBin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: subMesh.numVertices });\r\n        // attributes.push({ kind: \"UNSIGNED_INT\", buffer: highlightVB, componentType: \"UNSIGNED_BYTE\" });\r\n        const highlightVB = buffers[vertexAttributes.highlight!.buffer];\r\n        const highlightTriVB = triangles0 ? buffers[vertexAttributes.highlightTri!.buffer] : null;\r\n\r\n        const vao = resourceBin.createVertexArray({ attributes: renderAttributes, indices: ib });\r\n        const vaoPosOnly = position.buffer != 0 ? resourceBin.createVertexArray({ attributes: [position], indices: ib }) : null;\r\n        const vaoTriangles = triangleAttributes ? resourceBin.createVertexArray({ attributes: triangleAttributes }) : null;\r\n        resourceBin.subordinate(vao, ...buffers.filter(buf => buf != highlightVB && buf != highlightTriVB));\r\n        if (ib) {\r\n            resourceBin.subordinate(vao, ib);\r\n        }\r\n\r\n        const drawParams: DrawParams = ib ?\r\n            { kind: \"elements\", mode: subMesh.primitiveType, indexType, count } :\r\n            { kind: \"arrays\", mode: subMesh.primitiveType, count };\r\n        const baseColorTextureIndex = subMesh.baseColorTexture as number;\r\n        const baseColorTexture = textures[baseColorTextureIndex] ?? null;\r\n        yield { vao, vaoPosOnly, vaoTriangles, highlightVB, highlightTriVB, drawParams, drawRanges, numVertices, numTriangles, objectRanges, materialType: materialType as unknown as MaterialType, baseColorTexture } as const satisfies Mesh;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function updateMeshHighlights(gl: WebGL2RenderingContext, mesh: Mesh, highlights: Uint8Array | undefined) {\r\n    const { highlightVB, highlightTriVB } = mesh;\r\n    if (highlightVB) {\r\n        const highlightBuffer = new Uint8Array(mesh.numVertices);\r\n        if (highlights) {\r\n            for (const { objectId, beginVertex, endVertex } of mesh.objectRanges) {\r\n                const highlight = highlights[objectId];\r\n                if (highlight) {\r\n                    highlightBuffer.fill(highlight, beginVertex, endVertex);\r\n                }\r\n            }\r\n        }\r\n        glUpdateBuffer(gl, { kind: \"ARRAY_BUFFER\", srcData: highlightBuffer, targetBuffer: highlightVB });\r\n    }\r\n\r\n    if (highlightTriVB) {\r\n        const highlightTriBuffer = new Uint8Array(mesh.numTriangles);\r\n        if (highlights) {\r\n            for (const { objectId, beginTriangle, endTriangle } of mesh.objectRanges) {\r\n                const highlight = highlights[objectId];\r\n                if (highlight) {\r\n                    highlightTriBuffer.fill(highlight, beginTriangle, endTriangle);\r\n                }\r\n            }\r\n        }\r\n        glUpdateBuffer(gl, { kind: \"ARRAY_BUFFER\", srcData: highlightTriBuffer, targetBuffer: highlightTriVB });\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function deleteMesh(resourceBin: ResourceBin, mesh: Mesh) {\r\n    const { vao, vaoPosOnly, vaoTriangles, highlightVB, highlightTriVB, baseColorTexture } = mesh;\r\n    resourceBin.delete(vao, vaoPosOnly, vaoTriangles, highlightVB, highlightTriVB, baseColorTexture);\r\n}\r\n\r\n/** @internal */\r\nexport function getMultiDrawParams(mesh: Mesh, childMask: number): DrawParamsArraysMultiDraw | DrawParamsElementsMultiDraw | undefined {\r\n    // determine which draw ranges this parent node must render based on what children will render their own mesh\r\n    const drawRanges = mesh.drawRanges.filter(r => ((1 << r.childIndex) & childMask) != 0);\r\n    if (drawRanges.length == 0) {\r\n        return;\r\n    }\r\n    const offsetsList = new Int32Array(drawRanges.map(r => r.byteOffset));\r\n    const countsList = new Int32Array(drawRanges.map(r => r.count));\r\n    const drawCount = offsetsList.length;\r\n    const { drawParams } = mesh;\r\n    const { mode } = drawParams;\r\n    function isElements(params: DrawParams): params is DrawParamsElementsMultiDraw {\r\n        return \"indexType\" in params;\r\n    }\r\n    if (isElements(drawParams)) {\r\n        const { indexType } = drawParams;\r\n        return {\r\n            kind: \"elements_multidraw\",\r\n            mode,\r\n            drawCount,\r\n            indexType,\r\n            byteOffsets: offsetsList,\r\n            counts: countsList\r\n        };\r\n    } else {\r\n        return {\r\n            kind: \"arrays_multidraw\",\r\n            mode,\r\n            drawCount,\r\n            firstsList: offsetsList,\r\n            counts: countsList\r\n        };\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function meshPrimitiveCount(mesh: Mesh, renderedChildMask: number) {\r\n    let numPrimitives = 0;\r\n    const primitiveType = mesh.drawParams.mode ?? \"TRIANGLES\";\r\n    for (const drawRange of mesh.drawRanges) {\r\n        const childMask = 1 << drawRange.childIndex;\r\n        if ((renderedChildMask & childMask) != 0) {\r\n            numPrimitives += calcNumPrimitives(drawRange.count, primitiveType);\r\n        }\r\n    }\r\n    return numPrimitives;\r\n}\r\n\r\nfunction calcNumPrimitives(vertexCount: number, primitiveType: string) {\r\n    let primitiveCount = 0;\r\n    switch (primitiveType) {\r\n        case \"TRIANGLES\":\r\n            primitiveCount = vertexCount / 3;\r\n            break;\r\n        case \"TRIANGLE_STRIP\":\r\n        case \"TRIANGLE_FAN\":\r\n            primitiveCount = vertexCount - 2; break;\r\n        case \"LINES\":\r\n            primitiveCount = vertexCount / 2; break;\r\n        case \"LINE_STRIP\":\r\n            primitiveCount = vertexCount - 1; break;\r\n        default:\r\n            primitiveCount = vertexCount;\r\n    }\r\n    return primitiveCount;\r\n}\r\n", "import type { AbortAllMessage, AbortMessage, InitMessage, CloseMessage, LoadMessage, MessageRequest, MessageResponse, NodePayload, ParseMessage } from \"./worker\";\r\nimport { OctreeNode } from \"./node.js\";\r\nimport type { DeviceProfile } from \"core3d/device.js\";\r\n\r\ninterface PayloadPromiseMethods { readonly resolve: (value: NodePayload | undefined) => void, readonly reject: (reason: string) => void };\r\n\r\n/** @internal */\r\nexport class NodeLoader {\r\n    readonly payloadPromises = new Map<string, PayloadPromiseMethods>();\r\n    abortAllPromise: Promise<void> = Promise.resolve();\r\n    private resolveAbortAll: (() => void) | undefined;\r\n    bufferPromise: Promise<void> = Promise.resolve();\r\n    private resolveBuffer: (() => void) | undefined;\r\n    aborted = false;\r\n\r\n    constructor(readonly worker: Worker) {\r\n        worker.onmessage = e => {\r\n            this.receive(e.data as MessageResponse);\r\n        }\r\n    }\r\n\r\n    async init(buffer: SharedArrayBuffer, wasmData: ArrayBuffer) {\r\n        this.bufferPromise = new Promise<void>((resolve) => {\r\n            this.resolveBuffer = resolve;\r\n        })\r\n        const msg: InitMessage = { kind: \"init\", buffer, wasmData };\r\n        this.send(msg);\r\n        await this.bufferPromise;\r\n    }\r\n\r\n    get activeDownloads() {\r\n        return this.payloadPromises.size;\r\n    }\r\n\r\n    private send(msg: MessageRequest) {\r\n        this.worker.postMessage(msg);\r\n    }\r\n\r\n    private receive(msg: MessageResponse) {\r\n        if (msg.kind == \"buffer\") {\r\n            const { resolveBuffer } = this;\r\n            this.resolveBuffer = undefined;\r\n            resolveBuffer?.();\r\n            return;\r\n        }\r\n        if (msg.kind == \"aborted_all\") {\r\n            const { resolveAbortAll } = this;\r\n            this.resolveAbortAll = undefined;\r\n            resolveAbortAll?.();\r\n            return;\r\n        }\r\n        const { id } = msg;\r\n        const { payloadPromises } = this;\r\n        const payloadPromise = payloadPromises.get(id);\r\n        if (payloadPromise) {\r\n            payloadPromises.delete(id);\r\n            const { resolve, reject } = payloadPromise;\r\n            switch (msg.kind) {\r\n                case \"ready\":\r\n                    resolve(msg);\r\n                    break;\r\n                case \"aborted\":\r\n                    resolve(undefined);\r\n                    break;\r\n                case \"error\":\r\n                    reject(msg.error);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    abortAll() {\r\n        this.abortAllPromise = new Promise<void>((resolve) => {\r\n            this.resolveAbortAll = resolve;\r\n        })\r\n        const msg: AbortAllMessage = { kind: \"abort_all\" };\r\n        this.send(msg);\r\n        this.payloadPromises.clear();\r\n    }\r\n\r\n    dispose() {\r\n        const msg: CloseMessage = { kind: \"close\" };\r\n        this.send(msg);\r\n    }\r\n\r\n    parseNode(buffer: ArrayBuffer, id: string, deviceProfile: DeviceProfile, version: string): Promise<NodePayload | undefined> {\r\n        const { payloadPromises } = this;\r\n        const enableOutlines = deviceProfile.features.outline;\r\n        const applyFilter = true;\r\n        const parseMsg: ParseMessage = { kind: \"parse\", buffer, id, version, separatePositionsBuffer: true, enableOutlines, applyFilter };\r\n        const promise = new Promise<NodePayload | undefined>((resolve, reject) => {\r\n            payloadPromises.set(id, { resolve, reject });\r\n        });\r\n        this.send(parseMsg);\r\n        return promise;\r\n    }\r\n\r\n    loadNode(node: OctreeNode, version: string): Promise<NodePayload | undefined> {\r\n        const { payloadPromises } = this;\r\n        const { deviceProfile } = node.context.renderContext;\r\n        const { id, data } = node;\r\n        if (node.context.url == undefined) {\r\n            return Promise.resolve(undefined);\r\n        }\r\n        const url = new URL(node.context.url);\r\n        url.pathname += node.path;\r\n        const { byteSize } = data;\r\n        const enableOutlines = deviceProfile.features.outline;\r\n        const applyFilter = true;\r\n        const loadMsg: LoadMessage = { kind: \"load\", id, version, url: url.toString(), byteSize, separatePositionsBuffer: true, enableOutlines, applyFilter };\r\n        console.assert(byteSize != 0);\r\n        const abortMsg: AbortMessage = { kind: \"abort\", id };\r\n        const abort = () => { this.send(abortMsg); }\r\n        node.download = { abort };\r\n        this.send(loadMsg);\r\n        return new Promise<NodePayload | undefined>((resolve, reject) => {\r\n            payloadPromises.set(id, { resolve, reject });\r\n        });\r\n    }\r\n}\r\n", "import { mat4, type ReadonlyVec3, type ReadonlyVec4, vec3, vec4 } from \"gl-matrix\";\r\nimport { glUBOProxy, glUpdateBuffer } from \"webgl2\";\r\nimport { CoordSpace, type DerivedRenderState, RenderContext, type RenderStateHighlightGroup } from \"core3d\";\r\nimport { createMeshes, deleteMesh, type Mesh, meshPrimitiveCount, updateMeshHighlights } from \"./mesh\";\r\nimport type { NodeData } from \"./worker\";\r\nimport { NodeLoader } from \"./loader\";\r\nimport { ResourceBin } from \"core3d/resource\";\r\n\r\n/** @internal */\r\nexport const enum Visibility {\r\n    undefined,\r\n    none,\r\n    partial,\r\n    full,\r\n};\r\n\r\n/** @internal */\r\nexport const enum NodeState {\r\n    collapsed,\r\n    requestDownload,\r\n    downloading,\r\n    ready,\r\n}\r\n\r\n/** @internal */\r\nexport const enum NodeGeometryKind {\r\n    terrain,\r\n    triangles,\r\n    lines,\r\n    points,\r\n    documents,\r\n};\r\n\r\n/** @internal */\r\nexport const enum NodeGeometryKindMask {\r\n    none = 0,\r\n    terrain = 1 << NodeGeometryKind.terrain,\r\n    triangles = 1 << NodeGeometryKind.triangles,\r\n    lines = 1 << NodeGeometryKind.lines,\r\n    points = 1 << NodeGeometryKind.points,\r\n    documents = 1 << NodeGeometryKind.documents,\r\n    all = terrain | triangles | lines | points | documents,\r\n};\r\n\r\n/** @internal */\r\nexport interface OctreeContext {\r\n    readonly renderContext: RenderContext;\r\n    readonly loader: NodeLoader;\r\n    readonly url: string | undefined;\r\n    readonly version: string;\r\n    readonly debug: boolean;\r\n    readonly localSpaceChanged: boolean;\r\n    readonly hidden: readonly boolean[]; // corresponds to NodeGeometryKind\r\n    readonly highlights: Uint8Array;\r\n    readonly highlightGeneration: number;\r\n}\r\n\r\n/** @internal */\r\nexport class OctreeNode {\r\n    readonly id: string;\r\n    readonly parent: OctreeNode | undefined;\r\n    readonly resourceBin: ResourceBin\r\n    readonly center: ReadonlyVec3;\r\n    readonly radius: number;\r\n    readonly size: number;\r\n    readonly children: OctreeNode[] = [];\r\n    readonly meshes: Mesh[] = [];\r\n    readonly uniformsData;\r\n    readonly geometryKind: NodeGeometryKind;\r\n    uniforms: WebGLBuffer | undefined;\r\n    private readonly center4: ReadonlyVec4;\r\n    private readonly corners: ReadonlyVec4[];\r\n    private hasValidModelLocalMatrix = false;\r\n    state = NodeState.collapsed;\r\n    download: { abort(): void } | undefined;\r\n    visibility = Visibility.undefined;\r\n    viewDistance = 0;\r\n    projectedSize = 0;\r\n    static readonly errorModifiersPinhole = {\r\n        [NodeGeometryKind.terrain]: .05,\r\n        [NodeGeometryKind.triangles]: 1,\r\n        [NodeGeometryKind.lines]: .5,\r\n        [NodeGeometryKind.points]: .35,\r\n        [NodeGeometryKind.documents]: .08,\r\n    };\r\n    static readonly errorModifiersOrtho = {\r\n        [NodeGeometryKind.terrain]: .25,\r\n        [NodeGeometryKind.triangles]: 5,\r\n        [NodeGeometryKind.lines]: 2.5,\r\n        [NodeGeometryKind.points]: .75,\r\n        [NodeGeometryKind.documents]: .4,\r\n    };\r\n\r\n    constructor(readonly context: OctreeContext, readonly data: NodeData, parent: OctreeNode | NodeGeometryKind) {\r\n        this.geometryKind = typeof parent == \"object\" ? parent.geometryKind : parent;\r\n        this.parent = typeof parent == \"object\" ? parent : undefined;\r\n        // create uniform buffer\r\n        const { sphere, box } = data.bounds;\r\n        const { center, radius } = sphere;\r\n        this.id = data.id;\r\n        this.resourceBin = context.renderContext.resourceBin(\"Node\");\r\n        this.center = center;\r\n        this.radius = radius;\r\n        this.center4 = vec4.fromValues(center[0], center[1], center[2], 1);\r\n        const [x0, y0, z0] = box.min;\r\n        const [x1, y1, z1] = box.max;\r\n        this.corners = [\r\n            vec4.fromValues(x0, y0, z0, 1),\r\n            vec4.fromValues(x1, y0, z0, 1),\r\n            vec4.fromValues(x0, y1, z0, 1),\r\n            vec4.fromValues(x1, y1, z0, 1),\r\n            vec4.fromValues(x0, y0, z1, 1),\r\n            vec4.fromValues(x1, y0, z1, 1),\r\n            vec4.fromValues(x0, y1, z1, 1),\r\n            vec4.fromValues(x1, y1, z1, 1),\r\n        ];\r\n\r\n\r\n        // const toleranceScale = 128; // an approximate scale for tolerance to projected pixels\r\n        // this.size = Math.pow(2, data.tolerance) * toleranceScale;\r\n        this.size = Math.max(box.max[0] - box.min[0], Math.max(box.max[1] - box.min[1], box.max[2] - box.min[2])) * 4;\r\n        // this.size = data.nodeSize * errorModifier;\r\n        this.uniformsData = glUBOProxy({\r\n            modelLocalMatrix: \"mat4\",\r\n            tolerance: \"float\",\r\n            debugColor: \"vec4\",\r\n            min: \"vec3\",\r\n            max: \"vec3\",\r\n        });\r\n        this.uniformsData.values.tolerance = Math.pow(2, data.tolerance);\r\n    }\r\n\r\n    dispose() {\r\n        const { meshes, uniforms, children, resourceBin } = this;\r\n        for (const mesh of meshes) {\r\n            deleteMesh(resourceBin, mesh);\r\n        }\r\n        if (uniforms) {\r\n            resourceBin.delete(uniforms);\r\n            this.uniforms = undefined;\r\n        }\r\n        console.assert(resourceBin.size == 0);\r\n        resourceBin.dispose();\r\n        for (const child of children) {\r\n            child.dispose();\r\n        }\r\n        meshes.length = 0;\r\n        children.length = 0;\r\n        this.download?.abort();\r\n        this.download = undefined;\r\n        this.state = NodeState.collapsed;\r\n    }\r\n\r\n    get isRoot() {\r\n        return !this.parent;\r\n    }\r\n\r\n    get path() {\r\n        return this.id;\r\n    }\r\n\r\n    get isSplit() {\r\n        return this.state != NodeState.collapsed;\r\n    }\r\n\r\n    get hasGeometry() {\r\n        return this.meshes.length > 0 || this.uniforms != undefined;\r\n    }\r\n\r\n    get renderedChildMask() {\r\n        let { childMask } = this.data;\r\n        for (const child of this.children) {\r\n            if (child.hasGeometry) {\r\n                childMask &= ~(1 << child.data.childIndex);\r\n            }\r\n        }\r\n        return childMask;\r\n    }\r\n\r\n    shouldSplit(projectedSizeSplitThreshold: number): boolean {\r\n        const { visibility, projectedSize, context, geometryKind } = this;\r\n        const hidden = context.hidden[geometryKind ?? -1] ?? false;\r\n        return !hidden && (this.isRoot || (visibility != Visibility.none && projectedSize > projectedSizeSplitThreshold)) && !this.areAllDescendantsHidden;\r\n    }\r\n\r\n    get areAllDescendantsHidden() {\r\n        const { descendantObjectIds } = this.data;\r\n        if (descendantObjectIds) {\r\n            const { highlights } = this.context;\r\n            // We assume descendantObjectIds are rare and small. Otherwise this check should probably be optimized by performing this check only on recent loads or when highligts changes.\r\n            if (descendantObjectIds.every(id => highlights[id] >= 0xfe)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    intersectsPlane(plane: ReadonlyVec4) {\r\n        const { center4, radius, corners } = this;\r\n        const distance = vec4.dot(plane, center4);\r\n        if (Math.abs(distance) > radius) {\r\n            return false;\r\n        }\r\n        let side = 0;\r\n        for (const corner of corners) {\r\n            const distance = vec4.dot(plane, corner);\r\n            const distSgn = Math.sign(distance);\r\n            if (side && distSgn != side) {\r\n                return true;\r\n            }\r\n            if (distSgn) {\r\n                side = distSgn;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private computeVisibility(state: DerivedRenderState): Visibility {\r\n        const { center4, radius, corners } = this;\r\n        let fullyInside = true;\r\n        let fullyOutside = false;\r\n        const { planes } = state.viewFrustum;\r\n        for (const plane of planes) {\r\n            const distance = vec4.dot(plane, center4);\r\n            if (distance > radius) {\r\n                fullyOutside = true;\r\n                fullyInside = false;\r\n                break;\r\n            } else if (distance > -radius)\r\n                fullyInside = false;\r\n        }\r\n        if (fullyInside === fullyOutside) {\r\n            // check against corders of bounding box\r\n            fullyOutside = true;\r\n            fullyInside = true;\r\n            for (const corner of corners) {\r\n                for (const plane of planes) {\r\n                    const distance = vec4.dot(plane, corner);\r\n                    if (distance > 0) {\r\n                        fullyInside = false;\r\n                    } else {\r\n                        fullyOutside = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let visibility = Visibility.undefined;\r\n        if (fullyOutside) {\r\n            visibility = Visibility.none;\r\n        } else if (!fullyInside) {\r\n            visibility = Visibility.partial;\r\n        } else {\r\n            visibility = Visibility.full;\r\n        }\r\n        return visibility;\r\n    }\r\n\r\n    get renderedPrimitives() {\r\n        let numPrimitives = 0;\r\n        if (this.visibility != Visibility.none) {\r\n            const { renderedChildMask } = this;\r\n            if (renderedChildMask) {\r\n                for (const mesh of this.meshes) {\r\n                    numPrimitives += meshPrimitiveCount(mesh, renderedChildMask);\r\n                }\r\n            }\r\n        }\r\n        return numPrimitives;\r\n    }\r\n\r\n    update(state: DerivedRenderState, parentVisibility: Visibility = Visibility.partial) {\r\n        // update visibility\r\n        this.visibility = (parentVisibility == Visibility.partial) ? this.computeVisibility(state) : parentVisibility;\r\n\r\n        // update projected size\r\n        const { context, center4, visibility, radius, uniforms, data, uniformsData, children } = this;\r\n        const { camera, matrices, viewFrustum } = state;\r\n        const imagePlane = viewFrustum.image;\r\n        const projection = matrices.getMatrix(CoordSpace.View, CoordSpace.Clip);\r\n        const viewDistance = this.viewDistance = vec4.dot(imagePlane, center4);\r\n\r\n        if (visibility <= Visibility.none) {\r\n            this.projectedSize = 0;\r\n        } else if (camera.kind == \"pinhole\") {\r\n            const distance = Math.max(0.001, viewDistance - radius); // we subtract radius to get the projection size at the extremity nearest the camera\r\n            this.projectedSize = (this.size * OctreeNode.errorModifiersPinhole[this.geometryKind] * projection[5]) / (-distance * projection[11]);\r\n            // const exp = 2; //Scale the prioritization of nodes that is closer to the camera.\r\n            // this.projectedSize = (this.size * projection[5]) / (-distance * Math.pow(-distance, exp) / Math.pow(10, exp) * projection[11]);\r\n        } else {\r\n            this.projectedSize = this.size * OctreeNode.errorModifiersOrtho[this.geometryKind] * projection[5];\r\n        }\r\n\r\n        if (context.localSpaceChanged || !this.hasValidModelLocalMatrix) {\r\n            let { offset, scale } = data;\r\n            const [ox, oy, oz] = offset;\r\n            const [tx, ty, tz] = state.localSpaceTranslation;\r\n            const modelLocalMatrix = mat4.fromValues(\r\n                scale, 0, 0, 0,\r\n                0, scale, 0, 0,\r\n                0, 0, scale, 0,\r\n                ox - tx, oy, oz - tz, 1\r\n            );\r\n            const { values } = this.uniformsData;\r\n            values.modelLocalMatrix = modelLocalMatrix;\r\n            if (uniforms) {\r\n                glUpdateBuffer(context.renderContext.gl, { kind: \"UNIFORM_BUFFER\", srcData: uniformsData.buffer, targetBuffer: uniforms });\r\n            }\r\n            this.hasValidModelLocalMatrix = true;\r\n        }\r\n\r\n        if (context.debug) {\r\n            let r = 0, g = 0, b = 0;\r\n            switch (visibility) {\r\n                case Visibility.partial: g = 0.25; break;\r\n                case Visibility.full: g = 1; break;\r\n            }\r\n            switch (this.state) {\r\n                case NodeState.downloading: r = 1; break;\r\n                case NodeState.ready: b = 1; break;\r\n            }\r\n            const worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), state.localSpaceTranslation));\r\n            const { min, max } = data.bounds.box;\r\n            const { values } = uniformsData;\r\n            values.debugColor = vec4.fromValues(r, g, b, 1);\r\n            values.min = vec3.transformMat4(vec3.create(), min, worldLocalMatrix);\r\n            values.max = vec3.transformMat4(vec3.create(), max, worldLocalMatrix);\r\n            if (uniforms) {\r\n                glUpdateBuffer(context.renderContext.gl, { kind: \"UNIFORM_BUFFER\", srcData: uniformsData.buffer, targetBuffer: uniforms });\r\n            }\r\n        }\r\n\r\n        // recurse down the tree\r\n        for (const child of children) {\r\n            child.update(state, this.visibility);\r\n        }\r\n    }\r\n\r\n    async downloadNode() {\r\n        const { context, children, meshes, resourceBin } = this;\r\n        const { renderContext, loader, version, highlightGeneration } = context;\r\n        this.state = NodeState.downloading;\r\n        const payload = await loader.loadNode(this, version); // do actual downloading and parsing in worker\r\n        if (payload) {\r\n            const { childInfos, geometry } = payload;\r\n            for (const data of childInfos) {\r\n                const child = new OctreeNode(context, data, this);\r\n                children.push(child);\r\n            }\r\n            meshes.push(...createMeshes(resourceBin, geometry));\r\n            // check if highlights buffer has changed since the node was parsed\r\n            if (context.highlightGeneration != highlightGeneration) {\r\n                OctreeNode.updateHighlights(context, meshes);\r\n            }\r\n            this.uniforms = resourceBin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: this.uniformsData.buffer.byteLength });\r\n            glUpdateBuffer(this.context.renderContext.gl, { kind: \"UNIFORM_BUFFER\", srcData: this.uniformsData.buffer, targetBuffer: this.uniforms });\r\n            renderContext.changed = true;\r\n            this.state = NodeState.ready;\r\n        } else {\r\n            this.state = NodeState.collapsed;\r\n        }\r\n    }\r\n\r\n    applyHighlights(highlights: Uint8Array | undefined) {\r\n        const { context, meshes } = this;\r\n        const { gl } = context.renderContext;\r\n        for (const mesh of meshes) {\r\n            updateMeshHighlights(gl, mesh, highlights);\r\n        }\r\n    }\r\n\r\n    static updateHighlights(context: OctreeContext, meshes: readonly Mesh[]) {\r\n        const { renderContext, highlights } = context;\r\n        const { gl } = renderContext;\r\n        for (const mesh of meshes) {\r\n            updateMeshHighlights(gl, mesh, highlights);\r\n        }\r\n    }\r\n}\r\n", "import type { SceneConfig, RenderState, RenderStateScene, DeviceProfile } from \".\";\r\nimport { OctreeNode, type OctreeContext, NodeGeometryKind } from \"./modules/octree/node\";\r\nimport type { RootNodes } from \"./modules/octree\";\r\nimport { decodeBase64 } from \"./util\";\r\nimport { isSupportedVersion } from \"./modules/octree\";\r\nimport { vec3, type ReadonlyVec3 } from \"gl-matrix\";\r\nimport { requestOfflineFile } from \"./offline\";\r\n\r\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n\r\n/**\r\n * Download scene from url.\r\n * @param url Url of scene Root folder, e.g. `https://blobs.novorender.com/<sceneid>/`\r\n * @param abortSignal Optional abort signal.\r\n * @returns A render state scene ready to be assigned to {@link RenderState.scene}.\r\n * @remarks\r\n * The loaded state does not contain any geometry, only the data required to start geometry streaming.\r\n * It may take several frames for any geometry to appear, and several seconds for it to fully resolve.\r\n * @category Render State\r\n */\r\nexport async function downloadScene(url: URL, abortSignal?: AbortSignal): Promise<RenderStateScene> {\r\n    const fullUrl = new URL(url);\r\n    fullUrl.pathname += \"scene.json\";\r\n    let config = (await download(fullUrl, \"json\", abortSignal)) as SceneConfig;\r\n    if (config.up) {\r\n        // for now we assume that the presence of an up vector means cad-space.\r\n        // until every scene is in cad space, we rotate it back into gl-space for backward compatibility.\r\n        let { offset, center } = config;\r\n        offset = flipCADToGLVec(offset);\r\n        center = flipCADToGLVec(center);\r\n        config = { ...config, offset, center };\r\n    }\r\n    if (!isSupportedVersion(config.version)) {\r\n        throw new Error(`Unsupported scene version: ${config.variants}!`);\r\n    }\r\n    return { url: url.toString(), config } as const;\r\n}\r\n\r\nfunction flipCADToGLVec(v: ReadonlyVec3): ReadonlyVec3 {\r\n    const [x, y, z] = v;\r\n    return vec3.fromValues(x, z, -y);\r\n}\r\n\r\n/** @internal */\r\nexport async function createSceneRootNodes(context: OctreeContext, config: SceneConfig, deviceProfile: DeviceProfile): Promise<RootNodes | undefined> {\r\n    const { buffer } = decodeBase64(config.root);\r\n    const { loader } = context;\r\n    const result = await loader.parseNode(buffer, \"\", deviceProfile, config.version);\r\n    if (!result)\r\n        return;\r\n    const { childInfos } = result;\r\n    const rootNodes: Mutable<RootNodes> = {};\r\n    let hasNodes = false;\r\n    for (const childInfo of childInfos) {\r\n        const geometryKind = childInfo.childIndex as NodeGeometryKind;\r\n        const child = new OctreeNode(context, childInfo, geometryKind);\r\n        rootNodes[childInfo.childIndex as keyof RootNodes] = child;\r\n        hasNodes = true;\r\n    }\r\n    return hasNodes ? rootNodes : undefined;\r\n}\r\n\r\nasync function download<T extends \"arrayBuffer\" | \"json\">(url: URL, kind: T, signal?: AbortSignal) {\r\n    const response = await requestOfflineFile(url.pathname) ?? await fetch(url, { mode: \"cors\", signal });\r\n    if (response.ok) {\r\n        return (await response[kind]()) as T extends \"arrayBuffer\" ? ArrayBuffer : SceneConfig;\r\n    } else {\r\n        throw new Error(`HTTP Error:${response.status} ${response.status}`);\r\n    }\r\n}\r\n", "import type { RenderStateColorGradient, RGB, RGBA } from \"core3d\";\r\nimport { vec4 } from \"gl-matrix\";\r\n\r\n/** @internal */\r\nexport function gradientRange(gradient: RenderStateColorGradient<RGB | RGBA>) {\r\n    if (gradient.knots.length == 0)\r\n        return [0, 0] as const;\r\n    return [gradient.knots[0].position, gradient.knots[gradient.knots.length - 1].position] as const;\r\n}\r\n\r\n/** @internal */\r\nexport function computeGradientColors(size: number, gradient: RenderStateColorGradient<RGB | RGBA>): Uint8ClampedArray {\r\n    const { knots } = gradient;\r\n    const n = knots.length;\r\n    const pixels = new Uint8ClampedArray(size * 4);\r\n    if (n > 0) {\r\n        const minValue = knots[0].position;\r\n        const maxValue = knots[n - 1].position;\r\n        let prevIndex = 0;\r\n        function getColor(index: number) {\r\n            const [r, g, b, a] = knots[index].color;\r\n            return vec4.fromValues(r, g, b, a ?? 1);\r\n        }\r\n        const color = getColor(0);\r\n        for (let i = 0; i < size; i++) {\r\n            const texel = (i + 0.5) / size * (maxValue - minValue) + minValue;\r\n            for (let j = prevIndex; j < n - 1; j++) {\r\n                prevIndex = j;\r\n                const e0 = knots[j].position;\r\n                const e1 = knots[j + 1].position;\r\n                const c0 = getColor(j);\r\n                const c1 = getColor(j + 1);\r\n                if (texel >= e0 && texel < e1) {\r\n                    const t = (texel - e0) / (e1 - e0);\r\n                    vec4.lerp(color, c0, c1, t);\r\n                    break;\r\n                }\r\n            }\r\n            const [r, g, b, a] = color;\r\n            pixels[i * 4 + 0] = r * 255;\r\n            pixels[i * 4 + 1] = g * 255;\r\n            pixels[i * 4 + 2] = b * 255;\r\n            pixels[i * 4 + 3] = a * 255;\r\n        }\r\n    }\r\n    return pixels;\r\n}\r\n", "import type { DerivedRenderState, RenderContext, RenderStateGroupAction, RenderStateHighlightGroups, RenderStateScene, RGB, RGBATransform } from \"core3d\";\r\nimport type { RenderModuleContext } from \"..\";\r\nimport { createSceneRootNodes } from \"core3d/scene\";\r\nimport { NodeState, type OctreeContext, OctreeNode, Visibility, NodeGeometryKind } from \"./node\";\r\nimport { glClear, glDraw, glState, glTransformFeedback, glUpdateTexture } from \"webgl2\";\r\nimport { getMultiDrawParams, MaterialType } from \"./mesh\";\r\nimport { type ReadonlyVec3, vec3, vec4, type ReadonlyVec4 } from \"gl-matrix\";\r\nimport type { NodeLoader } from \"./loader\";\r\nimport { computeGradientColors, gradientRange } from \"./gradient\";\r\n// import { BufferFlags } from \"@novorender/core3d/buffers\";\r\nimport { OctreeModule, Gradient, type Resources, type Uniforms, ShaderMode, ShaderPass } from \"./module\";\r\nimport { Mutex } from \"./mutex\";\r\nimport { decodeBase64 } from \"core3d/util\";\r\nimport { BufferFlags } from \"core3d/buffers\";\r\n\r\nconst enum UBO { camera, clipping, scene, node };\r\n\r\ninterface RenderNode {\r\n    readonly mask: number;\r\n    readonly node: OctreeNode;\r\n};\r\n\r\n/** @internal */\r\nexport interface RootNodes {\r\n    readonly [NodeGeometryKind.terrain]?: OctreeNode;\r\n    readonly [NodeGeometryKind.triangles]?: OctreeNode;\r\n    readonly [NodeGeometryKind.lines]?: OctreeNode;\r\n    readonly [NodeGeometryKind.points]?: OctreeNode;\r\n    readonly [NodeGeometryKind.documents]?: OctreeNode;\r\n}\r\n\r\n/** @internal */\r\nexport class OctreeModuleContext implements RenderModuleContext, OctreeContext {\r\n    readonly gradientsImage = new Uint8ClampedArray(Gradient.size * 2 * 4);\r\n    currentProgramFlags = OctreeModule.defaultProgramFlags;\r\n    nextProgramFlags = OctreeModule.defaultProgramFlags;\r\n    debug = false;\r\n    suspendUpdates = false;\r\n\r\n    localSpaceTranslation = vec3.create() as ReadonlyVec3;\r\n    localSpaceChanged = false;\r\n    url: string | undefined;\r\n    // rootNode: OctreeNode | undefined;\r\n    rootNodes: RootNodes = {};\r\n    version: string = \"\";\r\n    projectedSizeSplitThreshold = 1; // baseline node size split threshold = 50% of view height\r\n    hidden = [false, false, false, false, false] as readonly [boolean, boolean, boolean, boolean, boolean];\r\n    readonly highlight;\r\n    highlightGeneration = 0;\r\n    private compiling = false;\r\n\r\n    constructor(readonly renderContext: RenderContext, readonly module: OctreeModule, readonly uniforms: Uniforms, readonly resources: Resources, buffer: SharedArrayBuffer, readonly loader: NodeLoader) {\r\n        this.highlight = {\r\n            buffer,\r\n            indices: new Uint8Array(buffer, 4),\r\n            mutex: new Mutex(buffer),\r\n        } as const;\r\n    }\r\n\r\n    get highlights() {\r\n        return this.highlight.indices;\r\n    }\r\n\r\n    update(state: DerivedRenderState) {\r\n        // const beginTime = performance.now();\r\n\r\n        const { renderContext, resources, uniforms, projectedSizeSplitThreshold, module, currentProgramFlags } = this;\r\n        const { gl, deviceProfile } = renderContext;\r\n        const { scene, localSpaceTranslation, highlights, points, terrain, pick, output, clipping } = state;\r\n        const { values } = uniforms.scene;\r\n\r\n        let { nextProgramFlags } = this;\r\n        const updateShaderCompileConstants = (flags: Partial<typeof nextProgramFlags>) => {\r\n            type Keys = keyof typeof nextProgramFlags;\r\n            if ((Object.getOwnPropertyNames(flags) as Keys[]).some(key => nextProgramFlags[key] != flags[key])) {\r\n                this.nextProgramFlags = nextProgramFlags = { ...nextProgramFlags, ...flags };\r\n            }\r\n        }\r\n\r\n        this.projectedSizeSplitThreshold = 1 / deviceProfile.detailBias;\r\n\r\n        if (values.iblMipCount != renderContext.iblTextures.numMipMaps) {\r\n            values.iblMipCount = renderContext.iblTextures.numMipMaps;\r\n        }\r\n\r\n        this.debug = state.debug.showNodeBounds;\r\n\r\n        let updateGradients = false;\r\n        if (renderContext.hasStateChanged({ points })) {\r\n            const { size, deviation } = points;\r\n            const { values } = uniforms.scene;\r\n            values.pixelSize = size.pixel ?? 0;\r\n            values.maxPixelSize = size.maxPixel ?? 20;\r\n            values.metricSize = size.metric ?? 0;\r\n            values.toleranceFactor = size.toleranceFactor ?? 0;\r\n            values.deviationIndex = deviation.index;\r\n            values.deviationFactor = deviation.mixFactor;\r\n            values.deviationUndefinedColor = deviation.undefinedColor ?? vec4.fromValues(0, 0, 0, 0);\r\n            values.deviationRange = gradientRange(deviation.colorGradient);\r\n            values.useProjectedPosition = points.useProjectedPosition;\r\n            const deviationColors = computeGradientColors(Gradient.size, deviation.colorGradient);\r\n            this.gradientsImage.set(deviationColors, 0 * Gradient.size * 4);\r\n            updateGradients = true;\r\n        }\r\n\r\n        if (renderContext.hasStateChanged({ terrain })) {\r\n            const { values } = uniforms.scene;\r\n            values.elevationRange = gradientRange(terrain.elevationGradient);\r\n            const elevationColors = computeGradientColors(Gradient.size, terrain.elevationGradient);\r\n            this.gradientsImage.set(elevationColors, 1 * Gradient.size * 4);\r\n            updateGradients = true;\r\n        }\r\n\r\n        if (renderContext.hasStateChanged({ pick })) {\r\n            const { values } = uniforms.scene;\r\n            values.pickOpacityThreshold = pick.opacityThreshold;\r\n        }\r\n\r\n        if (updateGradients) {\r\n            glUpdateTexture(gl, resources.gradientsTexture, { ...module.gradientImageParams, image: this.gradientsImage });\r\n        }\r\n\r\n        if (renderContext.hasStateChanged({ scene })) {\r\n            const { prevState } = renderContext;\r\n            if (scene) {\r\n                const { hide } = scene;\r\n                if (hide != prevState?.scene?.hide) {\r\n                    if (hide) {\r\n                        const { terrain, triangles, lines, points, documents } = hide;\r\n                        this.hidden = [terrain ?? false, triangles ?? false, lines ?? false, points ?? false, documents ?? false];\r\n                    } else {\r\n                        this.hidden = [true, false, false, false, false];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (scene?.url != this.url) {\r\n                if (this.url) {\r\n                    this.loader.abortAll(); // abort any pending downloads for previous scene\r\n                }\r\n\r\n                // delete existing scene\r\n                for (const rootNode of Object.values(this.rootNodes)) {\r\n                    rootNode.dispose();\r\n                }\r\n                this.rootNodes = {};\r\n\r\n                // update material atlas if url has changed\r\n                const url = scene?.url;\r\n                if (url != this.url) {\r\n                    const { highlight } = this;\r\n                    const numObjects = scene?.config.numObjects ?? 0;\r\n                    const numBytes = numObjects + 4; // add four bytes for mutex\r\n                    if (highlight.buffer.byteLength != numBytes) {\r\n                        highlight.mutex.lockSpin();\r\n                        if (numBytes > highlight.buffer.byteLength) {\r\n                            //@ts-ignore\r\n                            highlight.buffer.grow(numBytes);\r\n                        }\r\n                        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n                        (highlight as Mutable<typeof highlight>).indices = new Uint8Array(highlight.buffer, 4, numObjects);\r\n                        updateHighlightBuffer(highlight.indices, state.highlights);\r\n                        this.highlightGeneration++;\r\n                        highlight.mutex.unlock();\r\n                    }\r\n                    this.url = url;\r\n                    if (url) {\r\n                        const materialData = makeMaterialAtlas(state);\r\n                        if (materialData) {\r\n                            glUpdateTexture(gl, resources.materialTexture, { kind: \"TEXTURE_2D\", width: 256, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: materialData });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // initiate loading of scene\r\n                if (scene) {\r\n                    this.version = scene.config.version;\r\n                    this.reloadScene(scene);\r\n                }\r\n            }\r\n        }\r\n\r\n        const { rootNodes } = this;\r\n\r\n        if (renderContext.hasStateChanged({ localSpaceTranslation })) {\r\n            this.localSpaceChanged = localSpaceTranslation !== this.localSpaceTranslation;\r\n            this.localSpaceTranslation = localSpaceTranslation;\r\n        }\r\n\r\n        if (renderContext.hasStateChanged({ highlights })) {\r\n            const { groups } = highlights;\r\n            const { highlight } = this;\r\n            const { prevState } = renderContext;\r\n            const prevGroups = prevState?.highlights.groups ?? [];\r\n\r\n            updateShaderCompileConstants({ highlight: groups.length > 0 || highlights.defaultAction != undefined });\r\n\r\n            const { values } = uniforms.scene;\r\n            values.applyDefaultHighlight = highlights.defaultAction != undefined;\r\n\r\n            // are there any potential changes to filtering\r\n            if (scene) {\r\n                const n = Math.max(groups.length, prevGroups.length);\r\n                let reload = false;\r\n                const prevDefaultAction = prevState?.highlights.defaultAction;\r\n                const currDefaultAction = state.highlights.defaultAction;\r\n                if (prevDefaultAction != currDefaultAction && (prevDefaultAction == \"filter\" || currDefaultAction == \"filter\")) {\r\n                    reload = true; // default action has changed from/to filter mode.\r\n                } else {\r\n                    const filterGroups = new Set<Iterable<number>>(prevGroups.filter(g => g.action == \"filter\").map(g => g.objectIds));\r\n                    for (const { action, objectIds } of groups) {\r\n                        if (action == \"filter\") {\r\n                            var removed = filterGroups.delete(objectIds);\r\n                            if (!removed) {\r\n                                reload = true; // one of the groups has changed to filter mode.\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (filterGroups.size > 0) {\r\n                        reload = true; // At least one of the groups has changed from filter mode.\r\n                    }\r\n                }\r\n                if (reload) {\r\n                    this.reloadScene(scene);\r\n                }\r\n            }\r\n\r\n            const transforms = [highlights.defaultAction, ...groups.map(g => g.action)];\r\n            const prevTransforms = prevState ?\r\n                [\r\n                    prevState.highlights.defaultAction,\r\n                    ...prevState.highlights.groups.map(g => g.action)\r\n                ] : [];\r\n            if (!sequenceEqual(transforms, prevTransforms)) {\r\n                // update highlight matrices\r\n                const image = createColorTransforms(highlights);\r\n                glUpdateTexture(gl, resources.highlightTexture, { kind: \"TEXTURE_2D\", width: 256, height: 6, internalFormat: \"RGBA32F\", type: \"FLOAT\", image });\r\n            }\r\n\r\n            const objectIds = groups.map(g => g.objectIds);\r\n            const prevObjectIds = prevState?.highlights.groups.map(g => g.objectIds) ?? [];\r\n            const objectIdsChanged = !sequenceEqual(objectIds, prevObjectIds);\r\n\r\n            const actions = groups.map(g => typeof g.action == \"string\" ? g.action : undefined);\r\n            const prevActions = prevState?.highlights.groups.map(g => typeof g.action == \"string\" ? g.action : undefined) ?? [];\r\n            const actionsChanged = highlights.defaultAction != prevState?.highlights.defaultAction || !sequenceEqual(actions, prevActions);\r\n\r\n            if (objectIdsChanged || actionsChanged) {\r\n                highlight.mutex.lockSpin(); // worker should not hold this lock for long, so we're fine spinning until it's available.\r\n                updateHighlightBuffer(highlight.indices, highlights);\r\n                this.highlightGeneration++;\r\n                highlight.mutex.unlock();\r\n                // update highlight vertex attributes\r\n                const nodes: OctreeNode[] = [];\r\n                for (const rootNode of Object.values(rootNodes)) {\r\n                    nodes.push(...iterateNodes(rootNode));\r\n                }\r\n                for (const node of nodes) {\r\n                    node.applyHighlights(highlight.indices);\r\n                }\r\n            };\r\n        }\r\n\r\n        if (renderContext.hasStateChanged({ clipping })) {\r\n            updateShaderCompileConstants({ clip: clipping.enabled });\r\n        }\r\n\r\n        if (renderContext.hasStateChanged({ output })) {\r\n            updateShaderCompileConstants({ dither: output.samplesMSAA <= 1 });\r\n        }\r\n\r\n        renderContext.updateUniformBuffer(resources.sceneUniforms, uniforms.scene);\r\n\r\n        // recompile shader programs if flags have changed\r\n        if (currentProgramFlags != nextProgramFlags && !this.compiling) {\r\n            this.compiling = true;\r\n            const recompile = async () => {\r\n                const programs = await OctreeModule.compileShaders(renderContext, resources.bin, nextProgramFlags);\r\n                Object.assign(resources.programs, programs);\r\n                renderContext.changed = true;\r\n                this.compiling = false;\r\n                this.currentProgramFlags = nextProgramFlags;\r\n            }\r\n            recompile();\r\n        }\r\n\r\n        if (!this.suspendUpdates) {\r\n            const nodes: OctreeNode[] = [];\r\n            for (const rootNode of Object.values(rootNodes)) {\r\n                rootNode.update(state); // recursively update all nodes' visibility and projectedSize++\r\n\r\n                // collapse nodes\r\n                const preCollapseNodes = [...iterateNodes(rootNode)];\r\n                for (const node of preCollapseNodes) {\r\n                    if (!node.shouldSplit(projectedSizeSplitThreshold * 0.98)) { // add a little \"slack\" before collapsing back again\r\n                        if (node.state != NodeState.collapsed) {\r\n                            node.dispose(); // collapse node\r\n                        }\r\n                    }\r\n                }\r\n                nodes.push(...iterateNodes(rootNode));\r\n            }\r\n\r\n            nodes.sort((a, b) => b.projectedSize - a.projectedSize); // sort by descending projected size\r\n\r\n            const { maxGPUBytes } = deviceProfile.limits; // 1_000_000_000;\r\n            const { maxPrimitives } = deviceProfile.limits; // 2_000_000;\r\n            let gpuBytes = 0;\r\n            let primitives = 0; // # rendered primitives (points, lines and triangles)\r\n            for (const node of nodes) {\r\n                if (node.hasGeometry) {\r\n                    gpuBytes += node.data.gpuBytes;\r\n                    primitives += node.renderedPrimitives;\r\n                }\r\n                if (node.state == NodeState.requestDownload || node.state == NodeState.downloading) {\r\n                    // include projected resources in the budget\r\n                    primitives += node.data.primitivesDelta;\r\n                    gpuBytes += node.data.gpuBytes;\r\n                }\r\n            }\r\n\r\n            // split nodes based on camera orientation\r\n            for (const node of nodes) {\r\n                if (node.shouldSplit(projectedSizeSplitThreshold)) {\r\n                    if (node.state == NodeState.collapsed) {\r\n                        if (primitives + node.data.primitivesDelta <= maxPrimitives && gpuBytes + node.data.gpuBytes <= maxGPUBytes) {\r\n                            node.state = NodeState.requestDownload;\r\n                            primitives += node.data.primitivesDelta;\r\n                            gpuBytes += node.data.gpuBytes;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            renderContext.addLoadStatistics(primitives);\r\n\r\n            const maxDownloads = 8;\r\n            let availableDownloads = maxDownloads - this.loader.activeDownloads;\r\n            for (const node of nodes) {\r\n                if (availableDownloads > 0 && node.state == NodeState.requestDownload) {\r\n                    node.downloadNode();\r\n                    availableDownloads--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    applyDefaultAttributeValues() {\r\n        const { gl } = this.renderContext;\r\n        // we need to provide default values for non-float vertex attributes in case they are not included in vertex buffer to avoid getting a type binding error.\r\n        gl.vertexAttribI4ui(VertexAttributeIds.material, 0xff, 0, 0, 0);\r\n        gl.vertexAttribI4ui(VertexAttributeIds.objectId, 0xffffffff, 0, 0, 0);\r\n        gl.vertexAttrib4f(VertexAttributeIds.color0, 0, 0, 0, 0);\r\n        gl.vertexAttrib4f(VertexAttributeIds.projectedPos, 0, 0, 0, 0);\r\n        gl.vertexAttrib4f(VertexAttributeIds.deviations, 0, 0, 0, 0);\r\n        gl.vertexAttribI4ui(VertexAttributeIds.highlight, 0, 0, 0, 0);\r\n    }\r\n\r\n    getRenderNodes(projectedSizeSplitThreshold: number, rootNode: OctreeNode | undefined): readonly RenderNode[] {\r\n        // create list of meshes that we can sort by material/state?\r\n        const nodes: RenderNode[] = [];\r\n        function iterate(node: OctreeNode): boolean {\r\n            let rendered = false;\r\n            if (node.visibility != Visibility.none) {\r\n                let mask = node.data.childMask;\r\n                if (node.shouldSplit(projectedSizeSplitThreshold)) {\r\n                    for (const child of node.children) {\r\n                        if (child.hasGeometry) {\r\n                            rendered = true;\r\n                            if (iterate(child)) {\r\n                                mask &= ~(1 << child.data.childIndex);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                rendered = true;\r\n                nodes.push({ mask, node });\r\n            }\r\n            return rendered;\r\n        }\r\n        if (rootNode) {\r\n            iterate(rootNode);\r\n            nodes.sort((a, b) => a.node.viewDistance - b.node.viewDistance); // sort nodes front to back, i.e. ascending view distance\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    prepass(state: DerivedRenderState) {\r\n        const { resources, renderContext } = this;\r\n        const { programs } = resources;\r\n        const { gl } = renderContext;\r\n        for (const rootNode of Object.values(this.rootNodes)) {\r\n            const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\r\n            glState(gl, {\r\n                program: programs.pre,\r\n                depth: { test: true },\r\n            });\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            const meshState: MeshState = {};\r\n            for (const { mask, node } of renderNodes) {\r\n                this.renderNode(node, mask, meshState, ShaderPass.pre);\r\n            }\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n        }\r\n    }\r\n\r\n    render(state: DerivedRenderState) {\r\n        const { resources, renderContext, debug } = this;\r\n        const { usePrepass, samplerSingle, samplerMip } = renderContext;\r\n        const { programs, sceneUniforms, samplerNearest, materialTexture, highlightTexture, gradientsTexture } = resources;\r\n        const { gl, iblTextures, cameraUniforms, clippingUniforms, outlineUniforms, deviceProfile } = renderContext;\r\n\r\n        // glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\r\n\r\n        const { diffuse, specular } = iblTextures;\r\n        glState(gl, {\r\n            program: programs.color,\r\n            uniformBuffers: [cameraUniforms, clippingUniforms, sceneUniforms, null],\r\n            cull: { enable: true, },\r\n            depth: {\r\n                test: true,\r\n                writeMask: true,\r\n                func: usePrepass ? \"LEQUAL\" : \"LESS\",\r\n            },\r\n            textures: [\r\n                { kind: \"TEXTURE_2D\", texture: null, sampler: samplerSingle }, // basecolor - will be overridden by nodes that have textures, e.g. terrain nodes.\r\n                { kind: \"TEXTURE_CUBE_MAP\", texture: diffuse, sampler: samplerNearest },\r\n                { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\r\n                { kind: \"TEXTURE_2D\", texture: materialTexture, sampler: samplerNearest },\r\n                { kind: \"TEXTURE_2D\", texture: highlightTexture, sampler: samplerNearest },\r\n                { kind: \"TEXTURE_2D\", texture: gradientsTexture, sampler: samplerNearest },\r\n            ],\r\n        });\r\n        this.applyDefaultAttributeValues();\r\n        gl.activeTexture(gl.TEXTURE0);\r\n\r\n        for (const rootNode of Object.values(this.rootNodes)) {\r\n            const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\r\n            const meshState: MeshState = {};\r\n            for (const { mask, node } of renderNodes) {\r\n                this.renderNode(node, mask, meshState, ShaderPass.color);\r\n            }\r\n            if (rootNode.geometryKind == NodeGeometryKind.terrain && state.terrain.asBackground) {\r\n                glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\r\n            }\r\n        }\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n        if (deviceProfile.features.outline && state.outlines.on) {\r\n            // transform outline plane into local space\r\n\r\n            const renderOutlines = (plane: ReadonlyVec4, color: RGB, planeIndex = -1) => {\r\n                const [x, y, z, offset] = plane;\r\n                const p = vec4.fromValues(x, y, z, -offset);\r\n                renderContext.updateOutlinesUniforms(p, color, planeIndex);\r\n\r\n                // render clipping outlines\r\n                glState(gl, {\r\n                    uniformBuffers: [cameraUniforms, clippingUniforms, outlineUniforms, null],\r\n                    depth: {\r\n                        test: false,\r\n                        writeMask: false\r\n                    },\r\n                });\r\n                const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, this.rootNodes[NodeGeometryKind.triangles]);\r\n                for (const { mask, node } of renderNodes) {\r\n                    if (node.intersectsPlane(p)) {\r\n                        this.renderNodeClippingOutline(node, mask);\r\n                    }\r\n                }\r\n            }\r\n            if (state.outlines.enabled) {\r\n                renderOutlines(state.outlines.plane, state.outlines.color);\r\n            }\r\n            if (state.clipping.enabled) {\r\n                for (let i = 0; i < state.clipping.planes.length; ++i) {\r\n                    const { normalOffset, outline } = state.clipping.planes[i];\r\n                    if (outline?.enabled) {\r\n                        renderOutlines(normalOffset, outline.color ?? state.outlines.color, i)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (debug) {\r\n            for (const rootNode of Object.values(this.rootNodes)) {\r\n                const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\r\n                glState(gl, {\r\n                    program: programs.debug,\r\n                    uniformBuffers: [cameraUniforms, clippingUniforms, sceneUniforms, null],\r\n                    depth: {\r\n                        test: true,\r\n                        writeMask: false,\r\n                        func: \"GREATER\",\r\n                    },\r\n                    cull: { enable: true, },\r\n                    blend: {\r\n                        enable: true,\r\n                        srcRGB: \"CONSTANT_ALPHA\",\r\n                        dstRGB: \"ONE_MINUS_CONSTANT_ALPHA\",\r\n                        color: [0, 0, 0, .25],\r\n                    },\r\n                });\r\n                for (const { mask, node } of renderNodes) {\r\n                    this.renderNodeDebug(node);\r\n                }\r\n\r\n                glState(gl, {\r\n                    program: programs.debug,\r\n                    depth: { func: \"LESS\", },\r\n                    blend: {\r\n                        color: [0, 0, 0, .75],\r\n                    },\r\n                });\r\n                for (const { mask, node } of renderNodes) {\r\n                    this.renderNodeDebug(node);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    pick() {\r\n        const { resources, renderContext } = this;\r\n        const { gl, cameraUniforms, clippingUniforms, outlineUniforms, samplerSingle, samplerMip, iblTextures, currentState, deviceProfile } = renderContext;\r\n        const { programs, sceneUniforms, samplerNearest, materialTexture, highlightTexture, gradientsTexture } = resources;\r\n        const { diffuse, specular } = iblTextures;\r\n        const state = currentState!;\r\n\r\n        for (const rootNode of Object.values(this.rootNodes)) {\r\n            const renderNodes = this.getRenderNodes(this.projectedSizeSplitThreshold / state.quality.detail, rootNode);\r\n            glState(gl, {\r\n                program: programs.pick,\r\n                uniformBuffers: [cameraUniforms, clippingUniforms, sceneUniforms, null],\r\n                cull: { enable: true, },\r\n                depth: { test: true, writeMask: true },\r\n                textures: [\r\n                    { kind: \"TEXTURE_2D\", texture: null, sampler: samplerSingle }, // basecolor - will be overridden by nodes that have textures, e.g. terrain nodes.\r\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: diffuse, sampler: samplerNearest },\r\n                    { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\r\n                    { kind: \"TEXTURE_2D\", texture: materialTexture, sampler: samplerNearest },\r\n                    { kind: \"TEXTURE_2D\", texture: highlightTexture, sampler: samplerNearest },\r\n                    { kind: \"TEXTURE_2D\", texture: gradientsTexture, sampler: samplerNearest },\r\n                ],\r\n            });\r\n            this.applyDefaultAttributeValues();\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            const meshState: MeshState = {};\r\n            for (const { mask, node } of renderNodes) {\r\n                this.renderNode(node, mask, meshState, ShaderPass.pick);\r\n            }\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n            if (deviceProfile.features.outline && state.outlines.on) {\r\n                const renderOutlines = (plane: ReadonlyVec4, color: RGB, planeIndex = -1) => {\r\n                    const [x, y, z, offset] = plane;\r\n                    const p = vec4.fromValues(x, y, z, -offset);\r\n                    renderContext.updateOutlinesUniforms(p, color, planeIndex);\r\n                    glState(gl, {\r\n                        uniformBuffers: [cameraUniforms, clippingUniforms, outlineUniforms, null],\r\n                        depth: {\r\n                            test: false,\r\n                            writeMask: false\r\n                        },\r\n                    });\r\n                    for (const { mask, node } of renderNodes) {\r\n                        if (node.intersectsPlane(p)) {\r\n                            this.renderNodeClippingOutline(node, mask);\r\n                        }\r\n                    }\r\n                }\r\n                if (state.outlines.enabled) {\r\n                    renderOutlines(state.outlines.plane, state.outlines.color);\r\n                }\r\n                if (state.clipping.enabled) {\r\n                    for (let i = 0; i < state.clipping.planes.length; ++i) {\r\n                        const { normalOffset, outline } = state.clipping.planes[i];\r\n                        if (outline?.enabled) {\r\n                            renderOutlines(normalOffset, outline.color ?? state.outlines.color, i)\r\n                        }\r\n                    }\r\n                }\r\n                // render clipping outlines\r\n\r\n            }\r\n\r\n            if (rootNode.geometryKind == NodeGeometryKind.terrain && state.terrain.asBackground) {\r\n                glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\r\n            }\r\n        }\r\n    }\r\n\r\n    renderNode(node: OctreeNode, mask: number, meshState: MeshState, pass: ShaderPass) {\r\n        const { renderContext } = this;\r\n        const { gl } = renderContext;\r\n        const { resources } = this;\r\n        const { programs } = resources;\r\n        const { data } = node;\r\n        const prepass = pass == ShaderPass.pre;\r\n        if (node.uniforms) {\r\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, UBO.node, node.uniforms);\r\n            for (const mesh of node.meshes) {\r\n                const { materialType } = mesh;\r\n                const isTransparent = materialType == MaterialType.transparent;\r\n                if (prepass && isTransparent)\r\n                    continue;\r\n                gl.bindVertexArray(prepass ? mesh.vaoPosOnly : mesh.vao);\r\n                const mode = mesh.materialType == MaterialType.elevation ? ShaderMode.terrain : mesh.drawParams.mode == \"POINTS\" ? ShaderMode.points : ShaderMode.triangles;\r\n                if (meshState.mode != mode) {\r\n                    meshState.mode = mode;\r\n                    gl.useProgram(programs[pass][mode]);\r\n                }\r\n                const doubleSided = mesh.materialType != MaterialType.opaque;\r\n                if (meshState.doubleSided != doubleSided) {\r\n                    meshState.doubleSided = doubleSided;\r\n                    if (doubleSided) {\r\n                        gl.disable(gl.CULL_FACE);\r\n                    } else {\r\n                        gl.enable(gl.CULL_FACE);\r\n                    }\r\n                }\r\n                if (pass == ShaderPass.color || pass == ShaderPass.pick) {\r\n                    gl.bindTexture(gl.TEXTURE_2D, mesh.baseColorTexture ?? resources.defaultBaseColorTexture);\r\n                }\r\n                if (mask == data.childMask) {\r\n                    const stats = glDraw(gl, mesh.drawParams);\r\n                    renderContext.addRenderStatistics(stats);\r\n                } else {\r\n                    // determine which portions of the parent node must be rendered based on what children currently don't render themselves\r\n                    const multiDrawParams = getMultiDrawParams(mesh, mask);\r\n                    if (multiDrawParams) {\r\n                        const stats = glDraw(gl, multiDrawParams);\r\n                        renderContext.addRenderStatistics(stats);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    renderNodeClippingOutline(node: OctreeNode, mask: number) {\r\n        const { resources, renderContext, module } = this;\r\n        const { gl } = renderContext;\r\n        const { programs, transformFeedback, vb_line, vao_line } = resources;\r\n        if (mask && node.uniforms) {\r\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, UBO.node, node.uniforms);\r\n            for (const mesh of node.meshes) {\r\n                if (mesh.numTriangles && mesh.drawParams.mode == \"TRIANGLES\" && !mesh.baseColorTexture) {\r\n                    for (const drawRange of mesh.drawRanges) {\r\n                        if ((1 << drawRange.childIndex) & mask) {\r\n                            const count = drawRange.count / 3;\r\n                            const first = drawRange.first / 3;\r\n                            console.assert(count * 2 <= module.maxLines);\r\n                            // find triangle intersections\r\n                            glState(gl, {\r\n                                program: programs.intersect,\r\n                                vertexArrayObject: mesh.vaoTriangles,\r\n                            });\r\n                            glTransformFeedback(gl, { kind: \"POINTS\", transformFeedback, outputBuffers: [vb_line!], count, first });\r\n\r\n                            // draw lines\r\n                            glState(gl, {\r\n                                program: programs.line,\r\n                                vertexArrayObject: vao_line,\r\n                            });\r\n                            const stats = glDraw(gl, { kind: \"arrays_instanced\", mode: \"LINES\", count: 2, instanceCount: count });\r\n                            renderContext.addRenderStatistics(stats);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    renderNodeDebug(node: OctreeNode) {\r\n        const { renderContext } = this;\r\n        const { gl } = renderContext;\r\n\r\n        if (node.renderedChildMask && node.uniforms) {\r\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, UBO.node, node.uniforms ?? null);\r\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLES\", count: 8 * 12 });\r\n            renderContext.addRenderStatistics(stats);\r\n        }\r\n    }\r\n\r\n    contextLost() {\r\n        const { loader, rootNodes } = this;\r\n        loader.abortAll();\r\n        for (const rootNode of Object.values(rootNodes)) {\r\n            rootNode?.dispose(); // consider retaining submesh js data\r\n        }\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n        this.rootNodes = {};\r\n    }\r\n\r\n    private async reloadScene(scene: RenderStateScene) {\r\n        this.suspendUpdates = true;\r\n        await this.loader.abortAllPromise; // make sure we wait for any previous aborts to complete\r\n        const rootNodes = await createSceneRootNodes(this, scene.config, this.renderContext.deviceProfile);\r\n        if (rootNodes) {\r\n            this.rootNodes = rootNodes;\r\n        }\r\n        this.suspendUpdates = false;\r\n        this.renderContext.changed = true;\r\n    }\r\n}\r\n\r\nfunction makeMaterialAtlas(state: DerivedRenderState) {\r\n    const { scene } = state;\r\n    if (scene) {\r\n        const { config } = scene;\r\n        const { numMaterials } = config;\r\n        if (numMaterials) {\r\n            const { diffuse, opacity } = config.materialProperties;\r\n            console.assert(numMaterials <= 256);\r\n            function zeroes() { return new Uint8ClampedArray(numMaterials); };\r\n            function ones() { const a = new Uint8ClampedArray(numMaterials); a.fill(255); return a; };\r\n            const red = decodeBase64(diffuse.red, Uint8ClampedArray) ?? zeroes();\r\n            const green = decodeBase64(diffuse.green, Uint8ClampedArray) ?? zeroes();\r\n            const blue = decodeBase64(diffuse.blue, Uint8ClampedArray) ?? zeroes();\r\n            const alpha = decodeBase64(opacity, Uint8ClampedArray) ?? ones();\r\n            const srcData = interleaveRGBA(red, green, blue, alpha);\r\n            return srcData;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst enum Highlight {\r\n    default = 0,\r\n    hidden = 0xfe,\r\n    filtered = 0xff,\r\n}\r\n\r\nfunction updateHighlightBuffer(buffer: Uint8Array, highlight: RenderStateHighlightGroups) {\r\n    const { defaultAction, groups } = highlight;\r\n    function getIndex(action: RenderStateGroupAction | undefined, value: number) {\r\n        return action == \"hide\" ? Highlight.hidden : action == \"filter\" ? Highlight.filtered : value;\r\n    }\r\n    const defaultValue = getIndex(defaultAction, Highlight.default);\r\n    buffer.fill(defaultValue);\r\n    // apply highlight groups\r\n    let groupIndex = 1;\r\n    for (const group of groups) {\r\n        const idx = getIndex(group.action, groupIndex);\r\n        for (const objectId of group.objectIds) {\r\n            buffer[objectId] = idx;\r\n        }\r\n        groupIndex++;\r\n    }\r\n}\r\n\r\n\r\nfunction* iterateNodes(node: OctreeNode | undefined): IterableIterator<OctreeNode> {\r\n    if (node) {\r\n        yield node;\r\n        for (const child of node.children) {\r\n            yield* iterateNodes(child);\r\n        }\r\n    }\r\n}\r\n\r\nfunction createColorTransforms(highlights: RenderStateHighlightGroups) {\r\n    const numColorMatrices = 256;\r\n    const numColorMatrixCols = 6;\r\n    const numColorMatrixRows = 4;\r\n\r\n    const colorMatrices = new Float32Array(numColorMatrices * numColorMatrixRows * numColorMatrixCols);\r\n    // initialize with identity matrices\r\n    for (let i = 0; i < numColorMatrices; i++) {\r\n        for (let j = 0; j < numColorMatrixCols; j++) {\r\n            colorMatrices[(numColorMatrices * j + i) * 4 + j] = i == j ? 1 : 0;\r\n        }\r\n    }\r\n\r\n    function copyMatrix(index: number, rgbaTransform: RGBATransform, outlineColor?: RGB) {\r\n        for (let col = 0; col < 5; col++) {\r\n            for (let row = 0; row < numColorMatrixRows; row++) {\r\n                colorMatrices[(numColorMatrices * col + index) * 4 + row] = rgbaTransform[col + row * 5];\r\n            }\r\n        }\r\n        const col = numColorMatrixCols - 1;\r\n        const rgba = outlineColor ? [...outlineColor, 1] : [0, 0, 0, 0];\r\n        for (let row = 0; row < numColorMatrixRows; row++) {\r\n            colorMatrices[(numColorMatrices * col + index) * 4 + row] = rgba[row];\r\n        }\r\n\r\n    }\r\n    // Copy transformation matrices\r\n    const { defaultAction, groups } = highlights;\r\n    copyMatrix(0, getRGBATransform(defaultAction));\r\n    for (let i = 0; i < groups.length; i++) {\r\n        copyMatrix(i + 1, getRGBATransform(groups[i].action), groups[i].outlineColor);\r\n    }\r\n    return colorMatrices;\r\n}\r\n\r\nfunction interleaveRGBA(r: Uint8ClampedArray, g: Uint8ClampedArray, b: Uint8ClampedArray, a: Uint8ClampedArray) {\r\n    const n = r.length;\r\n    console.assert(n == g.length && n == b.length && n == a.length);\r\n    const rgba = new Uint8ClampedArray(256 * 4);\r\n    let j = 0;\r\n    for (let i = 0; i < n; i++) {\r\n        rgba[j++] = r[i];\r\n        rgba[j++] = g[i];\r\n        rgba[j++] = b[i];\r\n        rgba[j++] = a[i];\r\n    }\r\n    return rgba;\r\n}\r\n\r\nfunction sequenceEqual(a: any[], b: any[]) {\r\n    if (a.length != b.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < a.length; i++) {\r\n        if (a[i] != b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nconst defaultRGBATransform: RGBATransform = [\r\n    1, 0, 0, 0, 0,\r\n    0, 1, 0, 0, 0,\r\n    0, 0, 1, 0, 0,\r\n    0, 0, 0, 1, 0,];\r\n\r\n\r\nfunction getRGBATransform(action: RenderStateGroupAction | undefined): RGBATransform {\r\n    return (typeof action != \"string\" && Array.isArray(action)) ? action : defaultRGBATransform;\r\n}\r\n\r\nconst enum VertexAttributeIds {\r\n    position,\r\n    normal,\r\n    material,\r\n    objectId,\r\n    texCoord0,\r\n    color0,\r\n    projectedPos,\r\n    deviations,\r\n    highlight,\r\n};\r\n\r\ninterface MeshState {\r\n    mode?: ShaderMode;\r\n    doubleSided?: boolean;\r\n}\r\n", "import type { DeviceProfile, RenderContext } from \"core3d\";\r\nimport type { RenderModule } from \"..\";\r\nimport { glUBOProxy, type TextureParams2DUncompressed, type UniformTypes } from \"webgl2\";\r\nimport type { ResourceBin } from \"core3d/resource\";\r\nimport { OctreeModuleContext } from \"./context\";\r\nimport { NodeLoader } from \"./loader\";\r\n\r\n/** @internal */\r\nexport const enum ShaderPass { color, pick, pre };\r\n/** @internal */\r\nexport const enum ShaderMode { triangles, points, terrain };\r\n/** @internal */\r\nexport const enum Gradient { size = 1024 };\r\n\r\n/** @internal */\r\nexport class OctreeModule implements RenderModule {\r\n    readonly kind = \"octree\";\r\n    readonly sceneUniforms = {\r\n        applyDefaultHighlight: \"bool\",\r\n        iblMipCount: \"float\",\r\n        pixelSize: \"float\",\r\n        maxPixelSize: \"float\",\r\n        metricSize: \"float\",\r\n        toleranceFactor: \"float\",\r\n        deviationIndex: \"int\",\r\n        deviationFactor: \"float\",\r\n        deviationRange: \"vec2\",\r\n        deviationUndefinedColor: \"vec4\",\r\n        useProjectedPosition: \"bool\",\r\n        elevationRange: \"vec2\",\r\n        pickOpacityThreshold: \"float\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    readonly gradientImageParams: TextureParams2DUncompressed = { kind: \"TEXTURE_2D\", width: Gradient.size, height: 2, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: null };\r\n    readonly maxHighlights = 8;\r\n\r\n    static readonly textureNames = [\"base_color\", \"ibl.diffuse\", \"ibl.specular\", \"materials\", \"highlights\", \"gradients\"] as const;\r\n    static readonly textureUniforms = OctreeModule.textureNames.map(name => `textures.${name}`);\r\n    static readonly uniformBufferBlocks = [\"Camera\", \"Clipping\", \"Scene\", \"Node\"];\r\n    static readonly passes = [ShaderPass.color, ShaderPass.pick, ShaderPass.pre] as const;\r\n    static readonly modes = [ShaderMode.triangles, ShaderMode.points, ShaderMode.terrain] as const;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n\r\n        const loader = new NodeLoader(context.imports.loaderWorker);\r\n        const maxObjects = 10_000_000;// TODO: Get from device profile?\r\n        const maxByteLength = maxObjects + 4; // add four bytes for mutex\r\n        const buffer = new SharedArrayBuffer(maxByteLength);\r\n        await loader.init(buffer, context.imports.parserWasm);\r\n        return new OctreeModuleContext(context, this, uniforms, resources, buffer, loader);\r\n    }\r\n\r\n    createUniforms() {\r\n        return {\r\n            scene: glUBOProxy(this.sceneUniforms),\r\n        } as const;\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniforms: Uniforms) {\r\n        const shaders = context.imports.shaders.octree;\r\n        const bin = context.resourceBin(\"Watermark\");\r\n        const sceneUniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniforms.scene.buffer });\r\n        const samplerNearest = bin.createSampler({ minificationFilter: \"NEAREST\", magnificationFilter: \"NEAREST\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\r\n        const defaultBaseColorTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 1, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: new Uint8Array([255, 255, 255, 255]) });\r\n        const materialTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 256, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: null });\r\n        const highlightTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 256, height: 6, internalFormat: \"RGBA32F\", type: \"FLOAT\", image: null });\r\n        const gradientsTexture = bin.createTexture(this.gradientImageParams);\r\n\r\n        const transformFeedback = bin.createTransformFeedback()!;\r\n        let vb_line: WebGLBuffer | null = null;\r\n        let vao_line: WebGLVertexArrayObject | null = null;\r\n        if (context.deviceProfile.features.outline) {\r\n            vb_line = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: this.maxLines * 24, usage: \"STATIC_DRAW\" });\r\n            vao_line = bin.createVertexArray({\r\n                attributes: [\r\n                    { kind: \"FLOAT_VEC4\", buffer: vb_line, byteStride: 36, byteOffset: 0, componentType: \"FLOAT\", divisor: 1 }, // positions in plane space (line vertex pair)\r\n                    { kind: \"FLOAT_VEC4\", buffer: vb_line, byteStride: 36, byteOffset: 16, componentType: \"FLOAT\", divisor: 1 }, // color\r\n                    { kind: \"UNSIGNED_INT\", buffer: vb_line, byteStride: 36, byteOffset: 32, componentType: \"UNSIGNED_INT\", divisor: 1 }, // object_id\r\n                ],\r\n            });\r\n        }\r\n\r\n        const { textureUniforms, uniformBufferBlocks } = OctreeModule;\r\n        const shadersPromise = OctreeModule.compileShaders(context, bin);\r\n        const [/*color, pick, pre,*/ intersect, line, debug, corePrograms] = await Promise.all([\r\n            // context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(ShaderPass.color, ShaderMode.triangles) }),\r\n            // context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(ShaderPass.pick, ShaderMode.triangles) }),\r\n            // context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(ShaderPass.pre, ShaderMode.triangles) }),\r\n            context.makeProgramAsync(bin, { ...shaders.intersect, uniformBufferBlocks: [\"Camera\", \"Clipping\", \"Outline\", \"Node\"], textureUniforms, transformFeedback: { varyings: [\"line_vertices\", \"color\", \"object_id\"], bufferMode: \"INTERLEAVED_ATTRIBS\" } }),\r\n            context.makeProgramAsync(bin, { ...shaders.line, uniformBufferBlocks: [\"Camera\", \"Clipping\", \"Outline\", \"Node\"], header: { flags: context.deviceProfile.quirks.adreno600 ? [\"ADRENO600\"] : [] } }),\r\n            context.makeProgramAsync(bin, { ...shaders.debug, uniformBufferBlocks }),\r\n            shadersPromise,\r\n        ]);\r\n        const programs: Programs = { ...corePrograms, intersect, line, debug };\r\n        // const programs = { color, pick, pre, intersect, line, debug };\r\n        // const programs = { intersect, line, debug };\r\n        return {\r\n            bin, programs,\r\n            transformFeedback, vb_line, vao_line,\r\n            sceneUniforms, samplerNearest, defaultBaseColorTexture, materialTexture, highlightTexture, gradientsTexture\r\n        } as const;\r\n    }\r\n\r\n    static readonly defaultProgramFlags = {\r\n        clip: false as boolean,\r\n        dither: false as boolean,\r\n        highlight: false as boolean,\r\n    } as const;\r\n\r\n    static shaderConstants(deviceProfile: DeviceProfile, pass: ShaderPass, mode: ShaderMode, programFlags = OctreeModule.defaultProgramFlags) {\r\n        const { clip, dither, highlight } = programFlags;\r\n        const flags: string[] = [];\r\n        if (clip || deviceProfile.quirks.slowShaderRecompile) { //Always complie in clip on devices with slow recomplie.\r\n            flags.push(\"CLIP\");\r\n        }\r\n        if (dither) {\r\n            flags.push(\"DITHER\");\r\n        }\r\n        if (highlight) {\r\n            flags.push(\"HIGHLIGHT\");\r\n        }\r\n        if (deviceProfile.quirks.adreno600) {\r\n            flags.push(\"ADRENO600\");\r\n        }\r\n        const defines = [\r\n            { name: \"PASS\", value: pass.toString() },\r\n            { name: \"MODE\", value: mode.toString() },\r\n        ];\r\n        return { defines, flags } as const;\r\n    }\r\n\r\n    static async compileShaders(context: RenderContext, bin: ResourceBin, programFlags = OctreeModule.defaultProgramFlags): Promise<PassPrograms> {\r\n        const shaders = context.imports.shaders.octree;\r\n        const { textureUniforms, uniformBufferBlocks } = OctreeModule;\r\n        const programs = {} as Mutable<PassPrograms>;\r\n        const promises: Promise<void>[] = [];\r\n        for (const pass of OctreeModule.passes) {\r\n            const modes = {} as Mutable<ModePrograms>;\r\n            for (const mode of OctreeModule.modes) {\r\n                const promise = context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, textureUniforms, header: OctreeModule.shaderConstants(context.deviceProfile, pass, mode, programFlags) });\r\n                const compiledPromise = promise.then(program => {\r\n                    modes[mode] = program;\r\n                });\r\n                promises.push(compiledPromise);\r\n            }\r\n            programs[pass] = modes;\r\n        }\r\n        await Promise.all(promises);\r\n        return programs;\r\n    }\r\n\r\n    readonly maxLines = 1024 * 1024; // TODO: find a proper size!\r\n}\r\n\r\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n/** @internal */\r\nexport type Uniforms = ReturnType<OctreeModule[\"createUniforms\"]>;\r\n/** @internal */\r\nexport type Resources = Awaited<ReturnType<OctreeModule[\"createResources\"]>>;\r\ntype PassPrograms = { readonly [P in keyof typeof ShaderPass]: ModePrograms };\r\ntype ModePrograms = { readonly [P in keyof typeof ShaderMode]: WebGLProgram };\r\n/** @internal */\r\nexport interface Programs extends PassPrograms {\r\n    readonly intersect: WebGLProgram;\r\n    readonly line: WebGLProgram;\r\n    readonly debug: WebGLProgram;\r\n}\r\n\r\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glUBOProxy, glDraw, glState, type UniformTypes } from \"webgl2\";\r\n\r\n/** @internal */\r\nexport class TonemapModule implements RenderModule {\r\n    readonly kind = \"tonemap\";\r\n    readonly uniforms = {\r\n        exposure: \"float\",\r\n        mode: \"uint\",\r\n        maxLinearDepth: \"float\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n        return new TonemapModuleContext(context, this, uniforms, resources);\r\n    }\r\n\r\n    createUniforms() {\r\n        return glUBOProxy(this.uniforms);\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\r\n        const { vertexShader, fragmentShader } = context.imports.shaders.tonemap.render;\r\n        const bin = context.resourceBin(\"Tonemap\");\r\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.buffer.byteLength });\r\n        const sampler = bin.createSampler({ minificationFilter: \"NEAREST\", magnificationFilter: \"NEAREST\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\r\n        const textureNames = [\"color\", \"pick\", \"zbuffer\"] as const;\r\n        const textureUniforms = textureNames.map(name => `textures.${name}`);\r\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Tonemapping\"], textureUniforms })\r\n        return { bin, uniforms, sampler, program } as const;\r\n    }\r\n}\r\n\r\ntype Uniforms = ReturnType<TonemapModule[\"createUniforms\"]>;\r\ntype Resources = Awaited<ReturnType<TonemapModule[\"createResources\"]>>;\r\n\r\nclass TonemapModuleContext implements RenderModuleContext {\r\n\r\n    constructor(readonly context: RenderContext, readonly module: TonemapModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\r\n\r\n    update(state: DerivedRenderState) {\r\n        const { context } = this;\r\n        const { uniforms } = this.resources\r\n        const { camera, tonemapping } = state;\r\n\r\n        if (context.hasStateChanged({ camera, tonemapping })) {\r\n            const { camera, tonemapping } = state;\r\n            const { values } = this.uniforms;\r\n            values.exposure = Math.pow(2, tonemapping.exposure);\r\n            values.mode = tonemapping.mode;\r\n            values.maxLinearDepth = camera.far;\r\n            context.updateUniformBuffer(uniforms, this.uniforms);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { context, resources } = this;\r\n        const { program, sampler, uniforms } = resources;\r\n        const { gl } = context;\r\n        const { textures } = context.buffers;\r\n\r\n        context.buffers.resolveMSAA();\r\n\r\n        glState(gl, {\r\n            program,\r\n            uniformBuffers: [uniforms],\r\n            textures: [\r\n                { kind: \"TEXTURE_2D\", texture: textures.color, sampler },\r\n                { kind: \"TEXTURE_2D\", texture: textures.pick, sampler },\r\n                { kind: \"TEXTURE_2D\", texture: textures.depth, sampler },\r\n            ],\r\n            frameBuffer: null,\r\n            drawBuffers: [\"BACK\"],\r\n            depth: {\r\n                test: false,\r\n                writeMask: false,\r\n            },\r\n        });\r\n\r\n        const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\r\n        context.addRenderStatistics(stats);\r\n    }\r\n\r\n    contextLost() {\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n    }\r\n}\r\n", "import type { DerivedRenderState, RenderContext } from \"core3d\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glUBOProxy, glDraw, glState, glTransformFeedback, type UniformTypes } from \"webgl2\";\r\nimport { mat4, vec3, type ReadonlyVec3, vec4 } from \"gl-matrix\";\r\n\r\n/** @internal */\r\nexport class CubeModule implements RenderModule {\r\n    readonly kind = \"cube\";\r\n    readonly cubeUniforms = {\r\n        modelLocalMatrix: \"mat4\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n        return new CubeModuleContext(context, this, uniforms, resources);\r\n    }\r\n\r\n    createUniforms() {\r\n        return {\r\n            cube: glUBOProxy(this.cubeUniforms),\r\n        } as const;\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\r\n        const shaders = context.imports.shaders.cube;\r\n        const vertices = createVertices((pos, norm, col) => ([...pos, ...norm, ...col]));\r\n        const pos = createVertices((pos) => (pos));\r\n        const indices = createIndices();\r\n        const triplets = new Float32Array(indices.length * 3);\r\n        for (let i = 0; i < indices.length; i += 3) {\r\n            const [a, b, c] = indices.slice(i, i + 3);\r\n            const pa = pos.slice(a * 3, (a + 1) * 3);\r\n            const pb = pos.slice(b * 3, (b + 1) * 3);\r\n            const pc = pos.slice(c * 3, (c + 1) * 3);\r\n            triplets.set(pa, i * 3 + 0);\r\n            triplets.set(pb, i * 3 + 3);\r\n            triplets.set(pc, i * 3 + 6);\r\n        }\r\n\r\n        const bin = context.resourceBin(\"Cube\");\r\n        const uniforms = {\r\n            cube: bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.cube.buffer.byteLength }),\r\n        } as const;\r\n        const transformFeedback = bin.createTransformFeedback();\r\n\r\n        const vb_render = bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: vertices });\r\n        const ib_render = bin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: indices });\r\n        const vao_render = bin.createVertexArray({\r\n            attributes: [\r\n                { kind: \"FLOAT_VEC3\", buffer: vb_render, byteStride: 36, byteOffset: 0 }, // position\r\n                { kind: \"FLOAT_VEC3\", buffer: vb_render, byteStride: 36, byteOffset: 12 }, // normal\r\n                { kind: \"FLOAT_VEC3\", buffer: vb_render, byteStride: 36, byteOffset: 24 }, // color\r\n            ],\r\n            indices: ib_render\r\n        });\r\n        bin.subordinate(vao_render, vb_render, ib_render);\r\n\r\n        const vb_triplets = bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: triplets });\r\n        const vao_triplets = bin.createVertexArray({\r\n            attributes: [\r\n                { kind: \"FLOAT_VEC3\", buffer: vb_triplets, byteStride: 36, byteOffset: 0 }, // position 0\r\n                { kind: \"FLOAT_VEC3\", buffer: vb_triplets, byteStride: 36, byteOffset: 12 }, // position 1\r\n                { kind: \"FLOAT_VEC3\", buffer: vb_triplets, byteStride: 36, byteOffset: 24 }, // position 2\r\n            ],\r\n        });\r\n        bin.subordinate(vao_triplets, vb_triplets);\r\n\r\n        // const vb_line = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: 12 * 2 * 8, usage: \"STATIC_DRAW\" });\r\n        const vb_line = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: 12 * 2 * 4, usage: \"STATIC_DRAW\" });\r\n        const vb_opacity = bin.createBuffer({ kind: \"ARRAY_BUFFER\", byteSize: 12 * 4, usage: \"STATIC_DRAW\" });\r\n        const vao_line = bin.createVertexArray({\r\n            attributes: [\r\n                // { kind: \"FLOAT_VEC2\", buffer: vb_line, byteStride: 8, byteOffset: 0 }, // position\r\n                // { kind: \"FLOAT_VEC2\", buffer: vb_line, byteStride: 4, byteOffset: 0, componentType: \"HALF_FLOAT\" }, // position\r\n                { kind: \"FLOAT_VEC4\", buffer: vb_line, byteStride: 8, byteOffset: 0, componentType: \"HALF_FLOAT\", divisor: 1 }, // position\r\n                { kind: \"FLOAT\", buffer: vb_opacity, byteStride: 4, byteOffset: 0, componentType: \"FLOAT\", divisor: 1 }, // opacity\r\n            ],\r\n        });\r\n\r\n        const uniformBufferBlocks = [\"Camera\", \"Clipping\", \"Cube\"];\r\n        const [color, pick, line, intersect] = await Promise.all([\r\n            context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks }),\r\n            context.makeProgramAsync(bin, { ...shaders.render, uniformBufferBlocks, header: { flags: [\"PICK\"] } }),\r\n            context.makeProgramAsync(bin, { ...shaders.line, uniformBufferBlocks: [...uniformBufferBlocks, \"Outline\"] }),\r\n            context.makeProgramAsync(bin, { ...shaders.intersect, uniformBufferBlocks: [...uniformBufferBlocks, \"Outline\"], transformFeedback: { varyings: [\"line_vertices\", \"opacity\"], bufferMode: \"SEPARATE_ATTRIBS\" } }),\r\n        ]);\r\n        const programs = { color, pick, line, intersect };\r\n        return { bin, uniforms, transformFeedback, vao_render, vao_triplets, vao_line, vb_line, vb_opacity, programs } as const;\r\n    }\r\n}\r\n\r\ntype Uniforms = ReturnType<CubeModule[\"createUniforms\"]>;\r\ntype Resources = Awaited<ReturnType<CubeModule[\"createResources\"]>>;\r\n\r\nclass CubeModuleContext implements RenderModuleContext {\r\n    constructor(readonly context: RenderContext, readonly module: CubeModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\r\n\r\n    update(state: DerivedRenderState) {\r\n        const { context, resources, uniforms } = this;\r\n        const { cube, localSpaceTranslation } = state;\r\n        if (context.hasStateChanged({ cube, localSpaceTranslation })) {\r\n            const { scale, position } = cube;\r\n            const posLS = vec3.subtract(vec3.create(), position, localSpaceTranslation);\r\n            const m = [\r\n                scale, 0, 0, 0,\r\n                0, scale, 0, 0,\r\n                0, 0, scale, 0,\r\n                ...posLS, 1\r\n            ] as Parameters<typeof mat4.fromValues>;\r\n            uniforms.cube.values.modelLocalMatrix = mat4.fromValues(...m);\r\n        }\r\n        context.updateUniformBuffer(resources.uniforms.cube, uniforms.cube);\r\n    }\r\n\r\n    render(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { programs, uniforms, transformFeedback, vao_render, vao_triplets, vao_line, vb_line, vb_opacity } = resources;\r\n        const { gl, cameraUniforms, clippingUniforms, outlineUniforms, deviceProfile } = context;\r\n\r\n        if (state.cube.enabled) {\r\n            // render normal cube\r\n            glState(gl, {\r\n                program: programs.color,\r\n                uniformBuffers: [cameraUniforms, clippingUniforms, uniforms.cube],\r\n                // drawBuffers: context.drawBuffers(),\r\n                depth: { test: true, },\r\n                cull: { enable: false },\r\n                vertexArrayObject: vao_render,\r\n            });\r\n            const stats = glDraw(gl, { kind: \"elements\", mode: \"TRIANGLES\", indexType: \"UNSIGNED_SHORT\", count: 36 });\r\n            context.addRenderStatistics(stats);\r\n\r\n            if (state.outlines.enabled && deviceProfile.features.outline) {\r\n                const planeIndex = state.clipping.planes.findIndex((cp) => vec4.exactEquals(cp.normalOffset, plane));\r\n                const [x, y, z, offset] = state.outlines.plane;\r\n                const plane = vec4.fromValues(x, y, z, -offset);\r\n\r\n                context.updateOutlinesUniforms(plane, state.outlines.color, planeIndex);\r\n                // transform vertex triplets into intersection lines\r\n                glState(gl, {\r\n                    program: programs.intersect,\r\n                    uniformBuffers: [cameraUniforms, clippingUniforms, uniforms.cube, outlineUniforms],\r\n                    vertexArrayObject: vao_triplets,\r\n                });\r\n                glTransformFeedback(gl, { kind: \"POINTS\", transformFeedback, outputBuffers: [vb_line, vb_opacity], count: 12 });\r\n\r\n                // render intersection lines\r\n                glState(gl, {\r\n                    program: programs.line,\r\n                    // drawBuffers: context.drawBuffers(BufferFlags.color),\r\n                    blend: {\r\n                        enable: true,\r\n                        srcRGB: \"SRC_ALPHA\",\r\n                        dstRGB: \"ONE_MINUS_SRC_ALPHA\",\r\n                        srcAlpha: \"ZERO\",\r\n                        dstAlpha: \"ONE\",\r\n                    },\r\n                    depth: { test: false, },\r\n                    vertexArrayObject: vao_line,\r\n                });\r\n                // const stats = glDraw(gl, { kind: \"arrays\", mode: \"LINES\", count: 12 * 2 });\r\n                const stats = glDraw(gl, { kind: \"arrays_instanced\", mode: \"LINES\", count: 2, instanceCount: 12 });\r\n                context.addRenderStatistics(stats);\r\n            }\r\n        }\r\n    }\r\n\r\n    pick(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { programs, uniforms, vao_render } = resources;\r\n        const { gl, cameraUniforms, clippingUniforms } = context;\r\n\r\n        if (state.cube.enabled) {\r\n            glState(gl, {\r\n                program: programs.pick,\r\n                uniformBuffers: [cameraUniforms, clippingUniforms, uniforms.cube],\r\n                depth: { test: true, },\r\n                cull: { enable: false },\r\n                vertexArrayObject: vao_render,\r\n            });\r\n            glDraw(gl, { kind: \"elements\", mode: \"TRIANGLES\", indexType: \"UNSIGNED_SHORT\", count: 36 });\r\n            // TODO: render pickable outlines too?\r\n        }\r\n    }\r\n\r\n    contextLost(): void {\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n    }\r\n}\r\n\r\nfunction createVertices(pack: (position: ReadonlyVec3, normal: ReadonlyVec3, color: ReadonlyVec3) => Iterable<number>) {\r\n    function face(x: ReadonlyVec3, y: ReadonlyVec3, color: ReadonlyVec3) {\r\n        const normal = vec3.cross(vec3.create(), y, x);\r\n        function vert(fx: \"add\" | \"sub\", fy: \"add\" | \"sub\") {\r\n            const pos = vec3.clone(normal);\r\n            vec3[fx](pos, pos, x);\r\n            vec3[fy](pos, pos, y);\r\n            return pack(pos, normal, color);\r\n            // return [...pos, ...normal, ...color];\r\n        }\r\n        return [\r\n            ...vert(\"sub\", \"sub\"),\r\n            ...vert(\"add\", \"sub\"),\r\n            ...vert(\"sub\", \"add\"),\r\n            ...vert(\"add\", \"add\"),\r\n        ];\r\n    }\r\n\r\n    return new Float32Array([\r\n        ...face([0, 0, -1], [0, 1, 0], [1, 0, 0]), // right (1, 0, 0)\r\n        ...face([0, 0, 1], [0, 1, 0], [0, 1, 1]), // left (-1, 0, 0)\r\n        ...face([1, 0, 0], [0, 0, 1], [0, 1, 0]), // top (0, 1, 0)\r\n        ...face([1, 0, 0], [0, 0, -1], [1, 0, 1]), // bottom (0, -1, 0)\r\n        ...face([1, 0, 0], [0, 1, 0], [0, 0, 1]), // front (0, 0, 1)\r\n        ...face([-1, 0, 0], [0, 1, 0], [1, 1, 0]), // back (0, 0, -1)\r\n    ]);\r\n}\r\n\r\nfunction createIndices() {\r\n    let idxOffset = 0;\r\n    function face() {\r\n        const idx = [0, 2, 1, 1, 2, 3].map(i => i + idxOffset);\r\n        idxOffset += 4;\r\n        return idx;\r\n    }\r\n    return new Uint16Array([\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n    ]);\r\n}", "import type { DerivedRenderState, RenderContext } from \"core3d\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glDraw, glState, glUBOProxy, type UniformTypes } from \"webgl2\";\r\n\r\n/** @internal */\r\nexport class ClippingModule implements RenderModule {\r\n    readonly kind = \"clipping\";\r\n    readonly uniforms = {\r\n        \"colors.0\": \"vec4\",\r\n        \"colors.1\": \"vec4\",\r\n        \"colors.2\": \"vec4\",\r\n        \"colors.3\": \"vec4\",\r\n        \"colors.4\": \"vec4\",\r\n        \"colors.5\": \"vec4\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n        return new ClippingModuleContext(context, this, uniforms, resources);\r\n    }\r\n\r\n    createUniforms() {\r\n        return glUBOProxy(this.uniforms);\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\r\n        const { vertexShader, fragmentShader } = context.imports.shaders.clipping.render;\r\n        const bin = context.resourceBin(\"Clipping\");\r\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", byteSize: uniformsProxy.buffer.byteLength });\r\n        const uniformBufferBlocks = [\"Camera\", \"Clipping\", \"Colors\"];\r\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks });\r\n        return { bin, uniforms, program } as const;\r\n    }\r\n}\r\n\r\ntype Uniforms = ReturnType<ClippingModule[\"createUniforms\"]>;\r\ntype Resources = Awaited<ReturnType<ClippingModule[\"createResources\"]>>;\r\n\r\nclass ClippingModuleContext implements RenderModuleContext {\r\n    constructor(readonly context: RenderContext, readonly module: ClippingModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\r\n\r\n    update(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { clipping } = state;\r\n        if (context.hasStateChanged({ clipping })) {\r\n            const { planes } = clipping;\r\n            const values = this.uniforms.values;\r\n            for (let i = 0; i < planes.length; i++) {\r\n                const { color } = planes[i];\r\n                const idx = i as 0 | 1 | 2 | 3 | 4 | 5;\r\n                values[`colors.${idx}` as const] = color ?? [0, 0, 0, 0];\r\n            }\r\n        }\r\n        context.updateUniformBuffer(resources.uniforms, this.uniforms);\r\n    }\r\n\r\n    render(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { program, uniforms } = resources;\r\n        const { gl, cameraUniforms, clippingUniforms } = context;\r\n        const { clipping } = state;\r\n\r\n        if (clipping.draw) {\r\n            glState(gl, {\r\n                program,\r\n                uniformBuffers: [cameraUniforms, clippingUniforms, uniforms],\r\n                depth: {\r\n                    test: true,\r\n                    // writeMask: true,\r\n                },\r\n                blend: {\r\n                    enable: true,\r\n                    srcRGB: \"SRC_ALPHA\",\r\n                    dstRGB: \"ONE_MINUS_SRC_ALPHA\",\r\n                    srcAlpha: \"ZERO\",\r\n                    dstAlpha: \"ONE\",\r\n                },\r\n            });\r\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\r\n            context.addRenderStatistics(stats);\r\n        }\r\n    }\r\n\r\n    pick(state: DerivedRenderState) {\r\n        return this.render(state);\r\n    }\r\n\r\n    contextLost(): void {\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n    }\r\n}", "import type { DerivedRenderState, RenderContext } from \"core3d\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glUBOProxy, glDraw, glState } from \"webgl2\";\r\nimport type { UniformTypes } from \"webgl2\";\r\n// import logoBinary from \"./logo.bin\";\r\n\r\n/** @internal */\r\nexport class WatermarkModule implements RenderModule {\r\n    readonly kind = \"watermark\";\r\n    readonly uniforms = {\r\n        modelClipMatrix: \"mat4\",\r\n        color: \"vec4\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n        return new WatermarkModuleContext(context, this, uniforms, resources);\r\n    }\r\n\r\n    createUniforms() {\r\n        return glUBOProxy(this.uniforms);\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\r\n        const { vertexShader, fragmentShader } = context.imports.shaders.watermark.render;\r\n        const bin = context.resourceBin(\"Watermark\");\r\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\r\n        const { vertices, indices } = WatermarkModule.geometry(context.imports.logo);\r\n        const vb = bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData: vertices });\r\n        const ib = bin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: indices });\r\n        const vao = bin.createVertexArray({\r\n            attributes: [\r\n                { kind: \"FLOAT_VEC3\", buffer: vb, byteStride: 12, byteOffset: 0 }, // position\r\n            ],\r\n            indices: ib\r\n        });\r\n        bin.subordinate(vao, vb, ib);\r\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Watermark\"] })\r\n        return { bin, uniforms, vao, program } as const;\r\n    }\r\n\r\n    // these magic numbers are the byte offsets and lengths from gltf bufferViews\r\n    static readonly vertexBufferBytes = 16620;\r\n    static readonly indexBufferBytes = 12276;\r\n    static readonly numIndices = this.indexBufferBytes / 2;\r\n\r\n    // Logo data are comes from the binary buffer of an gltf file. It has positions and triangle indices only. Z-coordinate is used for antialiasing. Mesh has been tesselated such that each triangle lies in a single antialiasing slope, i.e. has vertices along one edge only.\r\n    static geometry(logo: ArrayBuffer) {\r\n        const vertices = new Float32Array(logo, 0, WatermarkModule.vertexBufferBytes / 4).slice();\r\n        const indices = new Uint16Array(logo, WatermarkModule.vertexBufferBytes, WatermarkModule.numIndices).slice();\r\n        return { vertices, indices };\r\n    }\r\n}\r\n\r\ntype Uniforms = ReturnType<WatermarkModule[\"createUniforms\"]>;\r\ntype Resources = Awaited<ReturnType<WatermarkModule[\"createResources\"]>>;\r\n\r\nclass WatermarkModuleContext implements RenderModuleContext {\r\n    constructor(readonly context: RenderContext, readonly module: WatermarkModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\r\n\r\n    update(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { output } = state; 6\r\n        if (context.hasStateChanged({ output })) {\r\n            const { values } = this.uniforms;\r\n            const padding = 1; // % of logo height\r\n            const size = 0.2; // in % of screen diagonal\r\n            const { width, height } = output;\r\n            const w = 12.717909812927246 - 0.00042313020094297826;\r\n            const h = 0.0024876839015632868 + 1.87906813621521;\r\n            const e = 0.1; // size of aa bevel edge in meters.\r\n            const d = Math.hypot(w, h);\r\n            const diag = Math.hypot(width, height) * size;\r\n            const sx = 2 * diag / d / width;\r\n            const sy = 2 * diag / d / height;\r\n            const sz = diag / d * e * 0.5 / h; // use to scale z-slope (should be one pixels wide)\r\n            const m = [\r\n                sx, 0, 0, 0,\r\n                0, sy, 0, 0,\r\n                0, 0, sz, 0,\r\n                1 - (padding) * sx, -1 + (padding) * sy, sz * 0.5, 1,\r\n            ] as const;\r\n            values.modelClipMatrix = m;\r\n            values.color = [43 / 255, 46 / 255, 52 / 255, 0.5];\r\n            context.updateUniformBuffer(resources.uniforms, this.uniforms);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { context, resources, module } = this;\r\n        const { program, uniforms, vao, } = resources;\r\n        const { gl } = context;\r\n\r\n        glState(gl, {\r\n            program,\r\n            uniformBuffers: [uniforms],\r\n            depth: { writeMask: false, },\r\n            cull: { enable: true },\r\n            vertexArrayObject: vao,\r\n            blend: {\r\n                enable: true,\r\n                srcRGB: \"SRC_ALPHA\",\r\n                srcAlpha: \"ONE\",\r\n                dstRGB: \"ONE\",\r\n                dstAlpha: \"ONE\",\r\n            },\r\n        });\r\n        const stats = glDraw(gl, { kind: \"elements\", mode: \"TRIANGLES\", indexType: \"UNSIGNED_SHORT\", count: WatermarkModule.numIndices });\r\n        context.addRenderStatistics(stats);\r\n    }\r\n\r\n    contextLost(): void {\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n    }\r\n}\r\n", "import type { DerivedRenderState, RenderContext, RenderStateDynamicGeometry, RenderStateDynamicImage, RenderStateDynamicInstance, RenderStateDynamicMaterial, RenderStateDynamicMeshPrimitive, RenderStateDynamicObject, RenderStateDynamicSampler, RenderStateDynamicTexture, RenderStateDynamicTextureReference, RenderStateDynamicVertexAttribute } from \"core3d\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glUBOProxy, glDraw, glState, type UniformTypes, type VertexArrayParams, type VertexAttribute, type DrawParamsElements, type DrawParamsArrays, type StateParams, type DrawParamsArraysInstanced, type DrawParamsElementsInstanced, glUpdateBuffer } from \"webgl2\";\r\nimport { mat3, mat4, vec3, type ReadonlyVec3 } from \"gl-matrix\";\r\nimport { BufferFlags } from \"core3d/buffers\";\r\nimport { ResourceBin } from \"core3d/resource\";\r\n\r\n/** @internal */\r\nexport class DynamicModule implements RenderModule {\r\n    readonly kind = \"dynamic\";\r\n    readonly materialUniforms = {\r\n        baseColor: \"vec4\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    readonly instanceUniforms = {\r\n        modelViewMatrix: \"mat4\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const resources = await this.createResources(context);\r\n        return new DynamicModuleContext(context, this, resources);\r\n    }\r\n\r\n    async createResources(context: RenderContext) {\r\n        const { vertexShader, fragmentShader } = context.imports.shaders.dynamic.render;\r\n        const bin = context.resourceBin(\"Dynamic\");\r\n        const defaultSamplers = {\r\n            mip: bin.createSampler({ magnificationFilter: \"LINEAR\", minificationFilter: \"LINEAR_MIPMAP_LINEAR\", wrap: [\"REPEAT\", \"REPEAT\"] }),\r\n            plain: bin.createSampler({ magnificationFilter: \"LINEAR\", minificationFilter: \"LINEAR\", wrap: [\"REPEAT\", \"REPEAT\"] }),\r\n        } as const;\r\n        const defaultTexture = bin.createTexture({ kind: \"TEXTURE_2D\", width: 1, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: new Uint8Array(4) }); // used to avoid warnings on android\r\n        const uniformBufferBlocks = [\"Camera\", \"Material\", \"Object\"];\r\n        const textureNames = [\"lut_ggx\", \"ibl.diffuse\", \"ibl.specular\", \"base_color\", \"metallic_roughness\", \"normal\", \"emissive\", \"occlusion\"] as const;\r\n        const textureUniforms = textureNames.map(name => `textures.${name}`);\r\n\r\n        const [unlit, ggx] = await Promise.all([\r\n            context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks, textureUniforms, header: { flags: context.deviceProfile.quirks.adreno600 ? [\"ADRENO600\"] : [] } }),\r\n            context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks, textureUniforms, header: { flags: context.deviceProfile.quirks.adreno600 ? [\"ADRENO600\", \"PBR_METALLIC_ROUGHNESS\"] : [\"PBR_METALLIC_ROUGHNESS\"] } }),\r\n        ]);\r\n        const programs = { unlit, ggx };\r\n        return { bin, defaultSamplers, defaultTexture, programs } as const;\r\n    }\r\n}\r\n\r\ntype Resources = Awaited<ReturnType<DynamicModule[\"createResources\"]>>;\r\ntype DefaultSamplers = Resources[\"defaultSamplers\"];\r\n\r\nclass DynamicModuleContext implements RenderModuleContext {\r\n    iblTextures;\r\n    readonly buffers = new Map<BufferSource, BufferAsset>();\r\n    readonly geometries = new Map<RenderStateDynamicGeometry, GeometryAsset>();\r\n    readonly objects = new Map<RenderStateDynamicObject, ObjectAsset>();\r\n    readonly materials = new Map<RenderStateDynamicMaterial, MaterialAsset>();\r\n    readonly images = new Map<RenderStateDynamicImage, TextureAsset>();\r\n    readonly samplers = new Map<RenderStateDynamicSampler, SamplerAsset>();\r\n\r\n    constructor(readonly context: RenderContext, readonly module: DynamicModule, readonly resources: Resources) {\r\n        this.iblTextures = context.iblTextures;\r\n    }\r\n\r\n    update(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        const { bin, defaultSamplers, defaultTexture, programs } = resources;\r\n        const { dynamic, localSpaceTranslation } = state;\r\n        if (context.hasStateChanged({ dynamic })) {\r\n            // synchronizing assets by reference is slower than array indexing, but it makes the render state safer and simpler to modify.\r\n            // performance should not be a major issue for < 1000 objects or so, however.\r\n            function* getTextures(material: RenderStateDynamicMaterial) {\r\n                const { baseColorTexture } = material;\r\n                if (baseColorTexture)\r\n                    yield baseColorTexture.texture;\r\n                if (material.kind == \"ggx\") {\r\n                    const { emissiveTexture, metallicRoughnessTexture, normalTexture, occlusionTexture } = material;\r\n                    if (emissiveTexture)\r\n                        yield emissiveTexture.texture;\r\n                    if (metallicRoughnessTexture)\r\n                        yield metallicRoughnessTexture.texture;\r\n                    if (normalTexture)\r\n                        yield normalTexture.texture;\r\n                    if (occlusionTexture)\r\n                        yield occlusionTexture.texture;\r\n                }\r\n            }\r\n            const primitives = [...new Set<RenderStateDynamicMeshPrimitive>(dynamic.objects.flatMap(o => o.mesh.primitives))];\r\n            const geometries = [...new Set<RenderStateDynamicGeometry>(primitives.map(p => p.geometry))];\r\n            const materials = [...new Set<RenderStateDynamicMaterial>(primitives.map(p => p.material))];\r\n            const textures = [...new Set<RenderStateDynamicTexture>(materials.flatMap(m => [...getTextures(m)]))];\r\n            const images = [...new Set<RenderStateDynamicImage>(textures.map(t => t.image))];\r\n            const samplers = [...new Set<RenderStateDynamicSampler>(textures.map(t => t.sampler!).filter(s => s))];\r\n            const objects = [...new Set<RenderStateDynamicObject>(dynamic.objects.map(o => o))];\r\n            const vertexBuffers = new Set<BufferSource>(geometries.flatMap(g => [...Object.values(g.attributes).map((a: RenderStateDynamicVertexAttribute) => a.buffer).filter(b => b)]));\r\n            const indexBuffers = new Set<BufferSource>(geometries.map(g => typeof g.indices == \"number\" ? undefined : g.indices).filter(b => b) as BufferSource[]);\r\n            const numVertexBuffers = vertexBuffers.size;\r\n            const buffers = [...vertexBuffers, ...indexBuffers];\r\n            syncAssets(bin, buffers, this.buffers, (data, idx) => new BufferAsset(bin, idx < numVertexBuffers ? \"ARRAY_BUFFER\" : \"ELEMENT_ARRAY_BUFFER\", data));\r\n            syncAssets(bin, images, this.images, data => new TextureAsset(bin, data));\r\n            syncAssets(bin, samplers, this.samplers, data => new SamplerAsset(bin, data));\r\n            syncAssets(bin, geometries, this.geometries, data => new GeometryAsset(bin, data, this.buffers));\r\n            syncAssets(bin, objects, this.objects, data => new ObjectAsset(bin, context, data, state));\r\n            syncAssets(bin, materials, this.materials, data => new MaterialAsset(bin, context, data, this.images, this.samplers, defaultTexture, defaultSamplers, programs[data.kind]));\r\n        }\r\n        if (context.hasStateChanged({ localSpaceTranslation })) {\r\n            for (const instance of this.objects.values()) {\r\n                instance.update(context, state);\r\n            }\r\n        }\r\n        if (context.iblTextures != this.iblTextures) {\r\n            this.iblTextures = context.iblTextures;\r\n            for (const material of this.materials.values()) {\r\n                material.update(context, defaultTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(state: DerivedRenderState) {\r\n        const { context } = this;\r\n        const { gl, cameraUniforms } = context;\r\n\r\n        glState(gl, {\r\n            uniformBuffers: [cameraUniforms],\r\n            depth: {\r\n                test: true,\r\n                writeMask: true,\r\n            },\r\n        });\r\n\r\n        const { objects, geometries, materials } = this;\r\n        const meshes: { readonly material: MaterialAsset; readonly geometry: GeometryAsset; readonly object: ObjectAsset }[] = [];\r\n        let numPrimitives = 0;\r\n        state.dynamic.objects.forEach((p => { numPrimitives += p.mesh.primitives.length }));\r\n        if (numPrimitives != geometries.size) {// happens to objects that are deleted the next frame when using pickbuffers as they are using previous state.\r\n            return;\r\n        }\r\n        for (const obj of state.dynamic.objects) {\r\n            const objAsset = objects.get(obj)!;\r\n            for (const primitive of obj.mesh.primitives) {\r\n                const geometry = geometries.get(primitive.geometry)!;\r\n                const material = materials.get(primitive.material)!;\r\n                meshes.push({ material, geometry, object: objAsset });\r\n            }\r\n        }\r\n        // sort by material and then object\r\n        meshes.sort((a, b) => {\r\n            let diff = a.material.index - b.material.index;\r\n            if (diff == 0) {\r\n                diff = a.object.index - b.object.index;\r\n            }\r\n            return diff;\r\n        })\r\n\r\n        // vertex attribute defaults\r\n        gl.vertexAttrib4f(3, 1, 1, 1, 1); // color0\r\n\r\n        let currentMaterial: MaterialAsset = undefined!;\r\n        let currentObject: ObjectAsset = undefined!;\r\n\r\n        for (const { material, object, geometry } of meshes) {\r\n\r\n            if (currentMaterial != material) {\r\n                currentMaterial = material;\r\n                gl.bindBufferBase(gl.UNIFORM_BUFFER, 1, material.uniformsBuffer);\r\n                glState(gl, currentMaterial.stateParams);\r\n            }\r\n            if (currentObject != object) {\r\n                currentObject = object;\r\n                gl.bindBufferBase(gl.UNIFORM_BUFFER, 2, object.uniformsBuffer);\r\n            }\r\n            gl.bindVertexArray(geometry.resources.vao);\r\n            // TODO: create an geometry+instances VAO?\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, object.instancesBuffer);\r\n            for (let i = 0; i < 4; i++) {\r\n                const attrib = i + VertexAttribs.matrix0;\r\n                gl.vertexAttribPointer(attrib, 3, gl.FLOAT, false, 4 * 12, i * 12);\r\n                gl.vertexAttribDivisor(attrib, 1);\r\n                gl.enableVertexAttribArray(attrib);\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n            const kind = `${geometry.drawParams.kind}_instanced` as const;\r\n            const params = { ...geometry.drawParams, kind, instanceCount: object.numInstances } as (DrawParamsArraysInstanced | DrawParamsElementsInstanced);\r\n            const stats = glDraw(gl, params);\r\n            gl.bindVertexArray(null);\r\n            context.addRenderStatistics(stats);\r\n        }\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const attrib = i + VertexAttribs.matrix0;\r\n            gl.disableVertexAttribArray(attrib);\r\n        }\r\n    }\r\n\r\n    pick(state: DerivedRenderState) {\r\n        this.render(state); // TODO: make separate program for pick buffers instead of relying on drawbuffers\r\n    }\r\n\r\n    contextLost(): void {\r\n    }\r\n\r\n    dispose() {\r\n        const { resources, buffers, geometries, materials, objects } = this;\r\n        const { bin, programs, defaultSamplers, defaultTexture } = resources;\r\n        this.contextLost();\r\n        const assets = [...buffers.values(), ...geometries.values(), ...materials.values(), ...objects.values()];\r\n        for (const asset of assets) {\r\n            asset.dispose(bin);\r\n        }\r\n        bin.delete(programs.unlit, programs.ggx, defaultSamplers.mip, defaultSamplers.plain, defaultTexture);\r\n        console.assert(bin.size == 0);\r\n        bin.dispose();\r\n        buffers.clear();\r\n        geometries.clear();\r\n        materials.clear();\r\n        objects.clear();\r\n    }\r\n}\r\n\r\nfunction syncAssets<TK, TV extends { index: number, dispose(bin: ResourceBin): void }>(bin: ResourceBin, uniqueResources: Iterable<TK>, map: Map<TK, TV>, create: (resource: TK, index: number) => TV) {\r\n    // delete unreferenced resources\r\n    const unreferenced = new Map<TK, TV>(map);\r\n    for (const resource of uniqueResources) {\r\n        unreferenced.delete(resource);\r\n    }\r\n    for (const [resource, asset] of unreferenced) {\r\n        map.delete(resource);\r\n        asset.dispose(bin);\r\n    }\r\n\r\n    // index and create new resources\r\n    let idx = 0;\r\n    for (const resource of uniqueResources) {\r\n        let asset = map.get(resource);\r\n        if (!asset) {\r\n            asset = create(resource, idx);\r\n            map.set(resource, asset);\r\n        }\r\n        asset.index = idx++;\r\n    }\r\n}\r\n\r\nclass BufferAsset {\r\n    index = 0;\r\n    readonly buffer: WebGLBuffer;\r\n\r\n    constructor(bin: ResourceBin, kind: \"ARRAY_BUFFER\" | \"ELEMENT_ARRAY_BUFFER\", srcData: BufferSource) {\r\n        this.buffer = bin.createBuffer({ kind, srcData });\r\n    }\r\n\r\n    dispose(bin: ResourceBin) {\r\n        bin.delete(this.buffer);\r\n    }\r\n}\r\n\r\nconst enum VertexAttribs {\r\n    position,\r\n    normal,\r\n    tangent,\r\n    color0,\r\n    texCoord0,\r\n    texCoord1,\r\n    matrix0,\r\n    matrix1,\r\n    matrix2,\r\n    matrix3,\r\n}\r\n\r\nclass GeometryAsset {\r\n    index = 0;\r\n    readonly drawParams: DrawParamsElements | DrawParamsArrays;\r\n    readonly resources;\r\n\r\n    constructor(bin: ResourceBin, data: RenderStateDynamicGeometry, buffers: Map<BufferSource, BufferAsset>) {\r\n        const hasIndexBuffer = typeof data.indices != \"number\";\r\n        const indexType = !hasIndexBuffer ? undefined : data.indices instanceof Uint32Array ? \"UNSIGNED_INT\" : data.indices instanceof Uint16Array ? \"UNSIGNED_SHORT\" : \"UNSIGNED_BYTE\";\r\n        const mode = data.primitiveType;\r\n        const count = hasIndexBuffer ? data.indices.length : data.indices;\r\n        this.drawParams = { kind: hasIndexBuffer ? \"elements\" : \"arrays\", mode, count, indexType: indexType } as DrawParamsElements | DrawParamsArrays;\r\n        const { position, normal, tangent, color0, texCoord0, texCoord1 } = data.attributes;\r\n        function convAttr(a: RenderStateDynamicVertexAttribute | undefined) {\r\n            if (!a)\r\n                return null;\r\n            const { buffer } = buffers.get(a.buffer)!;\r\n            return { ...a, buffer } as VertexAttribute;\r\n        }\r\n        const indices = typeof data.indices == \"number\" ? undefined : bin.createBuffer({ kind: \"ELEMENT_ARRAY_BUFFER\", srcData: data.indices });\r\n        const params: VertexArrayParams = {\r\n            attributes: [\r\n                convAttr(position),\r\n                convAttr(normal),\r\n                convAttr(tangent),\r\n                convAttr(color0),\r\n                convAttr(texCoord0),\r\n                convAttr(texCoord1),\r\n            ],\r\n            indices,\r\n        }\r\n        const vao = bin.createVertexArray(params);\r\n        if (indices) {\r\n            bin.subordinate(vao, indices);\r\n        }\r\n        this.resources = { vao } as const;\r\n    }\r\n\r\n    dispose(bin: ResourceBin) {\r\n        bin.delete(this.resources.vao);\r\n    }\r\n}\r\n\r\nclass ObjectAsset {\r\n    index = 0;\r\n    private readonly uniforms;\r\n\r\n    readonly numInstances: number;\r\n    readonly uniformsBuffer: WebGLBuffer;\r\n    readonly instancesBuffer: WebGLBuffer;\r\n\r\n    constructor(bin: ResourceBin, context: RenderContext, readonly data: RenderStateDynamicObject, state: DerivedRenderState) {\r\n        const uniformsDesc = {\r\n            worldLocalMatrix: \"mat4\",\r\n            baseObjectId: \"uint\",\r\n        } as const satisfies Record<string, UniformTypes>;\r\n        this.uniforms = glUBOProxy(uniformsDesc);\r\n        const { values } = this.uniforms;\r\n        values.baseObjectId = data.baseObjectId ?? 0xffffffff;\r\n        this.uniformsBuffer = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: this.uniforms.buffer });\r\n        const { instances } = data;\r\n        this.numInstances = instances.length;\r\n        this.instancesBuffer = ObjectAsset.createInstancesBuffer(bin, instances, state.localSpaceTranslation);\r\n        this.update(context, state);\r\n    }\r\n\r\n    static createInstancesBuffer(bin: ResourceBin, instances: readonly RenderStateDynamicInstance[], localSpaceTranslation: ReadonlyVec3) {\r\n        const srcData = ObjectAsset.computeInstanceMatrices(instances, localSpaceTranslation);\r\n        return bin.createBuffer({ kind: \"ARRAY_BUFFER\", srcData });\r\n    }\r\n\r\n    static computeInstanceMatrices(instances: readonly RenderStateDynamicInstance[], localSpaceTranslation: ReadonlyVec3) {\r\n        const srcData = new Float32Array(instances.length * 12);\r\n        for (let i = 0; i < instances.length; i++) {\r\n            const { position, rotation, scale } = instances[i];\r\n            const translatedPos = vec3.sub(vec3.create(), position, localSpaceTranslation);\r\n            const transform = rotation ? mat4.fromRotationTranslation(mat4.create(), rotation, translatedPos) : mat4.fromTranslation(mat4.create(), translatedPos);\r\n            const [e00, e01, e02, e03, e10, e11, e12, e13, e20, e21, e22, e23, e30, e31, e32, e33] = transform;\r\n            const elems4x3 = [e00, e01, e02, e10, e11, e12, e20, e21, e22, e30, e31, e32];\r\n            if (scale != undefined) {\r\n                for (let i = 0; i < 9; i++) { // don't scale translation\r\n                    elems4x3[i] *= scale;\r\n                }\r\n            }\r\n            srcData.set(elems4x3, i * elems4x3.length);\r\n        }\r\n        return srcData;\r\n    }\r\n\r\n    update(context: RenderContext, state: DerivedRenderState) {\r\n        const { uniforms, uniformsBuffer, data, instancesBuffer } = this;\r\n        const { localSpaceTranslation } = state;\r\n        const { values } = uniforms;\r\n        values.worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), state.localSpaceTranslation));\r\n\r\n        if (context.hasStateChanged({ localSpaceTranslation })) {\r\n            const srcData = ObjectAsset.computeInstanceMatrices(data.instances, localSpaceTranslation);\r\n            glUpdateBuffer(context.gl, { kind: \"ARRAY_BUFFER\", srcData, targetBuffer: instancesBuffer });\r\n        }\r\n\r\n        context.updateUniformBuffer(uniformsBuffer, uniforms);\r\n    }\r\n\r\n    dispose(bin: ResourceBin) {\r\n        bin.delete(this.uniformsBuffer);\r\n    }\r\n}\r\n\r\ntype TextureNames = \"baseColor\" | \"emissive\" | \"normal\" | \"occlusion\" | \"metallicRoughness\";\r\n\r\nclass MaterialAsset {\r\n    index = 0;\r\n    readonly kind;\r\n    readonly uniforms;\r\n    readonly stateParams: StateParams;\r\n    readonly uniformsBuffer;\r\n    readonly textures = {} as { [P in TextureNames]?: WebGLTexture };\r\n    readonly samplers = {} as { [P in TextureNames]?: WebGLSampler };\r\n\r\n    constructor(\r\n        bin: ResourceBin,\r\n        context: RenderContext,\r\n        data: RenderStateDynamicMaterial,\r\n        textures: Map<RenderStateDynamicImage, TextureAsset>,\r\n        samplers: Map<RenderStateDynamicSampler, SamplerAsset>,\r\n        defaultTexture: WebGLTexture,\r\n        defaultSamplers: DefaultSamplers,\r\n        program: DynamicModuleContext[\"resources\"][\"programs\"][\"ggx\"],\r\n    ) {\r\n        this.kind = data.kind;\r\n        const blend = {\r\n            enable: true,\r\n            srcRGB: \"SRC_ALPHA\",\r\n            dstRGB: \"ONE_MINUS_SRC_ALPHA\",\r\n            srcAlpha: \"ZERO\",\r\n            dstAlpha: \"ONE\",\r\n        } as const satisfies StateParams[\"blend\"];\r\n        this.stateParams = {\r\n            program,\r\n            cull: { enable: data.doubleSided ? false : true },\r\n            blend: (data.alphaMode == \"BLEND\" ? blend : undefined),\r\n            // drawBuffers: context.drawBuffers(data.alphaMode == \"BLEND\" ? BufferFlags.color : BufferFlags.all), // for devices without OES_draw_buffers_indexed support\r\n        };\r\n        const uniformsDesc = {\r\n            baseColorFactor: \"vec4\",\r\n            emissiveFactor: \"vec3\",\r\n            roughnessFactor: \"float\",\r\n            metallicFactor: \"float\",\r\n            normalScale: \"float\",\r\n            occlusionStrength: \"float\",\r\n            alphaCutoff: \"float\",\r\n            baseColorUVSet: \"int\",\r\n            metallicRoughnessUVSet: \"int\",\r\n            normalUVSet: \"int\",\r\n            occlusionUVSet: \"int\",\r\n            emissiveUVSet: \"int\",\r\n            radianceMipCount: \"uint\",\r\n        } as const satisfies Record<string, UniformTypes>;\r\n        const uniformsProxy = this.uniforms = glUBOProxy(uniformsDesc);\r\n        let tex = this.textures;\r\n        let samp = this.samplers;\r\n        const { values } = uniformsProxy;\r\n        const { baseColorTexture } = data;\r\n        values.baseColorFactor = data.baseColorFactor ?? [1, 1, 1, 1];\r\n        values.baseColorUVSet = data.baseColorTexture ? data.baseColorTexture.texCoord ?? 0 : -1;\r\n        values.alphaCutoff = data.alphaCutoff ?? data.alphaMode == \"MASK\" ? .5 : 0;\r\n        values.radianceMipCount = context.iblTextures.numMipMaps;\r\n\r\n        function getDefaultSampler(texRef: RenderStateDynamicTextureReference | undefined) {\r\n            if (texRef) {\r\n                return isImagePowerOfTwo(texRef.texture.image) ? defaultSamplers.mip : defaultSamplers.plain;\r\n            }\r\n        }\r\n\r\n        if (baseColorTexture) {\r\n            tex.baseColor = textures.get(baseColorTexture.texture.image)!.texture;\r\n            samp.baseColor = samplers.get(baseColorTexture.texture.sampler!)?.sampler ?? getDefaultSampler(baseColorTexture);\r\n        }\r\n        if (data.kind == \"ggx\") {\r\n            const { roughnessFactor, metallicFactor, emissiveFactor, emissiveTexture, normalTexture, occlusionTexture, metallicRoughnessTexture } = data;\r\n            values.roughnessFactor = roughnessFactor ?? 1;\r\n            values.metallicFactor = metallicFactor ?? 1;\r\n            values.emissiveFactor = emissiveFactor ?? [0, 0, 0];\r\n            values.metallicRoughnessUVSet = metallicRoughnessTexture ? metallicRoughnessTexture.texCoord ?? 0 : -1;\r\n            values.normalUVSet = normalTexture ? normalTexture.texCoord ?? 0 : -1;\r\n            values.normalScale = normalTexture?.scale ?? 1;\r\n            values.occlusionUVSet = occlusionTexture ? occlusionTexture.texCoord ?? 0 : -1;\r\n            values.occlusionStrength = occlusionTexture?.strength ?? 1;\r\n            values.emissiveUVSet = emissiveTexture ? emissiveTexture.texCoord ?? 0 : -1;\r\n            if (emissiveTexture) {\r\n                tex.emissive = textures.get(emissiveTexture.texture.image)!.texture;\r\n                samp.emissive = samplers.get(emissiveTexture.texture.sampler!)?.sampler ?? getDefaultSampler(emissiveTexture);\r\n            }\r\n            if (normalTexture) {\r\n                tex.normal = textures.get(normalTexture.texture.image)!.texture;\r\n                samp.normal = samplers.get(normalTexture.texture.sampler!)?.sampler ?? getDefaultSampler(normalTexture);\r\n            }\r\n            if (occlusionTexture) {\r\n                tex.occlusion = textures.get(occlusionTexture.texture.image)!.texture;\r\n                samp.occlusion = samplers.get(occlusionTexture.texture.sampler!)?.sampler ?? getDefaultSampler(occlusionTexture);\r\n            }\r\n            if (metallicRoughnessTexture) {\r\n                tex.metallicRoughness = textures.get(metallicRoughnessTexture.texture.image)!.texture;\r\n                samp.metallicRoughness = samplers.get(metallicRoughnessTexture.texture.sampler!)?.sampler ?? getDefaultSampler(metallicRoughnessTexture);\r\n            }\r\n        } else {\r\n            values.roughnessFactor = 1;\r\n            values.metallicFactor = 1;\r\n            values.emissiveFactor = [0, 0, 0];\r\n            values.metallicRoughnessUVSet = -1;\r\n            values.normalUVSet = -1;\r\n            values.normalScale = 0;\r\n            values.occlusionUVSet = -1;\r\n            values.occlusionStrength = 0;\r\n            values.emissiveUVSet = -1;\r\n        }\r\n        this.uniformsBuffer = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\r\n        this.update(context, defaultTexture)\r\n    }\r\n\r\n    update(context: RenderContext, defaultTexture: WebGLTexture) {\r\n        const { iblTextures, lut_ggx, samplerSingle, samplerMip } = context;\r\n        const { uniforms, uniformsBuffer, textures, samplers } = this;\r\n        const { diffuse, specular, numMipMaps } = iblTextures;\r\n        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n        const mutableState = this.stateParams as Mutable<StateParams>;\r\n        mutableState.textures = [\r\n            { kind: \"TEXTURE_2D\", texture: lut_ggx, sampler: samplerSingle },\r\n            { kind: \"TEXTURE_CUBE_MAP\", texture: diffuse, sampler: samplerSingle },\r\n            { kind: \"TEXTURE_CUBE_MAP\", texture: specular, sampler: samplerMip },\r\n            { kind: \"TEXTURE_2D\", texture: textures.baseColor ?? defaultTexture, sampler: samplers.baseColor ?? null },\r\n            { kind: \"TEXTURE_2D\", texture: textures.metallicRoughness ?? defaultTexture, sampler: samplers.metallicRoughness ?? null },\r\n            { kind: \"TEXTURE_2D\", texture: textures.normal ?? defaultTexture, sampler: samplers.normal ?? null },\r\n            { kind: \"TEXTURE_2D\", texture: textures.emissive ?? defaultTexture, sampler: samplers.emissive ?? null },\r\n            { kind: \"TEXTURE_2D\", texture: textures.occlusion ?? defaultTexture, sampler: samplers.occlusion ?? null },\r\n        ] as const;\r\n        uniforms.values.radianceMipCount = numMipMaps;\r\n        context.updateUniformBuffer(uniformsBuffer, uniforms);\r\n    }\r\n\r\n    dispose(bin: ResourceBin) {\r\n        bin.delete(this.uniformsBuffer);\r\n    }\r\n}\r\n\r\nclass TextureAsset {\r\n    index = 0;\r\n    readonly texture: WebGLTexture;\r\n\r\n    constructor(bin: ResourceBin, image: RenderStateDynamicImage) {\r\n        this.texture = bin.createTexture(image.params);\r\n    }\r\n\r\n    dispose(bin: ResourceBin) {\r\n        bin.delete(this.texture);\r\n    }\r\n}\r\n\r\nclass SamplerAsset {\r\n    index = 0;\r\n    readonly sampler: WebGLSampler;\r\n\r\n    constructor(bin: ResourceBin, sampler: RenderStateDynamicSampler) {\r\n        this.sampler = bin.createSampler(sampler);\r\n    }\r\n\r\n    dispose(bin: ResourceBin) {\r\n        bin.delete(this.sampler);\r\n    }\r\n}\r\n\r\nfunction isImagePowerOfTwo(image: RenderStateDynamicImage) {\r\n    function isPowerOf2(value: number) {\r\n        return (value & (value - 1)) == 0;\r\n    }\r\n    const { width, height } = image.params;\r\n    return isPowerOf2(width) && isPowerOf2(height);\r\n}", "import type { DerivedRenderState, RenderContext } from \"core3d\";\r\nimport type { RenderModuleContext, RenderModule } from \"..\";\r\nimport { glUBOProxy, glDraw, glState, type UniformTypes } from \"webgl2\";\r\n\r\n/** @internal */\r\nexport class ToonModule implements RenderModule {\r\n    readonly kind = \"toon_outline\";\r\n    readonly uniforms = {\r\n        color: \"vec3\",\r\n    } as const satisfies Record<string, UniformTypes>;\r\n\r\n    async withContext(context: RenderContext) {\r\n        const uniforms = this.createUniforms();\r\n        const resources = await this.createResources(context, uniforms);\r\n        return new ToonModuleContext(context, this, uniforms, resources);\r\n    }\r\n\r\n    createUniforms() {\r\n        return glUBOProxy(this.uniforms);\r\n    }\r\n\r\n    async createResources(context: RenderContext, uniformsProxy: Uniforms) {\r\n        const { vertexShader, fragmentShader } = context.imports.shaders.toon.render;\r\n        const bin = context.resourceBin(\"Grid\");\r\n        const uniforms = bin.createBuffer({ kind: \"UNIFORM_BUFFER\", srcData: uniformsProxy.buffer });\r\n        const sampler = bin.createSampler({ minificationFilter: \"NEAREST\", magnificationFilter: \"NEAREST\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\r\n        const textureNames = [\"color\", \"pick\", \"zbuffer\"] as const;\r\n        const textureUniforms = textureNames.map(name => `textures.${name}`);\r\n\r\n        const program = await context.makeProgramAsync(bin, { vertexShader, fragmentShader, uniformBufferBlocks: [\"Camera\"], textureUniforms })\r\n        return { bin, uniforms, sampler, program } as const;\r\n    }\r\n}\r\n\r\ntype Uniforms = ReturnType<ToonModule[\"createUniforms\"]>;\r\ntype Resources = Awaited<ReturnType<ToonModule[\"createResources\"]>>;\r\n\r\nclass ToonModuleContext implements RenderModuleContext {\r\n    constructor(readonly context: RenderContext, readonly module: ToonModule, readonly uniforms: Uniforms, readonly resources: Resources) { }\r\n\r\n    async update(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        if (context.deviceProfile.quirks.adreno600) { //Normals are 0 and converting depht does not work on adreno 600 series\r\n            return;\r\n        }\r\n        const { uniforms } = resources;\r\n        const { toonOutline, localSpaceTranslation } = state;\r\n        if (context.hasStateChanged({ toonOutline, localSpaceTranslation })) {\r\n            const { values } = this.uniforms;\r\n            values.color = toonOutline.color;\r\n            context.updateUniformBuffer(uniforms, this.uniforms);\r\n        }\r\n        if (context.prevState != undefined && !context.isPickBuffersValid() && state.toonOutline.enabled && state.toonOutline.on) {\r\n            await context.renderPickBuffers();\r\n        }\r\n    }\r\n\r\n    render(state: DerivedRenderState) {\r\n        const { context, resources } = this;\r\n        if (context.deviceProfile.quirks.adreno600) { //Normals are 0 and converting depht does not work on adreno 600 series\r\n            return;\r\n        }\r\n        const { program, uniforms, sampler } = resources;\r\n        const { gl, cameraUniforms } = context;\r\n        const { textures } = context.buffers;\r\n\r\n        if (context.prevState != undefined && context.isPickBuffersValid() && state.toonOutline.enabled && state.toonOutline.on) {\r\n            glState(gl, {\r\n                program,\r\n                uniformBuffers: [cameraUniforms, uniforms],\r\n                textures: [\r\n                    { kind: \"TEXTURE_2D\", texture: textures.color, sampler },\r\n                    { kind: \"TEXTURE_2D\", texture: textures.pick, sampler },\r\n                    { kind: \"TEXTURE_2D\", texture: textures.depth, sampler },\r\n                ],\r\n                sample: {\r\n                    alphaToCoverage: true\r\n                },\r\n                blend: {\r\n                    enable: false,\r\n                    srcRGB: \"SRC_ALPHA\",\r\n                    dstRGB: \"ONE_MINUS_SRC_ALPHA\",\r\n                    srcAlpha: \"ONE\",\r\n                    dstAlpha: \"ONE\",\r\n                },\r\n                depth: {\r\n                    test: false,\r\n                    writeMask: false,\r\n                },\r\n            });\r\n            const stats = glDraw(gl, { kind: \"arrays\", mode: \"TRIANGLE_STRIP\", count: 4 });\r\n            context.addRenderStatistics(stats);\r\n        }\r\n    }\r\n\r\n    contextLost(): void {\r\n    }\r\n\r\n    dispose() {\r\n        this.contextLost();\r\n        this.resources.bin.dispose();\r\n    }\r\n}", "import { BackgroundModule } from \"./background\";\r\nimport { GridModule } from \"./grid\";\r\nimport { OctreeModule } from \"./octree\";\r\nimport { TonemapModule } from \"./tonemap\";\r\nimport { CubeModule } from \"./cube\";\r\nimport { ClippingModule } from \"./clipping\";\r\nimport { WatermarkModule } from \"./watermark\";\r\nimport { DynamicModule } from \"./dynamic\";\r\nimport { ToonModule } from \"./toon_outline\";\r\n\r\n/** Return the default/built-in render modules in the order they should be rendered.\r\n * @category Render Module\r\n */\r\nexport function createDefaultModules() {\r\n    return [\r\n        new BackgroundModule(),\r\n        new CubeModule(),\r\n        new OctreeModule(),\r\n        new DynamicModule(),\r\n        new ToonModule(),\r\n        new GridModule(),\r\n        new ClippingModule(),\r\n        new WatermarkModule(),\r\n        new TonemapModule(),\r\n    ];\r\n}\r\n", "import { CoordSpace, TonemappingMode, type RGB } from \"./\";\r\nimport type { RenderModuleContext, RenderModule, DerivedRenderState, RenderState, Core3DImports } from \"./\";\r\nimport { glCreateBuffer, glExtensions, glState, glUpdateBuffer, glUBOProxy, glCheckProgram, glCreateTimer, glClear, type StateParams, glLimits } from \"webgl2\";\r\nimport type { UniformsProxy, TextureParamsCubeUncompressedMipMapped, TextureParamsCubeUncompressed, ColorAttachment, ShaderHeaderParams, Timer, DrawStatistics } from \"webgl2\";\r\nimport { matricesFromRenderState } from \"./matrices\";\r\nimport { createViewFrustum } from \"./viewFrustum\";\r\nimport { BufferFlags, RenderBuffers } from \"./buffers\";\r\nimport type { WasmInstance } from \"./wasm\";\r\nimport type { ReadonlyVec3, ReadonlyVec4 } from \"gl-matrix\";\r\nimport { mat3, mat4, vec3, vec4 } from \"gl-matrix\";\r\nimport { ResourceBin } from \"./resource\";\r\nimport type { DeviceProfile } from \"./device\";\r\nimport { orthoNormalBasisMatrixFromPlane } from \"./util\";\r\nimport { createDefaultModules } from \"./modules/default\";\r\n\r\n// the context is re-created from scratch if the underlying webgl2 context is lost\r\n\r\n/** The view specific context for rendering and picking.\r\n * @remarks\r\n * A render context describes a view into which a {@link RenderState} can be rendered.\r\n * It is tightly bound to a HTML canvas and WebGL2RenderingContext.\r\n * Consequently, it will be disposed if the gl context is lost and recreated when the gl context is restored.\r\n * \r\n * The render context must be {@link init | initialized} with an array of {@link RenderModule | render modules}.\r\n * Unused modules may be removed and custom ones inserted here.\r\n * Ordering the modules correctly is important as they are rendered in order.\r\n * The {@link TonemapModule} should be last, as it will copy the HDR render buffers into the output canvas to make things visible.\r\n * \r\n * Features such as async picking and shader linking requires {@link poll} to be called at regular intervals,\r\n * e.g. at the start of each frame.\r\n * Otherwise the promises will never be resolved.\r\n * \r\n * @category Render Module\r\n */\r\nexport class RenderContext {\r\n    /** WebGL2 render context associated with this object. */\r\n    readonly gl: WebGL2RenderingContext;\r\n    /** WebGL common GLSL code header used across shaders. */\r\n    readonly commonChunk: string;\r\n    /** WebGL basic fallback IBL textures to use while loading proper IBL textures. */\r\n    readonly defaultIBLTextureParams: TextureParamsCubeUncompressed;\r\n    /** Web assembly instance. */\r\n    readonly wasm: WasmInstance;\r\n\r\n    private static defaultModules: readonly RenderModule[] | undefined;\r\n    private modules: readonly RenderModuleContext[] | undefined;\r\n    private cameraUniformsData;\r\n    private clippingUniformsData;\r\n    private outlinesUniformsData;\r\n    private localSpaceTranslation = vec3.create() as ReadonlyVec3;\r\n    private readonly asyncPrograms: AsyncProgramInfo[] = [];\r\n    private readonly resourceBins = new Set<ResourceBin>();\r\n    private readonly defaultResourceBin;\r\n    private readonly iblResourceBin;\r\n    private pickBuffersValid = false;\r\n    private currentPick: Uint32Array | undefined;\r\n    private activeTimers = new Set<Timer>();\r\n    private currentFrameTime = 0;\r\n    private statistics = {\r\n        points: 0,\r\n        lines: 0,\r\n        triangles: 0,\r\n        drawCalls: 0,\r\n        primitives: 0,\r\n    };\r\n    private prevFrame: {\r\n        readonly time: number;\r\n        readonly resolve: (interval: number) => void;\r\n    } | undefined;\r\n\r\n    // use a pre-pass to fill in z-buffer for improved fill rate at the expense of triangle rate (useful when doing heavy shading, but unclear how efficient this is on tiled GPUs.)\r\n    //* @internal */\r\n    readonly usePrepass = false;\r\n\r\n    // copy from last rendered state\r\n    private isOrtho = false;\r\n    private viewClipMatrix = mat4.create();\r\n    private viewWorldMatrix = mat4.create();\r\n    private viewWorldMatrixNormal = mat3.create();\r\n\r\n    private viewClipMatrixLastPoll = mat4.create();\r\n    private viewWorldMatrixLastPoll = mat4.create();\r\n\r\n    // constant gl resources\r\n    /** WebGL uniform buffer for camera related uniforms. */\r\n    readonly cameraUniforms: WebGLBuffer;\r\n    /** WebGL uniform buffer for clipping related uniforms. */\r\n    readonly clippingUniforms: WebGLBuffer;\r\n    /** WebGL uniform buffer for outline related uniforms. */\r\n    readonly outlineUniforms: WebGLBuffer;\r\n    /** WebGL GGX/PBR shading lookup table texture. */\r\n    readonly lut_ggx: WebGLTexture;\r\n    /** WebGL Sampler used to sample mipmapped diffuse IBL texture. */\r\n    readonly samplerMip: WebGLSampler; // use to read diffuse texture\r\n    /** WebGL Sampler used to sample other, non-mipmapped IBL textures. */\r\n    readonly samplerSingle: WebGLSampler; // use to read the other textures\r\n\r\n    // shared mutable state\r\n    /** {@link RenderState} used to render the previous frame, if any. */\r\n    prevState: DerivedRenderState | undefined;\r\n\r\n    // shared mutable state\r\n    /** {@link RenderState} used to make the newest state available during render. */\r\n    currentState: DerivedRenderState | undefined;\r\n\r\n    /** Set to true to force a re-render when state not contained in {@link RenderState} has changed, e.g. download complete etc. */\r\n    changed = true;\r\n    /** @internal */\r\n    pause = false; // true to freeze all module updates, e.g. downloading of new geometry etc.\r\n    /** WebGL render and pick buffers\r\n     * @remarks\r\n     * Note that these buffers will be recreated whenever the {@link RenderState.output} size changes.\r\n     */\r\n    buffers: RenderBuffers = undefined!;\r\n\r\n    /** WebGL textures used for image based lighting ({@link https://en.wikipedia.org/wiki/Image-based_lighting | IBL}).\r\n     * @remarks\r\n     * Note that these buffers will be changed by the background module when download of the specified {@link RenderState.background.url} IBL textures completes.\r\n     * \r\n     * The process to create the textures are similar to that of {@link https://github.com/KhronosGroup/glTF-IBL-Sampler}/\r\n     */\r\n    iblTextures: { // these are changed by the background module, once download is complete\r\n        /** WebGL cubemap texture containing the irradiance/diffuse values of current IBL environment. */\r\n        readonly diffuse: WebGLTexture;\r\n        /** WebGL cubemap texture containing the radiance/specular values of current IBL environment. */\r\n        readonly specular: WebGLTexture;\r\n        /** # mip maps in current specular texture. */\r\n        readonly numMipMaps: number;\r\n        /** # True if these are the default IBL textures. */\r\n        readonly default: boolean;\r\n    };\r\n\r\n    /** @internal */\r\n    constructor(\r\n        /** The device profile use for this context. */\r\n        readonly deviceProfile: DeviceProfile,\r\n        /** The HTML canvas used for this context. */\r\n        readonly canvas: HTMLCanvasElement,\r\n        /** Imported resources. */\r\n        readonly imports: Core3DImports,\r\n        webGLOptions?: WebGLContextAttributes,\r\n    ) {\r\n        // init gl context\r\n        const gl = canvas.getContext(\"webgl2\", webGLOptions);\r\n        if (!gl)\r\n            throw new Error(\"Unable to create WebGL 2 context!\");\r\n        this.gl = gl;\r\n        const extensions = glExtensions(gl, true);\r\n        const defaultBin = this.defaultResourceBin = this.resourceBin(\"context\");\r\n        const iblBin = this.iblResourceBin = this.resourceBin(\"ibl\");\r\n        console.assert(extensions.loseContext != null, extensions.multiDraw != null, extensions.colorBufferFloat != null);\r\n        const { provokingVertex } = extensions;\r\n        if (provokingVertex) {\r\n            provokingVertex.provokingVertexWEBGL(provokingVertex.FIRST_VERTEX_CONVENTION_WEBGL);\r\n        }\r\n        this.commonChunk = imports.shaders.common;\r\n        this.wasm = imports.wasmInstance;\r\n\r\n        // ggx lookup texture and ibl samplers\r\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\r\n        const lutParams = { kind: \"TEXTURE_2D\", internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: imports.lutGGX } as const;\r\n        this.lut_ggx = defaultBin.createTexture(lutParams);\r\n        this.samplerSingle = defaultBin.createSampler({ minificationFilter: \"LINEAR\", magnificationFilter: \"LINEAR\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\r\n        this.samplerMip = defaultBin.createSampler({ minificationFilter: \"LINEAR_MIPMAP_LINEAR\", magnificationFilter: \"LINEAR\", wrap: [\"CLAMP_TO_EDGE\", \"CLAMP_TO_EDGE\"] });\r\n\r\n        // create default ibl textures\r\n        const top = new Uint8Array([192, 192, 192, 255]);\r\n        const side = new Uint8Array([128, 128, 128, 255]);\r\n        const bottom = new Uint8Array([64, 64, 64, 255]);\r\n        const image = [side, side, top, bottom, side, side] as const;\r\n        const textureParams = this.defaultIBLTextureParams = { kind: \"TEXTURE_CUBE_MAP\", width: 1, height: 1, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image: image } as const;\r\n        this.iblTextures = {\r\n            diffuse: iblBin.createTexture(textureParams),\r\n            specular: iblBin.createTexture(textureParams),\r\n            numMipMaps: 1,\r\n            default: true,\r\n        };\r\n\r\n        // camera uniforms\r\n        this.cameraUniformsData = glUBOProxy({\r\n            clipViewMatrix: \"mat4\",\r\n            viewClipMatrix: \"mat4\",\r\n            localViewMatrix: \"mat4\",\r\n            viewLocalMatrix: \"mat4\",\r\n            localViewMatrixNormal: \"mat3\",\r\n            viewLocalMatrixNormal: \"mat3\",\r\n            windowSize: \"vec2\",\r\n            near: \"float\",\r\n        });\r\n        this.cameraUniforms = glCreateBuffer(gl, { kind: \"UNIFORM_BUFFER\", byteSize: this.cameraUniformsData.buffer.byteLength });\r\n\r\n        // clipping uniforms\r\n        this.clippingUniformsData = glUBOProxy({\r\n            \"planes.0\": \"vec4\",\r\n            \"planes.1\": \"vec4\",\r\n            \"planes.2\": \"vec4\",\r\n            \"planes.3\": \"vec4\",\r\n            \"planes.4\": \"vec4\",\r\n            \"planes.5\": \"vec4\",\r\n            numPlanes: \"uint\",\r\n            mode: \"uint\",\r\n        });\r\n        this.clippingUniforms = glCreateBuffer(gl, { kind: \"UNIFORM_BUFFER\", byteSize: this.clippingUniformsData.buffer.byteLength });\r\n\r\n        // outlines uniforms\r\n        this.outlinesUniformsData = glUBOProxy({\r\n            localPlaneMatrix: \"mat4\",\r\n            planeLocalMatrix: \"mat4\",\r\n            color: \"vec3\",\r\n            planeIndex: \"int\",\r\n        });\r\n        this.outlineUniforms = glCreateBuffer(gl, { kind: \"UNIFORM_BUFFER\", byteSize: this.outlinesUniformsData.buffer.byteLength });\r\n    }\r\n\r\n    /** Initialize render context with specified render modules.\r\n     * @remarks\r\n     * The default/built-in render modules can be retrieved using {@link createDefaultModules}.\r\n     * These will be used if no modules are specified.\r\n     * Developers may introduce their own render modules here.\r\n     * Note that the order of the modules matters, as this is the order by which they will be rendered.\r\n     */\r\n    async init(modules?: readonly RenderModule[]) {\r\n        // initialize modules\r\n        if (!modules) {\r\n            RenderContext.defaultModules ??= createDefaultModules();\r\n            modules = RenderContext.defaultModules;\r\n        }\r\n        const modulePromises = modules.map((m, i) => {\r\n            const ret = m.withContext(this);\r\n            return isPromise(ret) ? ret : Promise.resolve(ret);\r\n        });\r\n        this.linkAsyncPrograms();\r\n        this.modules = await Promise.all(modulePromises);\r\n    }\r\n\r\n    private linkAsyncPrograms() {\r\n        // link all programs here (this is supposedly faster than interleaving compiles and links)\r\n        const { gl, asyncPrograms } = this;\r\n        for (const { program } of this.asyncPrograms) {\r\n            gl.linkProgram(program);\r\n        }\r\n        gl.useProgram(null);\r\n\r\n        // wait for completion\r\n        const ext = glExtensions(gl).parallelShaderCompile;\r\n        function pollAsyncPrograms() {\r\n            for (let i = 0; i < asyncPrograms.length; i++) {\r\n                const { program, resolve, reject } = asyncPrograms[i];\r\n                if (ext) {\r\n                    if (!gl.getProgramParameter(program, ext.COMPLETION_STATUS_KHR))\r\n                        continue;\r\n                }\r\n                const [info] = asyncPrograms.splice(i--, 1);\r\n                const error = glCheckProgram(gl, info);\r\n                if (error) {\r\n                    reject(error);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n            if (asyncPrograms.length > 0) {\r\n                setTimeout(pollAsyncPrograms);\r\n            }\r\n        }\r\n        pollAsyncPrograms();\r\n    }\r\n\r\n    /**\r\n     * Dispose of the GPU resources used by this context, effectively destroying it and freeing up memory.\r\n     * @remarks\r\n     * Calling this method is optional as the garbage collection of the underlying WebGL render context will do the same thing.\r\n     * This may take some time, however, so calling this function is recommended if you plan to create a new context shortly thereafter.\r\n     */\r\n    dispose() {\r\n        const { buffers, modules, activeTimers, defaultResourceBin, iblResourceBin } = this;\r\n        this.poll(); // finish async stuff\r\n        for (const timer of activeTimers) {\r\n            timer.dispose();\r\n        }\r\n        activeTimers.clear();\r\n        if (modules) {\r\n            for (const module of modules) {\r\n                module?.dispose();\r\n            }\r\n            this.modules = undefined;\r\n        }\r\n        buffers?.dispose();\r\n        iblResourceBin.dispose();\r\n        defaultResourceBin.dispose();\r\n        console.assert(this.resourceBins.size == 0);\r\n    }\r\n\r\n    /** Return the current pixel width of the drawing buffer. */\r\n    get width() {\r\n        return this.gl.drawingBufferWidth;\r\n    }\r\n\r\n    /** Return the current pixel height of the drawing buffer. */\r\n    get height() {\r\n        return this.gl.drawingBufferHeight;\r\n    }\r\n\r\n    /** Query if pick buffers are valid.\r\n     * @remarks This could be useful for optimistic/non-async picking.\r\n     */\r\n    isPickBuffersValid() {\r\n        return this.pickBuffersValid;\r\n    }\r\n\r\n    /** Query whether the underlying WebGL render context is currently lost.\r\n     * @remarks\r\n     * This could occur when too many resources are allocated or when browser window is dragged across screens.\r\n     * Loss and restoration of WebGL contexts is supported by this API automatically.\r\n     */\r\n    isContextLost() {\r\n        return this.gl.isContextLost();\r\n    }\r\n\r\n    /** @internal */\r\n    drawBuffers(buffers: BufferFlags = (BufferFlags.all)): readonly (ColorAttachment | \"NONE\")[] {\r\n        const activeBuffers = buffers; // & this.drawBuffersMask;\r\n        return [\r\n            activeBuffers & BufferFlags.color ? \"COLOR_ATTACHMENT0\" : \"NONE\",\r\n            activeBuffers & BufferFlags.pick ? \"COLOR_ATTACHMENT1\" : \"NONE\",\r\n        ] as const;\r\n    }\r\n\r\n    /** Helper function to update WebGL uniform buffer from proxies. */\r\n    updateUniformBuffer(uniformBuffer: WebGLBuffer, proxy: UniformsProxy) {\r\n        if (!proxy.dirtyRange.isEmpty) {\r\n            const { begin, end } = proxy.dirtyRange;\r\n            glUpdateBuffer(this.gl, { kind: \"UNIFORM_BUFFER\", srcData: proxy.buffer, targetBuffer: uniformBuffer, srcElementOffset: begin, dstByteOffset: begin, byteSize: end - begin });\r\n            proxy.dirtyRange.clear();\r\n        }\r\n    }\r\n\r\n    /** Explicitly update WebGL IBL textures from specified parameters. */\r\n    updateIBLTextures(params: { readonly diffuse: TextureParamsCubeUncompressed, readonly specular: TextureParamsCubeUncompressedMipMapped } | null) {\r\n        const { iblResourceBin } = this;\r\n        iblResourceBin.deleteAll();\r\n        if (params) {\r\n            const { diffuse, specular } = params;\r\n            this.iblTextures = {\r\n                diffuse: iblResourceBin.createTexture(diffuse),\r\n                specular: iblResourceBin.createTexture(specular),\r\n                numMipMaps: typeof specular.mipMaps == \"number\" ? specular.mipMaps : specular.mipMaps.length,\r\n                default: false,\r\n            };\r\n        } else {\r\n            this.iblTextures = {\r\n                diffuse: iblResourceBin.createTexture(this.defaultIBLTextureParams),\r\n                specular: iblResourceBin.createTexture(this.defaultIBLTextureParams),\r\n                numMipMaps: 1,\r\n                default: true,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper function to check for changes in render state.\r\n     * @param state The parts of the render state to check for changes.\r\n     * @returns True if any of the specified parts has changed since last frame.\r\n     * @remarks\r\n     * Since the render state is immutable, any changes will automatically trickle up to the container object as well.\r\n     * Thus, this function does a shallow strict equality of the parts of the renderstate specified in the state parameter.\r\n     * @example\r\n     * Example of how to check for changes in either camera or output render state.\r\n     * ```typescript\r\n     * const {camera, output} = renderState;\r\n     * if(renderContext.hasStateChanged({camera, output})) {\r\n     *   // update related GPU state here...\r\n     * }\r\n     * ```\r\n     */\r\n    hasStateChanged(state: Partial<DerivedRenderState>) {\r\n        const { prevState } = this;\r\n        let changed = false;\r\n        // do a shallow reference comparison of root properties\r\n        for (const prop in state) {\r\n            const p = prop as keyof RenderState;\r\n            if (!prevState || prevState[p] !== state[p]) {\r\n                changed = true;\r\n                break;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /** Create a new named resource bin. */\r\n    resourceBin(name: string) {\r\n        return new ResourceBin(this.gl, name, this.resourceBins);\r\n    }\r\n\r\n    /** Compile WebGL/GLSL shader program asynchronously. */\r\n    makeProgramAsync(resourceBin: ResourceBin, params: AsyncProgramParams) {\r\n        const { gl, commonChunk } = this;\r\n        const { vertexShader, fragmentShader } = params;\r\n        const header = { commonChunk, ...params.header } as const; // inject common shader code here, if not defined in params.\r\n        const programAsync = resourceBin.createProgramAsync({ header, vertexShader, fragmentShader });\r\n        const { program } = programAsync;\r\n\r\n        // do pre-link bindings here\r\n        const { attributes, transformFeedback, uniformBufferBlocks, textureUniforms } = params;\r\n        if (attributes) {\r\n            let i = 0;\r\n            for (const name of attributes) {\r\n                gl.bindAttribLocation(program, i++, name);\r\n            }\r\n        }\r\n        if (transformFeedback) {\r\n            const { varyings, bufferMode } = transformFeedback;\r\n            gl.transformFeedbackVaryings(program, varyings, gl[bufferMode]);\r\n        }\r\n\r\n        return new Promise<WebGLProgram>((resolve, reject) => {\r\n            // do post-link bindings here\r\n            function postLink() {\r\n                gl.useProgram(program);\r\n\r\n                if (uniformBufferBlocks) {\r\n                    let idx = 0;\r\n                    for (const name of uniformBufferBlocks) {\r\n                        if (name) {\r\n                            const blockIndex = gl.getUniformBlockIndex(program, name);\r\n                            if (blockIndex != gl.INVALID_INDEX) {\r\n                                gl.uniformBlockBinding(program, blockIndex, idx);\r\n                            } else {\r\n                                console.warn(`Shader has no uniform block named: ${name}!`);\r\n                            }\r\n                        }\r\n                        idx++;\r\n                    }\r\n                }\r\n\r\n                if (textureUniforms) {\r\n                    let i = 0;\r\n                    for (const name of textureUniforms) {\r\n                        const location = gl.getUniformLocation(program, name);\r\n                        gl.uniform1i(location, i++);\r\n                    }\r\n                }\r\n\r\n                gl.useProgram(null);\r\n                resolve(program);\r\n            }\r\n            this.asyncPrograms.push({ ...programAsync, resolve: postLink, reject });\r\n        });\r\n    }\r\n\r\n    private resetStatistics() {\r\n        const { statistics } = this;\r\n        statistics.points = 0;\r\n        statistics.lines = 0;\r\n        statistics.triangles = 0;\r\n        statistics.drawCalls = 0;\r\n        statistics.primitives = 0;\r\n    }\r\n\r\n    /** @internal */\r\n    addRenderStatistics(stats: DrawStatistics, drawCalls = 1) {\r\n        const { statistics } = this;\r\n        statistics.points += stats.points;\r\n        statistics.lines += stats.lines;\r\n        statistics.triangles += stats.triangles;\r\n        statistics.drawCalls += drawCalls;\r\n    }\r\n\r\n    /** @internal */\r\n    addLoadStatistics(numPrimitives: number) {\r\n        this.statistics.primitives += numPrimitives;\r\n    }\r\n\r\n    /** @internal */\r\n    contextLost() {\r\n        const { modules } = this;\r\n        if (modules) {\r\n            for (const module of modules) {\r\n                module?.contextLost();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    emulateLostContext(value: \"lose\" | \"restore\") {\r\n        const ext = glExtensions(this.gl).loseContext;\r\n        if (ext) {\r\n            if (value == \"lose\") {\r\n                ext.loseContext();\r\n            } else {\r\n                ext.restoreContext();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Poll the status of WebGL pick fences and timers and resolve associated promises when possible. */\r\n    public poll() {\r\n        this.buffers?.pollPickFence();\r\n        this.viewClipMatrixLastPoll = mat4.clone(this.viewClipMatrix);\r\n        this.viewWorldMatrixLastPoll = mat4.clone(this.viewWorldMatrix);\r\n        this.pollTimers();\r\n    }\r\n\r\n    private beginTimer(): Timer {\r\n        const timer = glCreateTimer(this.gl, false);\r\n        this.activeTimers.add(timer);\r\n        timer.begin();\r\n        return timer;\r\n    }\r\n\r\n    private pollTimers() {\r\n        const { activeTimers } = this;\r\n        for (const timer of [...activeTimers]) {\r\n            if (timer.poll()) {\r\n                activeTimers.delete(timer);\r\n                timer.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Wait for the next frame to be ready for rendering.\r\n     * @param context render context to wait for, if any.\r\n     * @remarks Use this function instead of requestAnimationFrame()!\r\n     */\r\n    public static nextFrame(context: RenderContext | undefined): Promise<number> {\r\n        return new Promise<number>((resolve) => {\r\n            requestAnimationFrame((time) => {\r\n                if (context) {\r\n                    const { prevFrame } = context;\r\n                    if (prevFrame) {\r\n                        prevFrame.resolve(time - prevFrame.time);\r\n                        context.prevFrame = undefined;\r\n                    }\r\n                    context.currentFrameTime = time;\r\n                }\r\n                resolve(time);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render a new frame using the specified render state.\r\n     * @param state An object describing what the frame should look like.\r\n     * @returns A promise to the performance related statistics involved in rendering this frame.\r\n     */\r\n    public async render(state: RenderState): Promise<RenderStatistics> {\r\n        if (!this.modules) {\r\n            throw new Error(\"Context has not been initialized!\");\r\n        }\r\n        const beginTime = performance.now();\r\n        const { gl, canvas, prevState } = this;\r\n        this.changed = false;\r\n\r\n        this.resetStatistics();\r\n\r\n        const drawTimer = this.beginTimer();\r\n\r\n        const { MAX_SAMPLES } = glLimits(gl);\r\n        const effectiveSamplesMSAA = Math.max(1, Math.min(MAX_SAMPLES, Math.min(this.deviceProfile.limits.maxSamples, state.output.samplesMSAA)));\r\n\r\n        // handle resizes\r\n        let resized = false;\r\n        const { output } = state;\r\n        if (this.hasStateChanged({ output })) {\r\n            const { width, height } = output;\r\n            console.assert(Number.isInteger(width) && Number.isInteger(height));\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            resized = true;\r\n            this.changed = true;\r\n            this.buffers?.dispose();\r\n            this.buffers = new RenderBuffers(gl, width, height, effectiveSamplesMSAA, this.resourceBin(\"FrameBuffers\"));\r\n        }\r\n\r\n        type Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n        const derivedState = state as Mutable<DerivedRenderState>;\r\n        derivedState.effectiveSamplesMSAA = effectiveSamplesMSAA;\r\n        if (resized || state.camera !== prevState?.camera) {\r\n            const snapDist = 1024; // make local space roughly within 1KM of camera\r\n            const dir = vec3.sub(vec3.create(), state.camera.position, this.localSpaceTranslation).map(c => Math.abs(c));\r\n            const dist = Math.max(dir[0], dir[2]) //Skip Y as we will not get an issue with large Y offset and we elevations internally in shader.\r\n            // don't change localspace unless camera is far enough away. we want to avoid flipping back and forth across snap boundaries.\r\n            if (dist >= snapDist) {\r\n                function snap(v: number) {\r\n                    return Math.round(v / snapDist) * snapDist;\r\n                }\r\n                this.localSpaceTranslation = vec3.fromValues(snap(state.camera.position[0]), 0, snap(state.camera.position[2]));\r\n            }\r\n\r\n            derivedState.localSpaceTranslation = this.localSpaceTranslation; // update the object reference to indicate that values have changed\r\n            derivedState.matrices = matricesFromRenderState(state);\r\n            derivedState.viewFrustum = createViewFrustum(state, derivedState.matrices);\r\n        }\r\n        this.currentState = derivedState;\r\n        this.pickBuffersValid = false;\r\n\r\n        this.updateCameraUniforms(derivedState);\r\n        this.updateClippingUniforms(derivedState);\r\n\r\n        // update internal state\r\n        this.isOrtho = derivedState.camera.kind == \"orthographic\";\r\n        mat4.copy(this.viewClipMatrix, derivedState.matrices.getMatrix(CoordSpace.View, CoordSpace.Clip));\r\n        mat4.copy(this.viewWorldMatrix, derivedState.matrices.getMatrix(CoordSpace.View, CoordSpace.World));\r\n        mat3.copy(this.viewWorldMatrixNormal, derivedState.matrices.getMatrixNormal(CoordSpace.View, CoordSpace.World));\r\n\r\n        // update modules from state\r\n        if (!this.pause) {\r\n            for (const module of this.modules) {\r\n                module?.update(derivedState);\r\n            }\r\n        }\r\n\r\n        // link any updates programs asynchronously here\r\n        this.linkAsyncPrograms();\r\n\r\n        // pick frame buffer and clear z-buffer\r\n        const { width, height } = canvas;\r\n        const { buffers } = this;\r\n        buffers.readBuffersNeedUpdate = true;\r\n        const frameBufferName = effectiveSamplesMSAA > 1 ? \"colorMSAA\" : \"color\";\r\n        const frameBuffer = buffers.frameBuffers[frameBufferName];\r\n        buffers.invalidate(frameBufferName, BufferFlags.all);\r\n        glState(gl, { viewport: { width, height }, frameBuffer });\r\n        glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 });\r\n\r\n        // apply module render z-buffer pre-pass\r\n        if (this.usePrepass) {\r\n            for (const module of this.modules) {\r\n                if (module && module.prepass) {\r\n                    glState(gl, {\r\n                        viewport: { width, height },\r\n                        frameBuffer,\r\n                        drawBuffers: [],\r\n                        // colorMask: [false, false, false, false],\r\n                    });\r\n                    module.prepass(derivedState);\r\n                    // reset gl state\r\n                    glState(gl, null);\r\n                }\r\n            }\r\n        }\r\n\r\n        // render modules\r\n        for (const module of this.modules) {\r\n            if (module) {\r\n                glState(gl, {\r\n                    viewport: { width, height },\r\n                    frameBuffer,\r\n                    drawBuffers: this.drawBuffers(BufferFlags.color),\r\n                    sample: { alphaToCoverage: effectiveSamplesMSAA > 1 },\r\n                });\r\n                module.render(derivedState);\r\n                // reset gl state\r\n                glState(gl, null);\r\n            }\r\n        }\r\n\r\n        drawTimer.end();\r\n\r\n        // invalidate color and depth buffers only (we may need pick buffers for picking)\r\n        this.buffers.invalidate(\"colorMSAA\", BufferFlags.color | BufferFlags.depth);\r\n        this.buffers.invalidate(\"color\", BufferFlags.color | BufferFlags.depth);\r\n        this.prevState = derivedState;\r\n        const endTime = performance.now();\r\n\r\n        const intervalPromise = new Promise<number>((resolve) => {\r\n            this.prevFrame = { time: this.currentFrameTime, resolve };\r\n        });\r\n\r\n        const stats = { ...this.statistics, bufferBytes: 0, textureBytes: 0 };\r\n        for (const bin of this.resourceBins) {\r\n            for (const { kind, byteSize } of bin.resourceInfo) {\r\n                if (kind == \"Buffer\" || kind == \"Renderbuffer\") {\r\n                    stats.bufferBytes += byteSize!;\r\n                }\r\n                if (kind == \"Texture\") {\r\n                    stats.textureBytes += byteSize!;\r\n                }\r\n            }\r\n        }\r\n\r\n        const [gpuDrawTime, frameInterval] = await Promise.all([drawTimer.promise, intervalPromise]);\r\n\r\n        return {\r\n            cpuTime: {\r\n                draw: endTime - beginTime,\r\n            },\r\n            gpuTime: {\r\n                draw: gpuDrawTime,\r\n            },\r\n            frameInterval,\r\n            ...stats\r\n        } as const satisfies RenderStatistics;\r\n    }\r\n\r\n    //* @internal */\r\n    clearPickBuffers() {\r\n        glClear(this.gl, { kind: \"COLOR\", drawBuffer: 1, type: \"Uint\", color: [0xffffffff, 0x0000_0000, 0x0000_0000, 0x0000_0000] }); // 0xffff is bit-encoding for Float16.nan. (https://en.wikipedia.org/wiki/Half-precision_floating-point_format)\r\n    }\r\n\r\n    //* @internal */\r\n    renderPickBuffers() {\r\n        if (!this.pickBuffersValid) {\r\n            if (!this.modules) {\r\n                throw new Error(\"Context has not been initialized!\");\r\n            }\r\n            const { gl, width, height, buffers, currentState } = this;\r\n            if (!currentState) {\r\n                throw new Error(\"render() was not called!\"); // we assume render() has been called first\r\n            }\r\n\r\n            const stateParams: StateParams = {\r\n                viewport: { width, height },\r\n                frameBuffer: buffers.frameBuffers.pick,\r\n                drawBuffers: this.drawBuffers(BufferFlags.pick),\r\n                depth: { test: true, writeMask: true },\r\n            };\r\n            glState(gl, stateParams);\r\n            glClear(gl, { kind: \"DEPTH_STENCIL\", depth: 1.0, stencil: 0 }); // we need to clear (again) since depth might be different for pick and color renders and we're also not using MSAA depth buffer.\r\n            // glClear(gl, { kind: \"COLOR\", drawBuffer: 1, type: \"Float\", color: [Number.POSITIVE_INFINITY, 0, 0, 0] });\r\n            this.clearPickBuffers();\r\n\r\n            for (const module of this.modules) {\r\n                if (module) {\r\n                    glState(gl, stateParams);\r\n                    module.pick?.(currentState);\r\n                    // reset gl state\r\n                    glState(gl, null);\r\n                }\r\n            }\r\n\r\n            if (currentState.tonemapping.mode != TonemappingMode.color) {\r\n                console.log(\"debug\");\r\n                // update debug display\r\n                const tonemapModule = this.modules?.find(m => m.module.kind == \"tonemap\");\r\n                glState(gl, { viewport: { width, height } });\r\n\r\n                // glState(gl, {\r\n                //     viewport: { width, height },\r\n                //     frameBuffer: this.buffers.frameBuffers[\"color\"],\r\n                //     drawBuffers: this.drawBuffers(BufferFlags.color),\r\n                // });\r\n\r\n                tonemapModule?.render(currentState);\r\n                // reset gl state\r\n                glState(gl, null);\r\n            }\r\n            this.pickBuffersValid = true;\r\n        }\r\n    }\r\n\r\n    //* @internal */\r\n    *getLinearDepths(pick: Uint32Array): IterableIterator<number> {\r\n        const floats = new Float32Array(pick.buffer);\r\n        for (let i = 3; i < pick.length; i += 4) {\r\n            yield floats[i];\r\n        }\r\n    }\r\n\r\n    //* @internal */\r\n    getOutlineObjects(pick: Uint32Array) {\r\n        const objs = new Set<number>();\r\n        for (let i = 0; i < pick.length; i += 4) {\r\n            const objectId = pick[i];\r\n            if (objectId < 0xf000_0000 && (objectId & (1 << 31)) != 0) {\r\n                objs.add(objectId & ~(1 << 31));\r\n            }\r\n        }\r\n        return objs;\r\n    }\r\n\r\n    /**\r\n* scan the pick buffer for deviation values\r\n* @returns Return pixel coordinates and deviation values for any deviation on screen \r\n*/\r\n    async getDeviations(): Promise<DeviationSample[]> {\r\n        this.renderPickBuffers();\r\n        const pickBufferPromise = this.buffers.pickBuffers();\r\n        this.currentPick = (await pickBufferPromise).pick;\r\n        const { currentPick, width, height, canvas, wasm } = this;\r\n        if (currentPick === undefined || width * height * 4 != currentPick.length) {\r\n            return [];\r\n        }\r\n\r\n        const u16 = new Uint16Array(currentPick.buffer);\r\n        const floats = new Float32Array(currentPick.buffer);\r\n        const samples: DeviationSample[] = [];\r\n        const { isOrtho, viewClipMatrixLastPoll, viewWorldMatrixLastPoll } = this;\r\n        for (let iy = 0; iy < height; iy++) {\r\n            for (let ix = 0; ix < width; ix++) {\r\n                const buffOffs = ix + iy * width;\r\n                const objectId = currentPick[buffOffs * 4];\r\n                if (objectId != 0xffffffff) {\r\n                    const deviation16 = u16[buffOffs * 8 + 5];\r\n                    const dev32 = wasm.float32(deviation16);\r\n                    const deviation = deviation16 !== 0 ? dev32 : undefined;\r\n\r\n                    if (deviation) {\r\n                        const depth = floats[buffOffs * 4 + 3];\r\n\r\n                        const xCS = ((ix + 0.5) / width) * 2 - 1;\r\n                        const yCS = ((iy + 0.5) / height) * 2 - 1;\r\n\r\n                        // compute view space position and normal\r\n                        const scale = isOrtho ? 1 : depth;\r\n                        const posVS = vec3.fromValues((xCS / viewClipMatrixLastPoll[0]) * scale, (yCS / viewClipMatrixLastPoll[5]) * scale, -depth);\r\n                        // convert into world space.\r\n                        const position = vec3.transformMat4(vec3.create(), posVS, viewWorldMatrixLastPoll);\r\n\r\n                        samples.push({ x: ix, y: height - iy, deviation, position });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return samples;\r\n    }\r\n\r\n    private updateCameraUniforms(state: DerivedRenderState) {\r\n        const { cameraUniformsData, localSpaceTranslation } = this;\r\n        const { output, camera, matrices } = state;\r\n        const { values } = cameraUniformsData;\r\n        const worldViewMatrix = matrices.getMatrix(CoordSpace.World, CoordSpace.View);\r\n        const viewWorldMatrix = matrices.getMatrix(CoordSpace.View, CoordSpace.World);\r\n        const worldLocalMatrix = mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), localSpaceTranslation));\r\n        const localWorldMatrix = mat4.fromTranslation(mat4.create(), localSpaceTranslation);\r\n        values.clipViewMatrix = matrices.getMatrix(CoordSpace.Clip, CoordSpace.View);\r\n        values.viewClipMatrix = matrices.getMatrix(CoordSpace.View, CoordSpace.Clip);\r\n        values.viewClipMatrix = matrices.getMatrix(CoordSpace.View, CoordSpace.Clip);\r\n        values.localViewMatrix = mat4.multiply(mat4.create(), worldViewMatrix, localWorldMatrix);\r\n        values.viewLocalMatrix = mat4.multiply(mat4.create(), worldLocalMatrix, viewWorldMatrix,);\r\n        values.localViewMatrixNormal = matrices.getMatrixNormal(CoordSpace.World, CoordSpace.View);\r\n        values.viewLocalMatrixNormal = matrices.getMatrixNormal(CoordSpace.View, CoordSpace.World);\r\n        values.windowSize = [output.width, output.height];\r\n        values.near = camera.near;\r\n        this.updateUniformBuffer(this.cameraUniforms, this.cameraUniformsData);\r\n    }\r\n\r\n    private updateClippingUniforms(state: DerivedRenderState) {\r\n        const { clipping, matrices } = state;\r\n        if (this.hasStateChanged({ clipping, matrices })) {\r\n            const { clippingUniforms, clippingUniformsData } = this;\r\n            const { values } = clippingUniformsData;\r\n            const { enabled, mode, planes } = clipping;\r\n            // transform clipping planes into view space\r\n            const normal = vec3.create();\r\n            const position = vec3.create();\r\n            const matrix = matrices.getMatrix(CoordSpace.World, CoordSpace.View);\r\n            const matrixNormal = matrices.getMatrixNormal(CoordSpace.World, CoordSpace.View);\r\n            mat4.getTranslation(position, matrix);\r\n            for (let i = 0; i < planes.length; i++) {\r\n                const { normalOffset } = planes[i];\r\n                const [x, y, z, offset] = normalOffset;\r\n                vec3.set(normal, x, y, z);\r\n                vec3.transformMat3(normal, normal, matrixNormal);\r\n                const distance = offset + vec3.dot(position, normal);\r\n                const plane = vec4.fromValues(normal[0], normal[1], normal[2], -distance);\r\n                const idx = i as 0 | 1 | 2 | 3 | 4 | 5;\r\n                values[`planes.${idx}` as const] = plane;\r\n            }\r\n            values[\"numPlanes\"] = enabled ? planes.length : 0;\r\n            values[\"mode\"] = mode;\r\n            this.updateUniformBuffer(clippingUniforms, clippingUniformsData);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    updateOutlinesUniforms(plane: ReadonlyVec4, color: RGB, planeIndex: number) {\r\n        const { outlineUniforms, outlinesUniformsData } = this;\r\n        // transform outline plane into local space\r\n        const [x, y, z, offset] = plane;\r\n        const normal = vec3.fromValues(x, y, z);\r\n        const distance = -offset - vec3.dot(this.localSpaceTranslation, normal);\r\n        // const margin = 0.001; // add a tiny margin so that these lines aren't clipped by the clipping plane itself\r\n        const planeLS = vec4.fromValues(normal[0], normal[1], normal[2], -distance);\r\n        // compute plane projection matrices\r\n        // const localPlaneMatrix = othoNormalBasisMatrixFromPlane(planeLS);\r\n        // const planeLocalMatrix = mat4.invert(mat4.create(), localPlaneMatrix);\r\n        const planeLocalMatrix = orthoNormalBasisMatrixFromPlane(planeLS);\r\n        const localPlaneMatrix = mat4.invert(mat4.create(), planeLocalMatrix);\r\n        // set uniform values\r\n        const { values } = outlinesUniformsData;\r\n        values.planeLocalMatrix = planeLocalMatrix;\r\n        values.localPlaneMatrix = localPlaneMatrix;\r\n        values.color = color;\r\n        values.planeIndex = planeIndex;\r\n        this.updateUniformBuffer(outlineUniforms, outlinesUniformsData);\r\n    }\r\n\r\n    private extractPick(pickBuffer: Uint32Array, x: number, y: number, sampleDiscRadius: number, pickCameraPlane: boolean) {\r\n        const { canvas, wasm, width, height } = this;\r\n        const rect = canvas.getBoundingClientRect(); // dim in css pixels\r\n        const cssWidth = rect.width;\r\n        const cssHeight = rect.height;\r\n        // convert to pixel coords\r\n        const px = Math.min(Math.max(0, Math.round(x / cssWidth * width)), width);\r\n        const py = Math.min(Math.max(0, Math.round((1 - (y + 0.5) / cssHeight) * height)), height);\r\n\r\n        const floats = new Float32Array(pickBuffer.buffer);\r\n\r\n        // fetch sample rectangle from read buffers\r\n        const r = Math.ceil(sampleDiscRadius);\r\n        const r2 = sampleDiscRadius * sampleDiscRadius;\r\n        let x0 = px - r;\r\n        let x1 = px + r + 1;\r\n        let y0 = py - r;\r\n        let y1 = py + r + 1;\r\n        if (x0 < 0) x0 = 0;\r\n        if (x1 > width) x1 = width;\r\n        if (y0 < 0) y0 = 0;\r\n        if (y1 > height) y1 = height;\r\n        const samples: PickSample[] = [];\r\n        const { isOrtho, viewClipMatrixLastPoll, viewWorldMatrixLastPoll } = this;\r\n        const f16Max = 65504;\r\n\r\n        for (let iy = y0; iy < y1; iy++) {\r\n            const dy = iy - py;\r\n            for (let ix = x0; ix < x1; ix++) {\r\n                const dx = ix - px;\r\n                if (dx * dx + dy * dy > r2)\r\n                    continue; // filter out samples that lie outside sample disc radius\r\n                const buffOffs = ix + iy * width;\r\n                let objectId = pickBuffer[buffOffs * 4];\r\n                if (objectId != 0xffffffff) {\r\n                    const isReservedId = objectId >= 0xf000_0000\r\n                    const depth = pickCameraPlane ? 0 : floats[buffOffs * 4 + 3];\r\n                    const [nx16, ny16, nz16, deviation16] = new Uint16Array(pickBuffer.buffer, buffOffs * 16 + 4, 4);\r\n                    const nx = wasm.float32(nx16);\r\n                    const ny = wasm.float32(ny16);\r\n                    const nz = wasm.float32(nz16);\r\n                    const dev32 = wasm.float32(deviation16);\r\n                    const deviation = deviation16 !== 0 ? dev32 : undefined;\r\n\r\n                    // compute normal\r\n                    // compute clip space x,y coords\r\n                    const xCS = ((ix + 0.5) / width) * 2 - 1;\r\n                    const yCS = ((iy + 0.5) / height) * 2 - 1;\r\n\r\n                    // compute view space position and normal\r\n                    const scale = isOrtho ? 1 : depth;\r\n\r\n                    const posVS = vec3.fromValues((xCS / viewClipMatrixLastPoll[0]) * scale, (yCS / viewClipMatrixLastPoll[5]) * scale, -depth);\r\n\r\n                    // convert into world space.\r\n                    const position = vec3.transformMat4(vec3.create(), posVS, viewWorldMatrixLastPoll);\r\n                    const normal = vec3.fromValues(nx, ny, nz);\r\n                    vec3.normalize(normal, normal);\r\n                    const clippingOutline = isReservedId ? false : (objectId & (1 << 31)) != 0;\r\n                    objectId = isReservedId ? objectId : objectId & ~(1 << 31);\r\n\r\n                    const sample = { x: ix - px, y: iy - py, position, normal, objectId, deviation, depth, clippingOutline } as const;\r\n                    samples.push(sample);\r\n                }\r\n            }\r\n        }\r\n        return samples;\r\n    }\r\n\r\n    /**\r\n     * Pick information about underlying object and geometry.\r\n     * @param x Center x coordinate in CSS pixels.\r\n     * @param y Center y coordinate in CSS pixels.\r\n     * @param options More details of pick operation.\r\n     * @returns A set of pick samples of the specified sample disc.\r\n     */\r\n    async pick(x: number, y: number, options?: PickOptions): Promise<PickSample[]> {\r\n        const sampleDiscRadius = options?.sampleDiscRadius ?? 0;\r\n        const callAsync = options?.async ?? true;\r\n        const pickCameraPlane = options?.pickCameraPlane ?? false;\r\n        if (sampleDiscRadius < 0)\r\n            return [];\r\n        this.renderPickBuffers();\r\n        const pickBufferPromise = this.buffers.pickBuffers();\r\n        if (callAsync) {\r\n            this.currentPick = (await pickBufferPromise).pick;\r\n        } else {\r\n            pickBufferPromise.then(({ pick }) => { this.currentPick = pick });\r\n        }\r\n        const { currentPick, width, height } = this;\r\n        if (currentPick === undefined || width * height * 4 != currentPick.length) {\r\n            return [];\r\n        }\r\n        return this.extractPick(currentPick, x, y, sampleDiscRadius, pickCameraPlane);\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction isPromise<T>(promise: T | Promise<T>): promise is Promise<T> {\r\n    return !!promise && typeof Reflect.get(promise, \"then\") === \"function\";\r\n}\r\n\r\n/**\r\n * Deviation sampled from screen\r\n */\r\nexport interface DeviationSample {\r\n    /** x coordinate in pixel space */\r\n    readonly x: number;\r\n    /** y coordinate in pixel space */\r\n    readonly y: number;\r\n    /** World space position of underlying pixel. */\r\n    readonly position: ReadonlyVec3;\r\n    /** The spatial deviation of underlying pixel.\r\n     * @remarks This only applies to point clouds with precomputed deviation data.\r\n     */\r\n    readonly deviation: number;\r\n}\r\n\r\n/**\r\n * Pick Sample information \r\n */\r\nexport interface PickSample {\r\n    /** relative x pixel offset (not css pixel) from pick center. */\r\n    readonly x: number;\r\n    /** relative y pixel offset (not css pixel) from pick center. */\r\n    readonly y: number;\r\n    /** World space position of underlying pixel. */\r\n    readonly position: ReadonlyVec3;\r\n    /** World space normal of underlying pixel. */\r\n    readonly normal: ReadonlyVec3;\r\n    /** The object id/index of underlying pixel. */\r\n    readonly objectId: number;\r\n    /** The spatial deviation of underlying pixel, if any.\r\n     * @remarks This only applies to point clouds with precomputed deviation data.\r\n     */\r\n    readonly deviation?: number;\r\n    /** The depth/distance from the view plane. */\r\n    readonly depth: number;\r\n    /** The picked pixel is part of clipping outline */\r\n    readonly clippingOutline: boolean;\r\n};\r\n\r\n/** Extra pick options. */\r\nexport interface PickOptions {\r\n    /** The radius of the sample disc (0 yields a single pixel). */\r\n    readonly sampleDiscRadius?: number,\r\n    /** True to wait for the pick buffers to be available, false to return whatever is in the current pick buffer synchronously.\r\n     * @remarks The latter option is more error prone, but useful for e.g. mouse hover operations.\r\n     */\r\n    readonly async?: boolean;\r\n    /** Return pick without depth. */\r\n    readonly pickCameraPlane?: boolean;\r\n    /** Return only picked pixels with clipping outline. */\r\n    readonly pickOutline?: boolean;\r\n}\r\n\r\n/** Parameters for asynchronous shader compilation and linking. */\r\nexport interface AsyncProgramParams {\r\n    /** Common GLSL header information to be inserted before the body code. */\r\n    readonly header?: Partial<ShaderHeaderParams>;\r\n    /** The vertex shader. */\r\n    readonly vertexShader: string;\r\n    /** The fragment shader (optional with transform feedback shaders). */\r\n    readonly fragmentShader?: string;\r\n    /** The names of the vertex attributes to be bound prior to linking using gl.bindAttribLocation(). */\r\n    readonly attributes?: readonly string[]; // The names of the vertex attributes to be bound using gl.bindAttribLocation().\r\n    /** The names of the shader uniform blocks to be bound prior to linking using gl.uniformBlockBinding(), in the order which they appear */\r\n    readonly uniformBufferBlocks?: readonly string[];\r\n    /** Texture uniforms to be bound post-linking. */\r\n    readonly textureUniforms?: readonly string[]; // Texture uniforms will be bound to the index in which they appear in the name array.\r\n    /** Transform feedback buffers to be bound post-linking. */\r\n    readonly transformFeedback?: {\r\n        /** Should output attributes be written into a single interleaved buffer or separate buffers? */\r\n        readonly bufferMode: \"INTERLEAVED_ATTRIBS\" | \"SEPARATE_ATTRIBS\";\r\n        /** Name of output attribute names (varyings). */\r\n        readonly varyings: readonly string[];\r\n    };\r\n}\r\n\r\n/** @internal */\r\ninterface AsyncProgramInfo {\r\n    readonly program: WebGLProgram;\r\n    readonly vertex: WebGLShader;\r\n    readonly fragment: WebGLShader;\r\n    readonly resolve: () => void;\r\n    readonly reject: (reason: any) => void;\r\n}\r\n\r\n/** Render frame performance and resource usage statistics. */\r\nexport interface RenderStatistics {\r\n    /** Estimated # bytes used by WebGL buffers for this frame. */\r\n    readonly bufferBytes: number;\r\n    /** Estimated # bytes uses by WebGL textures for this frame. */\r\n    readonly textureBytes: number;\r\n    /** # of points drawn in this frame. */\r\n    readonly points: number;\r\n    /** # of lines drawn in this frame. */\r\n    readonly lines: number;\r\n    /** # of triangles drawn in this frame. */\r\n    readonly triangles: number;\r\n    /** # of draw calls in this frame. */\r\n    readonly drawCalls: number;\r\n    /** # of primitives (points+lines+triangles) drawn by static geometry for this frame. */\r\n    readonly primitives: number;\r\n    /** Time spent in the main thread. */\r\n    readonly cpuTime: {\r\n        /** # CPU milliseconds spent rendering. */\r\n        readonly draw: number;\r\n    }\r\n    /** Time spent in the GPU. */\r\n    readonly gpuTime: {\r\n        /** # GPU milliseconds spent rendering, if supported by driver. */\r\n        readonly draw: number | undefined;\r\n    }\r\n    /** Effective interval in milliseconds since last frame was drawn. */\r\n    readonly frameInterval: number;\r\n};\r\n", "import type { DeviceProfile } from \".\";\r\nimport { RenderContext } from \"./context\";\r\nimport type { Core3DImports } from \"./imports\";\r\n\r\n/**\r\n * Create and initialize the core 3D render context.\r\n * @param deviceProfile Details about the device on which we're running.\r\n * @param canvas The html canvas to render to.\r\n * @param imports Non-js resource imports.\r\n * @param setRenderContext A callback function to call whenever the render context changes.\r\n * @returns A method to explicitly set new device profile (from user input or debugging purposes).\r\n * This is a relatively low-level API that is aimed at advanced developers only.\r\n * You should call this method once for each view that you wish to render.\r\n * It will not return a {@link RenderContext} immediately, since that object is tied to a WebGLRenderingContext, which can be lost and recreated.\r\n * Instead it will call your setback function, either when the render context is ready or restored.\r\n * You can check {@link RenderContext.isContextLost} to see if the underlying WebGLRenderingContext is lost or not.\r\n * Changes to device profile will force a recreation of the entire context and should generally be avoided.\r\n * @category Render View\r\n */\r\nexport function initCore3D(deviceProfile: DeviceProfile, canvas: HTMLCanvasElement, imports: Core3DImports, setRenderContext: (context: RenderContext) => void) {\r\n    const options: WebGLContextAttributes = {\r\n        alpha: true,\r\n        antialias: true,\r\n        depth: false,\r\n        desynchronized: false,\r\n        failIfMajorPerformanceCaveat: true,\r\n        powerPreference: \"high-performance\",\r\n        premultipliedAlpha: true,\r\n        preserveDrawingBuffer: true,\r\n        stencil: false,\r\n    };\r\n\r\n    let renderContext: RenderContext | undefined;\r\n    let context = { renderContext: undefined as RenderContext | undefined };\r\n\r\n    let animId: number | undefined;\r\n    canvas.addEventListener(\"webglcontextlost\", function (event: WebGLContextEvent) {\r\n        event.preventDefault();\r\n        console.info(\"WebGL Context lost!\");\r\n        if (renderContext) {\r\n            renderContext.contextLost();\r\n            context.renderContext = undefined;\r\n        }\r\n        // trigger a reset of canvas on safari.\r\n        canvas.width = 300;\r\n        canvas.height = 150;\r\n        if (animId !== undefined)\r\n            cancelAnimationFrame(animId);\r\n        animId = undefined;\r\n    } as (event: Event) => void, false);\r\n\r\n    canvas.addEventListener(\"webglcontextrestored\", function (event: WebGLContextEvent) {\r\n        console.info(\"WebGL Context restored!\");\r\n        createContext();\r\n    } as (event: Event) => void, false);\r\n\r\n    async function createContext() {\r\n        renderContext = new RenderContext(deviceProfile, canvas, imports, options);\r\n        await renderContext.init();\r\n        setRenderContext(renderContext);\r\n    }\r\n    createContext();\r\n\r\n    // return a method to update device profile and recreate renderContext\r\n    return async (value: DeviceProfile) => {\r\n        deviceProfile = value;\r\n        await createContext();\r\n    }\r\n}\r\n", "import type { WasmInstance } from \"core3d\";\r\nimport type { ShaderImports } from \"core3d/shaders\";\r\nimport type { TextureImageSource } from \"webgl2\";\r\n\r\n/**\r\n *  Core3D bundler/build resource imports.\r\n * @remarks\r\n * In order to adapt to any build/bundler system and inlining preferences, we declare all non-javascript imported resources here.\r\n * These must be created by some external function that is specific to your build/bundler environment.\r\n * @category Render View\r\n */\r\nexport interface Core3DImports {\r\n    /** The GGX shader lookup image.\r\n     * @remarks This image can be found in `core3d/lut_ggx.png`.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CreateImageBitmap | createImageBitmap}\r\n     */\r\n    readonly lutGGX: TextureImageSource;\r\n\r\n    /** The web assembly instance.\r\n     * @remarks This web assembly can be found in `core3d/wasm/main.wasm`.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running | Loading and running WebAssembly code}\r\n     */\r\n    readonly wasmInstance: WasmInstance;\r\n\r\n    /** The web assembly instance.\r\n     * @remarks This web assembly can be found in `@novorender/wasm-parser/wasm_parser_bg.wasm`.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running | Loading and running WebAssembly code}\r\n     */\r\n    readonly parserWasm: ArrayBuffer;\r\n\r\n    /** The scene load/parse worker.\r\n     * @remarks This worker root can be found in `core3d/modules/octree/worker/index.ts`.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker | Worker: Worker() constructor}\r\n     */\r\n    readonly loaderWorker: Worker;\r\n\r\n    /** The watermark logo data.\r\n     * @remarks This file can be found in `core3d/modules/watermark/logo.bin`.\r\n     */\r\n    readonly logo: ArrayBuffer;\r\n\r\n    /** GLSL shader imports.\r\n     * @remarks The shaders can be found in `core3d/imports/shaders.ts`.\r\n     */\r\n    readonly shaders: ShaderImports;\r\n}\r\n\r\n\r\n/**\r\n * A map describing inlined resources, or urls where to fetch them.\r\n */\r\nexport interface Core3DImportMap {\r\n    /** The base url to be applied to the other URLs.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL}\r\n     */\r\n    readonly baseUrl: URL;\r\n\r\n    /** Inlined GGX lookup texture as Blob or ImageBitmap, or URL to download.\r\n     * @defaultValue `\"./lut_ggx.png\"`\r\n     * @remarks Blobs should have their type set to the proper MIME type, e.g. `type: \"image/png\"`.\r\n     */\r\n    readonly lutGGX?: string | URL | Blob | ImageBitmap;\r\n\r\n    /** Inlined WASM instance, or URL to download.\r\n     * @defaultValue `\"./main.wasm\"`\r\n     */\r\n    readonly wasmInstance?: string | URL | WasmInstance;\r\n\r\n    /** Inlined WASM data, or URL to download.\r\n     * @defaultValue `\"./parser.wasm\"`\r\n     */\r\n    readonly parserWasm?: string | URL | ArrayBuffer;\r\n\r\n    /** Inlined loader worker, or URL to download.\r\n     * @defaultValue `\"./loaderWorker.js\"`\r\n     */\r\n    readonly loaderWorker?: string | URL | Worker;\r\n\r\n    /** Inlined Logo, or URL to download.\r\n     * @defaultValue `\"./logo.bin\"`\r\n     */\r\n    readonly logo?: string | URL | ArrayBuffer;\r\n\r\n    /** Inlined shaders, or URL to download.\r\n     * @defaultValue `\"./shaders.js\"`\r\n     */\r\n    readonly shaders?: string | URL | ShaderImports;\r\n}\r\n\r\n/** Download any missing imports.\r\n * @param map URLs or bundled asset map.\r\n * @remarks\r\n * This function will attempt to download any resource not inlined from the specified urls,\r\n * using the specified {@link Core3DImportMap.baseUrl | baseUrl}.\r\n * If map is undefined, it will look for the files in the same folder as the current script.\r\n *\r\n * @category Render View\r\n */\r\nexport async function downloadCore3dImports(map: Core3DImportMap): Promise<Core3DImports> {\r\n    const { baseUrl } = map;\r\n    const loaderWorker = getWorker(map.loaderWorker ?? \"./loaderWorker.js\", baseUrl);\r\n    const lutGGXPromise = getLutGGX(map.lutGGX ?? \"./lut_ggx.png\", baseUrl);\r\n    const wasmInstancePromise = getInstance(map.wasmInstance ?? \"./main.wasm\", baseUrl);\r\n    const parserWasmPromise = getArrayBuffer(map.parserWasm ?? \"./parser.wasm\", baseUrl);\r\n    const shadersPromise = getShaders(map.shaders ?? \"./shaders.js\", baseUrl);\r\n    const logoPromise = getLogo(map.logo ?? \"./logo.bin\", baseUrl);\r\n    const [lutGGX, wasmInstance, parserWasm, shaders, logo] =\r\n        await Promise.all([lutGGXPromise, wasmInstancePromise, parserWasmPromise, shadersPromise, logoPromise]);\r\n    return { lutGGX, wasmInstance, parserWasm, loaderWorker, shaders, logo };\r\n}\r\n\r\nasync function download<T extends \"text\" | \"json\" | \"blob\" | \"arrayBuffer\" | \"formData\">(url: URL, kind: T) {\r\n    const response = await fetch(url, { mode: \"cors\" });\r\n    if (!response.ok)\r\n        throw new Error(`HTTP error ${response.status}: ${response.statusText}!`);\r\n    return await (response[kind]() as ReturnType<Response[T]>);\r\n}\r\n\r\nfunction isUrl(url: unknown): url is string | URL {\r\n    return typeof url == \"string\" || url instanceof URL;\r\n}\r\n\r\nasync function getLutGGX(arg: string | URL | Blob | ImageBitmap, baseUrl?: string | URL) {\r\n    let blob: Blob | undefined;\r\n    if (isUrl(arg)) {\r\n        const url = new URL(arg, baseUrl);\r\n        blob = await download(url, \"blob\");\r\n    } else if (arg instanceof Blob) {\r\n        blob = arg;\r\n    } else {\r\n        return arg;\r\n    }\r\n    return await createImageBitmap(blob);\r\n}\r\n\r\nasync function getInstance(arg: string | URL | WasmInstance, baseUrl?: string | URL) {\r\n    if (!isUrl(arg)) {\r\n        return arg;\r\n    }\r\n    const url = new URL(arg, baseUrl);\r\n    const response = await fetch(url, { mode: \"cors\" });\r\n    const { instance } = await WebAssembly.instantiateStreaming(response);\r\n    return instance.exports as unknown as WasmInstance;\r\n}\r\n\r\nasync function getArrayBuffer(arg: string | URL | ArrayBuffer, baseUrl?: string | URL) {\r\n    if (!isUrl(arg)) {\r\n        return arg;\r\n    }\r\n    const url = new URL(arg, baseUrl);\r\n    const response = await fetch(url, { mode: \"cors\" });\r\n    if (!response.ok) {\r\n        throw new Error(`Could not download wasm instance from: ${url}`);\r\n    }\r\n    return await response.arrayBuffer();\r\n    // const { instance } = await WebAssembly.instantiateStreaming(response);\r\n    // return instance.exports as unknown as WasmInstance;\r\n}\r\n\r\nfunction getWorker(arg: string | URL | Worker, baseUrl?: string | URL) {\r\n    if (!isUrl(arg)) {\r\n        return arg;\r\n    }\r\n    const url = new URL(arg, baseUrl);\r\n    return new Worker(url, { type: \"module\", name: \"loader\" });\r\n}\r\n\r\nasync function getLogo(arg: string | URL | ArrayBuffer, baseUrl?: string | URL) {\r\n    if (!isUrl(arg)) {\r\n        return arg;\r\n    }\r\n    const url = new URL(arg, baseUrl);\r\n    return await download(url, \"arrayBuffer\");\r\n}\r\n\r\nasync function getShaders(arg: string | URL | ShaderImports, baseUrl?: string | URL) {\r\n    if (!isUrl(arg)) {\r\n        return arg;\r\n    }\r\n    const url = new URL(arg, baseUrl);\r\n    const { shaders } = await import( /* webpackIgnore: true */ url.toString());\r\n    return shaders as ShaderImports;\r\n}\r\n", "/** A basic GPU benchmark helper class.\r\n * @category Device Profile\r\n */\r\nexport class Benchmark {\r\n    readonly canvas;\r\n    readonly gl;\r\n    static readonly size = 1024;\r\n    static readonly numPixels = Benchmark.size * Benchmark.size;\r\n\r\n    constructor() {\r\n        const options: WebGLContextAttributes = {\r\n            alpha: true,\r\n            antialias: false,\r\n            depth: false,\r\n            desynchronized: false,\r\n            failIfMajorPerformanceCaveat: true,\r\n            powerPreference: \"high-performance\",\r\n            premultipliedAlpha: true,\r\n            preserveDrawingBuffer: false,\r\n            stencil: false,\r\n        };\r\n\r\n        const { size } = Benchmark;\r\n        // const canvas = this.canvas = new OffscreenCanvas(size, size);\r\n        const canvas = this.canvas = document.createElement(\"canvas\");\r\n        canvas.width = size;\r\n        canvas.height = size;\r\n        canvas.style.backgroundColor = \"red\";\r\n        canvas.style.position = \"absolute\";\r\n        canvas.style.top = \"0\";\r\n        canvas.style.left = \"0\";\r\n        canvas.style.right = \"0\";\r\n        canvas.style.bottom = \"0\";\r\n        canvas.style.zIndex = \"10\";\r\n        document.body.appendChild(canvas);\r\n        const gl = canvas.getContext(\"webgl2\", options);\r\n        if (!gl)\r\n            throw new Error(\"Unable to create WebGL 2 context!\");\r\n        this.gl = gl;\r\n    }\r\n\r\n    /** Dispose of created GPU resources. */\r\n    dispose() {\r\n        const { gl, canvas } = this;\r\n        document.body.removeChild(canvas);\r\n        const ext = gl.getExtension(\"WEBGL_lose_context\");\r\n        ext?.loseContext();\r\n    }\r\n}\r\n", "/** @internal */\r\nexport function waitFrame() {\r\n    return new Promise<number>((resolve) => {\r\n        function animate(time: number) {\r\n            resolve(time);\r\n        }\r\n        requestAnimationFrame(animate);\r\n    });\r\n}\r\n\r\n/** @internal */\r\nexport async function measure(action: (iteration: number) => void) {\r\n    const elapsed: number[] = [];\r\n    let prevTime: number | undefined;\r\n\r\n    async function tick() {\r\n        const time = await waitFrame();\r\n        if (prevTime != undefined) {\r\n            elapsed.push(time - prevTime);\r\n        }\r\n        prevTime = time;\r\n    }\r\n\r\n    // measure frame interval\r\n    const frames = 6;\r\n    for (let i = 0; i < frames; i++) {\r\n        await tick();\r\n    }\r\n    elapsed.sort((a, b) => a - b);\r\n    const medianInterval = elapsed[Math.round(elapsed.length / 2)]; // use median interval as frame interval\r\n    const fps = Math.round(1000 / medianInterval); // round to nearest FPS\r\n    console.log({ fps });\r\n\r\n    let iterations = 1;\r\n    for (; ;) {\r\n        prevTime = undefined;\r\n        elapsed.length = 0;\r\n        for (let i = 0; i < frames; i++) {\r\n            await tick();\r\n            for (let j = 0; j < iterations; j++) {\r\n                action(j);\r\n            }\r\n        }\r\n        elapsed.sort((a, b) => a - b);\r\n        const averageFrameInterval = elapsed.slice(1, elapsed.length - 1).reduce((a, b) => (a + b)) / (elapsed.length - 2); // ignore min and max values\r\n        if (averageFrameInterval > 100) {\r\n            return averageFrameInterval / iterations;\r\n        }\r\n        iterations = Math.max(iterations + 1, Math.round(iterations * 1.75));\r\n        console.log(iterations);\r\n    }\r\n}\r\n\r\nfunction waitSync(gl: WebGL2RenderingContext, sync: WebGLSync) {\r\n    gl.flush();\r\n    let resolve: (value: number) => void = undefined!;\r\n    const promise = new Promise<number>((res) => { resolve = res; });\r\n    (function checkSync(): void {\r\n        const flags = 0; // gl.SYNC_FLUSH_COMMANDS_BIT\r\n        const timeout = 0; // gl.MAX_CLIENT_WAIT_TIMEOUT_WEBGL\r\n        const status = gl.clientWaitSync(sync, flags, timeout);\r\n        switch (status) {\r\n            case gl.TIMEOUT_EXPIRED:\r\n                setTimeout(checkSync);\r\n                return;\r\n            case gl.WAIT_FAILED:\r\n                throw new Error('GPU Sync error!');\r\n        }\r\n        gl.deleteSync(sync);\r\n        resolve(performance.now());\r\n    })();\r\n    return promise;\r\n}\r\n", "import { glClear, glCreateProgram, glDraw, glState, glUniformLocations } from \"webgl2\";\r\nimport { measure } from \"./util\";\r\nimport { Benchmark } from \"./benchmark\";\r\nimport type { ShaderImports } from \"core3d/shaders\";\r\n\r\n/** A basic GPU fill rate profiler.\r\n * @category Device Profile\r\n */\r\nexport class FillrateProfiler {\r\n    readonly program;\r\n    readonly uniforms;\r\n\r\n    /**\r\n     * @param benchmark The benchmark context to use.\r\n     * @param shaders The shader imports.\r\n     */\r\n    constructor(\r\n        /** The benchmark context. */\r\n        readonly benchmark: Benchmark,\r\n        shaders: ShaderImports[\"benchmark\"]\r\n    ) {\r\n        const { gl } = this.benchmark;\r\n        this.program = glCreateProgram(gl, shaders.fillrate);\r\n        this.uniforms = glUniformLocations(gl, this.program, [\"seed\"]);\r\n    }\r\n\r\n    /**\r\n     * Measure fill rate by rendering a series of noisy, semi-transparent quads.\r\n     * @returns Fill rate estimate in pixels/second.\r\n     * @remarks\r\n     * This test is quite inaccurate and does not match close to the nominal fill rate of a GPU, particularly on tile based mobile GPUs.\r\n     * The result should only serve as a rough estimate.\r\n     */\r\n    async measure() {\r\n        const { benchmark, program, uniforms } = this;\r\n        const { gl } = benchmark;\r\n        const { size, numPixels } = Benchmark;\r\n        gl.getError();\r\n        const numQuads = 128;\r\n        // TODO: create dedicated framebuffer (HDRI?)\r\n        glState(gl, {\r\n            viewport: { width: size, height: size },\r\n            program,\r\n            blend: {\r\n                enable: true,\r\n                srcRGB: \"SRC_ALPHA\",\r\n                dstRGB: \"ONE_MINUS_SRC_ALPHA\",\r\n                srcAlpha: \"ONE\",\r\n                dstAlpha: \"ONE\",\r\n            },\r\n            depth: {\r\n                test: false,\r\n                writeMask: false,\r\n            },\r\n        });\r\n\r\n        function render(iteration: number) {\r\n            gl.uniform1f(uniforms.seed, Math.random());\r\n            // glClear(gl, { kind: \"back_buffer\", color: [0, 0, 0, 1] });\r\n            glDraw(gl, { kind: \"arrays_instanced\", mode: \"TRIANGLE_STRIP\", count: 4, instanceCount: numQuads }); // draw quad\r\n            gl.flush();\r\n        }\r\n\r\n        glClear(gl, { kind: \"back_buffer\", color: [0, 0, 0, 1] });\r\n        const time = await measure(render);\r\n        const rate = numPixels * numQuads * 1000 / time;\r\n        return rate;\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\nFillrate (GPix/sec) = Ghz * #ROPs\r\n3070: 1.5 * 96 = ~150\r\nM1: 1.25 * 32 = ~40\r\nMali-G57 MC2 (oppo): 0.85  * 4 = ~3.4\r\nMail-G52 MP2 (A8): 0.95 * 4 = ~4.5\r\nMali-G77 MC9 (OnePlus Nord 2): 0.85 * 18 = ~46\r\n*/", "import { glClear, glCreateProgram, glDraw, glState, glUniformLocations } from \"webgl2\";\r\nimport { waitFrame, measure } from \"./util\";\r\nimport { Benchmark } from \"./benchmark\";\r\nimport type { ShaderImports } from \"core3d/shaders\";\r\n\r\n/** A basic GPU point rate profiler.\r\n * @category Device Profile\r\n */\r\nexport class PointrateProfiler {\r\n    readonly program;\r\n    readonly uniforms;\r\n\r\n    /**\r\n     * @param benchmark The benchmark context to use.\r\n     * @param shaders The shader imports.\r\n     */\r\n    constructor(\r\n        /** The benchmark context. */\r\n        readonly benchmark: Benchmark,\r\n        shaders: ShaderImports[\"benchmark\"]\r\n    ) {\r\n        const { gl } = this.benchmark;\r\n        this.program = glCreateProgram(gl, shaders.pointrate);\r\n        this.uniforms = glUniformLocations(gl, this.program, [\"color\"]);\r\n    }\r\n\r\n    /**\r\n     * Measure fill rate by rendering a series of noisy, semi-transparent point primitives.\r\n     * @returns Primitive/point rate estimate in primitives/second.\r\n     * @remarks\r\n     * This test is quite inaccurate and does not match close to the nominal primitive/triangle rate of a GPU, particularly on tile based mobile GPUs.\r\n     * Points are being used instead of triangles since they more closely reflect the maximum theoretical primitive rate of most GPUs.\r\n     * The result should only serve as a rough estimate.\r\n     */\r\n    async measure() {\r\n        const { benchmark, program, uniforms } = this;\r\n        const { gl } = benchmark;\r\n        const { size, numPixels } = Benchmark;\r\n        gl.getError();\r\n        const numOverdraws = 8;\r\n        glState(gl, {\r\n            viewport: { width: size, height: size },\r\n            program,\r\n            blend: {\r\n                enable: false,\r\n            },\r\n            depth: {\r\n                test: false,\r\n                writeMask: false,\r\n            },\r\n        });\r\n\r\n        function render(iteration: number) {\r\n            gl.uniform4f(uniforms.color, Math.random(), Math.random(), Math.random(), 1);\r\n            glDraw(gl, { kind: \"arrays_instanced\", mode: \"POINTS\", count: numPixels, instanceCount: numOverdraws }); // draw quad\r\n        }\r\n\r\n        glClear(gl, { kind: \"back_buffer\", color: [0, 0, 0, 1] });\r\n        const time = await measure(render);\r\n        const rate = numPixels * numOverdraws * 1000 / time;\r\n        return rate;\r\n    }\r\n}\r\n\r\n/*\r\nmacbook pro 13 2018 / Intel Iris Plus Graphics 655 (https://support.apple.com/kb/SP775?locale=en_US)\r\nchrome: fr: 13.17, pr: 0.49\r\nsafari: fr: 10.1, pr: 0.07\r\n(chrome and safari differs significantly in point rate, even on M1 mac)\r\n(no timer webgl extensions on either browser)\r\n\r\nmacobook pro 13 M1 2020\r\nchrome: fr: 182, pr: 1.3\r\nsafari: fr: 79, pr: 1.3\r\n\r\n*/", "import * as GLTF from \"./types\";\r\n\r\nasync function request(url: URL, abortController?: AbortController) {\r\n    const signal = abortController?.signal;\r\n    const response = await fetch(url.toString(), { mode: \"cors\", signal });\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP Error: ${response.status}: ${response.statusText} (${url})`);\r\n    }\r\n    return response;\r\n}\r\n\r\nasync function downloadJson(url: URL, abortController?: AbortController) {\r\n    const response = await request(url, abortController);\r\n    return await response.json();\r\n}\r\n\r\nasync function downloadArrayBuffer(url: URL, abortController?: AbortController) {\r\n    const response = await request(url, abortController);\r\n    return await response.arrayBuffer();\r\n}\r\n\r\nasync function downloadBlob(url: URL, abortController?: AbortController) {\r\n    const response = await request(url, abortController);\r\n    return await response.blob();\r\n}\r\n\r\nconst BINARY_HEADER_MAGIC = 'glTF';\r\nconst BINARY_HEADER_LENGTH = 12;\r\nconst BINARY_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\r\n\r\n/** @internal */\r\nexport function parseGLB(data: ArrayBuffer) {\r\n    const headerView = new DataView(data, 0, BINARY_HEADER_LENGTH);\r\n    const decoder = new TextDecoder();\r\n\r\n    const header = {\r\n        magic: decoder.decode(new Uint8Array(data, 0, 4)),\r\n        version: headerView.getUint32(4, true),\r\n        length: headerView.getUint32(8, true),\r\n    };\r\n\r\n    if (header.magic !== BINARY_HEADER_MAGIC) {\r\n        throw new Error('Unsupported glTF-Binary header.');\r\n    } else if (header.version < 2.0) {\r\n        throw new Error('Unsupported legacy gltf file detected.');\r\n    }\r\n\r\n    let json: string | undefined;\r\n    let buffer: ArrayBuffer | undefined;\r\n    const chunkView = new DataView(data, BINARY_HEADER_LENGTH);\r\n    let chunkIndex = 0;\r\n    while (chunkIndex < chunkView.byteLength) {\r\n        const chunkLength = chunkView.getUint32(chunkIndex, true); chunkIndex += 4;\r\n        const chunkType = chunkView.getUint32(chunkIndex, true); chunkIndex += 4;\r\n        if (chunkType === BINARY_CHUNK_TYPES.JSON) {\r\n            const contentArray = new Uint8Array(data, BINARY_HEADER_LENGTH + chunkIndex, chunkLength);\r\n            json = decoder.decode(contentArray);\r\n            json = json.substring(0, json.lastIndexOf(\"}\") + 1);\r\n        } else if (chunkType === BINARY_CHUNK_TYPES.BIN) {\r\n            const contentArray = new Uint8Array(data, BINARY_HEADER_LENGTH + chunkIndex, chunkLength);\r\n            const binaryChunk = new Uint8Array(chunkLength);\r\n            binaryChunk.set(contentArray);\r\n            buffer = binaryChunk.buffer;\r\n        }\r\n        chunkIndex += chunkLength; // Clients must ignore chunks with unknown types.\r\n    }\r\n\r\n    if (!json) {\r\n        throw new Error('glTF-Binary: JSON content not found.');\r\n    }\r\n    if (!buffer) {\r\n        throw new Error('glTF-Binary: Binary chunk not found.');\r\n    }\r\n    return { json, buffer };\r\n}\r\n\r\n/** @internal */\r\nexport async function loadData(url: URL, abortController?: AbortController) {\r\n    const path = url.pathname.toLowerCase();\r\n    let gltf: GLTF.GlTf;\r\n    let buffers: ArrayBuffer[];\r\n    if (path.endsWith(\".gltf\")) {\r\n        gltf = await downloadJson(url) as GLTF.GlTf;\r\n        // fetch binary buffer(s)\r\n        const bufferPromises = (gltf.buffers ?? []).map(async buf => {\r\n            const bufferUrl = new URL(buf.uri!, url);\r\n            if (!bufferUrl.search)\r\n                bufferUrl.search = url.search ?? \"\";\r\n            return downloadArrayBuffer(bufferUrl, abortController);\r\n        });\r\n        buffers = await Promise.all(bufferPromises);\r\n    } else if (path.endsWith(\".glb\")) {\r\n        const glb = await downloadArrayBuffer(url, abortController);\r\n        const { json, buffer } = parseGLB(glb);\r\n        gltf = JSON.parse(json) as GLTF.GlTf;\r\n        buffers = [buffer];\r\n    } else {\r\n        throw new Error(`Unknown GLTF file extension: \"${url}\"!`);\r\n    }\r\n    const imageBlobPromises = gltf.images?.map(img => {\r\n        if (img.uri) {\r\n            const imageUrl = new URL(img.uri, url);\r\n            return downloadBlob(imageUrl, abortController);\r\n        }\r\n    }) ?? [];\r\n    const externalImageBlobs = await Promise.all(imageBlobPromises);\r\n    return { gltf, buffers, externalImageBlobs };\r\n}\r\n", "import { vec3, mat4, quat, type ReadonlyMat4, mat3, type ReadonlyVec3, glMatrix } from \"gl-matrix\";\r\nimport type { MagFilterString, MinFilterString, TextureParams2DUncompressed, WrapString } from \"webgl2\";\r\nimport { GL } from \"webgl2/constants\";\r\nimport type { RenderStateDynamicGeometry, RenderStateDynamicImage, RenderStateDynamicInstance, RenderStateDynamicMaterialGGX, RenderStateDynamicMaterialUnlit, RenderStateDynamicMesh, RenderStateDynamicMeshPrimitive, RenderStateDynamicNormalTextureReference, RenderStateDynamicObject, RenderStateDynamicOcclusionTextureReference, RenderStateDynamicSampler, RenderStateDynamicTexture, RenderStateDynamicTextureReference, RenderStateDynamicVertexAttribute, RenderStateDynamicVertexAttributes, RGB, RGBA } from \"../state\";\r\nimport * as GLTF from \"./types\";\r\n\r\n\r\nfunction decomposeMatrix(transform: mat4) {\r\n    const [sx, sy, sz] = mat4.getScaling(vec3.create(), transform);\r\n    let scale: number | undefined = (sx + sy + sz) / 3; // get average scale factor.\r\n    const epsilon = 1E-5;\r\n    if (scale > 1 - epsilon && scale < 1 + epsilon) {\r\n        scale = undefined;\r\n    }\r\n    const rotation = quat.fromMat3(quat.create(), mat3.fromMat4(mat3.create(), transform));\r\n    const position = vec3.fromValues(transform[12], transform[13], transform[14]);\r\n    return { rotation, position, scale } as const;\r\n}\r\n\r\n\r\nfunction getTransform(node: GLTF.Node) {\r\n    const { matrix, translation, rotation, scale } = node;\r\n    const transform: mat4 = mat4.create();\r\n    if (matrix) {\r\n        mat4.set(transform, ...(matrix as Parameters<typeof mat4.fromValues>));\r\n    } else if (translation || rotation) {\r\n        const t = translation ? vec3.fromValues(...(translation as Parameters<typeof vec3.fromValues>)) : vec3.create();\r\n        const r = rotation ? quat.fromValues(...(rotation as Parameters<typeof quat.fromValues>)) : quat.create();\r\n        const s = scale ? vec3.fromValues(...(rotation as Parameters<typeof vec3.fromValues>)) : vec3.fromValues(1, 1, 1);\r\n        mat4.fromRotationTranslationScale(transform, r, t, s);\r\n    }\r\n    return transform;\r\n}\r\n\r\n/** @internal */\r\nexport async function parseGLTF(buffers: ArrayBuffer[], gltf: GLTF.GlTf, externalImageBlobs: (Blob | undefined)[], baseObjectId?: number): Promise<readonly RenderStateDynamicObject[]> {\r\n    const { extensionsRequired, extensionsUsed } = gltf;\r\n    if (extensionsUsed && extensionsUsed.length != 0 && extensionsUsed[0] != \"KHR_materials_unlit\") {\r\n        console.warn(`The following glTF extensions were used, but are not supported: ${extensionsUsed.join(', ')}!`);\r\n    }\r\n    if (extensionsRequired && extensionsRequired.length != 0 && extensionsRequired[0] != \"KHR_materials_unlit\") {\r\n        throw new Error(`The following glTF extensions were required, but are not supported: ${extensionsRequired.join(', ')}!`);\r\n    }\r\n    const filters = {\r\n        [GL.NEAREST]: \"NEAREST\",\r\n        [GL.LINEAR]: \"LINEAR\",\r\n        [GL.NEAREST_MIPMAP_NEAREST]: \"NEAREST_MIPMAP_NEAREST\",\r\n        [GL.LINEAR_MIPMAP_NEAREST]: \"LINEAR_MIPMAP_NEAREST\",\r\n        [GL.NEAREST_MIPMAP_LINEAR]: \"NEAREST_MIPMAP_LINEAR\",\r\n        [GL.LINEAR_MIPMAP_LINEAR]: \"LINEAR_MIPMAP_LINEAR\",\r\n    } as { [index: number]: string };\r\n\r\n    const wrappings = {\r\n        [GL.CLAMP_TO_EDGE]: \"CLAMP_TO_EDGE\",\r\n        [GL.MIRRORED_REPEAT]: \"MIRRORED_REPEAT\",\r\n        [GL.REPEAT]: \"REPEAT\",\r\n    } as { [index: number]: string };\r\n\r\n    const attributeNames = {\r\n        POSITION: \"position\",\r\n        NORMAL: \"normal\",\r\n        TANGENT: \"tangent\",\r\n        TEXCOORD_0: \"texCoord0\",\r\n        TEXCOORD_1: \"texCoord1\",\r\n        COLOR_0: \"color0\",\r\n    } as const;\r\n\r\n    const attributeCompontentTypes = {\r\n        [GL.FLOAT]: \"FLOAT\",\r\n        [GL.BYTE]: \"BYTE\",\r\n        [GL.SHORT]: \"SHORT\",\r\n        [GL.INT]: \"INT\",\r\n        [GL.UNSIGNED_BYTE]: \"UNSIGNED_BYTE\",\r\n        [GL.UNSIGNED_SHORT]: \"UNSIGNED_SHORT\",\r\n        [GL.UNSIGNED_INT]: \"UNSIGNED_INT\",\r\n    } as const;\r\n\r\n    /** Spec: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#accessor-element-size */\r\n    const attributeComponentCounts = {\r\n        SCALAR: 1,\r\n        VEC2: 2,\r\n        VEC3: 3,\r\n        VEC4: 4,\r\n    } as const;\r\n\r\n    const attributeCompontentTypePrefixes = {\r\n        [GL.FLOAT]: \"FLOAT\",\r\n        [GL.BYTE]: \"INT\",\r\n        [GL.SHORT]: \"INT\",\r\n        [GL.INT]: \"INT\",\r\n        [GL.UNSIGNED_BYTE]: \"UNSIGNED_INT\",\r\n        [GL.UNSIGNED_SHORT]: \"UNSIGNED_INT\",\r\n        [GL.UNSIGNED_INT]: \"UNSIGNED_INT\",\r\n    } as const;\r\n\r\n    const topologies = {\r\n        [GL.POINTS]: \"POINTS\",\r\n        [GL.LINES]: \"LINES\",\r\n        [GL.LINE_LOOP]: \"LINE_LOOP\",\r\n        [GL.LINE_STRIP]: \"LINE_STRIP\",\r\n        [GL.TRIANGLES]: \"TRIANGLES\",\r\n        [GL.TRIANGLE_STRIP]: \"TRIANGLE_STRIP\",\r\n        [GL.TRIANGLE_FAN]: \"TRIANGLE_FAN\",\r\n    } as const;\r\n\r\n    /** Spec: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#accessor-element-size */\r\n    const bufferTypes = {\r\n        [GL.UNSIGNED_BYTE]: Uint8Array,\r\n        [GL.UNSIGNED_SHORT]: Uint16Array,\r\n        [GL.UNSIGNED_INT]: Uint32Array,\r\n        [GL.BYTE]: Int8Array,\r\n        [GL.SHORT]: Int16Array,\r\n        [GL.INT]: Int32Array,\r\n        [GL.FLOAT]: Float32Array,\r\n    } as const;\r\n\r\n    const bufferViews = gltf.bufferViews!.map(v => {\r\n        return new Uint8Array(buffers[v.buffer], v.byteOffset, v.byteLength);\r\n    });\r\n\r\n    function getImageBlob(image: GLTF.Image) {\r\n        const bufferView = gltf.bufferViews![image.bufferView!];\r\n        const begin = bufferView.byteOffset ?? 0;\r\n        const end = bufferView.byteLength ? begin + bufferView.byteLength : undefined;\r\n        const buffer = buffers[bufferView.buffer].slice(begin, end);\r\n        return new Blob([buffer]);\r\n    }\r\n\r\n    const imagePromises = gltf.images?.map(async (img, idx) => {\r\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\r\n        let blob = externalImageBlobs[idx] ?? getImageBlob(img);\r\n        if (img.mimeType) {\r\n            blob = new Blob([blob], { type: img.mimeType });\r\n        }\r\n        const image = await createImageBitmap(blob, { colorSpaceConversion: \"none\" });\r\n        const { width, height } = image;\r\n        const params: TextureParams2DUncompressed = { kind: \"TEXTURE_2D\", width, height, generateMipMaps: true, internalFormat: \"RGBA8\", type: \"UNSIGNED_BYTE\", image };\r\n        return { params } as RenderStateDynamicImage;\r\n    }) ?? [];\r\n    const images = await Promise.all(imagePromises);\r\n\r\n    const samplers = gltf.samplers?.map(s => {\r\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#samplers\r\n        const { magFilter, minFilter, wrapS, wrapT } = s;\r\n        const minificationFilter = filters[minFilter ?? GL.LINEAR_MIPMAP_LINEAR] as MinFilterString;\r\n        const magnificationFilter = filters[magFilter ?? GL.LINEAR] as MagFilterString;\r\n        const wrap = wrapS && wrapT ? [wrappings[wrapS] as WrapString, wrappings[wrapT] as WrapString] as const : [\"REPEAT\", \"REPEAT\"] as const;\r\n        return { minificationFilter, magnificationFilter, wrap } as RenderStateDynamicSampler;\r\n    }) ?? [];\r\n\r\n    const textures = gltf.textures?.map(t => {\r\n        // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\r\n        const image = images[t.source!];\r\n        const sampler = samplers[t.sampler!];\r\n        return { image, sampler } as RenderStateDynamicTexture;\r\n    }) ?? [];\r\n\r\n    const defaultGGXMaterial: RenderStateDynamicMaterialGGX = { kind: \"ggx\" };\r\n    const defaultUnlitMaterial: RenderStateDynamicMaterialUnlit = { kind: \"unlit\" };\r\n    const materials = gltf.materials?.map((m, i) => {\r\n        const isUnlit = m.extensions && \"KHR_materials_unlit\" in m.extensions;\r\n        const { pbrMetallicRoughness, normalTexture, occlusionTexture, emissiveTexture, emissiveFactor, alphaMode, alphaCutoff, doubleSided } = m;\r\n        function getTexInfo(texInfo?: GLTF.TextureInfo | GLTF.MaterialNormalTextureInfo | GLTF.MaterialOcclusionTextureInfo) {\r\n            if (texInfo) {\r\n                const transform = undefined; // TODO: add KHR_texture_transform\r\n                if (\"scale\" in texInfo) {\r\n                    return {\r\n                        texture: textures[texInfo.index] ?? null,\r\n                        texCoord: texInfo.texCoord,\r\n                        scale: texInfo.scale,\r\n                        transform,\r\n                    } as RenderStateDynamicNormalTextureReference;\r\n                } else if (\"strength\" in texInfo) {\r\n                    return {\r\n                        texture: textures[texInfo.index] ?? null,\r\n                        texCoord: texInfo.texCoord,\r\n                        strength: texInfo.strength,\r\n                        transform,\r\n                    } as RenderStateDynamicOcclusionTextureReference;\r\n                }\r\n                return {\r\n                    texture: textures[texInfo.index] ?? null,\r\n                    texCoord: texInfo.texCoord,\r\n                    transform,\r\n                } as RenderStateDynamicTextureReference;\r\n            }\r\n        }\r\n        if (isUnlit) {\r\n            return {\r\n                kind: \"unlit\",\r\n                doubleSided: doubleSided,\r\n                alphaMode: alphaMode as \"OPAQUE\" | \"MASK\" | \"BLEND\" | undefined,\r\n                alphaCutoff: alphaCutoff,\r\n                baseColorFactor: pbrMetallicRoughness?.baseColorFactor as RGBA | undefined,\r\n                baseColorTexture: getTexInfo(pbrMetallicRoughness?.baseColorTexture),\r\n            } as RenderStateDynamicMaterialUnlit;\r\n        } else {\r\n            return {\r\n                kind: \"ggx\",\r\n                doubleSided: doubleSided,\r\n                alphaMode: alphaMode as \"OPAQUE\" | \"MASK\" | \"BLEND\" | undefined,\r\n                alphaCutoff: alphaCutoff,\r\n                baseColorFactor: pbrMetallicRoughness?.baseColorFactor as RGBA | undefined,\r\n                metallicFactor: pbrMetallicRoughness?.metallicFactor,\r\n                roughnessFactor: pbrMetallicRoughness?.roughnessFactor,\r\n                emissiveFactor: emissiveFactor as RGB | undefined,\r\n                baseColorTexture: getTexInfo(pbrMetallicRoughness?.baseColorTexture),\r\n                metallicRoughnessTexture: getTexInfo(pbrMetallicRoughness?.metallicRoughnessTexture),\r\n                normalTexture: getTexInfo(normalTexture),\r\n                occlusionTexture: getTexInfo(occlusionTexture),\r\n                emissiveTexture: getTexInfo(emissiveTexture),\r\n            } as RenderStateDynamicMaterialGGX;\r\n        }\r\n    }) ?? [];\r\n\r\n    const meshes = gltf.meshes?.map(m => {\r\n        const primitives = m.primitives.map(p => {\r\n            const attributes = {} as RenderStateDynamicVertexAttributes;\r\n            for (const [key, value] of Object.entries(p.attributes)) {\r\n                const name = attributeNames[key as keyof typeof attributeNames];\r\n                // if (name != \"position\")\r\n                //     continue;\r\n                const accessor = gltf.accessors![value];\r\n                console.assert(!accessor.sparse);\r\n                const bufferView = gltf.bufferViews![accessor.bufferView!];\r\n                const buffer = bufferViews[accessor.bufferView!];\r\n                const componentType = accessor.componentType as keyof typeof attributeCompontentTypes;\r\n                const prefix = attributeCompontentTypePrefixes[componentType];\r\n                const type = accessor.type as \"SCALAR\" | \"VEC2\" | \"VEC3\" | \"VEC4\";\r\n                const kind = accessor.type == \"SCALAR\" ? prefix : `${prefix}_${type as Exclude<typeof type, \"SCALAR\">}` as const;\r\n                // const floatView = new Float32Array(buffer.buffer, buffer.byteOffset + (accessor.byteOffset ?? 0), accessor.count);\r\n                const attrib = {\r\n                    kind,\r\n                    buffer,\r\n                    componentType: attributeCompontentTypes[componentType],\r\n                    componentCount: attributeComponentCounts[type],\r\n                    normalized: accessor.normalized ?? false,\r\n                    byteStride: bufferView.byteStride ?? 0,\r\n                    byteOffset: accessor.byteOffset ?? 0,\r\n                } as const satisfies RenderStateDynamicVertexAttribute;\r\n                Reflect.set(attributes, name, attrib);\r\n            };\r\n\r\n            const indicesAccessor = p.indices != undefined ? gltf.accessors![p.indices] : undefined;\r\n            const count = indicesAccessor ? indicesAccessor.count : gltf.accessors![p.attributes[\"POSITION\"]!].count;\r\n            const ib = bufferViews[indicesAccessor?.bufferView ?? -1];\r\n            const IndexBufferType = indicesAccessor ? bufferTypes[indicesAccessor.componentType as GL.UNSIGNED_BYTE | GL.UNSIGNED_SHORT | GL.UNSIGNED_INT] : undefined;\r\n            const indices = IndexBufferType ? new IndexBufferType(ib.buffer, ib.byteOffset + (indicesAccessor!.byteOffset ?? 0), indicesAccessor!.count) : count;\r\n            const mode = topologies[p.mode as keyof typeof topologies] ?? \"TRIANGLES\";\r\n\r\n            const geometry: RenderStateDynamicGeometry = {\r\n                primitiveType: mode,\r\n                attributes,\r\n                indices,\r\n            };\r\n            const defaultMaterial = ((p.mode ?? 4) < 4) ? defaultUnlitMaterial : defaultGGXMaterial;\r\n            const material = materials[p.material ?? -1] ?? defaultMaterial;\r\n            return { geometry, material } as RenderStateDynamicMeshPrimitive;\r\n        });\r\n        return { primitives } as RenderStateDynamicMesh;\r\n    }) ?? [];\r\n\r\n    const objects: RenderStateDynamicObject[] = [];\r\n    if (gltf.scenes && gltf.nodes) {\r\n        const rootNodes = gltf.scenes[gltf.scene ?? 0].nodes;\r\n        if (rootNodes) {\r\n            function traverseNodeTree(nodeIndex: number, parentTransform?: ReadonlyMat4) {\r\n                const node = gltf.nodes![nodeIndex];\r\n                const transform = getTransform(node);\r\n                if (parentTransform) {\r\n                    mat4.multiply(transform, parentTransform, transform);\r\n                }\r\n                if (node.mesh != undefined) {\r\n                    mat4.rotateX(transform, transform, glMatrix.toRadian(90)); // transform into CAD space.\r\n                    const instance: RenderStateDynamicInstance = decomposeMatrix(transform);\r\n                    const mesh = meshes[node.mesh];\r\n                    const obj: RenderStateDynamicObject = { instances: [instance], mesh, baseObjectId };\r\n                    objects.push(obj);\r\n                }\r\n                if (node.children) {\r\n                    for (const child of node.children) {\r\n                        traverseNodeTree(child, transform);\r\n                    }\r\n                }\r\n            }\r\n            for (const rootNodeIndex of rootNodes) {\r\n                traverseNodeTree(rootNodeIndex);\r\n            }\r\n        }\r\n    }\r\n    return objects;\r\n}\r\n", "import type { RenderState } from \"../\";\r\nimport { loadData } from \"./loader\";\r\nimport { parseGLTF } from \"./parser\";\r\n\r\n/**\r\n * Load a {@link https://www.khronos.org/gltf/ | gltf} file from url.\r\n * @param url Url to gltf or glb file.\r\n * @param baseObjectId The base (start) object id to assign to the loaded object for picking.\r\n * @param abortController Optional abort controller.\r\n * @returns An array of dynamic render state objects ready to be assigned to {@link RenderState.dynamic}.\r\n * @remarks\r\n * Only a subset of the features in {@link https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html | glTF2} specs are supported.\r\n * More specifically, unsupported features are:\r\n * \r\n * {@link https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-accessor-sparse | Sparse accessors}\r\n * \r\n * {@link https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-animation | Animation}\r\n * \r\n * {@link https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-camera | Camera}\r\n * \r\n * {@link https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-skin | Skin}\r\n * \r\n * Currently the only extensions supported is {@link https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_unlit/README.md | KHR_materials_unlit}.\r\n * @category Geometry\r\n */\r\nexport async function downloadGLTF(url: URL, baseObjectId?: number, abortController?: AbortController) {\r\n    const { gltf, buffers, externalImageBlobs } = await loadData(url, abortController);\r\n    return parseGLTF(buffers, gltf, externalImageBlobs, baseObjectId);\r\n}", "/**\r\n * Callback function to parse URL path name into directory and file name.\r\n */\r\nexport type PathNameParser = (path: string) => { readonly dir: string, readonly file: string } | undefined;\r\n\r\n/**\r\n * Callback function to formatdirectory and file name into an URL path name.\r\n */\r\nexport type PathNameFormatter = (dir: string, file: string) => string;\r\n\r\n/**\r\n * Offline storage interface\r\n * @remarks\r\n * This object offers a basic filesystem-like abstraction for offline storage,\r\n * either through the Cache API or OPFS API, depending on browser/availability.\r\n */\r\nexport interface OfflineStorage {\r\n    /** The formatter used to encode and decode requests. */\r\n    readonly requestFormatter: RequestFormatter;\r\n\r\n    /**\r\n     * Determine if request is a potential offline asset or not.\r\n     * @param request The resource request\r\n     * @returns True, if request url matches that of a potential offline asset, False, if not.\r\n     * @remarks\r\n     * This function only check if the URL matches the pattern of potential offline assets,\r\n     * not if it's actually available offline or not.\r\n     * It's only meant as an early screening to not intercept purely online content.\r\n     */\r\n    isAsset(request: Request): boolean;\r\n\r\n    /**\r\n     * Fetch resource from offline storage, if available.\r\n     * @param request The resource request\r\n     * @returns A response or undefined if no match was found.\r\n     */\r\n    fetch(request: Request): Promise<Response | undefined>;\r\n\r\n    /** Existing directory names in this storage. */\r\n    existingDirectories: IterableIterator<OfflineDirectory>;\r\n\r\n    /** Check if directory already exists. */\r\n    hasDirectory(name: string): boolean;\r\n\r\n    /**\r\n     * Get or create a directory by name.\r\n     * @param name The directory name.\r\n     * @returns The directory storage.\r\n     */\r\n    directory(name: string): Promise<OfflineDirectory>;\r\n\r\n    /**\r\n     * Delete everything in this storage, including folders using a different/older schema.\r\n     */\r\n    deleteAll(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Offline directory interface.\r\n * @remarks\r\n * This objects offers a basic file folder-like abstraction for offline storage.\r\n */\r\nexport interface OfflineDirectory {\r\n    // /** The offline context. */\r\n    // readonly context: OfflineStorage;\r\n\r\n    /** The name of this folder. */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Retrive the file names of this directory.\r\n     * @remarks\r\n     * Potentially slow?\r\n     */\r\n    files(): AsyncIterableIterator<string>;\r\n\r\n    // /**\r\n    //  * Retrive the byte size of the specified file.\r\n    //  * @param name The file name to query.\r\n    //  */\r\n    // size(name: string): Promise<number>;\r\n\r\n    // /**\r\n    //  * Open the specified file as a readable stream.\r\n    //  * @param name The file name to open.\r\n    //  * @returns The file stream, or undefined if file does not exist or the browser doesn't support this operation.\r\n    //  */\r\n    // open(name: string): Promise<ReadableStream | undefined>;\r\n\r\n    /**\r\n     * Read the specified file as an ArrayBuffer.\r\n     * @param name The file name to read.\r\n     * @returns The file content, or undefined if file does not exist.\r\n     */\r\n    read(name: string): Promise<ArrayBuffer | undefined>;\r\n\r\n    /**\r\n     * Write the content of a file.\r\n     * @param name: The file name to write.\r\n     * @param buffer: The new content of this file.\r\n     * @remarks\r\n     * The input buffer may be transferred to an underlying worker and become inaccessible from the calling thread.\r\n     * Thus, you should pass a copy if you need to retain the original.\r\n     */\r\n    write(name: string, buffer: ArrayBuffer): Promise<void>;\r\n\r\n    /**\r\n     * Delete the specified file.\r\n     * @param names The file names to delete.\r\n     */\r\n    deleteFiles(names: IterableIterator<string>): Promise<void>;\r\n\r\n    /**\r\n     * Delete folder and everything inside it.\r\n     */\r\n    delete(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Helper class to format directory + filename into fetch() API requests and vice versa.\r\n */\r\nexport class RequestFormatter {\r\n    constructor(\r\n        /** The base url to apply to requests. */\r\n        readonly baseUrl: URL,\r\n        /** The path name parser to use. */\r\n        private readonly parser: PathNameParser,\r\n        /** The path name formatter to use. */\r\n        private readonly formatter: PathNameFormatter,\r\n        /** The mode flags for request, e.g. \"cors\". */\r\n        readonly mode?: RequestMode) { }\r\n\r\n    /**\r\n     * \r\n     * @param dir The storage directory name.\r\n     * @param file The storage file name.\r\n     * @param signal A signal for aborting the request.\r\n     * @param applyQuery Whether or not to apply query string to request url.\r\n     * @returns A Request to feed to fetch() API and/or to match against cache entries.\r\n     */\r\n    request(dir: string, file: string, query?: string, signal?: AbortSignal): Request {\r\n        const { baseUrl, formatter, mode } = this;\r\n        const url = new URL(formatter(dir, file), baseUrl);\r\n        if (query)\r\n            url.search = query;\r\n        return new Request(url, { mode, signal });\r\n    }\r\n\r\n    /**\r\n    * Decode request into directory and file name.\r\n    * @param request A request generated from the {@link request} function.\r\n    * @returns Request directory and file name, if url matches asset pattern, undefined otherwise.\r\n    */\r\n    tryDecode(request: Request) {\r\n        const { parser } = this;\r\n        const { pathname } = new URL(request.url);\r\n        return parser(pathname);\r\n    }\r\n\r\n    /**\r\n     * Decode request into directory and file name.\r\n     * @param request A request generated from the {@link request} function.\r\n     * @returns Request directory and file name.\r\n     */\r\n    decode(request: Request) {\r\n        const result = this.tryDecode(request);\r\n        if (!result)\r\n            throw new Error(\"Request does not match valid pattern!\");\r\n        return result;\r\n    }\r\n}\r\n", "import { type OfflineStorage, type OfflineDirectory, RequestFormatter } from \"./storage\";\r\n\r\n/**\r\n * Create a cached based offline storage.\r\n * @param version Version string for offline storage schema\r\n * @param requestFormatter The formatter for converting directory and file names into fetch() requests and vice versa.\r\n * @remarks\r\n * If you use the standard novorender cloud storage, you may use the {@link defaultRequestFormatter} to create the the requestFormatter.\r\n */\r\nexport async function createCacheStorage(version: string, requestFormatter: RequestFormatter): Promise<OfflineStorage> {\r\n    const storage = new OfflineStorageCache(version, requestFormatter);\r\n    await storage.init();\r\n    return storage;\r\n}\r\n\r\nconst cacheQueryOptions: CacheQueryOptions = {\r\n    ignoreSearch: true, // SAS key will change over time, so ignore\r\n}\r\n\r\n\r\nclass OfflineStorageCache implements OfflineStorage {\r\n    readonly dirs = new Map<string, OfflineDirectoryCache>();\r\n\r\n    constructor(readonly version: string, readonly requestFormatter: RequestFormatter) {\r\n    }\r\n\r\n    private get prefix() {\r\n        return `${this.version}_`;\r\n    }\r\n\r\n    private cacheName(dirName: string) {\r\n        return `${this.prefix}${dirName}`;\r\n    }\r\n\r\n    // initialize existing directories from storage\r\n    async init(): Promise<void> {\r\n        const { prefix, dirs } = this;\r\n        var keys = await caches.keys();\r\n        for (const key of keys) {\r\n            if (key.startsWith(prefix)) {\r\n                const name = key.slice(prefix.length);\r\n                const cache = await caches.open(key);\r\n                const dir = new OfflineDirectoryCache(this, cache, name);\r\n                dirs.set(name, dir);\r\n            }\r\n        }\r\n    }\r\n\r\n    isAsset(request: Request): boolean {\r\n        return this.requestFormatter.tryDecode(request) != undefined;\r\n    }\r\n\r\n    async fetch(request: Request): Promise<Response | undefined> {\r\n        return await caches.match(request, cacheQueryOptions);\r\n    }\r\n\r\n    get existingDirectories() {\r\n        return this.dirs.values();\r\n    }\r\n\r\n    hasDirectory(name: string): boolean {\r\n        return this.dirs.has(name);\r\n    }\r\n\r\n    async directory(name: string): Promise<OfflineDirectory> {\r\n        const { dirs } = this;\r\n        let dir = dirs.get(name);\r\n        if (!dir) {\r\n            dir = await this.addDirectory(name);\r\n            dirs.set(name, dir);\r\n        }\r\n        return dir;\r\n    }\r\n\r\n    async addDirectory(name: string) {\r\n        const cacheName = this.cacheName(name)\r\n        const cache = await caches.open(cacheName);\r\n        const dir = new OfflineDirectoryCache(this, cache, name);\r\n        return dir;\r\n    }\r\n\r\n    async deleteAll() {\r\n        for (const key of await caches.keys()) {\r\n            await caches.delete(key);\r\n        }\r\n        this.dirs.clear();\r\n    }\r\n}\r\n\r\nclass OfflineDirectoryCache implements OfflineDirectory {\r\n    constructor(readonly context: OfflineStorageCache, readonly cache: Cache, readonly name: string) { }\r\n\r\n    request(name: string): Request {\r\n        const { context } = this;\r\n        const { requestFormatter } = context;\r\n        return requestFormatter.request(this.name, name);\r\n    }\r\n\r\n    async* files(): AsyncIterableIterator<string> {\r\n        const { context, cache } = this;\r\n        const { requestFormatter } = context;\r\n        const requests = await cache.keys(undefined, cacheQueryOptions);\r\n        for await (const request of requests) {\r\n            const { file } = requestFormatter.decode(request);\r\n            yield file;\r\n        }\r\n    }\r\n\r\n    // async size(name: string) {\r\n    //     const { cache } = this;\r\n    //     const request = this.request(name);\r\n    //     const response = await cache.match(request, cacheQueryOptions);\r\n    //     if (response?.ok) {\r\n    //         const contentLength = response.headers.get(\"Content-Length\");\r\n    //         if (contentLength != undefined) {\r\n    //             const size = Number.parseInt(contentLength);\r\n    //             if (!Number.isNaN(size)) {\r\n    //                 return size;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     throw new Error(`No valid cache entry found for \"${name}\"!`);\r\n    // }\r\n\r\n    private async get(name: string): Promise<Response | undefined> {\r\n        const { cache } = this;\r\n        const request = this.request(name);\r\n        const response = await cache.match(request, cacheQueryOptions);\r\n        if (response?.ok) {\r\n            return response;\r\n        }\r\n    }\r\n\r\n    // async open(name: string): Promise<ReadableStream | undefined> {\r\n    //     const response = await this.get(name);\r\n    //     return response?.body!;\r\n    // }\r\n\r\n    async read(name: string): Promise<ArrayBuffer | undefined> {\r\n        const response = await this.get(name);\r\n        return response?.arrayBuffer();\r\n    }\r\n\r\n    async write(name: string, buffer: ArrayBuffer): Promise<void> {\r\n        const { cache } = this;\r\n        const request = this.request(name);\r\n        const init: ResponseInit = {\r\n            status: 200,\r\n            headers: {\r\n                \"Content-Length\": buffer.byteLength.toString(),\r\n            },\r\n        };\r\n        const response = new Response(buffer, init);\r\n        await cache.put(request, response);\r\n    }\r\n\r\n    async deleteFiles(names: Iterable<string>): Promise<void> {\r\n        const { cache } = this;\r\n        for (const name of names) {\r\n            const request = this.request(name);\r\n            const success = await cache.delete(request, cacheQueryOptions);\r\n            if (!success) {\r\n                console.warn(`Failed to delete ${name} from cache!`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async delete(): Promise<void> {\r\n        const { context, name } = this;\r\n        const { version } = context;\r\n        const key = `${name}_${version}`;\r\n        const result = await caches.delete(key);\r\n        console.assert(result);\r\n    }\r\n}", "/** @internal */\r\nexport class PromiseBag {\r\n    private readonly promises = new Map<number, PendingPromise>();\r\n    private currentId = 0;\r\n\r\n    newId(): number {\r\n        const id = this.currentId++;\r\n        this.currentId &= 0xffff; // wrap around to avoid overflow\r\n        return id;\r\n    }\r\n\r\n    create<T = void>(id: number): Promise<T> {\r\n        return new Promise<T>((resolve) => {\r\n            this.promises.set(id, { resolve });\r\n        });\r\n    }\r\n\r\n    resolve(id: number, result: any) {\r\n        const { promises } = this;\r\n        const pendingPromise = promises.get(id);\r\n        if (pendingPromise) {\r\n            promises.delete(id);\r\n            const { resolve } = pendingPromise;\r\n            resolve(result);\r\n        }\r\n    }\r\n}\r\n\r\ninterface PendingPromise {\r\n    resolve(value: any): void;\r\n}\r\n", "import { type OfflineStorage, type OfflineDirectory, RequestFormatter } from \"../storage\";\r\nimport { PromiseBag } from \"./promiseBag\";\r\nimport type { CreateDirResponse, CreateDirRequest, DeleteAllRequest, DirsRequest, DirsResponse, FilesRequest, IOResponse, ReadRequest, ReadResponse, DeleteAllResponse, FilesResponse, WriteRequest, WriteResponse, DeleteFilesRequest, DeleteFilesResponse, DeleteDirRequest, DeleteDirResponse } from \"./messages\";\r\nimport type { defaultRequestFormatter } from \"../\";\r\n\r\n/**\r\n * Create an OPFS based offline storage.\r\n * @param version Version string for offline storage schema\r\n * @param requestFormatter The formatter for converting directory and file names into fetch() requests and vice versa.\r\n * @param worker The IO worker, either directly from main thread, or indirectly from service worker. (Safari doesn't support OPFS directly from service worker).\r\n * @remarks\r\n * If you use the standard novorender cloud storage, you may use the {@link defaultRequestFormatter} to create the the requestFormatter.\r\n */\r\nexport async function createOPFSStorage(version: string, requestFormatter: RequestFormatter, worker: Worker | MessagePort): Promise<OfflineStorage> {\r\n    const storage = new OfflineStorageOPFS(version, requestFormatter, worker);\r\n    await storage.init();\r\n    return storage;\r\n}\r\n\r\nclass OfflineStorageOPFS implements OfflineStorage {\r\n    readonly promises = new PromiseBag();\r\n    readonly dirs = new Map<string, OfflineDirectoryOPFS>();\r\n\r\n    constructor(readonly version: string, readonly requestFormatter: RequestFormatter, readonly worker: Worker | MessagePort) {\r\n        worker.onmessage = (message: MessageEvent<IOResponse>) => {\r\n            const { data } = message;\r\n            this.promises.resolve(data.id, data);\r\n        };\r\n    }\r\n\r\n    // initialize existing directories from storage\r\n    async init(): Promise<void> {\r\n        const { worker, promises, dirs } = this;\r\n        const id = promises.newId();\r\n        const msg: DirsRequest = { kind: \"dirs\", id };\r\n        worker.postMessage(msg);\r\n        const response = await promises.create<DirsResponse>(id);\r\n        if (response.error) {\r\n            throw new Error(response.error);\r\n        }\r\n        for (const name of response.dirs) {\r\n            const dir = new OfflineDirectoryOPFS(this, name);\r\n            dirs.set(name, dir);\r\n        }\r\n    }\r\n\r\n    isAsset(request: Request): boolean {\r\n        return this.requestFormatter.tryDecode(request) != undefined;\r\n    }\r\n\r\n    async fetch(request: Request): Promise<Response | undefined> {\r\n        const { worker, requestFormatter, promises } = this;\r\n        const { dir, file } = requestFormatter.decode(request);\r\n        const id = promises.newId();\r\n        const msg: ReadRequest = { kind: \"read\", id, dir, file };\r\n        worker.postMessage(msg);\r\n        const response = await promises.create<ReadResponse>(id);\r\n        if (!response.error && response.buffer) {\r\n            return new Response(response.buffer, { status: 200, headers: { \"Content-Type\": \"application/octet-stream\", \"Content-Length\": `${response.buffer!.byteLength}` } });\r\n        }\r\n    }\r\n\r\n    get existingDirectories() {\r\n        return this.dirs.values();\r\n    }\r\n\r\n    hasDirectory(name: string): boolean {\r\n        return this.dirs.has(name);\r\n    }\r\n\r\n    async directory(name: string): Promise<OfflineDirectory> {\r\n        const { dirs } = this;\r\n        let dir = dirs.get(name);\r\n        if (!dir) {\r\n            dir = await this.addDirectory(name);\r\n            dirs.set(name, dir);\r\n        }\r\n        return dir;\r\n    }\r\n\r\n    async addDirectory(name: string) {\r\n        const { worker, promises } = this;\r\n        const id = promises.newId();\r\n        const msg: CreateDirRequest = { kind: \"create_dir\", id, dir: name };\r\n        worker.postMessage(msg);\r\n        const response = await promises.create<CreateDirResponse>(id);\r\n        if (response.error) {\r\n            throw new Error(response.error); // existing directory won't return error.\r\n        }\r\n        return new OfflineDirectoryOPFS(this, name);\r\n    }\r\n\r\n    async deleteAll() {\r\n        const { worker, promises } = this;\r\n        const id = promises.newId();\r\n        const msg: DeleteAllRequest = { kind: \"delete_all\", id };\r\n        worker.postMessage(msg);\r\n        const response = await promises.create<DeleteAllResponse>(id);\r\n        if (response.error) {\r\n            throw new Error(response.error);\r\n        }\r\n        this.dirs.clear();\r\n    }\r\n}\r\n\r\nclass OfflineDirectoryOPFS implements OfflineDirectory {\r\n    constructor(readonly context: OfflineStorageOPFS, readonly name: string) { }\r\n\r\n    request(name: string): Request {\r\n        const { context } = this;\r\n        const { requestFormatter } = context;\r\n        return requestFormatter.request(this.name, name);\r\n    }\r\n\r\n    async* files(): AsyncIterableIterator<string> {\r\n        const { context, name } = this;\r\n        const { worker, promises } = context;\r\n        const id = promises.newId();\r\n        const msg: FilesRequest = { kind: \"files\", id, dir: name };\r\n        worker.postMessage(msg);\r\n        const response = await promises.create<FilesResponse>(id);\r\n        if (response.error) {\r\n            throw new Error(response.error);\r\n        }\r\n        for (const file of response.files) {\r\n            yield file;\r\n        }\r\n    }\r\n\r\n    async read(name: string): Promise<ArrayBuffer | undefined> {\r\n        const { context } = this;\r\n        const { worker, promises } = context;\r\n        const id = promises.newId();\r\n        const msg: ReadRequest = { kind: \"read\", id, dir: this.name, file: name };\r\n        worker.postMessage(msg);\r\n        const response = await promises.create<ReadResponse>(id);\r\n        if (response.error) {\r\n            console.warn(response.error);\r\n        }\r\n        return response.buffer;\r\n    }\r\n\r\n    async write(name: string, buffer: ArrayBuffer): Promise<void> {\r\n        const { context } = this;\r\n        const { worker, promises } = context;\r\n        const id = promises.newId();\r\n        const msg: WriteRequest = { kind: \"write\", id, dir: this.name, file: name, buffer };\r\n        worker.postMessage(msg, [buffer]);\r\n        const response = await promises.create<WriteResponse>(id);\r\n        if (response.error) {\r\n            throw new Error(response.error);\r\n        }\r\n    }\r\n\r\n    async deleteFiles(names: Iterable<string>): Promise<void> {\r\n        const { context } = this;\r\n        const { worker, promises } = context;\r\n        const id = promises.newId();\r\n        const msg: DeleteFilesRequest = { kind: \"delete_files\", id, dir: this.name, files: [...names] };\r\n        worker.postMessage(msg);\r\n        const response = await promises.create<DeleteFilesResponse>(id);\r\n        if (response.error) {\r\n            throw new Error(response.error);\r\n        }\r\n    }\r\n\r\n    async delete(): Promise<void> {\r\n        const { context } = this;\r\n        const { worker, promises } = context;\r\n        const id = promises.newId();\r\n        const msg: DeleteDirRequest = { kind: \"delete_dir\", id, dir: this.name };\r\n        worker.postMessage(msg);\r\n        context.dirs.delete(this.name);\r\n        const response = await promises.create<DeleteDirResponse>(id);\r\n        if (response.error) {\r\n            throw new Error(response.error);\r\n        }\r\n    }\r\n}", "import type { OfflineDirectory } from \"./storage\";\r\n\r\n/** An scene manifest entry tuple, consisting of [filename/hash, byteSize]. */\r\nexport type SceneManifestEntry = readonly [name: string, size: number];\r\n\r\n/** A collection of scene manifest entry tuples, used to construct a scene manifest. */\r\nexport type SceneManifestData = Iterable<SceneManifestEntry>;\r\n\r\n/** A file manifest for a scene.\r\n * @remarks\r\n * A fundamental assumption here is that the file names in the manifest are hashes of the actual content, i.e. same name = same content.\r\n * If this condition is not met, synchronization will not work!\r\n */\r\nexport class SceneManifest {\r\n    /** A map of manifest filenames and their respective byte sizes. */\r\n    private readonly _files = new Map<string, number>;\r\n\r\n    // The manifest file entries.\r\n    get files(): IterableIterator<SceneManifestEntry> {\r\n        return this._files.entries();\r\n    }\r\n\r\n    /** The total byte size of all the files in this manifest. */\r\n    readonly totalByteSize: number;\r\n\r\n    /** The number of files. */\r\n    readonly numFiles: number;\r\n\r\n    /**\r\n     * @param data The entries of this manifest.\r\n     */\r\n    constructor(data: SceneManifestData) {\r\n        const { _files } = this;\r\n        let totalByteSize = 0;\r\n        let numFiles = 0;\r\n        for (const [name, size] of data) {\r\n            _files.set(name, size);\r\n            totalByteSize += size;\r\n            numFiles++;\r\n        }\r\n        this.totalByteSize = totalByteSize;\r\n        this.numFiles = numFiles;\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Get an offline file manifest.\r\n * @param dir The offline directory containing the file manifest.\r\n * @returns A scene manifest.\r\n * If the offline directory contains a manifest file, it will be read and returned as a complete manifest.\r\n * If not, the files in the directory will be enumerated and used to create a partial manifest.\r\n * The latter case indicates some prior error and is not ideal, but still better than re-downloading every file from scratch.\r\n */\r\nexport async function readManifest(dir: OfflineDirectory): Promise<SceneManifest> {\r\n    let data: SceneManifestData = [];\r\n    const buffer = await dir.read(\"manifest.json\");\r\n    if (buffer) {\r\n        const json = new TextDecoder().decode(buffer);\r\n        data = JSON.parse(json) as SceneManifestEntry[];\r\n    }\r\n    return new SceneManifest(data);\r\n}\r\n\r\n/**\r\n * Fetch file manifest online.\r\n * @param request The fetch() API request for the online \"manifest.json\" file.\r\n */\r\nexport async function fetchManifest(request: Request): Promise<SceneManifest> {\r\n    const response = await fetch(request);\r\n    if (!response.ok) {\r\n        throw new Error(\"Could not fetch manifest!\");\r\n    }\r\n    const data = await response.json() as SceneManifestData;\r\n    return new SceneManifest(data);\r\n}\r\n", "import { type PathNameFormatter, type PathNameParser, RequestFormatter } from \"./storage\";\r\n\r\n/**\r\n * Create a request formatter for the standard novorender cloud/blob storage.\r\n */\r\nexport function defaultRequestFormatter() {\r\n    const re = /^\\/(?<dir>[0-9a-f]{32})\\/webgl2_bin\\/(?<file>.+)$/;\r\n    const parser: PathNameParser = (str) => (str.match(re)?.groups as ReturnType<PathNameParser>);\r\n    const formatter: PathNameFormatter = (dir, file) => (`/${dir}/webgl2_bin/${file}`);\r\n    const baseUrl = new URL(\"https://blobs.novorender.com/\");\r\n    return new RequestFormatter(baseUrl, parser, formatter, \"cors\");\r\n}\r\n\r\n/**\r\n * Utility function to extract error message from an exception, if any.\r\n * @param value The exception\r\n * @returns Error.message, if \"message\" exists, value.toString() if not.\r\n */\r\nexport function errorMessage(value: unknown): string {\r\n    function isError(value: any): value is Error {\r\n        return value && \"message\" in value;\r\n    }\r\n    return isError(value) ? value.message : typeof (value) == \"string\" ? value : (value as any).toString();\r\n}\r\n\r\n", "import type { Logger } from \".\";\r\nimport type { OfflineViewState } from \"./state\";\r\nimport { SceneManifest, type SceneManifestData } from \"./manifest\";\r\nimport type { OfflineDirectory } from \"./storage\";\r\nimport { errorMessage } from \"./util\";\r\n\r\n/**\r\n * An offline scene.\r\n * @remarks\r\n * This class supports incremental synchronization between offline and online storage.\r\n * Error and status updates are reported to the {@link logger} property.\r\n * By default it's undefined, so to display status, events and progress, you must assign your own object implementing the {@link Logger} interface.\r\n */\r\nexport class OfflineScene {\r\n    /** Logger for errors and status updates. */\r\n    logger: Logger | undefined;\r\n\r\n    constructor(\r\n        /** The offline context for this scene. */\r\n        readonly context: OfflineViewState,\r\n        /** The storage directory for this scene. */\r\n        readonly dir: OfflineDirectory,\r\n        /** The file manifest this scene.\r\n         * @remarks\r\n         * Initially, this may be empty or partial.\r\n         * It may change when the scene is synchronized.\r\n         */\r\n        public manifest: SceneManifest\r\n    ) { }\r\n\r\n    /** The scene id. */\r\n    get id() {\r\n        return this.dir.name;\r\n    }\r\n\r\n    /** Delete all downloaded files for this scene and remove it from the context's list of offline scenes. */\r\n    async delete() {\r\n        const { dir, context, logger } = this;\r\n        const { scenes } = context;\r\n        const { name } = dir;\r\n        logger?.status(\"deleting\");\r\n        await dir.delete();\r\n        scenes.delete(name);\r\n        context.logger?.status(\"scene deleted\");\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Incrementally synchronize scene files with online storage.\r\n     * @param abortSignal A signal to abort downloads/synchronization.\r\n     * @returns True, if completed successfully, false if not.\r\n     * @remarks\r\n     * Synchronization may be resumed after an abort/failure.\r\n     * It compares the file manifest of local files with the online version and downloads only the difference.\r\n     * Errors are logged in the {@link logger}.\r\n     */\r\n    async sync(abortSignal: AbortSignal, sasKey: string): Promise<boolean> {\r\n        const { dir, manifest, logger, context } = this;\r\n        const { requestFormatter } = context.storage;\r\n        if (!navigator.onLine) {\r\n            logger?.status(\"offline\");\r\n            logger?.error(\"You must be online to synchronize files!\");\r\n            return false;\r\n        }\r\n\r\n        const existingFiles = new Map<string, number>(manifest.files);\r\n        async function scanFiles() {\r\n            // scan local files in the background, since this could take some time.\r\n            const files = dir.files();\r\n            for await (const filename of files) {\r\n                if (!filename.endsWith(\".json\")) {\r\n                    existingFiles.set(filename, 0);\r\n                }\r\n            }\r\n        };\r\n        const scanFilesPromise = scanFiles();\r\n        await scanFilesPromise;\r\n        // console.log(`# files: ${existingFiles.size}`);\r\n\r\n        try {\r\n            logger?.status(\"synchronizing\");\r\n            logger?.info?.(\"fetching manifest\");\r\n            // fetch online manifest\r\n            const manifestRequest = requestFormatter.request(dir.name, \"manifest.json\", sasKey, abortSignal)\r\n            const manifestResponse = await fetch(manifestRequest);\r\n            if (!manifestResponse.ok) {\r\n                throw new Error(manifestResponse.statusText);\r\n            }\r\n            const manifestData = await manifestResponse.json() as SceneManifestData;\r\n            if (abortSignal.aborted) {\r\n                logger?.status(\"aborted\");\r\n                return false;\r\n            }\r\n            const onlineManifest = new SceneManifest(manifestData);\r\n            const { totalByteSize } = onlineManifest;\r\n\r\n            const debounce = debouncer();\r\n\r\n            // start incremental download\r\n            logger?.info?.(\"fetching new files\");\r\n            let totalDownload = 0;\r\n            logger?.progress?.(totalDownload, totalByteSize);\r\n            const maxSimulataneousDownloads = 8;\r\n            const downloadQueue = new Array<Promise<void> | undefined>(maxSimulataneousDownloads);\r\n            for (const [name, size] of onlineManifest.files) {\r\n                if (!existingFiles.has(name)) {\r\n                    const fileRequest = requestFormatter.request(dir.name, name, sasKey, abortSignal);\r\n                    let idx = downloadQueue.findIndex(e => !e);\r\n                    if (idx < 0) {\r\n                        // queue is full, so wait for another download to complete\r\n                        await Promise.race(downloadQueue);\r\n                        idx = downloadQueue.findIndex(e => !e);\r\n                        console.assert(idx >= 0);\r\n                    }\r\n                    const downloadPromise = download();\r\n                    downloadQueue[idx] = downloadPromise;\r\n                    downloadPromise.finally(() => {\r\n                        downloadQueue[idx] = undefined;\r\n                    });\r\n                    // do downloads in \"parallel\"\r\n                    async function download() {\r\n                        let fileResponse = await fetch(fileRequest);\r\n                        if (fileResponse.ok) {\r\n                            const buffer = await fileResponse.arrayBuffer();\r\n                            await dir.write(name, buffer);\r\n                            totalDownload += size;\r\n                        } else {\r\n                            throw new Error(`Could not fetch ${name}!`);\r\n                        }\r\n                    }\r\n                } else {\r\n                    totalDownload += size;\r\n                }\r\n                if (debounce(100)) {\r\n                    logger?.progress?.(totalDownload, totalByteSize);\r\n                }\r\n            }\r\n            await Promise.all(downloadQueue);\r\n            logger?.progress?.(undefined, undefined);\r\n\r\n            // add manifest to local files last to mark the completion of sync.\r\n            const manifestBuffer = new TextEncoder().encode(JSON.stringify(manifestData)).buffer;\r\n            await dir.write(\"manifest.json\", manifestBuffer);\r\n            this.manifest = onlineManifest;\r\n\r\n            // delete unreferenced entries\r\n            logger?.info?.(\"cleanup\");\r\n            for (const [name] of onlineManifest.files) {\r\n                existingFiles.delete(name);\r\n            }\r\n            await dir.deleteFiles(existingFiles.keys());\r\n\r\n            logger?.status(\"synchronized\");\r\n            return true;\r\n        } catch (error: unknown) {\r\n            if (typeof error == \"object\" && error instanceof DOMException && error.code == DOMException.ABORT_ERR) {\r\n                logger?.status(\"aborted\");\r\n            } else {\r\n                logger?.status(\"error\");\r\n                logger?.error(errorMessage(error));\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nfunction debouncer() {\r\n    let prevTime = performance.now();\r\n    return function (minInterval: number) {\r\n        const now = performance.now();\r\n        if (now - prevTime > minInterval) {\r\n            prevTime = now;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n", "import { type Logger } from \"./logger\";\r\nimport { SceneManifest, readManifest } from \"./manifest\";\r\nimport { OfflineScene } from \"./scene\";\r\nimport { type OfflineStorage } from \"./storage\";\r\nimport { errorMessage } from \"./util\";\r\n\r\n/**\r\n * Create and initialize an offline view state object.\r\n * @param storage The offline storage to use.\r\n */\r\nexport async function createOfflineViewState(storage: OfflineStorage) {\r\n    const storageEstimate = \"estimate\" in navigator.storage ? await navigator.storage.estimate() : undefined;\r\n    const context = new OfflineViewState(storage, storageEstimate);\r\n    const { scenes } = context;\r\n    for (const dir of storage.existingDirectories) {\r\n        const manifest = await readManifest(dir);\r\n        const scene = new OfflineScene(context, dir, manifest);\r\n        scenes.set(dir.name, scene);\r\n    }\r\n    return context;\r\n}\r\n\r\n/**\r\n * Viewstate for offline support UI.\r\n * @remarks\r\n * This view state serves as a base offline management UI.\r\n * The purpose is to view and manage offline scenes, such as updating/synchronizing with newer versions online.\r\n * A service worker will implement the actual offline support for the engine itself and will use the underlying storage objects for read access only.\r\n * Error and status updates are reported to the {@link logger} property.\r\n * By default it's undefined, so to display status, events and progress, you must assign your own object implementing the {@link Logger} interface.\r\n */\r\nexport class OfflineViewState {\r\n    /** Map of active offline scenes */\r\n    readonly scenes = new Map<string, OfflineScene>();\r\n\r\n    /** Logger for errors and status updates. */\r\n    logger: Logger | undefined;\r\n\r\n    constructor(\r\n        /** The offline storage used. */\r\n        readonly storage: OfflineStorage,\r\n        /** The initially estimated storage usage and quotas, if available. You may use `navigator.estimate()` to get the latest update, although this doesn't necessarily reflect recent changes, hence the term \"estimate\". See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate) for more details. */\r\n        readonly initialStorageEstimate: StorageEstimate | undefined,\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Add a new scene to offline storage.\r\n     * @param id: The scene id.\r\n     * @returns The offline scene, or undefined if error.\r\n     * @remarks\r\n     * This function will merely mark the scene as an offline candidate.\r\n     * You need to call {@link OfflineScene.sync} for the scene to be downloaded and ready for offline use.\r\n     * Errors are logged in the {@link logger}.\r\n     */\r\n    async addScene(id: string): Promise<OfflineScene | undefined> {\r\n        const { storage, scenes, logger } = this;\r\n        if (scenes.has(id)) {\r\n            logger?.error(\"scene already added\");\r\n        }\r\n        try {\r\n            // const request = storage.requestFormatter.request(id, \"manifest.json\");\r\n            // const manifestData = await fetchManifestData(request);\r\n            logger?.status(\"adding scene\");\r\n            const manifest = new SceneManifest([]);\r\n            const dir = await storage.directory(id);\r\n            try {\r\n                const scene = new OfflineScene(this, dir, manifest);\r\n                // const manifestBuffer = new TextEncoder().encode(JSON.stringify(manifestData));\r\n                // scene.dir.write(\"manifest.json\", manifestBuffer);\r\n                scenes.set(id, scene);\r\n                logger?.status(\"scene added\");\r\n                return scene;\r\n            } catch (error: unknown) {\r\n                dir.delete(); // why?\r\n                throw error;\r\n            }\r\n        } catch (error: unknown) {\r\n            logger?.error(errorMessage(error));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete all offline data and remove every offline scene.\r\n     * @returns True if success, False if an error occurred.\r\n     * @remarks\r\n     * Errors are logged in the {@link logger}.\r\n     */\r\n    async deleteAll() {\r\n        const { logger, storage, scenes } = this;\r\n        try {\r\n            logger?.status(\"clearing cache\");\r\n            storage.deleteAll();\r\n            // for await (const dir of await storage.directories()) {\r\n            //     await dir.deleteAll();\r\n            // };\r\n            scenes.clear();\r\n            logger?.status(\"cache cleared\");\r\n            return true;\r\n        } catch (error: any) {\r\n            logger?.error(errorMessage(error));\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n", "import { createCacheOfflineStorage, createOPFSOfflineStorage } from \"../\";\r\nimport type { ConnectAcknowledge, ConnectRequest, ConnectResponse } from \"../opfs/messages\";\r\nimport { type OfflineStorage } from \"../storage\";\r\n\r\n/**\r\n * Handle service worker messages.\r\n * @param event The service worker message to handle.\r\n * @remarks\r\n * You must call this function from your service worker {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/message_event | ServiceWorkerGlobalScope: message} event to support offline storage.\r\n */\r\nexport async function serviceWorkerHandleMessage(event: MessageEvent<ConnectResponse>) {\r\n    const { source, data } = event;\r\n    switch (data.kind) {\r\n        case \"connect\": {\r\n            const { port } = data;\r\n            const storage = port ? await createOPFSOfflineStorage(port) : await createCacheOfflineStorage();\r\n            if (source && source instanceof Client) {\r\n                console.log(`Client ${source.id} connected to service worker!`);\r\n                const clientId = source.id;\r\n                clientStorages.set(clientId, storage);\r\n                navigator.locks.request(clientId, {}, (lock) => {\r\n                    // When the client tab closes it will release the lock so we can delete the entry.\r\n                    console.log(`Client ${clientId} disconnected from service worker!`);\r\n                    clientStorages.set(clientId, null); // we don't want to reconnect this client, so don't delete.\r\n                });\r\n                const client = await clients.get(clientId);\r\n                client?.postMessage({ kind: \"connected\" } as const satisfies ConnectAcknowledge)\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function serviceWorkerFetch(request: Request, clientId: string, cacheName: string): Promise<Response> {\r\n    // console.log(`fetch ${new URL(request.url).pathname}`);\r\n    const storage = getStorage(clientId);\r\n    let response: Response | undefined;\r\n    if (storage) {\r\n        response = await fetchFromStorage(request, storage);\r\n    }\r\n    if (!response) {\r\n        response = await fetchFromCache(request, cacheName);\r\n    }\r\n    if (!response.ok) {\r\n        console.warn(`HTTP error: ${response.status}, ${response.statusText}`);\r\n    }\r\n    return response;\r\n}\r\n\r\n// this global state merely works like a cache and will be recreated if the service worker is restarted.\r\nconst clientStorages = new Map<string, OfflineStorage | null>(); // null signifies a storage has been requested but not yet resolved.\r\n\r\nasync function connectToClient(clientId: string) {\r\n    const client = await clients.get(clientId);\r\n    if (client) {\r\n        client.postMessage({ kind: \"connect\", clientId } as const satisfies ConnectRequest);\r\n        // console.log(`Connecting to ${clientId} ...`);\r\n    }\r\n}\r\n\r\nfunction getStorage(clientId: string): OfflineStorage | null | undefined {\r\n    let storage = clientStorages.get(clientId);\r\n    if (storage === undefined) {\r\n        storage = null; // mark this client as connecting so we don't connect more than once.\r\n        clientStorages.set(clientId, storage);\r\n        connectToClient(clientId); // fire off the connect message and return null for now. we assume that the regular cache will handle all script files etc. required to process the connect message.\r\n    }\r\n    return storage;\r\n}\r\n\r\nasync function fetchFromStorage(request: Request, storage: OfflineStorage): Promise<Response | undefined> {\r\n    let response: Response | undefined;\r\n    const entry = storage.requestFormatter.tryDecode(request);\r\n    // Is it an binary asset?\r\n    if (entry) {\r\n        // console.log(`  from storage`);\r\n        // is it an offline asset?\r\n        if (storage.hasDirectory(entry.dir)) {\r\n            // assets are hashed and thus always safe to fetch offline first, regardless of version.\r\n            response = await storage.fetch(request) ?? Response.error();\r\n            if (!response.ok) {\r\n                if (navigator.onLine) {\r\n                    // console.log(`  unavailable offline, fetching online instead`);\r\n                    // fall back to fetching online\r\n                    response = await fetch(request);\r\n                    if (response.ok) {\r\n                        // since this directory is marked for offline, we assume the user wants to cache this file.\r\n                        const buffer = await response.clone().arrayBuffer();\r\n                        if (entry) {\r\n                            const { dir, file } = entry;\r\n                            (await storage.directory(dir)).write(file, buffer);\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.warn(`failed fetch: ${new URL(request.url).pathname}`);\r\n                }\r\n            }\r\n        } else {\r\n            // console.log(`  online only`);\r\n            response = await fetch(request);\r\n        }\r\n    }\r\n    return response;\r\n}\r\n\r\nasync function fetchFromCache(request: Request, cacheName: string): Promise<Response> {\r\n    let response: Response | undefined;\r\n    // this is a standard browser asset, e.g. script file etc., so we always fetch online first, if available\r\n    if (navigator.onLine) {\r\n        // fetch online to get latest version, or at least the version the cache headers says are safe to get.\r\n        response = await fetch(request);\r\n        const hasQuery = new URL(request.url).search.length > 0;\r\n        if (response.ok && !hasQuery) {\r\n            // add file to cache\r\n            const cache = await caches.open(cacheName);\r\n            // TODO: check dates/etags\r\n            await cache.put(request, response.clone());\r\n        }\r\n    } else {\r\n        // offline, so try to get file from cache instead.\r\n        const cache = await caches.open(cacheName);\r\n        response = await cache.match(request) ?? Response.error();\r\n    }\r\n    return response;\r\n}\r\n", "import { createCacheStorage } from \"./cache\";\r\nimport { createOPFSStorage } from \"./opfs\";\r\nimport { OfflineViewState, createOfflineViewState } from \"./state\";\r\nimport type { OfflineStorage } from \"./storage\";\r\nimport { defaultRequestFormatter } from \"./util\";\r\nimport type { ConnectAcknowledge, ConnectRequest, ConnectResponse } from \"./opfs/messages\";\r\n\r\nexport * from \"./serviceWorker\";\r\nexport type { Logger } from \"./logger\";\r\nexport type { OfflineScene } from \"./scene\";\r\nexport { createCacheStorage, createOfflineViewState, defaultRequestFormatter, type OfflineViewState };\r\n\r\n/** @internal The current storage schema version. */\r\nexport const schemaVersion = \"1.0\";\r\n\r\n\r\n/** Offline context object. */\r\nexport interface OfflineContext {\r\n    /** I/O Worker for OPFS file access. */\r\n    readonly ioWorker: Worker | undefined;\r\n\r\n    /** Disable offline support. */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * Enable offline support\r\n * @param serviceWorkerUrl The url to the service worker script, preferably at the root of the domain.\r\n * @param ioWorker The I/O worker for OFPS access, or undefined to fall back to Cache API instead.\r\n * @param sasKey The secure access signature (SAS) key used to access scene assets online.\r\n * @param abortSignal An abort signal for disabling/aborting offline support.\r\n * @returns A an offline context if successful, undefined otherwise.\r\n * @remarks\r\n * Offline won't work in incognito mode.\r\n * The first time this function is called, the service worker may not be activated, in which case this function also returns false.\r\n * If so, you must reload your page to activate it.\r\n * \r\n * Note that Cache API doesn't work well on chrome for large scenes with tens of thousands of files or more.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\r\n */\r\nexport async function enableOffline(serviceWorkerUrl: URL | undefined, ioWorkerUrl: URL | undefined, sasKey?: string): Promise<OfflineContext | undefined> {\r\n    const ioWorker = ioWorkerUrl ? new Worker(ioWorkerUrl, { type: \"module\", name: \"IO\" }) : undefined;\r\n    const dispose = await enableServiceWorker(serviceWorkerUrl, ioWorker, sasKey);\r\n    return { ioWorker, dispose } as const satisfies OfflineContext;\r\n}\r\n\r\nasync function enableServiceWorker(serviceWorkerUrl: URL | undefined, ioWorker: Worker | undefined, sasKey?: string) {\r\n    let disable = () => { }; // don't do anything here by default.\r\n    if (serviceWorkerUrl) {\r\n        if (\"serviceWorker\" in navigator) {\r\n            const { serviceWorker } = navigator;\r\n            const { controller } = serviceWorker;\r\n            if (ioWorker && controller) {\r\n                let disableResolve: (arg: () => void) => void = undefined!;\r\n                let connectedResolve: () => void = undefined!;\r\n                let disablePromise = new Promise<() => void>(resolve => {\r\n                    disableResolve = resolve;\r\n                });\r\n                let connectedPromise = new Promise<void>(resolve => {\r\n                    connectedResolve = resolve;\r\n                });\r\n                // handle connect messages\r\n                serviceWorker.onmessage = async (event: MessageEvent<ConnectRequest | ConnectAcknowledge>) => {\r\n                    const { data } = event;\r\n                    switch (data.kind) {\r\n                        case \"connect\": {\r\n                            const { clientId } = data;\r\n                            navigator.locks.request(clientId, { ifAvailable: true }, lock => {\r\n                                if (lock) {\r\n                                    const promise = new Promise<void>((resolve) => {\r\n                                        disableResolve(resolve);\r\n                                    }); // sit on this lock until this tab/client closes or the returned disable() function is called.\r\n                                    return promise;\r\n                                } else {\r\n                                    console.warn(`Could not obtain service worker client lock ${clientId}!`);\r\n                                }\r\n                            });\r\n                            // respond and hook up service and IO worker.\r\n                            const channel = new MessageChannel();\r\n                            const { port1, port2 } = channel;\r\n                            ioWorker.postMessage({ kind: \"connect\", port: port1 } as const satisfies ConnectResponse, [port1]);\r\n                            controller.postMessage({ kind: \"connect\", port: port2 } as const satisfies ConnectResponse, [port2]);\r\n                            break;\r\n                        }\r\n                        case \"connected\": {\r\n                            connectedResolve();\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n                }\r\n                // await connect request from service worker\r\n                disable = await disablePromise;\r\n                // await acknowledgement from service worker\r\n                await connectedPromise;\r\n                console.log(\"Service worker connected!\");\r\n            }\r\n\r\n            // register service worker.\r\n            if (navigator.onLine) {\r\n                try {\r\n                    await registerServiceWorker(serviceWorkerUrl);\r\n                } catch (error: unknown) {\r\n                    console.warn(`Service worker registration failed: ${error}`); // \r\n                }\r\n            }\r\n            // const registration = await navigator.serviceWorker.ready;\r\n            // const registration = await navigator.serviceWorker.getRegistration();\r\n        } else {\r\n            console.warn(`Service worker is not supported!`); // private/incognito mode?\r\n        }\r\n    }\r\n    return disable;\r\n}\r\n\r\n/**\r\n * Manage offline storage.\r\n * @param ioWorker The I/O worker for OPFS access.\r\n * @returns An offline view state context used for offline storage management UI.\r\n * @internal\r\n */\r\nexport async function manageOfflineStorage(ioWorker: Worker | undefined) {\r\n    const storage = ioWorker ?\r\n        await createOPFSStorage(schemaVersion, defaultRequestFormatter(), ioWorker) :\r\n        await createCacheStorage(schemaVersion, defaultRequestFormatter());\r\n    // The context is for UI. The engine only needs the storage itself.\r\n    const context = await createOfflineViewState(storage);\r\n    return context;\r\n}\r\n\r\n/**\r\n * Create a cache based offline storage.\r\n * @returns An offline context used for offline storage management UI.\r\n * @internal\r\n */\r\nexport async function createCacheOfflineStorage(): Promise<OfflineStorage> {\r\n    const storage = await createCacheStorage(schemaVersion, defaultRequestFormatter());\r\n    return storage;\r\n}\r\n\r\n/**\r\n * Create an OPFS based offline storage.\r\n * @param worker The OPFS IO worker, either directly from main thread, or indirectly from service worker. (Safari doesn't support OPFS directly from service worker).\r\n * @returns An offline context used for offline storage management UI.\r\n * @internal\r\n */\r\nexport async function createOPFSOfflineStorage(worker: Worker | MessagePort): Promise<OfflineStorage> {\r\n    const storage = await createOPFSStorage(schemaVersion, defaultRequestFormatter(), worker);\r\n    return storage;\r\n}\r\n\r\nasync function registerServiceWorker(url: URL) {\r\n    try {\r\n        const registration = await navigator.serviceWorker.register(url, { type: \"module\", updateViaCache: \"none\" });\r\n        if (registration.installing) {\r\n            // console.log(\"Service worker installing\");\r\n            // const promise = new Promise<void>(resolve => {\r\n            //     navigator.serviceWorker.oncontrollerchange = () => {\r\n            //         resolve();\r\n            //     };\r\n            // });\r\n            // await promise; // wait for controller to become active\r\n        } else if (registration.waiting) {\r\n            // console.log(\"Service worker installed\");\r\n        }\r\n        // const r = await navigator.serviceWorker.ready;\r\n        return registration;\r\n    } catch (error) {\r\n        console.error(`Registration failed with ${error}`);\r\n    }\r\n}\r\n", "/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport type { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\nexport const finalizer = Symbol(\"Comlink.finalizer\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nfunction isAllowedOrigin(\n  allowedOrigins: (string | RegExp)[],\n  origin: string\n): boolean {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function expose(\n  obj: any,\n  ep: Endpoint = globalThis as any,\n  allowedOrigins: (string | RegExp)[] = [\"*\"]\n) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n          if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n            obj[finalizer]();\n          }\n        }\n      })\n      .catch((error) => {\n        // Send Serialization Error To Caller\n        const [wireValue, transferables] = toWireValue({\n          value: new TypeError(\"Unserializable return value\"),\n          [throwMarker]: 0,\n        });\n        ep.postMessage({ ...wireValue, id }, transferables);\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction releaseEndpoint(ep: Endpoint) {\n  return requestResponseMessage(ep, {\n    type: MessageType.RELEASE,\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\n\ninterface FinalizationRegistry<T> {\n  new (cb: (heldValue: T) => void): FinalizationRegistry<T>;\n  register(\n    weakItem: object,\n    heldValue: T,\n    unregisterToken?: object | undefined\n  ): void;\n  unregister(unregisterToken: object): void;\n}\ndeclare var FinalizationRegistry: FinalizationRegistry<Endpoint>;\n\nconst proxyCounter = new WeakMap<Endpoint, number>();\nconst proxyFinalizers =\n  \"FinalizationRegistry\" in globalThis &&\n  new FinalizationRegistry((ep: Endpoint) => {\n    const newCount = (proxyCounter.get(ep) || 0) - 1;\n    proxyCounter.set(ep, newCount);\n    if (newCount === 0) {\n      releaseEndpoint(ep);\n    }\n  });\n\nfunction registerProxy(proxy: object, ep: Endpoint) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\n\nfunction unregisterProxy(proxy: object) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously \u00AF\\_(\u30C4)_/\u00AF\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn\u2019t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  registerProxy(proxy, ep);\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T extends {}>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = globalThis,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n", "import { MeasureView, type MeasureWorker } from \"../measure_view\";\r\n\r\nexport class BaseModule {\r\n    constructor(readonly worker: MeasureWorker, readonly parent: MeasureView) { }\r\n}\r\n", "import type { CollisionValues } from \".\";\r\nimport { BaseModule } from \"../base\";\r\nimport type { MeasureSettings, MeasureView, MeasureWorker, ParametricEntity } from \"../../measure_view\";\r\n\r\n/** \r\n * Module for all collision calculations\r\n */\r\n\r\nexport class CollisionModule {\r\n    constructor(readonly worker: MeasureWorker, readonly parent: MeasureView) { }\r\n\r\n    /** \r\n     * Returns collision values between 2 entities\r\n     * currently only works for two cylinders\r\n     */\r\n    async collision(\r\n        a: ParametricEntity,\r\n        b: ParametricEntity,\r\n        setting?: MeasureSettings\r\n    ): Promise<CollisionValues | undefined> {\r\n        if (a.drawKind == \"face\" && b.drawKind == \"face\") {\r\n            const workerScene = await this.worker;\r\n            return await workerScene.faceToFaceCollision(a.ObjectId,\r\n                a.pathIndex,\r\n                a.instanceIndex,\r\n                b.ObjectId,\r\n                b.pathIndex,\r\n                b.instanceIndex,\r\n                setting)\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}", "import { type ReadonlyVec2, vec2 } from \"gl-matrix\";\r\n\r\n\r\n/** @ignore */\r\nexport interface Intersection2d {\r\n    t: number,\r\n    u: number,\r\n    p: ReadonlyVec2\r\n}\r\n\r\n\r\n/** @ignore */\r\nexport function lineSegmentIntersection(lineA: { start: ReadonlyVec2, end: ReadonlyVec2 }, lineB: { start: ReadonlyVec2, end: ReadonlyVec2 }): Intersection2d | undefined {\r\n    const dirA = vec2.sub(vec2.create(), lineA.end, lineA.start);\r\n    const dirB = vec2.sub(vec2.create(), lineB.end, lineB.start);\r\n\r\n    const axb = dirA[0] * dirB[1] - dirA[1] * dirB[0];\r\n    const startDir = vec2.sub(vec2.create(), lineB.start, lineA.start);\r\n\r\n    if (axb == 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const t = (startDir[0] * dirB[1] - startDir[1] * dirB[0]) / axb;\r\n    const u = (startDir[0] * dirA[1] - startDir[1] * dirA[0]) / axb;\r\n\r\n    if ((0 <= t && t <= 1) && (0 <= u && u <= 1)) {\r\n        return {\r\n            p: vec2.scaleAndAdd(vec2.create(), lineA.start, dirA, t), t, u\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}", "import type { ReadonlyVec2, ReadonlyVec3, } from \"gl-matrix\";\r\nimport { glMatrix, mat4, vec2, vec3, vec4 } from \"gl-matrix\";\r\nimport type { Camera, MeasureEntity, MeasureSettings, MeasureWorker } from \"../../measure_view\";\r\nimport { MeasureView } from \"../../measure_view\";\r\nimport { BaseModule } from \"../base\";\r\nimport type { DrawContext, DrawObject, DrawPart, DrawProduct, DrawableEntity } from \".\";\r\nimport type { DuoMeasurementValues } from \"../core\";\r\nimport type { ManholeMeasureValues } from \"../manhole\";\r\nimport { lineSegmentIntersection, type Intersection2d } from \"../../calculations_2d\";\r\n\r\nconst SCREEN_SPACE_EPSILON = 0.000001;\r\n\r\n/**\r\n * Module for converting measure data to drawable objects. \r\n * functions will generally use Camera to object to project the objects to view space\r\n */\r\n\r\nexport class DrawModule extends BaseModule {\r\n\r\n    constructor(readonly worker: MeasureWorker, readonly parent: MeasureView, readonly drawContext: DrawContext) {\r\n        super(worker, parent);\r\n    }\r\n\r\n    /** @ignore */\r\n    async getEntitiyObjects(\r\n        entity: MeasureEntity,\r\n        setting?: MeasureSettings\r\n    ): Promise<DrawObject | undefined> {\r\n        const workerScene = await this.worker;\r\n\r\n        switch (entity.drawKind) {\r\n            case \"edge\": {\r\n                const wsVertices = await workerScene.getTesselatedEdge(\r\n                    entity.ObjectId,\r\n                    entity.pathIndex,\r\n                    entity.instanceIndex\r\n                );\r\n                return {\r\n                    kind: \"edge\", parts: [{ vertices3D: wsVertices, drawType: \"lines\" }]\r\n                };\r\n            }\r\n            case \"face\": {\r\n                const drawObjects = await workerScene.getFaceDrawObject(\r\n                    entity.ObjectId,\r\n                    entity.pathIndex,\r\n                    entity.instanceIndex,\r\n                    setting\r\n                );\r\n                return drawObjects;\r\n            }\r\n            case \"vertex\": {\r\n                return {\r\n                    kind: \"vertex\",\r\n                    parts: [{ vertices3D: [entity.parameter as vec3], drawType: \"vertex\" }]\r\n                };\r\n            }\r\n            case \"curveSegment\": {\r\n                const wsVertices = await workerScene.tesselateCurveSegment(\r\n                    entity.ObjectId,\r\n                    entity.pathIndex,\r\n                    entity.instanceIndex\r\n                );\r\n                return {\r\n                    kind: \"curveSegment\",\r\n                    parts: [{ vertices3D: wsVertices, drawType: \"lines\" }]\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Updates the input draw objects with new 2d info based on camera properties\r\n     * @param drawProduct The product that will be updated based on current camera.\r\n     * @returns Corresponding 3D position at the view plane in world space, or undefined if there is no active render context.\r\n     */\r\n    updateProuct(drawProduct: DrawProduct) {\r\n        FillDrawInfo2D(this.drawContext, drawProduct.objects);\r\n    }\r\n\r\n    /** Converts world space lines to on screen space lines \r\n     * @param points World space points that will be projected to screen space\r\n     * @returns Screen space points, a path that will cut to the edge of the screen, \r\n     * points2d, all the points in 2d space regadless if they are within the current canvas size\r\n     * and the original points removed from screen points\r\n     */\r\n    toScreenSpace(points: ReadonlyVec3[]): { screenPoints: ReadonlyVec2[], points2d: ReadonlyVec2[], removedIndices: number[] } | undefined {\r\n        const { drawContext } = this;\r\n        const { width, height, camera } = drawContext;\r\n        const { camMat, projMat } = getPathMatrices(width, height, camera);\r\n\r\n        return toPathPointsFromMatrices(\r\n            points,\r\n            camMat,\r\n            projMat,\r\n            camera.near,\r\n            width, height,\r\n            camera.kind == \"orthographic\"\r\n        );\r\n    }\r\n\r\n    /** Converts world space points to on screen space points\r\n     * @param points World space points that will be projected to screen space\r\n     * @returns Screen space points regadless if they are within the current canvas size\r\n     */\r\n    toMarkerPoints(points: ReadonlyVec3[]): (ReadonlyVec2 | undefined)[] {\r\n        const { drawContext } = this;\r\n        const { width, height, camera } = drawContext;\r\n        const { camMat, projMat } = getPathMatrices(width, height, camera);\r\n        return points\r\n            .map((p) => vec3.transformMat4(vec3.create(), p, camMat))\r\n            .map((p, i, arr) => {\r\n                if (camera.kind === \"orthographic\") {\r\n                    if (p[2] > 0 && p[2] < 0.1) {\r\n                        p[2] = -0.0001;\r\n                    }\r\n                }\r\n\r\n                if (p[2] > SCREEN_SPACE_EPSILON) {\r\n                    return undefined;\r\n                }\r\n\r\n                return toScreen(projMat, width, height, p)\r\n            })\r\n    }\r\n\r\n    /** Returns a hierarcical structure of the element, describing how it should be drawn in 2d\r\n     * @param entity the entity that is being drawn to screen, this can be any object that furfill the DrawableEntity interface {@link DrawableEntity}\r\n     * @param setting settings on how the entity is supposed to be displayed\r\n     * @returns  hierarcical structure of the element, describing how it should be drawn in 2d, including labels and angles\r\n     */\r\n    async getDrawEntity(\r\n        entity: DrawableEntity,\r\n        setting?: MeasureSettings\r\n    ): Promise<DrawProduct> {\r\n        let drawObjects: DrawObject[] = [];\r\n        let kind: \"manhole\" | \"basic\" | \"measureResult\" | undefined = undefined;\r\n        if (entity.drawKind == \"manhole\") {\r\n            drawObjects = await this.parent.manhole.getManholeDrawObject(entity as ManholeMeasureValues);\r\n            kind = \"manhole\"\r\n        }\r\n        else if (entity.drawKind == \"measureResult\") {\r\n            drawObjects = [getResultDrawObject(entity as DuoMeasurementValues)];\r\n            kind = \"measureResult\";\r\n        }\r\n        else {\r\n            const drawObject = await this.getEntitiyObjects(entity as MeasureEntity, setting);\r\n            if (drawObject) {\r\n                drawObjects = [drawObject];\r\n            }\r\n            kind = \"basic\";\r\n        }\r\n\r\n        if (drawObjects) {\r\n            FillDrawInfo2D(this.drawContext, drawObjects);\r\n        }\r\n        return {\r\n            kind, objects: drawObjects\r\n        };\r\n    }\r\n\r\n    /** Converts a list of points to a drawable polygon or linestrip\r\n     * @param points Set of points describing a polygon or linestrip\r\n     * @param setting settings on how the entity is supposed to be displayed\r\n     * @returns  hierarcical structure of the element, describing how it should be drawn in 2d, including labels and angles\r\n     */\r\n    getDrawObjectFromPoints(points: ReadonlyVec3[], closed = true, angles = true, generateLineLabels = false): DrawProduct | undefined {\r\n        if (points.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const parts: DrawPart[] = [];\r\n        if (points.length === 1) {\r\n            parts.push({ drawType: \"vertex\", vertices3D: points });\r\n        } else {\r\n            let text: string[][] | undefined = undefined;\r\n            if (generateLineLabels) {\r\n                const labels: string[] = [];\r\n                for (let i = 1; i < points.length; ++i) {\r\n                    labels.push(vec3.dist(points[i - 1], points[i]).toFixed(3));\r\n                }\r\n                text = [labels];\r\n            }\r\n            parts.push({ drawType: closed ? \"filled\" : \"lines\", vertices3D: points, text });\r\n        }\r\n\r\n        const drawObjects: DrawObject[] = [];\r\n        drawObjects.push({ kind: \"complex\", parts });\r\n        if (angles) {\r\n            const endIdx = closed ? points.length : points.length - 1;\r\n            for (let i = closed ? 0 : 1; i < endIdx; ++i) {\r\n                const anglePt = points[i];\r\n                const fromPIdx = i === 0 ? points.length - 1 : i - 1;\r\n                const toPIdx = i === points.length - 1 ? 0 : i + 1;\r\n                const fromP = points[fromPIdx];\r\n                const toP = points[toPIdx];\r\n                const diffA = vec3.sub(vec3.create(), points[fromPIdx], anglePt);\r\n                const diffB = vec3.sub(vec3.create(), points[toPIdx], anglePt);\r\n                const angle = vec3.angle(diffA, diffB) * (180 / Math.PI);\r\n                if (angle > 0.1) {\r\n                    parts.push({ text: angle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(anglePt), vec3.clone(fromP), vec3.clone(toP)] });\r\n                }\r\n            }\r\n        }\r\n\r\n        FillDrawInfo2D(this.drawContext, drawObjects);\r\n        return { kind: \"basic\", objects: drawObjects };\r\n    }\r\n\r\n\r\n    /** Returns a draw object that places a text based on input points.\r\n     * @param points Set of points for where the text should be placed.\r\n     * @param text Text\r\n     * @returns  Draw product for displaying the text at chosen locations\r\n     */\r\n    getDrawText(points: ReadonlyVec3[], text: string): DrawProduct | undefined {\r\n        if (points.length === 0) {\r\n            return undefined;\r\n        }\r\n        const parts: DrawPart[] = [];\r\n        parts.push({ drawType: \"text\", vertices3D: points, text });\r\n\r\n        const drawObjects: DrawObject[] = [];\r\n        drawObjects.push({ kind: \"complex\", parts });\r\n\r\n        FillDrawInfo2D(this.drawContext, drawObjects);\r\n        return { kind: \"basic\", objects: drawObjects };\r\n    }\r\n\r\n    /** Returns a draw object that traces intersection between the 2d paths and displays the 3d distance as a label\r\n     * @param objects Products that are being traced.\r\n     * @param line Line that traces over objects.\r\n     * @returns  Draw product for displaying lines between intersections and distance lables.\r\n     */\r\n    getTraceDrawOject(objects: DrawProduct[], line: { start: ReadonlyVec2, end: ReadonlyVec2 }): DrawProduct {\r\n        if (objects.length > 1) {\r\n            const intersections: {\r\n                intersection: Intersection2d, point3d: ReadonlyVec3\r\n            }[] = [];\r\n            const emptyVertex = vec3.create();\r\n            objects.forEach(obj => {\r\n                if (obj.kind == \"basic\") {\r\n                    obj.objects.forEach(drawobj => {\r\n                        if (drawobj.kind == \"complex\" || drawobj.kind == \"curveSegment\" || drawobj.kind == \"edge\") {\r\n                            drawobj.parts.forEach(part => {\r\n                                if (part.vertices2D && (part.drawType == \"lines\" || part.drawType == \"curveSegment\" || part.drawType == \"filled\")) {\r\n                                    for (let i = 1; i < part.vertices2D.length; ++i) {\r\n                                        if (vec3.equals(part.vertices3D[i - 1], emptyVertex) || vec3.equals(part.vertices3D[i], emptyVertex)) {\r\n                                            continue;\r\n                                        }\r\n                                        const lineB = { start: part.vertices2D[i - 1], end: part.vertices2D[i] };\r\n                                        const intersection = lineSegmentIntersection(line, lineB);\r\n                                        if (intersection) {\r\n                                            const dir = vec3.sub(vec3.create(), part.vertices3D[i], part.vertices3D[i - 1]);\r\n                                            intersections.push({ intersection, point3d: vec3.scaleAndAdd(vec3.create(), part.vertices3D[i - 1], dir, intersection.u) });\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            if (intersections.length > 1) {\r\n                intersections.sort((a, b) => a.intersection.t - b.intersection.t);\r\n                const vertices3D: ReadonlyVec3[] = [vec3.create()];\r\n                const vertices2D: ReadonlyVec2[] = [line.start];\r\n                const labels: string[] = [\"\"];\r\n                intersections.forEach(intersection => {\r\n                    vertices2D.push(intersection.intersection.p);\r\n                });\r\n                vertices2D.push(line.end);\r\n                for (let i = 0; i < intersections.length; ++i) {\r\n                    if (i != 0) {\r\n                        labels.push(vec3.dist(intersections[i].point3d, intersections[i - 1].point3d).toFixed(3));\r\n                    }\r\n                    vertices3D.push(intersections[i].point3d);\r\n                }\r\n                vertices3D.push(vec3.create());\r\n                labels.push(\"\");\r\n\r\n                const parts: DrawPart[] = [];\r\n                parts.push({ drawType: \"lines\", vertices3D, vertices2D, text: [labels] });\r\n\r\n                const drawObjects: DrawObject[] = [];\r\n                drawObjects.push({ kind: \"complex\", parts });\r\n                return { kind: \"basic\", objects: drawObjects };\r\n            }\r\n\r\n        }\r\n        const parts: DrawPart[] = [];\r\n        parts.push({ drawType: \"lines\", vertices3D: [], vertices2D: [line.start, line.end] });\r\n\r\n        const drawObjects: DrawObject[] = [];\r\n        drawObjects.push({ kind: \"complex\", parts });\r\n        return { kind: \"basic\", objects: drawObjects };\r\n    }\r\n\r\n    /** returs the 2d normal of the first draw part the line hits  \r\n     * @param object Product with parts\r\n     * @param line Line that needs to intersect the product. \r\n     * @returns  The 2d normal of the drawn object at the intersection of the input line.\r\n     */\r\n    get2dNormal(object: DrawProduct, line: { start: ReadonlyVec2, end: ReadonlyVec2 }): { normal: ReadonlyVec2, position: ReadonlyVec2 } | undefined {\r\n        if (object.kind != \"basic\") {\r\n            return undefined;\r\n        }\r\n        const intersections: {\r\n            intersection: Intersection2d, line: { start: ReadonlyVec2, end: ReadonlyVec2 }\r\n        }[] = [];\r\n        const emptyVertex = vec3.create();\r\n        object.objects.forEach(drawobj => {\r\n            if (drawobj.kind == \"complex\" || drawobj.kind == \"curveSegment\" || drawobj.kind == \"edge\") {\r\n                drawobj.parts.forEach(part => {\r\n                    if (part.vertices2D && (part.drawType == \"lines\" || part.drawType == \"curveSegment\" || part.drawType == \"filled\")) {\r\n                        for (let i = 1; i < part.vertices2D.length; ++i) {\r\n                            if (vec3.equals(part.vertices3D[i - 1], emptyVertex) || vec3.equals(part.vertices3D[i], emptyVertex)) {\r\n                                continue;\r\n                            }\r\n                            const lineB = { start: part.vertices2D[i - 1], end: part.vertices2D[i] };\r\n                            const intersection = lineSegmentIntersection(line, lineB);\r\n                            if (intersection) {\r\n                                intersections.push({ intersection, line: lineB });\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        if (intersections.length > 0) {\r\n            intersections.sort((a, b) => a.intersection.t - b.intersection.t);\r\n            const line = intersections[0].line;\r\n            const dx = line.end[0] - line.start[0];\r\n            const dy = line.end[1] - line.start[1];\r\n            const normal = vec2.fromValues(-dy, dx);\r\n            vec2.normalize(normal, normal);\r\n            return {\r\n                normal, position: intersections[0].intersection.p\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction getPathMatrices(width: number, height: number, camera: Camera): { camMat: mat4; projMat: mat4 } {\r\n    const camMat = mat4.fromRotationTranslation(\r\n        mat4.create(),\r\n        camera.rotation,\r\n        camera.position\r\n    );\r\n    mat4.invert(camMat, camMat);\r\n    if (camera.kind == \"pinhole\") {\r\n        const projMat = mat4.perspective(\r\n            mat4.create(),\r\n            glMatrix.toRadian(camera.fov),\r\n            width / height,\r\n            camera.near,\r\n            camera.far\r\n        );\r\n        return { camMat, projMat };\r\n    } else {\r\n        const aspect = width / height;\r\n        const halfHeight = camera.fov / 2;\r\n        const halfWidth = halfHeight * aspect;\r\n        const projMat = mat4.ortho(\r\n            mat4.create(),\r\n            -halfWidth,\r\n            halfWidth,\r\n            -halfHeight,\r\n            halfHeight,\r\n            camera.near,\r\n            camera.far\r\n        );\r\n        return { camMat, projMat };\r\n    }\r\n}\r\n\r\nfunction toPathPointsFromMatrices(\r\n    points: ReadonlyVec3[],\r\n    camMat: mat4,\r\n    projMat: mat4,\r\n    near: number,\r\n    width: number,\r\n    height: number,\r\n    ortho: boolean\r\n): { screenPoints: ReadonlyVec2[], points2d: ReadonlyVec2[], removedIndices: number[], addedIndices: number[] } | undefined {\r\n    const clip = (p: vec3, p0: vec3) => {\r\n        const d = vec3.sub(vec3.create(), p0, p);\r\n        vec3.scale(d, d, (-near - p[2]) / d[2]);\r\n        return vec3.add(d, d, p);\r\n    };\r\n\r\n    const points2d: ReadonlyVec2[] = [];\r\n    const removedIndices: number[] = [];\r\n    const addedIndices: number[] = [];\r\n    const sv = points.map((v) => vec3.transformMat4(vec3.create(), v, camMat));\r\n    if (ortho) {\r\n        for (const p of sv) {\r\n            if (p[2] > 0 && p[2] < 0.1) {\r\n                p[2] = -0.0001;\r\n            }\r\n        }\r\n    }\r\n    const screenPoints = sv.reduce((tail, head, i) => {\r\n        if (head[2] > SCREEN_SPACE_EPSILON) {\r\n            if (i === 0 || sv[i - 1][2] > 0) {\r\n                removedIndices.push(i);\r\n                return tail;\r\n            }\r\n            const p0 = clip(sv[i - 1], head);\r\n            const _p = toScreen(projMat, width, height, p0);\r\n            points2d.push(_p);\r\n            return tail.concat([_p]);\r\n        }\r\n        const _p = toScreen(projMat, width, height, head);\r\n        points2d.push(_p);\r\n        if (i !== 0 && sv[i - 1][2] > SCREEN_SPACE_EPSILON) {\r\n            const p0 = clip(head, sv[i - 1]);\r\n            const _p0 = toScreen(projMat, width, height, p0);\r\n            addedIndices.push(i);\r\n            return tail.concat([_p0], [_p]);\r\n        }\r\n        return tail.concat([_p]);\r\n    }, [] as ReadonlyVec2[]);\r\n    if (screenPoints.length) {\r\n        return { screenPoints, points2d, removedIndices, addedIndices };\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction toScreen(projMat: mat4, width: number, height: number, p: ReadonlyVec3): ReadonlyVec2 {\r\n    const _p = vec4.transformMat4(\r\n        vec4.create(),\r\n        vec4.fromValues(p[0], p[1], p[2], 1),\r\n        projMat\r\n    );\r\n\r\n    const pt = vec2.fromValues(\r\n        Math.round(((_p[0] * 0.5) / _p[3] + 0.5) * width),\r\n        Math.round((0.5 - (_p[1] * 0.5) / _p[3]) * height)\r\n    );\r\n\r\n    return pt.every((num) => !Number.isNaN(num) && Number.isFinite(num)) ? pt : vec2.fromValues(-100, -100);\r\n};\r\n\r\nfunction FillDrawInfo2D(context: DrawContext, drawObjects: DrawObject[]) {\r\n    const { width, height, camera } = context;\r\n    const { camMat, projMat } = getPathMatrices(width, height, camera);\r\n\r\n    for (const drawObject of drawObjects) {\r\n        for (const drawPart of drawObject.parts) {\r\n            const points = toPathPointsFromMatrices(\r\n                drawPart.vertices3D,\r\n                camMat,\r\n                projMat,\r\n                camera.near,\r\n                width,\r\n                height,\r\n                camera.kind == \"orthographic\"\r\n            );\r\n            if (points) {\r\n                const { screenPoints, removedIndices, addedIndices } = points;\r\n                drawPart.vertices2D = screenPoints;\r\n                if ((removedIndices.length > 0 || addedIndices.length > 0)) {\r\n                    if (drawPart.text && Array.isArray(drawPart.text)) {\r\n                        drawPart.text[0] = drawPart.text[0].reduce((tail, head, i) => {\r\n                            if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\r\n                                return tail.concat([\"\", head])\r\n                            }\r\n                            if (removedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i + 1) != undefined) {\r\n                                return tail;\r\n                            } else {\r\n                                return tail.concat(head);\r\n                            }\r\n                        }, [] as string[]);\r\n                    }\r\n                    const newVert3d: ReadonlyVec3[] = [];\r\n                    drawPart.vertices3D.forEach((v, i) => {\r\n                        if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\r\n                            newVert3d.concat([vec3.create(), v])\r\n                        }\r\n                        else if (removedIndices.find((v) => v == i) == undefined || removedIndices.find((v) => v == i + 1) == undefined) {\r\n                            return newVert3d.push(v);\r\n                        }\r\n                        drawPart.vertices3D = newVert3d;\r\n                    });\r\n                }\r\n            }\r\n            if (drawPart.voids) {\r\n                drawPart.voids.forEach((drawVoid, j) => {\r\n                    const voidPoints = toPathPointsFromMatrices(\r\n                        drawVoid.vertices3D,\r\n                        camMat,\r\n                        projMat,\r\n                        camera.near,\r\n                        width,\r\n                        height,\r\n                        camera.kind == \"orthographic\"\r\n                    );\r\n                    if (voidPoints) {\r\n                        const { screenPoints, removedIndices, addedIndices } = voidPoints;\r\n                        drawVoid.vertices2D = screenPoints;\r\n                        if ((removedIndices.length > 0 || addedIndices.length > 0) && drawPart.text && Array.isArray(drawPart.text)) {\r\n                            drawPart.text[j + 1] = drawPart.text[j + 1].reduce((tail, head, i) => {\r\n                                if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\r\n                                    return tail.concat([\"\", head])\r\n                                }\r\n                                if (removedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i + 1) != undefined) {\r\n                                    return tail;\r\n                                } else {\r\n                                    return tail.concat(head);\r\n                                }\r\n                            }, [] as string[]);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getResultDrawObject(result: DuoMeasurementValues): DrawObject {\r\n    const parts: DrawPart[] = [];\r\n    if (result.measureInfoA?.point && result.measureInfoB?.point) {\r\n        const measurePoints = [result.measureInfoA?.point, result.measureInfoB?.point];\r\n        const flip = measurePoints[0][2] > measurePoints[1][2];\r\n        let pts = flip ? [measurePoints[1], measurePoints[0]] : [measurePoints[0], measurePoints[1]];\r\n        const diff = vec3.sub(vec3.create(), pts[0], pts[1]);\r\n        const measureLen = vec3.len(diff);\r\n        parts.push({ name: \"result\", text: measureLen.toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(measurePoints[0]), vec3.clone(measurePoints[1])] });\r\n\r\n        pts = [\r\n            pts[0],\r\n            vec3.fromValues(pts[1][0], pts[0][1], pts[0][2]),\r\n            vec3.fromValues(pts[1][0], pts[1][1], pts[0][2]),\r\n            pts[1],\r\n        ];\r\n\r\n        parts.push({ name: \"x-axis\", text: Math.abs(diff[0]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[0]), vec3.clone(pts[1])] });\r\n        parts.push({ name: \"y-axis\", text: Math.abs(diff[1]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[1]), vec3.clone(pts[2])] });\r\n        parts.push({ name: \"z-axis\", text: Math.abs(diff[2]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[2]), vec3.clone(pts[3])] });\r\n\r\n\r\n        const planarDiff = vec2.len(vec2.fromValues(diff[0], diff[1]));\r\n        const xyPt1 = vec3.fromValues(pts[0][0], pts[0][1], Math.min(pts[0][2], pts[3][2]));\r\n        const xyPt2 = vec3.fromValues(pts[3][0], pts[3][1], Math.min(pts[0][2], pts[3][2]));\r\n        parts.push({ name: \"xy-plane\", text: planarDiff.toFixed(3), drawType: \"lines\", vertices3D: [xyPt1, xyPt2] });\r\n\r\n        //Angles:\r\n        const zDiff = vec3.sub(vec3.create(), pts[2], pts[3]);\r\n        const angle = vec3.angle(diff, zDiff) * (180 / Math.PI);\r\n        if (angle > 0.1) {\r\n            const fromP = flip ? vec3.clone(measurePoints[1]) : vec3.clone(measurePoints[0]);\r\n            const toP = vec3.clone(pts[2]);\r\n            parts.push({ name: \"z-angle\", text: angle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(pts[3]), fromP, toP] });\r\n        }\r\n\r\n        const xzDiff = vec3.sub(vec3.create(), xyPt1, xyPt2);\r\n        const xzAngle = vec3.angle(diff, xzDiff) * (180 / Math.PI);\r\n        if (xzAngle > 0.1) {\r\n            const fromP = flip ? vec3.clone(measurePoints[0]) : vec3.clone(measurePoints[1]);\r\n            parts.push({ name: \"xz-angle\", text: xzAngle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(xyPt1), fromP, vec3.clone(xyPt2)] });\r\n        }\r\n    }\r\n\r\n    if (result.angle) {\r\n        parts.push({\r\n            name: \"cylinder-angle\", text: (result.angle.radians * (180 / Math.PI)).toFixed(1) + \"\u00B0\", drawType: \"angle\",\r\n            vertices3D: [vec3.clone(result.angle.angleDrawInfo[0]), vec3.clone(result.angle.angleDrawInfo[1]), vec3.clone(result.angle.angleDrawInfo[2])]\r\n        });\r\n        if (result.angle.additionalLine) {\r\n            parts.push({ name: \"cylinder-angle-line\", drawType: \"lines\", vertices3D: [vec3.clone(result.angle.additionalLine[0]), vec3.clone(result.angle.additionalLine[1])] });\r\n        }\r\n    }\r\n\r\n    if (result.normalPoints) {\r\n        const dist = vec3.len(vec3.sub(vec3.create(), result.normalPoints[0], result.normalPoints[1]));\r\n        parts.push({ name: \"normal\", text: dist.toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(result.normalPoints[0]), vec3.clone(result.normalPoints[1])] });\r\n    }\r\n    return { parts, kind: \"complex\" }\r\n}", "import { vec3, type ReadonlyVec3 } from \"gl-matrix\";\r\nimport type { MeasureEntity, MeasureSettings, ObjectId, ParametricEntity } from \"../../measure_view\";\r\nimport { BaseModule } from \"../base\";\r\nimport type { CameraValues, FollowParametricObject, ParameterBounds } from \".\";\r\n\r\nexport class FollowModule extends BaseModule {\r\n    /**\r\n     * @ignore\r\n     */\r\n    private async followParametricEntity(\r\n        id: ObjectId,\r\n        entity: ParametricEntity,\r\n        setting?: MeasureSettings\r\n    ) {\r\n        const workerScene = await this.worker;\r\n        let parameterBounds: ParameterBounds | undefined = undefined;\r\n        let emulatedCurve: { start: ReadonlyVec3; dir: ReadonlyVec3 } | undefined =\r\n            undefined;\r\n        let type: \"edge\" | \"cylinder\" | \"curve\" | undefined = undefined;\r\n        switch (entity.drawKind) {\r\n            case \"edge\": {\r\n                type = \"edge\";\r\n                parameterBounds = await workerScene.getParameterBoundsForCurve(\r\n                    id,\r\n                    entity.pathIndex,\r\n                    \"edge\"\r\n                );\r\n                break;\r\n            }\r\n            case \"face\": {\r\n                const cylinderData = await workerScene.getCylinderCurve(\r\n                    id,\r\n                    entity.pathIndex,\r\n                    entity.instanceIndex,\r\n                    setting\r\n                );\r\n                if (cylinderData) {\r\n                    type = \"cylinder\";\r\n                    parameterBounds = cylinderData[0];\r\n                    emulatedCurve = {\r\n                        start: cylinderData[1][0],\r\n                        dir: vec3.normalize(\r\n                            vec3.create(),\r\n                            vec3.subtract(\r\n                                vec3.create(),\r\n                                cylinderData[1][1],\r\n                                cylinderData[1][0]\r\n                            )\r\n                        ),\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case \"curveSegment\": {\r\n                type = \"curve\";\r\n                parameterBounds = await workerScene.getParameterBoundsForCurve(\r\n                    id,\r\n                    entity.pathIndex,\r\n                    \"curveSegment\"\r\n                );\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (parameterBounds && type) {\r\n            async function getCameraValues(\r\n                t: number\r\n            ): Promise<CameraValues | undefined> {\r\n                if (emulatedCurve) {\r\n                    const param =\r\n                        t < 0 ? 0 : t > parameterBounds!.end ? parameterBounds!.end : t;\r\n                    return {\r\n                        position: vec3.scaleAndAdd(\r\n                            vec3.create(),\r\n                            emulatedCurve.start,\r\n                            emulatedCurve.dir,\r\n                            param\r\n                        ),\r\n                        normal: vec3.negate(vec3.create(), emulatedCurve.dir),\r\n                    };\r\n                }\r\n                const curveVaues = await workerScene.evalCurve(\r\n                    id,\r\n                    entity!.pathIndex,\r\n                    entity!.instanceIndex,\r\n                    t,\r\n                    entity!.drawKind == \"edge\" ? \"edge\" : \"curveSegment\"\r\n                );\r\n                if (curveVaues) {\r\n                    return { position: curveVaues[0], normal: curveVaues[1] };\r\n                }\r\n            }\r\n            const selectedEntity: MeasureEntity = {\r\n                ...entity,\r\n                ObjectId: id,\r\n                drawKind: entity.drawKind,\r\n            };\r\n            return {\r\n                type,\r\n                ids: [id],\r\n                selectedEntity,\r\n                parameterBounds,\r\n                getCameraValues,\r\n            };\r\n        }\r\n    }\r\n\r\n    /** Returns an object that can be used to calculate camera positions that follow the object\r\n     * Supports Edges, curve segments and cylinder      \r\n     * @param object The object being selected.\r\n     * @param selectionPosition Function need the selected position to select a subpart of the object in case it is composed of several parts. \r\n     * @param setting Settings. \r\n     * @returns Follow path object that will conain information as well as a function to use for following the parametric object,\r\n     *  undefined if the current picked part is not eligble for follow path\r\n     */\r\n    async followParametricObjectFromPosition(\r\n        id: ObjectId,\r\n        selectionPosition: ReadonlyVec3,\r\n        setting?: MeasureSettings\r\n    ): Promise<FollowParametricObject | undefined> {\r\n        const workerScene = await this.worker;\r\n        const pos = vec3.copy(vec3.create(), selectionPosition);\r\n        const pickedEntity = await workerScene.pickEntity(id, pos);\r\n        if (pickedEntity.entity && pickedEntity.entity.drawKind != \"vertex\") {\r\n            return this.followParametricEntity(id, pickedEntity.entity, setting);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n\r\n    /** Returns an object that can be used to calculate camera posisiotns that follow the objects\r\n     * Supports multiple cylinder,\r\n     * In case of one object, and that object only containing one curve segment it will return curve segment\r\n     * @param ids Set of object ids to follow, can be line segments or cylinders. \r\n     * @param setting Settings. \r\n     * @returns Follow path object that will conain information as well as a function to use for following the parametric object,\r\n     *  undefined if there are no objects the can be followed in the ids list\r\n     */\r\n    async followParametricObjects(\r\n        ids: ObjectId[],\r\n        setting?: MeasureSettings\r\n    ): Promise<FollowParametricObject | undefined> {\r\n        const workerScene = await this.worker;\r\n        if (ids.length == 1) {\r\n            const entity = await workerScene.viableFollowPathEntity(ids[0]);\r\n            if (entity != undefined && entity.drawKind != \"vertex\") {\r\n                return this.followParametricEntity(ids[0], entity);\r\n            }\r\n        }\r\n\r\n        const lineStrip = await workerScene.getLineStripFromCylinders(ids, setting);\r\n        if (lineStrip.length > 1) {\r\n            let len = 0;\r\n            for (let i = 1; i < lineStrip.length; ++i) {\r\n                len += vec3.dist(lineStrip[i - 1], lineStrip[i]);\r\n            }\r\n\r\n            const parameterBounds = { start: 0, end: len };\r\n            async function getCameraValues(\r\n                t: number\r\n            ): Promise<CameraValues | undefined> {\r\n                const param =\r\n                    t < 0 ? 0 : t > parameterBounds!.end ? parameterBounds!.end : t;\r\n                let i = 1;\r\n                let length = 0;\r\n                let prevLength = 0;\r\n                let currLength = 0;\r\n                for (; i < lineStrip.length; ++i) {\r\n                    currLength = vec3.dist(lineStrip[i - 1], lineStrip[i]);\r\n                    length += currLength;\r\n                    if (length > param) {\r\n                        break;\r\n                    }\r\n                    prevLength = length;\r\n                }\r\n                if (i == lineStrip.length) {\r\n                    const dir = vec3.subtract(\r\n                        vec3.create(),\r\n                        lineStrip[i - 2],\r\n                        lineStrip[i - 1]\r\n                    );\r\n                    return {\r\n                        position: lineStrip[i - 1],\r\n                        normal: vec3.normalize(dir, dir),\r\n                    };\r\n                }\r\n\r\n                const dir = vec3.subtract(\r\n                    vec3.create(),\r\n                    lineStrip[i - 1],\r\n                    lineStrip[i]\r\n                );\r\n\r\n                return {\r\n                    position: vec3.lerp(\r\n                        vec3.create(),\r\n                        lineStrip[i - 1],\r\n                        lineStrip[i],\r\n                        (param - prevLength) / currLength\r\n                    ),\r\n                    normal: vec3.normalize(dir, dir),\r\n                };\r\n            }\r\n\r\n            return {\r\n                type: lineStrip.length == 2 ? \"cylinder\" : \"cylinders\",\r\n                ids,\r\n                selectedEntity: undefined,\r\n                parameterBounds,\r\n                getCameraValues,\r\n            };\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}", "import { BaseModule } from \"../base\";\r\nimport type { DrawObject } from \"../draw\";\r\nimport type { ManholeMeasureValues } from \".\";\r\n\r\n\r\n/**\r\n * Modules specialized for measuring manholes\r\n */\r\nexport class ManholeModule extends BaseModule {\r\n    /** \r\n     * Give manhole measure object to inspect from objectId, \r\n     * note that this object can be used for all measurement {@link measure}\r\n     * and aslo be drawn {@link DrawableEntity}\r\n     * @param ObjectId The object Id where the api try to fetch manhole object from\r\n     * @returns Values for manhole measurement, \r\n    */\r\n    async measure(objectId: number): Promise<ManholeMeasureValues | undefined> {\r\n        const workerScene = await this.worker;\r\n        return workerScene.getManholeValues(objectId);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n    */\r\n    async getManholeDrawObject(entity: ManholeMeasureValues): Promise<DrawObject[]> {\r\n        const workerScene = await this.worker;\r\n        return workerScene.getManholeDrawObject(entity);\r\n    }\r\n}", "import type { ReadonlyVec2, ReadonlyVec3 } from \"gl-matrix\";\r\nimport { vec2, vec3 } from \"gl-matrix\";\r\nimport type { MeasureEntity, MeasureSettings, ObjectId, ParametricEntity } from \"../../measure_view\";\r\nimport { MeasureError } from \"../../measure_view\";\r\nimport type { LoadStatus, DuoMeasurementValues, MeasurementValues, SnapTolerance, LineStripMeasureValues } from \".\";\r\nimport type { ParametricProduct } from \"../../worker/parametric_product\";\r\nimport { BaseModule } from \"../base\";\r\nimport type { CameraValues } from \"../followPath\";\r\n\r\n/**\r\n * Standard measure module for standard measure functions\r\n */\r\nexport class CoreModule extends BaseModule {\r\n\r\n    /**\r\n     * Measure object, if b is undefined then single measure values are returned else the measurement between 2 objects\r\n     * Standard measuring function for measure single or between 2 parametric objects.\r\n     * @param a The entity that is being measured, this can either be a parametric object or a single point\r\n     * @param b If this is defined then the measure function will return the measurement between a and b.\r\n     * @param settingA settings for object a\r\n     * @param settingB settings for object b\r\n     * @returns  Measurement values either for a single object or between the objects\r\n     */\r\n    async measure(\r\n        a: MeasureEntity,\r\n        b?: MeasureEntity,\r\n        settingA?: MeasureSettings,\r\n        settingB?: MeasureSettings\r\n    ): Promise<MeasurementValues | undefined> {\r\n        return b\r\n            ? await this.measurePair(a, b, settingA, settingB)\r\n            : await this.measureSingle(a, settingA);\r\n    }\r\n\r\n\r\n    /** Returns the measure entity for given object and location, measure entity is a single part of a parametric object,\r\n     * such as surface, edge or vertex. If the object and position does not contain parametric data a single vertex will be returned\r\n     * @param id The object id of selected object\r\n     * @param selectionPosition selected position, this is required to select the individual part of the parametric object\r\n     * @param tolerance Tolerance for picking, the distance used is in meters\r\n     * @returns Selected measure entity, this will be a vertex if nothing can be selected at the location\r\n     * status if the object is loaded, and connection point where the parametric object has been selected.\r\n     */\r\n    async pickMeasureEntity(\r\n        id: ObjectId,\r\n        selectionPosition: ReadonlyVec3,\r\n        tolerance?: SnapTolerance\r\n    ): Promise<{ entity: MeasureEntity, status: LoadStatus, connectionPoint?: vec3 }> {\r\n        const workerScene = await this.worker;\r\n        const pos = vec3.copy(vec3.create(), selectionPosition);\r\n        return await workerScene.pickEntity(id, pos, tolerance);\r\n    }\r\n\r\n    /** Returns the measure entity for given object and location if the current object is selected\r\n     *  This is much faster than pickMeasureEntity and can be used for hover\r\n     * @param id The object id of selected object\r\n     * @param selectionPosition selected position, this is required to select the individual part of the parametric object\r\n     * @param tolerance Tolerance for picking, the distance used is in meters\r\n     * @returns Selected measure entity, this will be undefined if nothing is selectable at current position\r\n     * **/\r\n    async pickMeasureEntityOnCurrentObject(\r\n        id: ObjectId,\r\n        selectionPosition: ReadonlyVec3,\r\n        tolerance: SnapTolerance\r\n    ): Promise<{ entity: MeasureEntity | undefined, status: LoadStatus, connectionPoint?: vec3 }> {\r\n        const workerScene = await this.worker;\r\n        const pos = vec3.copy(vec3.create(), selectionPosition);\r\n        return await workerScene.pickEntityOnCurrentObject(id, pos, tolerance);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @privateRemarks not currently in use\r\n     */\r\n    async getParametricProduct(\r\n        productId: number\r\n    ): Promise<ParametricProduct | undefined> {\r\n        const workerScene = await this.worker;\r\n        return await workerScene.getProductObject(productId);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * @privateRemarks not currently in use\r\n     */\r\n    async getCameraValues(\r\n        a: ParametricEntity,\r\n        cameraDir: vec3\r\n    ): Promise<CameraValues | undefined> {\r\n        const workerScene = await this.worker;\r\n        return workerScene.getCameraValuesFromFace(\r\n            a.ObjectId,\r\n            a.pathIndex,\r\n            a.instanceIndex,\r\n            cameraDir\r\n        );\r\n    }\r\n\r\n\r\n    /** \r\n     * Swaps between inner and outer cylinder, returns undefined if there is only one\r\n     * @param entity Entity to be swapped\r\n     * @param to Force cylinder to either be inner or outer\r\n     * @returns Returns a new entity of the selected cylinder, if there is only one cylinder undefined is returned.\r\n     */\r\n    async swapCylinder(\r\n        entity: MeasureEntity,\r\n        to: \"inner\" | \"outer\"\r\n    ): Promise<MeasureEntity | undefined> {\r\n        if (entity.drawKind == \"face\") {\r\n            const workerScene = await this.worker;\r\n            const pathIdx = await workerScene.swapCylinder(\r\n                entity.ObjectId,\r\n                entity.pathIndex,\r\n                entity.instanceIndex,\r\n                to\r\n            );\r\n            if (pathIdx != undefined) {\r\n                return {\r\n                    ...entity,\r\n                    pathIndex: pathIdx\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates the area from polygon. Treat polygon as closed, Z is treated as height and is ignored.\r\n     * @param vertices Vertices defining the polygon, last and first vertex will be connected to create a closed polygon\r\n     * @param normals Normals used to define the plane where the area is measured. IF the difference is too high it will use Z as the normal \r\n     * @returns The area of the selected polygon, do note this is 2d calulation and height is ignored\r\n     */\r\n    areaFromPolygon(\r\n        vertices: ReadonlyVec3[],\r\n        normals: ReadonlyVec3[]\r\n    ): { area: number | undefined; polygon: ReadonlyVec3[] } {\r\n        if (vertices.length == 0) {\r\n            return { area: undefined, polygon: [] };\r\n        }\r\n        if (vertices.length != normals.length) {\r\n            throw new MeasureError(\r\n                \"Area measurement\",\r\n                \"Number of normals and vertices needs to be equal\"\r\n            );\r\n        }\r\n        let useXYPlane = false;\r\n        const epsilon = 0.001;\r\n        const normal = normals[0];\r\n        for (let i = 1; i < normals.length; ++i) {\r\n            if (1 - Math.abs(vec3.dot(normal, normals[i])) > epsilon) {\r\n                useXYPlane = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (useXYPlane) {\r\n            let total = 0;\r\n            const polygon: ReadonlyVec3[] = [];\r\n            for (let i = 0; i < vertices.length; i++) {\r\n                let addX = vertices[i][0];\r\n                let addY = vertices[i == vertices.length - 1 ? 0 : i + 1][1];\r\n                let subX = vertices[i == vertices.length - 1 ? 0 : i + 1][0];\r\n                let subY = vertices[i][1];\r\n\r\n                total += addX * addY * 0.5;\r\n                total -= subX * subY * 0.5;\r\n                polygon.push(\r\n                    vec3.fromValues(vertices[i][0], vertices[i][1], vertices[0][2])\r\n                );\r\n            }\r\n            return { area: Math.abs(total), polygon };\r\n        }\r\n\r\n        const polygon: ReadonlyVec3[] = [];\r\n        polygon.push(vertices[0]);\r\n        const vertex = vertices[0];\r\n        for (let i = 1; i < vertices.length; ++i) {\r\n            const v = vertices[i];\r\n            const vo = vec3.subtract(vec3.create(), v, vertex);\r\n            const dist = vec3.dot(vo, normal) * -1;\r\n            polygon.push(vec3.scaleAndAdd(vec3.create(), v, normal, dist));\r\n        }\r\n\r\n        if (polygon.length == 1) {\r\n            return { area: 0, polygon };\r\n        }\r\n        const xDir = vec3.subtract(vec3.create(), polygon[1], polygon[0]);\r\n        vec3.normalize(xDir, xDir);\r\n        const yDir = vec3.cross(vec3.create(), normal, xDir);\r\n        vec3.normalize(yDir, yDir);\r\n\r\n        const polygon2d: ReadonlyVec2[] = [];\r\n        polygon2d.push(vec2.fromValues(0, 0));\r\n        for (let i = 1; i < vertices.length; ++i) {\r\n            const p = polygon[i];\r\n            const po = vec3.subtract(vec3.create(), p, vertex);\r\n            polygon2d.push(vec2.fromValues(vec3.dot(po, xDir), vec3.dot(po, yDir)));\r\n        }\r\n\r\n        let total = 0;\r\n        for (let i = 0; i < polygon2d.length; i++) {\r\n            let addX = polygon2d[i][0];\r\n            let addY = polygon2d[i == vertices.length - 1 ? 0 : i + 1][1];\r\n            let subX = polygon2d[i == vertices.length - 1 ? 0 : i + 1][0];\r\n            let subY = polygon2d[i][1];\r\n\r\n            total += addX * addY * 0.5;\r\n            total -= subX * subY * 0.5;\r\n        }\r\n        return { area: Math.abs(total), polygon };\r\n    }\r\n\r\n    /**\r\n     * Measure between multiple points. Will return the angles, segment length and total length\r\n     * @param vertices Vertices defining the line strip to be measured\r\n     * @returns Angles, segment length and total length of the input linestrip\r\n     */\r\n    measureLineStrip(vertices: ReadonlyVec3[]): LineStripMeasureValues {\r\n        let totalLength = 0;\r\n        let segmentLengts: number[] = [];\r\n        let angles: number[] = [];\r\n        let prevSeg: ReadonlyVec3 | undefined = undefined;\r\n        for (let i = 1; i < vertices.length; ++i) {\r\n            const l = vec3.dist(vertices[i - 1], vertices[i]);\r\n            totalLength += l;\r\n            segmentLengts.push(l);\r\n            const dir = vec3.sub(vec3.create(), vertices[i], vertices[i - 1]);\r\n            vec3.normalize(dir, dir);\r\n            if (prevSeg != undefined) {\r\n                let angle = vec3.angle(prevSeg, dir);\r\n                if (angle > Math.PI) {\r\n                    angle = Math.PI * 2 - angle;\r\n                }\r\n                angles.push(angle);\r\n            }\r\n            vec3.negate(dir, dir);\r\n            prevSeg = dir;\r\n        }\r\n\r\n        return { totalLength, linestrip: vertices, segmentLengts, angles };\r\n    }\r\n\r\n    /**\r\n    * @ignore\r\n    */\r\n    private async measurePair(\r\n        a: MeasureEntity,\r\n        b: MeasureEntity,\r\n        settingA?: MeasureSettings,\r\n        settingB?: MeasureSettings\r\n    ) {\r\n        if (a.drawKind == \"vertex\") {\r\n            if (b.drawKind == \"vertex\") {\r\n                return this.pointToPoint(a.parameter as vec3, b.parameter as vec3);\r\n            }\r\n            return this.measureToPoint(b, a.parameter as vec3, settingB);\r\n        }\r\n        if (b.drawKind == \"vertex\") {\r\n            return this.measureToPoint(a, b.parameter as vec3, settingA);\r\n        }\r\n\r\n        const workerScene = await this.worker;\r\n        const entities = [\r\n            { object: a, settings: settingA },\r\n            { object: b, settings: settingB },\r\n        ];\r\n        entities.sort((a, b) => a.object.drawKind.localeCompare(b.object.drawKind));\r\n        const [A, B] = entities;\r\n        const kindCombo = `${A.object.drawKind}_${B.object.drawKind}`;\r\n        switch (kindCombo) {\r\n            case \"curveSegment_curveSegment\":\r\n                return await workerScene.segmentToSegmentMeasure(\r\n                    A.object.ObjectId,\r\n                    A.object.pathIndex,\r\n                    A.object.instanceIndex,\r\n                    B.object.ObjectId,\r\n                    B.object.pathIndex,\r\n                    B.object.instanceIndex\r\n                );\r\n            case \"curveSegment_edge\":\r\n                return await workerScene.segmentToEdgeMeasure(\r\n                    A.object.ObjectId,\r\n                    A.object.pathIndex,\r\n                    A.object.instanceIndex,\r\n                    B.object.ObjectId,\r\n                    B.object.pathIndex,\r\n                    B.object.instanceIndex\r\n                );\r\n            case \"curveSegment_face\":\r\n                return await workerScene.segmentToFaceMeasure(\r\n                    A.object.ObjectId,\r\n                    A.object.pathIndex,\r\n                    A.object.instanceIndex,\r\n                    B.object.ObjectId,\r\n                    B.object.pathIndex,\r\n                    B.object.instanceIndex,\r\n                    B.settings\r\n                );\r\n            case \"edge_edge\":\r\n                return await workerScene.edgeToEdgeMeasure(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    b.ObjectId,\r\n                    b.pathIndex,\r\n                    b.instanceIndex\r\n                );\r\n            case \"edge_face\":\r\n                return await workerScene.edgeToFaceMeasure(\r\n                    A.object.ObjectId,\r\n                    A.object.pathIndex,\r\n                    A.object.instanceIndex,\r\n                    B.object.ObjectId,\r\n                    B.object.pathIndex,\r\n                    B.object.instanceIndex,\r\n                    B.settings\r\n                );\r\n            case \"face_face\":\r\n                return await workerScene.faceToFaceMeasure(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    b.ObjectId,\r\n                    b.pathIndex,\r\n                    b.instanceIndex,\r\n                    A.settings,\r\n                    B.settings\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private async measureSingle(a: MeasureEntity, setting?: MeasureSettings) {\r\n        const workerScene = await this.worker;\r\n        switch (a.drawKind) {\r\n            case \"curveSegment\":\r\n                return await workerScene.getCurveValues(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    \"curveSegment\"\r\n                );\r\n            case \"edge\":\r\n                return await workerScene.getCurveValues(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    \"edge\"\r\n                );\r\n            case \"face\":\r\n                return await workerScene.getFaceValues(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    setting\r\n                );\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    async measureToPoint(\r\n        a: MeasureEntity,\r\n        b: ReadonlyVec3,\r\n        setting?: MeasureSettings\r\n    ): Promise<DuoMeasurementValues | undefined> {\r\n        const point = vec3.copy(vec3.create(), b);\r\n        if (a.drawKind == \"vertex\") {\r\n            return this.pointToPoint(a.parameter as vec3, point);\r\n        }\r\n        const workerScene = await this.worker;\r\n        switch (a.drawKind) {\r\n            case \"curveSegment\":\r\n                return await workerScene.segmentToPointMeasure(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    point\r\n                );\r\n            case \"edge\":\r\n                return await workerScene.edgeToPointMeasure(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    point\r\n                );\r\n            case \"face\":\r\n                return await workerScene.faceToPointMeasure(\r\n                    a.ObjectId,\r\n                    a.pathIndex,\r\n                    a.instanceIndex,\r\n                    point,\r\n                    setting\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * Measure distance between 2 points\r\n     */\r\n    pointToPoint(a: ReadonlyVec3, b: ReadonlyVec3): DuoMeasurementValues {\r\n        const diff = vec3.sub(vec3.create(), a, b);\r\n        return {\r\n            drawKind: \"measureResult\",\r\n            distance: vec3.len(diff),\r\n            distanceX: Math.abs(diff[0]),\r\n            distanceY: Math.abs(diff[1]),\r\n            distanceZ: Math.abs(diff[2]),\r\n            measureInfoA: { point: vec3.copy(vec3.create(), a) },\r\n            measureInfoB: { point: vec3.copy(vec3.create(), b) }\r\n        };\r\n    }\r\n}", "import { vec2, type ReadonlyVec2 } from \"gl-matrix\";\r\nimport type { MeasureEntity, MeasureSettings, ObjectId } from \"../../measure_view\";\r\nimport { MeasureError, } from \"../../measure_view\";\r\nimport { type Profile } from \"..\";\r\nimport { BaseModule } from \"../base\";\r\n\r\n/**\r\n * Module for converting parametric data to profiles. which can easily be used for charts and graphs\r\n */\r\nexport class ProfileModule extends BaseModule {\r\n\r\n    /** \r\n     * Returns the profile view of a linestrip where x is the length of the line and y is the height\r\n     * This function can be used if an object contains multiple unconnected entities.\r\n     * @param entity The parametric entity used to create the profile\r\n     * @param setting Settings\r\n     * @returns Profile where x is the length of the line and y is the height,\r\n     *  it supports curve segments and cylinders, othwerwise it retuns undefiend\r\n     */\r\n    async viewFromEntity(\r\n        entity: MeasureEntity,\r\n        setting?: MeasureSettings\r\n    ): Promise<Profile | undefined> {\r\n        const workerScene = await this.worker;\r\n        switch (entity.drawKind) {\r\n            case \"curveSegment\": {\r\n                return await workerScene.curveSegmentProfile(\r\n                    entity.ObjectId,\r\n                    entity.pathIndex,\r\n                    entity.instanceIndex\r\n                );\r\n            }\r\n            case \"face\": {\r\n                return await workerScene.cylinderProfile(\r\n                    entity.ObjectId,\r\n                    entity.pathIndex,\r\n                    entity.instanceIndex,\r\n                    setting\r\n                );\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n    * Returns the profile view of selected objects where x is the length of the line and y is the height,\r\n    * currently only supports cylinders\r\n    * @param products Products used to create a profile, this can be a list of line segments, line strips or connected cylinders\r\n     * @param setting Settings\r\n    * @returns Profile where x is the length of the line and y is the height,\r\n    *  it supports curve segments and cylinders, othwerwise it retuns undefiend\r\n    */\r\n    async viewFromMultiSelect(\r\n        products: ObjectId[],\r\n        setting?: MeasureSettings\r\n    ): Promise<Profile | undefined> {\r\n        const workerScene = await this.worker;\r\n        const profile = await workerScene.multiSelectProfile(products, setting);\r\n        if (typeof profile === \"string\") {\r\n            throw new MeasureError(\"Profile error\", profile);\r\n        }\r\n        return profile;\r\n    }\r\n\r\n    reverse(inProfile: Profile): Profile {\r\n        const endParam =\r\n            inProfile.profilePoints[inProfile.profilePoints.length - 1][0];\r\n        const rProfile: ReadonlyVec2[] = [];\r\n        for (let i = inProfile.profilePoints.length - 1; i >= 0; --i) {\r\n            const p = inProfile.profilePoints[i];\r\n            rProfile.push(vec2.fromValues((p[0] - endParam) * -1, p[1]));\r\n        }\r\n        return {\r\n            profilePoints: rProfile,\r\n            slopes: inProfile.slopes.reverse(),\r\n            startElevation: inProfile.endElevation,\r\n            endElevation: inProfile.startElevation,\r\n            top: inProfile.top,\r\n            bottom: inProfile.bottom,\r\n        };\r\n    }\r\n}", "import type { CrossSlope, RoadCrossSection, RoadProfiles } from \"..\";\r\nimport { BaseModule } from \"../base\";\r\n\r\n/**\r\n * Module for handling road spesific parametric data. \r\n */\r\nexport class RoadModule extends BaseModule {\r\n    /**\r\n     * @ignore\r\n     * In development\r\n     */\r\n    async getProfile(roadId: string): Promise<RoadProfiles | undefined> {\r\n        const workerScene = await this.worker;\r\n        return workerScene.getRoadProfile(roadId);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * In development\r\n     */\r\n    async getCrossSlope(roadId: string): Promise<CrossSlope | undefined> {\r\n        const workerScene = await this.worker;\r\n        return workerScene.getRoadCrossSlope(roadId);\r\n    }\r\n\r\n    /**\r\n     * Get cross sections at a spesific profile in the road.\r\n     * @param roadIds Unqiue string id for each road, can be found in the data api\r\n     * @param profileNumber Distance along the center line where the cross section should be cut\r\n     * @returns \r\n     */\r\n    async getCrossSections(roadIds: string[], profileNumber: number): Promise<RoadCrossSection[]> {\r\n        const workerScene = await this.worker;\r\n        const sections = await Promise.all(roadIds.map((rId) => workerScene.getCrossSection(rId, profileNumber)));\r\n        const s = sections.filter(s => s != undefined);\r\n        return s as RoadCrossSection[];\r\n    }\r\n\r\n}", "import * as Comlink from \"comlink\";\r\nimport type { MeasureTool, Service } from \"./worker\";\r\nimport type { ReadonlyQuat, ReadonlyVec2, ReadonlyVec3 } from \"gl-matrix\";\r\nimport { CollisionModule, DrawModule, FollowModule, ManholeModule, CoreModule, ProfileModule, RoadModule } from \"./modules\";\r\nimport type { DrawContext } from \"./modules\";\r\nimport { measure } from \"core3d/benchmark/util\";\r\nimport type { MeasureImports } from \"./imports\";\r\nexport * from \"./modules\";\r\n\r\n\r\n/** @ignore */\r\nexport type MeasureWorker = Comlink.Remote<MeasureTool & Comlink.ProxyMarked>;\r\n\r\n/**\r\n * Master class for all measure functionality \r\n * The functionality is split into seperate modules\r\n */\r\nexport class MeasureView {\r\n\r\n    /**\r\n     * Module for collision calculations, see {@link CollisionModule}\r\n     */\r\n    collision: CollisionModule;\r\n    /**\r\n     * Module for drawing measure objects on screen, see {@link DrawModule}\r\n     */\r\n    draw: DrawModule;\r\n    /**\r\n     * Module for following parameteric objects such as line strips and cylinders, see {@link FollowModule}\r\n     */\r\n    followPath: FollowModule;\r\n    /**\r\n     * Module for inspecting and measuring manholes, see {@link ManholeModule}\r\n     */\r\n    manhole: ManholeModule;\r\n    /**\r\n     * Module for general measuring functions, see {@link CoreModule}\r\n     */\r\n    core: CoreModule;\r\n    /**\r\n     * Module for 2d profiles from lines or cylinders, see {@link ProfileModule}\r\n     */\r\n    profile: ProfileModule;\r\n    /**\r\n     * Module for road spesific calulations and data, see {@link RoadModule}\r\n     */\r\n    road: RoadModule;\r\n\r\n\r\n    /** @ignore */\r\n    private workers: ReturnType<typeof createWorkers>;\r\n\r\n    /** @ignore */\r\n    constructor(readonly worker: MeasureWorker, workers: ReturnType<typeof createWorkers>, readonly drawContext: DrawContext) {\r\n        this.workers = workers;\r\n        this.collision = new CollisionModule(worker, this);\r\n        this.draw = new DrawModule(worker, this, drawContext);\r\n        this.followPath = new FollowModule(worker, this);\r\n        this.manhole = new ManholeModule(worker, this);\r\n        this.core = new CoreModule(worker, this);\r\n        this.profile = new ProfileModule(worker, this);\r\n        this.road = new RoadModule(worker, this);\r\n    }\r\n\r\n    async loadScene(sceneUrl: URL) {\r\n        const workerScene = await this.worker;\r\n        workerScene.loadScene(sceneUrl.toString());\r\n    }\r\n\r\n    /**\r\n     * Cleanup if measure module is no longer needed\r\n     */\r\n    async dispose(): Promise<void> {\r\n        const { workers } = this;\r\n        if (workers) {\r\n            const { measure } = workers;\r\n            await measure.service.terminate();\r\n            measure.service[Comlink.releaseProxy]();\r\n        }\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction createWorkers(url: string) {\r\n    const measureWorker = new Worker(url, { type: \"module\", name: \"Measure\" });\r\n    const measureService = Comlink.wrap<Service>(measureWorker);\r\n    const workers = {\r\n        measure: {\r\n            worker: measureWorker,\r\n            service: measureService,\r\n        },\r\n    };\r\n    measureService.initialize(url);\r\n    return workers;\r\n}\r\n\r\n/**\r\n * Creates a measure view based on the scene url.\r\n */\r\nexport async function createMeasureView(drawContext: DrawContext, imports: MeasureImports) {\r\n    const workers = createWorkers(imports.measureWorker.toString());\r\n    const tool = await workers.measure.service.createMeasureTool();\r\n    const measureView = new MeasureView(tool, workers, drawContext);\r\n    await tool.init(imports.nurbsWasm);\r\n    return measureView;\r\n}\r\n\r\n/**\r\n * Base class for spesific errors from the measure API.\r\n */\r\nexport class MeasureError extends Error {\r\n    constructor(readonly type: string, message: string) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n/** \r\n * Interface often used in the measure api to describe a selected parametric object,\r\n * It can either be an object or a simple 3d point\r\n * Any measure entity can be drawn using the draw module {@link DrawModule}\r\n*/\r\nexport type MeasureEntity = ParametricEntity | PointEntity;\r\n\r\n/** \r\n * Object Id from the core 3d api. this is the way objects are linked between the general 3d api and the measure api\r\n */\r\nexport type ObjectId = number;\r\n\r\n/** \r\n * Camera values needed when drawing measure data. The camera state from RenderState can be used here {@link RenderStateCamera}\r\n */\r\nexport interface Camera {\r\n    readonly kind: \"pinhole\" | \"orthographic\";\r\n    readonly position: ReadonlyVec3;\r\n    readonly rotation: ReadonlyQuat;\r\n    readonly fov: number;\r\n    readonly near: number;\r\n    readonly far: number;\r\n}\r\n\r\n/** \r\n * This is the identification of a spesific edge, face or curve segment in the object. \r\n * It is often required by measure functions \r\n */\r\nexport interface ParametricEntity {\r\n    /** Object Id from the core 3d api. */\r\n    ObjectId: ObjectId;\r\n    /** the type of object that can be drawn from this spesific entity, see  {@link DrawModule} */\r\n    drawKind: \"edge\" | \"face\" | \"curveSegment\";\r\n    /** @ignore */\r\n    pathIndex: number;\r\n    /** @ignore */\r\n    instanceIndex: number;\r\n    /** @ignore */\r\n    parameter?: number | ReadonlyVec2 | ReadonlyVec3;\r\n}\r\n\r\n\r\nexport interface PointEntity {\r\n    /** Object Id from the core 3d api. */\r\n    ObjectId: ObjectId;\r\n    /** Point entity will always draw as a single vertex from the draw module, see  {@link DrawModule}*/\r\n    drawKind: \"vertex\";\r\n    /** @ignore */\r\n    pathIndex?: number;\r\n    /** @ignore */\r\n    instanceIndex?: number;\r\n    /** @ignore */\r\n    parameter: ReadonlyVec3;\r\n}\r\n\r\n\r\nconst cylinderOptions = [\r\n    \"center\",\r\n    \"closest\",\r\n    \"furthest\",\r\n    \"top\",\r\n    \"bottom\",\r\n] as const;\r\n\r\ntype CylinderOptions = typeof cylinderOptions;\r\n\r\n/** Possible options when measuring and drawing cylinders */\r\nexport type CylinerMeasureType = {\r\n    [K in keyof CylinderOptions]: CylinderOptions[K] extends string\r\n    ? CylinderOptions[K]\r\n    : never;\r\n}[keyof CylinderOptions];\r\n\r\n/** Additional options for measurement */\r\nexport interface MeasureSettings {\r\n    /** Where to measure cylinder from, in case of measure between two cylinder, same option will be used for both*/\r\n    cylinderMeasure: CylinerMeasureType;\r\n}", "/**\r\n *  Core3D bundler/build resource imports.\r\n * @remarks\r\n * In order to adapt to any build/bundler system and inlining preferences, we declare all non-javascript imported resources here.\r\n * These must be created by some external function that is specific to your build/bundler environment.\r\n * @category Render View\r\n */\r\nexport interface MeasureImports {\r\n    /** The nurbs web assembly instance.\r\n     * @remarks This web assembly can be found in `measure/nurbs.wasm`.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running | Loading and running WebAssembly code}\r\n     */\r\n    readonly nurbsWasm: ArrayBuffer;\r\n\r\n    /** The  measure load/parse worker.\r\n     * @remarks This worker root can be found in `measure/measureWorker.js`.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker | Worker: Worker() constructor}\r\n     */\r\n    readonly measureWorker: URL;\r\n}\r\n\r\n\r\n/**\r\n * A map describing inlined resources, or urls where to fetch them.\r\n */\r\nexport interface MeasureImportMap {\r\n    /** The absolute base url to be applied to the other URLs.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL}\r\n     */\r\n    readonly baseUrl: URL;\r\n    /** Inlined WASM instance, or URL to download.\r\n     * @defaultValue `\"./nurbs.wasm\"`\r\n     */\r\n    readonly nurbsWasm?: string | URL | ArrayBuffer;\r\n\r\n    /** Inlined measure worker, or URL to download.\r\n     * @defaultValue `\"./measureWorker.js\"`\r\n     */\r\n    readonly measureWorker?: string | URL;\r\n}\r\n\r\n/** Download any missing imports.\r\n * @param map URLs or bundled asset map.\r\n * @remarks\r\n * This function will attempt to download any resource not inlined from the specified urls,\r\n * using the specified {@link MeasureImportMap.baseUrl | baseUrl}.\r\n * If map is undefined, it will look for the files in the same folder as the current script.\r\n * \r\n * @category Render View\r\n */\r\nexport async function downloadMeasureImports(map: MeasureImportMap): Promise<MeasureImports> {\r\n    const { baseUrl } = map;\r\n    const measureWorker = getWorkerUrl(map.measureWorker ?? \"./measureWorker.js\", baseUrl);\r\n    const wasmInstancePromise = getInstance(map.nurbsWasm ?? \"./nurbs.wasm\", baseUrl);\r\n    const nurbsWasm = await wasmInstancePromise;\r\n    return { nurbsWasm, measureWorker };\r\n}\r\n\r\nfunction isUrl(url: unknown): url is string | URL {\r\n    return typeof url == \"string\" || url instanceof URL;\r\n}\r\n\r\nasync function getInstance(arg: string | URL | ArrayBuffer, baseUrl?: string | URL) {\r\n    if (!isUrl(arg)) {\r\n        return arg;\r\n    }\r\n    const url = new URL(arg, baseUrl);\r\n    const response = await fetch(url, { mode: \"cors\" });\r\n    if (!response.ok) {\r\n        throw new Error(`Could not download wasm instance from: ${url}`);\r\n    }\r\n    return await response.arrayBuffer();\r\n    // const { instance } = await WebAssembly.instantiateStreaming(response);\r\n    // return instance.exports as unknown as WasmInstance;\r\n}\r\n\r\nfunction getWorkerUrl(arg: string | URL, baseUrl?: string | URL) {\r\n    return new URL(arg, baseUrl);\r\n}\r\n", "import type { DeviceProfile } from \"core3d\";\r\nimport { View } from \"./\";\r\n\r\n/**\r\n * GPU performance tier.\r\n * @remarks\r\n * This is a rough estimate of the capabilities of a device GPU.\r\n * 0 is weakest and 3 is strongest.\r\n * As a general guide, these are the targets for the different tiers:\r\n * - 0: Unknown GPU - A weak android device. Also the fallback tier for unknown GPUs.\r\n * - 1: IOS, IPad, high-end android device, weak integrated (intel) GPU\r\n * - 2: Mac M1 or better, strong integrated GPU or weak/old discrete GPU.\r\n * - 3: Discrete GPU, mid to high end.\r\n * @category Device Profile\r\n */\r\nexport type GPUTier = 0 | 1 | 2 | 3; // larger means more powerful GPU\r\n\r\n/**\r\n * Create a device profile.\r\n * @param tier The performance level of device GPU, 0-3, where 0 is weakest.\r\n * @param resolutionScaling An optional scale factor to apply to output image resolution.\r\n * @returns A {@link DeviceProfile} reflecting the typical capabilities of a GPU at given tier level.\r\n * @remarks\r\n * A simple tier system is probably too simplistic but provides a starting point.\r\n * The resulting device profile may be modified further before passing it into the {@link View} constructor.\r\n * @category Device Profile\r\n */\r\nexport function getDeviceProfile(tier: GPUTier, resolutionScaling?: number): DeviceProfile {\r\n    const outline = tier >= 1;\r\n    let maxGPUBytes = [500_000_000, 750_000_000, 2_000_000_000, 5_000_000_000][tier];\r\n    const maxPrimitives = ([6_000_000, 12_000_000, 20_000_000, 30_000_000] as const)[tier]; // this is not supposed to be used to regulate FPS, but rather avoid rendering taking so long it will crash the browser.\r\n    const maxSamples = ([4, 4, 8, 16] as const)[tier]; // MSAA\r\n    const detailBias = ([0.1, 0.35, 0.75, 1] as const)[tier];\r\n    let renderResolution = ([0.5, 0.75, 1, 1] as const)[tier];\r\n    if (resolutionScaling) {\r\n        renderResolution *= resolutionScaling;\r\n    }\r\n\r\n    let adreno600 = false;\r\n    let slowShaderRecompile = false;\r\n\r\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\") as HTMLCanvasElement;\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    document.body.appendChild(canvas);\r\n    const gl = canvas.getContext(\"webgl\", { failIfMajorPerformanceCaveat: true });\r\n    canvas.remove();\r\n\r\n    if (gl) {\r\n        const debugInfo = gl.getExtension(\"WEBGL_debug_renderer_info\");\r\n        const renderer = debugInfo\r\n            ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL)\r\n            : gl.getParameter(gl?.VERSION);\r\n        if (RegExp(\"Apple GPU\").test(renderer)) {\r\n            maxGPUBytes = 500_000_000;\r\n        }\r\n        if (RegExp(\"Adreno.+6[0-9][0-9]\").test(renderer)) {\r\n            adreno600 = true;\r\n        }\r\n        else if (RegExp(\"Apple M1\").test(renderer) || RegExp(\"Iris\").test(renderer)) {\r\n            slowShaderRecompile = true;\r\n        }\r\n    }\r\n\r\n    const coreProfile = {\r\n        features: {\r\n            outline,\r\n        },\r\n        limits: {\r\n            maxGPUBytes,\r\n            maxPrimitives,\r\n            maxSamples,\r\n        },\r\n        quirks: {\r\n            adreno600,\r\n            slowShaderRecompile\r\n        },\r\n        detailBias,\r\n    };\r\n\r\n    return {\r\n        ...coreProfile,\r\n        renderResolution,\r\n        framerateTarget: 30,\r\n        tier\r\n    } as const;\r\n}\r\n", "import { vec2 } from \"gl-matrix\";\r\n\r\n/**\r\n * The input source of camera controllers.\r\n * @remarks\r\n * This class abstract away input gestures, such as mouse, keyboard and touch event into a unified model.\r\n * It does this by defining a {@link ControllerAxes | set of axes} that represents an imagined gamepad/joystick input device for each class of input gestures.\r\n * The assumption is that each of these axes may be bound to a pair of keyboard keys, e.g. `A` and `D`, or some input position coordinate, e.g. the mouse `x` position for left/right motion.\r\n * All of these axes are updated independently, i.e. it is possible to move a camera with both keyboard and mouse simultaneously.\r\n * It is up to each camera controller to scale and apply each of these axes into an actual motion of the camera.\r\n * @category Camera Controllers\r\n */\r\nexport class ControllerInput {\r\n    /** The underlying HTMLElement providing input events. */\r\n    readonly domElement;\r\n\r\n    /** A set of optional callbacks for controllers that wants to handle certain input events themselves. */\r\n    callbacks: ContollerInputContext | undefined;\r\n\r\n    /** The current values of each input axis. */\r\n    readonly axes: ControllerAxes;\r\n\r\n    /** The current list of individual touch contact points. */\r\n    touchPoints: readonly TouchContactPoint[] = [];\r\n\r\n    private readonly _keys = new Set<string>();\r\n    private _mouseButtonDown = false;\r\n    private _zoomY = 0;\r\n    private _zoomX = 0;\r\n    private readonly _touchMovePrev = [0, 0] as [number, number];\r\n    private _touchZoomDistancePrev = 0;\r\n    private prevTouchCenter: vec2 | undefined = undefined;\r\n\r\n    private _mouseWheelLastActive = 0;\r\n    private static readonly _gestureKeys = [\"KeyW\", \"KeyS\", \"KeyA\", \"KeyD\", \"KeyQ\", \"KeyE\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\r\n\r\n    /** Whether to use {@link https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API | mouse pointer lock} or not. */\r\n    usePointerLock = true;\r\n\r\n    /**\r\n     * @param domElement The HTMLElement to subscribe to input events from.\r\n     */\r\n    constructor(domElement?: HTMLElement) {\r\n        this.domElement = domElement ?? document.body;\r\n        this.connect();\r\n        this.axes = {} as ControllerAxes;\r\n        this.resetAxes();\r\n    }\r\n\r\n    /** Unsubscribe from input events. */\r\n    dispose() {\r\n        this.disconnect();\r\n    }\r\n\r\n    /** Return the client width of the input {@link domElement}. */\r\n    get width() {\r\n        return this.domElement.clientWidth;\r\n    }\r\n\r\n    /** Return the client height of the input {@link domElement}. */\r\n    get height() {\r\n        return this.domElement.clientHeight;\r\n    }\r\n\r\n    /** Current multiplier applied to motion via the Control/Alt keys. */\r\n    get multiplier() {\r\n        const { _keys } = this;\r\n        let m = 1;\r\n        if (_keys.has(\"Shift\")) m *= 10;\r\n        if (_keys.has(\"Control\")) m *= 10;\r\n        if (_keys.has(\"Alt\")) m *= 0.1;\r\n        return m;\r\n    }\r\n\r\n    /** Whether the shift key is currently pressed or not. */\r\n    get hasShift() {\r\n        const { _keys } = this;\r\n        if (_keys.has(\"Shift\")) return true;\r\n        return false;\r\n    }\r\n\r\n    /** The pixel position centering zoom gestures.\r\n     * @remarks\r\n     * This is typically the current cursor position while using the mouse scroll wheel,\r\n     * or the center position between touch points in a pinch gesture.\r\n     */\r\n    get zoomPos() {\r\n        const { width, height, _zoomX, _zoomY } = this;\r\n        if (_zoomX == 0 && _zoomY == 0) {\r\n            return [0, 0];\r\n        }\r\n        return [-(_zoomX - width / 2) / height * 2, (_zoomY - height / 2) / height * 2];\r\n    }\r\n\r\n    /** Subscribe to input events from {@link domElement}. */\r\n    protected connect() {\r\n        const { domElement } = this;\r\n        if (!domElement) return;\r\n        const options = false;\r\n        domElement.tabIndex = 0;\r\n        domElement.addEventListener(\"keydown\", this.keydown, options);\r\n        domElement.addEventListener(\"keyup\", this.keyup, options);\r\n        domElement.addEventListener(\"blur\", this.blur, options);\r\n        domElement.addEventListener(\"click\", this.click, options);\r\n        domElement.addEventListener(\"contextmenu\", this.contextmenu, options);\r\n        domElement.addEventListener(\"mousedown\", this.mousedown, options);\r\n        domElement.addEventListener(\"mouseup\", this.mouseup, options);\r\n        domElement.addEventListener(\"mousemove\", this.mousemove, options);\r\n        domElement.addEventListener(\"wheel\", this.wheel, options);\r\n        domElement.addEventListener(\"touchstart\", this.touchstart, options);\r\n        domElement.addEventListener(\"touchmove\", this.touchmove, options);\r\n        domElement.addEventListener(\"touchend\", this.touchend, options);\r\n        domElement.addEventListener(\"touchcancel\", this.touchcancel, options);\r\n        domElement.focus();\r\n    }\r\n\r\n    /** Unsubscribe to input events from {@link domElement}. */\r\n    protected disconnect() {\r\n        const { domElement } = this;\r\n        if (!domElement) return;\r\n        const options = false;\r\n        domElement.removeEventListener(\"keydown\", this.keydown, options);\r\n        domElement.removeEventListener(\"keyup\", this.keyup, options);\r\n        domElement.removeEventListener(\"blur\", this.blur, options);\r\n        domElement.removeEventListener(\"click\", this.click, options);\r\n        domElement.removeEventListener(\"contextmenu\", this.contextmenu, options);\r\n        domElement.removeEventListener(\"mousedown\", this.mousedown, options);\r\n        domElement.removeEventListener(\"mouseup\", this.mouseup, options);\r\n        domElement.removeEventListener(\"mousemove\", this.mousemove, options);\r\n        domElement.removeEventListener(\"wheel\", this.wheel, options);\r\n        domElement.removeEventListener(\"touchstart\", this.touchstart, options);\r\n        domElement.removeEventListener(\"touchmove\", this.touchmove, options);\r\n        domElement.removeEventListener(\"touchend\", this.touchend, options);\r\n        domElement.removeEventListener(\"touchcancel\", this.touchcancel, options);\r\n    }\r\n\r\n    private click = (e: Event) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    private contextmenu = (e: Event) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    private static isGestureKey(code: string) {\r\n        return ControllerInput._gestureKeys.indexOf(code) != -1;\r\n    }\r\n\r\n    /** Indicate whether the mouse scroll wheel has recently been moved. */\r\n    public isScrolling() {\r\n        return (performance.now() - this._mouseWheelLastActive) < 100\r\n    }\r\n\r\n    private updateModifierKeys(e: ModiferKeyEvent) {\r\n        const { _keys } = this;\r\n        e.altKey ? _keys.add(\"Alt\") : _keys.delete(\"Alt\");\r\n        e.shiftKey ? _keys.add(\"Shift\") : _keys.delete(\"Shift\");\r\n        e.ctrlKey ? _keys.add(\"Control\") : _keys.delete(\"Control\");\r\n    }\r\n\r\n    private keydown = (e: KeyboardEvent) => {\r\n        if (ControllerInput.isGestureKey(e.code)) {\r\n            e.preventDefault();\r\n        }\r\n        this.updateModifierKeys(e);\r\n        this._keys.add(e.code);\r\n        this._zoomX = 0;\r\n        this._zoomY = 0;\r\n    };\r\n\r\n    private keyup = (e: KeyboardEvent) => {\r\n        if (ControllerInput.isGestureKey(e.code)) {\r\n            e.preventDefault();\r\n        }\r\n        this.updateModifierKeys(e);\r\n        this._keys.delete(e.code);\r\n    };\r\n\r\n    private blur = (e: FocusEvent) => {\r\n        if (\"exitPointerLock\" in document) document.exitPointerLock();\r\n        this._keys.clear();\r\n    };\r\n\r\n    private mousedown = async (e: MouseEvent) => {\r\n        const { domElement, axes } = this;\r\n        this._mouseButtonDown = true;\r\n        domElement.focus();\r\n        e.preventDefault();\r\n        this.updateModifierKeys(e);\r\n        this.callbacks?.mouseButtonChanged?.(e);\r\n        await this.callbacks?.moveBegin?.(e);\r\n        if (e.buttons & MouseButtons.forward) {\r\n            axes.mouse_navigate--;\r\n        } else if (e.buttons & MouseButtons.backward) {\r\n            axes.mouse_navigate++;\r\n        }\r\n    };\r\n\r\n    private mouseup = async (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        this.updateModifierKeys(e);\r\n        if (\"exitPointerLock\" in document) document.exitPointerLock();\r\n        this.callbacks?.mouseButtonChanged?.(e);\r\n        this._mouseButtonDown = false;\r\n    };\r\n\r\n    private wheel = async (e: WheelEvent) => {\r\n        const { axes } = this;\r\n        this._zoomX = e.offsetX;\r\n        this._zoomY = e.offsetY;\r\n        this.updateModifierKeys(e);\r\n        await this.callbacks?.moveBegin?.(e);\r\n        this._mouseWheelLastActive = performance.now();\r\n        axes.mouse_wheel += e.deltaY;\r\n    };\r\n\r\n    private mousemove = (e: MouseEvent) => {\r\n        if (e.buttons < 1) return;\r\n        if (Math.abs(e.movementX) > 100 || Math.abs(e.movementY) > 100) return;\r\n        this.updateModifierKeys(e);\r\n        if (this._mouseButtonDown && this.usePointerLock) {\r\n            (e.currentTarget as HTMLElement).requestPointerLock();\r\n            this._mouseButtonDown = false;\r\n        }\r\n        const { axes } = this;\r\n        if (e.buttons & MouseButtons.right) {\r\n            axes.mouse_rmb_move_x += e.movementX;\r\n            axes.mouse_rmb_move_y += e.movementY;\r\n        } else if (e.buttons & MouseButtons.middle) {\r\n            axes.mouse_mmb_move_x += e.movementX;\r\n            axes.mouse_mmb_move_y += e.movementY;\r\n        } else if (e.buttons & MouseButtons.left) {\r\n            axes.mouse_lmb_move_x += e.movementX;\r\n            axes.mouse_lmb_move_y += e.movementY;\r\n        }\r\n    };\r\n\r\n    private touchstart = async (event: TouchEvent) => {\r\n        this.touchPoints = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\r\n        const { touchPoints, _touchMovePrev } = this;\r\n        this.callbacks?.touchChanged?.(event);\r\n\r\n        switch (touchPoints.length) {\r\n            case 1:\r\n                _touchMovePrev[0] = touchPoints[0].x;\r\n                _touchMovePrev[1] = touchPoints[0].y;\r\n                break;\r\n            default: // 2 or more\r\n                const dx = touchPoints[0].x - touchPoints[1].x;\r\n                const dy = touchPoints[0].y - touchPoints[1].y;\r\n                this._touchZoomDistancePrev = Math.sqrt(dx * dx + dy * dy);\r\n                _touchMovePrev[0] = (touchPoints[0].x + touchPoints[1].x) / 2;\r\n                _touchMovePrev[1] = (touchPoints[0].y + touchPoints[1].y) / 2;\r\n                break;\r\n        }\r\n        await this.callbacks?.moveBegin?.(event);\r\n    };\r\n\r\n    private touchend = async (event: TouchEvent) => {\r\n        this.touchPoints = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\r\n        const { touchPoints, _touchMovePrev } = this;\r\n        this.callbacks?.touchChanged?.(event);\r\n        switch (touchPoints.length) {\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                _touchMovePrev[0] = touchPoints[0].x;\r\n                _touchMovePrev[1] = touchPoints[0].y;\r\n                break;\r\n            default:\r\n                const dx = touchPoints[0].x - touchPoints[1].x;\r\n                const dy = touchPoints[0].y - touchPoints[1].y;\r\n                this._touchZoomDistancePrev = Math.sqrt(dx * dx + dy * dy);\r\n                _touchMovePrev[0] = (touchPoints[0].x + touchPoints[1].x) / 2;\r\n                _touchMovePrev[1] = (touchPoints[0].y + touchPoints[1].y) / 2;\r\n                break;\r\n        }\r\n    };\r\n\r\n    private touchcancel = (event: TouchEvent) => {\r\n        event.preventDefault();\r\n        this.touchPoints = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\r\n    };\r\n\r\n    private touchmove = (event: TouchEvent) => {\r\n        if (event.cancelable) event.preventDefault();\r\n        this.touchPoints = Array.from(event.touches).map(touch => ({ id: touch.identifier, x: Math.round(touch.clientX), y: Math.round(touch.clientY) }));\r\n        const { touchPoints, _touchMovePrev } = this;\r\n        let { x, y } = touchPoints[0];\r\n\r\n        const { axes } = this;\r\n        if (touchPoints.length > 1) {\r\n            const dx = touchPoints[0].x - touchPoints[1].x;\r\n            const dy = touchPoints[0].y - touchPoints[1].y;\r\n            const touchZoomDistance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            x = (touchPoints[0].x + touchPoints[1].x) / 2;\r\n            y = (touchPoints[0].y + touchPoints[1].y) / 2;\r\n\r\n            const touchCenter = vec2.fromValues(x, y);\r\n            let dist = 0;\r\n            if (this.prevTouchCenter) {\r\n                dist = vec2.dist(this.prevTouchCenter, touchCenter);\r\n            }\r\n            this.prevTouchCenter = touchCenter;\r\n\r\n            const deltaWheel = this._touchZoomDistancePrev - touchZoomDistance; // / this.domElement.clientHeight;\r\n            this._touchZoomDistancePrev = touchZoomDistance;\r\n            this._zoomX = x;\r\n            this._zoomY = y;\r\n            if (dist * 2 < Math.abs(deltaWheel)) {\r\n                if (touchPoints.length == 2) {\r\n                    axes.touch_pinch2 += deltaWheel;\r\n                } else {\r\n                    axes.touch_pinch3 += deltaWheel;\r\n                }\r\n            }\r\n        }\r\n        switch (touchPoints.length) {\r\n            case 1:\r\n                axes.touch_1_move_x += x - _touchMovePrev[0];\r\n                axes.touch_1_move_y += y - _touchMovePrev[1];\r\n                break;\r\n            case 2:\r\n                axes.touch_2_move_x += x - _touchMovePrev[0];\r\n                axes.touch_2_move_y += y - _touchMovePrev[1];\r\n                break;\r\n            case 3:\r\n                axes.touch_3_move_x += x - _touchMovePrev[0];\r\n                axes.touch_3_move_y += y - _touchMovePrev[1];\r\n                break;\r\n        }\r\n        _touchMovePrev[0] = x;\r\n        _touchMovePrev[1] = y;\r\n    };\r\n\r\n    /** Apply time-related state updates.\r\n     * @param elapsedTime The amount of milliseconds passed since the last call to this function.\r\n     */\r\n    animate(elapsedTime: number) {\r\n        const { axes, _keys } = this;\r\n        const delta = elapsedTime * this.height / 2000;\r\n        if (_keys.size) {\r\n            if (_keys.has(\"KeyA\")) axes.keyboard_ad -= delta;\r\n            if (_keys.has(\"KeyD\")) axes.keyboard_ad += delta;\r\n            if (_keys.has(\"KeyW\")) axes.keyboard_ws -= delta;\r\n            if (_keys.has(\"KeyS\")) axes.keyboard_ws += delta;\r\n            if (_keys.has(\"KeyQ\")) axes.keyboard_qe += delta;\r\n            if (_keys.has(\"KeyE\")) axes.keyboard_qe -= delta;\r\n            if (_keys.has(\"ArrowLeft\")) axes.keyboard_arrow_left_right -= delta;\r\n            if (_keys.has(\"ArrowRight\")) axes.keyboard_arrow_left_right = delta;;\r\n            if (_keys.has(\"ArrowUp\")) axes.keyboard_arrow_up_down -= delta;\r\n            if (_keys.has(\"ArrowDown\")) axes.keyboard_arrow_up_down += delta;\r\n        }\r\n    }\r\n\r\n    /** Reset axes to their default/neutral state. */\r\n    resetAxes() {\r\n        const { axes } = this;\r\n        axes.keyboard_ad = 0;\r\n        axes.keyboard_ws = 0;\r\n        axes.keyboard_qe = 0;\r\n        axes.keyboard_arrow_left_right = 0;\r\n        axes.keyboard_arrow_up_down = 0;\r\n        axes.mouse_lmb_move_x = 0;\r\n        axes.mouse_lmb_move_y = 0;\r\n        axes.mouse_rmb_move_x = 0;\r\n        axes.mouse_rmb_move_y = 0;\r\n        axes.mouse_mmb_move_x = 0;\r\n        axes.mouse_mmb_move_y = 0;\r\n        axes.mouse_navigate = 0;\r\n        axes.mouse_navigate = 0;\r\n        axes.mouse_wheel = 0;\r\n        axes.touch_1_move_x = 0;\r\n        axes.touch_1_move_y = 0;\r\n        axes.touch_2_move_x = 0;\r\n        axes.touch_2_move_y = 0;\r\n        axes.touch_3_move_x = 0;\r\n        axes.touch_3_move_y = 0;\r\n        axes.touch_pinch2 = 0;\r\n        axes.touch_pinch3 = 0;\r\n    }\r\n\r\n    /** Determine if axes are all at their default/neutral state. */\r\n    axesEmpty() {\r\n        const { axes } = this;\r\n        return axes.keyboard_ad == 0 &&\r\n            axes.keyboard_ws == 0 &&\r\n            axes.keyboard_qe == 0 &&\r\n            axes.keyboard_arrow_left_right == 0 &&\r\n            axes.keyboard_arrow_up_down == 0 &&\r\n            axes.mouse_lmb_move_x == 0 &&\r\n            axes.mouse_lmb_move_y == 0 &&\r\n            axes.mouse_rmb_move_x == 0 &&\r\n            axes.mouse_rmb_move_y == 0 &&\r\n            axes.mouse_mmb_move_x == 0 &&\r\n            axes.mouse_mmb_move_y == 0 &&\r\n            axes.mouse_navigate == 0 &&\r\n            axes.mouse_navigate == 0 &&\r\n            axes.mouse_wheel == 0 &&\r\n            axes.touch_1_move_x == 0 &&\r\n            axes.touch_1_move_y == 0 &&\r\n            axes.touch_2_move_x == 0 &&\r\n            axes.touch_2_move_y == 0 &&\r\n            axes.touch_3_move_x == 0 &&\r\n            axes.touch_3_move_y == 0 &&\r\n            axes.touch_pinch2 == 0 &&\r\n            axes.touch_pinch3 == 0;\r\n    }\r\n}\r\n\r\n/** Flags for various mouse buttons.\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}\r\n * @category Camera Controllers\r\n */\r\nexport enum MouseButtons {\r\n    none = 0,\r\n    left = 1,\r\n    right = 2,\r\n    middle = 4,\r\n    backward = 8,\r\n    forward = 16,\r\n}\r\n\r\ntype ControllerAxesName =\r\n    | \"keyboard_ad\"\r\n    | \"keyboard_ws\"\r\n    | \"keyboard_qe\"\r\n    | \"keyboard_arrow_left_right\"\r\n    | \"keyboard_arrow_up_down\"\r\n    | \"mouse_lmb_move_x\"\r\n    | \"mouse_lmb_move_y\"\r\n    | \"mouse_rmb_move_x\"\r\n    | \"mouse_rmb_move_y\"\r\n    | \"mouse_mmb_move_x\"\r\n    | \"mouse_mmb_move_y\"\r\n    | \"mouse_navigate\"\r\n    | \"mouse_navigate\"\r\n    | \"mouse_wheel\"\r\n    | \"touch_1_move_x\"\r\n    | \"touch_1_move_y\"\r\n    | \"touch_2_move_x\"\r\n    | \"touch_2_move_y\"\r\n    | \"touch_3_move_x\"\r\n    | \"touch_3_move_y\"\r\n    | \"touch_pinch2\"\r\n    | \"touch_pinch3\"\r\n    ;\r\n\r\n/** The input gesture axes values.\r\n * @property keyboard_ad Keyboard `A` and `D` axis.\r\n * @property keyboard_ws Keyboard `W` and `S` axis.\r\n * @property keyboard_qe Keyboard `Q` and `E` axis.\r\n * @property keyboard_arrow_left_right Keyboard cursor left and right axis.\r\n * @property keyboard_arrow_up_down Keyboard cursor up and down axis.\r\n * @category Camera Controllers\r\n */\r\nexport type ControllerAxes = { [P in ControllerAxesName]: number };\r\n\r\n/** Input event callbacks.\r\n * @category Camera Controllers\r\n */\r\nexport interface ContollerInputContext {\r\n    /** Mouse button events. */\r\n    mouseButtonChanged(event: MouseEvent): Promise<void> | void;\r\n    /** Touch \"click\" events. */\r\n    touchChanged(event: TouchEvent): Promise<void> | void;\r\n    /** Mouse or touch move events. */\r\n    moveBegin(event: TouchEvent | MouseEvent): Promise<void> | void\r\n}\r\n\r\n/** A single touch input contact point.\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch} for more details.\r\n * @category Camera Controllers\r\n */\r\nexport interface TouchContactPoint {\r\n    /** The touch identifier.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch/identifier}\r\n     */\r\n    readonly id: number;\r\n\r\n    /** The touch client x coordinate.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientX}\r\n     */\r\n    readonly x: number;\r\n\r\n    /** The touch client y coordinate.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientY}\r\n     */\r\n    readonly y: number;\r\n}\r\n\r\ninterface ModiferKeyEvent {\r\n    altKey: boolean,\r\n    shiftKey: boolean,\r\n    ctrlKey: boolean\r\n}\r\n", "import { type ReadonlyVec3, type ReadonlyQuat, vec3 } from \"gl-matrix\";\r\nimport type { RenderStateCamera, RenderStateChanges, BoundingSphere, PickSample, PickOptions } from \"core3d\";\r\nimport type { View } from \"../\";\r\nimport { ControllerInput } from \"./input\";\r\nimport type { FlightControllerParams } from \"./flight\";\r\nimport type { OrbitControllerParams } from \"./orbit\";\r\nimport type { OrthoControllerParams } from \"./ortho\";\r\nimport type { PanoramaControllerParams } from \"./panorama\";\r\n\r\n/** Base class for all camera controllers.\r\n * @category Camera Controllers\r\n */\r\nexport abstract class BaseController {\r\n    /** The controller type id. */\r\n    abstract readonly kind: string;\r\n\r\n    /** The camera projection kind.\r\n     * @see {@link RenderStateCamera.kind}.\r\n     */\r\n    abstract readonly projection: RenderStateCamera[\"kind\"] | undefined;\r\n\r\n    /**\r\n     * Camera controller state generation.\r\n     * @remarks\r\n     * If the controller state changes, the generation count will be incremented once every call to {@link renderStateChanges}.\r\n     * This can be used to detect changes by comparing to a local generation count.\r\n     * The count is wrapped at 0xffffffff, so make sure you use != comparison and not < comparison.\r\n     */\r\n    get generation(): number {\r\n        return this._generation;\r\n    }\r\n\r\n    /** Signal changes to internal state. */\r\n    protected changed() {\r\n        this._changed = true;\r\n    }\r\n\r\n    private _changed = true;\r\n    private _generation: number = 0;\r\n    private _flyTo: FlyToExt | undefined;\r\n    private _isMoving = false;\r\n\r\n    /**\r\n     * @param input The input source for this controller.\r\n     */\r\n    protected constructor(\r\n        /** The input source for this controller. */\r\n        readonly input: ControllerInput\r\n    ) {\r\n    }\r\n\r\n    /** The input axes\r\n     * @see {@link ControllerInput.axes}\r\n     */\r\n    get axes() {\r\n        return this.input.axes;\r\n    }\r\n\r\n    /** Whether the camera is currently considered moving or not.\r\n     * @see {@link View.isIdleFrame}\r\n     */\r\n    get moving() {\r\n        return this._isMoving;\r\n    }\r\n\r\n    /** The input element width.\r\n     * @see {@link ControllerInput.width}\r\n     */\r\n    get width() {\r\n        return this.input.width;\r\n    }\r\n\r\n    /** The input element height.\r\n     * @see {@link ControllerInput.height}\r\n     */\r\n    get height() {\r\n        return this.input.height;\r\n    }\r\n\r\n    /** The input multiplier.\r\n     * @see {@link ControllerInput.multiplier}\r\n     */\r\n    get multiplier() {\r\n        return this.input.multiplier;\r\n    }\r\n\r\n    /** The input zoom position.\r\n     * @see {@link ControllerInput.zoomPos}\r\n     */\r\n    get zoomPos() {\r\n        return this.input.zoomPos;\r\n    }\r\n\r\n    /** The input pointer table.\r\n     * @see {@link ControllerInput.touchPoints}\r\n     */\r\n    get pointerTable() {\r\n        return this.input.touchPoints;\r\n    }\r\n\r\n    /** The input shift button state.\r\n     * @see {@link ControllerInput.hasShift}\r\n     */\r\n    get hasShift() {\r\n        return this.input.hasShift;\r\n    }\r\n\r\n    /** The current fly-to state, if any. */\r\n    get currentFlyTo() {\r\n        return this._flyTo?.current;\r\n    }\r\n\r\n    /** Initialize a fly-to transition.\r\n     * @param flyTo The transition parameters\r\n     */\r\n    protected setFlyTo(flyTo: FlyToParams) {\r\n        // wrap begin yaw to nearest angular distance\r\n        let { yaw } = flyTo.begin\r\n        const target = flyTo.end.yaw;\r\n        if (yaw - target < -180) yaw += 360;\r\n        else if (yaw - target > 180) yaw -= 360;\r\n        const begin = { ...flyTo.begin, yaw };\r\n        this._flyTo = { ...flyTo, begin, currentFlightTime: 0, current: begin };\r\n    }\r\n\r\n    /** Apply time sensitive changes to controller state.\r\n     * @param elapsedTime The # of milliseconds elapsed since the last update.\r\n     * @remarks\r\n     * Fly-to animations happens here,\r\n     * as well as motion based on keyboard pressed-state, such as the WASD keys.\r\n     */\r\n    animate(elapsedTime: number) {\r\n        if (elapsedTime < 0 || elapsedTime > 250) elapsedTime = 1000 / 60;\r\n        this.input.animate(elapsedTime);\r\n        const { _flyTo } = this;\r\n        if (_flyTo) {\r\n            if (_flyTo.currentFlightTime >= _flyTo.totalFlightTime) {\r\n                this._flyTo = undefined;\r\n            } else {\r\n                _flyTo.currentFlightTime += elapsedTime;\r\n                const { currentFlightTime, totalFlightTime, begin, end, current } = _flyTo;\r\n                if (currentFlightTime < totalFlightTime) {\r\n                    const lerp = (a: number, b: number, t: number) => (a + (b - a) * t);\r\n                    const easeInOut = (t: number) => (t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2);\r\n                    const t = easeInOut(currentFlightTime / totalFlightTime);\r\n                    const pos = vec3.lerp(vec3.create(), begin.pos, end.pos, t);\r\n                    const pitch = lerp(begin.pitch, end.pitch, t);\r\n                    let yaw = lerp(begin.yaw, end.yaw, t);\r\n                    if (yaw < -180) yaw += 360;\r\n                    else if (yaw > 180) yaw -= 360;\r\n                    _flyTo.current = { pos, yaw, pitch } as const;\r\n                } else {\r\n                    Object.assign(current, end);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Serialize the state of this controller into init parameters.\r\n     * @param includeDerived Include derived state which may not be intrinsic to this controller, such as orbit controller position.\r\n     * @see {@link init}\r\n     */\r\n    abstract serialize(includeDerived?: boolean): ControllerInitParams;\r\n\r\n    /** Initialize controller from parameters.\r\n     * @see {@link serialize}\r\n     */\r\n    abstract init(params: ControllerInitParams): void;\r\n\r\n    /** Attempt to fit controller position such that the specified bounding sphere is brought into view.\r\n     * @param center The center of the bounding sphere, in world space.\r\n     * @param radius The radius of the bounding sphere, in world space.\r\n     */\r\n    abstract autoFit(center: ReadonlyVec3, radius: number): void;\r\n\r\n    /** Update internal controller state */\r\n    abstract update(): void;\r\n\r\n    /** Retrieve changes to render state from derived class, if any.\r\n     * @param state The baseline state to apply changes to.\r\n     * @see {@link View.modifyRenderState}\r\n     * @remarks\r\n     * If there are no changes, the returned object will be empty, i.e. {}.\r\n     */\r\n    abstract stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera>;\r\n\r\n    /** Attach this controller to the input object */\r\n    attach() {\r\n        this.input.callbacks = this;\r\n    }\r\n\r\n    /** \r\n     * Handler for mouse buttons events.\r\n     * @virtual\r\n     */\r\n    mouseButtonChanged(event: MouseEvent): Promise<void> | void { }\r\n\r\n    /** \r\n     * Handler for touch events.\r\n     * @virtual\r\n     */\r\n    touchChanged(event: TouchEvent): Promise<void> | void { }\r\n\r\n    /** \r\n     * Handler for mouse/touch move events.\r\n     * @virtual\r\n     */\r\n    moveBegin(event: TouchEvent | MouseEvent): Promise<void> | void { }\r\n\r\n    /** Move controller to specified position/rotation.\r\n     * @param targetPosition: The position to move to, in world space.\r\n     * @param flyTime: The time, in milliseconds, for the transition animation to last, or 0 for instant update.\r\n     * @param rotation: Optional target rotation, or undefined to retain current rotation.\r\n     * @virtual\r\n     */\r\n    moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: ReadonlyQuat): void { }\r\n\r\n    /** Bring the specified bounding sphere into view.\r\n     * @param boundingSphere: The bounding sphere to move into view.\r\n     * @param flyTime: The time, in milliseconds, for the transition animation to last, or 0 for instant update.\r\n     * @virtual\r\n     * @remarks\r\n     * This function will retain the current camera controller rotation.\r\n     */\r\n    zoomTo(boundingSphere: BoundingSphere, flyTime: number = 1000): void { }\r\n\r\n    /** Retrieve the state changes to be applied to the specified render state.\r\n     * @param state The baseline render state.\r\n     * @param elapsedTime The time elapsed since last call, in milliseconds.\r\n     */\r\n    renderStateChanges(state: RenderStateCamera, elapsedTime: number): RenderStateChanges | undefined {\r\n        this.animate(elapsedTime);\r\n        const { _changed, input, currentFlyTo } = this;\r\n        if (_changed) {\r\n            this._generation = (this._generation + 1) & 0xffff_ffff;\r\n            this._changed = false;\r\n        }\r\n        if (input.axesEmpty() && currentFlyTo == undefined && !_changed) {\r\n            this._isMoving = false;\r\n            return;\r\n        }\r\n        this._isMoving = true;\r\n        if (Object.values(input.axes).some(v => v != 0) || currentFlyTo || _changed) { // check if anything has changed\r\n            this.update();\r\n            this.input.resetAxes();\r\n            const changes = this.stateChanges(state);\r\n            return Object.keys(changes).length ? { camera: changes } : undefined;\r\n        }\r\n    }\r\n\r\n    /** Compute the distance to a point from the specified view plane.\r\n     * @param point The point to measure distance too\r\n     * @param cameraPosition The position of the camera/view plane.\r\n     * @param cameraRotation The rotation of the camera/view plane.\r\n     * @returns A signed distance from the point to the view plane, i.e. positive for points in front of the plane and negative otherwise.\r\n     */\r\n    protected static getDistanceFromViewPlane(point: ReadonlyVec3, cameraPosition: ReadonlyVec3, cameraRotation: ReadonlyQuat): number {\r\n        const dir = vec3.fromValues(0, 0, -1);\r\n        vec3.transformQuat(dir, dir, cameraRotation);\r\n        const offset = -vec3.dot(dir, cameraPosition);\r\n        return vec3.dot(point, dir) + offset;\r\n    }\r\n}\r\n\r\n\r\n/** Common controller input parameters.\r\n * @category Camera Controllers\r\n */\r\nexport type ControllerParams = FlightControllerParams | OrthoControllerParams | PanoramaControllerParams | OrbitControllerParams;\r\n\r\n/** Camera controller 3D orientation in world space.\r\n * @category Camera Controllers\r\n */\r\nexport interface Orientation {\r\n    /** Camera position. */\r\n    readonly pos: ReadonlyVec3;\r\n    /** Camera pitch angle in degrees. */\r\n    readonly pitch: number;\r\n    /** Camera yaw angle in degrees. */\r\n    readonly yaw: number;\r\n}\r\n\r\n/** Camera fly-to transition/animation parameter\r\n * @category Camera Controllers\r\n */\r\nexport interface FlyToParams {\r\n    /** Total flight time in milliseconds. */\r\n    readonly totalFlightTime: number;\r\n    /** The transition start camera orientation. */\r\n    readonly begin: Orientation;\r\n    /** The transition end camera orientation. */\r\n    readonly end: Orientation;\r\n}\r\n\r\n/** @internal */\r\ninterface FlyToExt extends FlyToParams {\r\n    currentFlightTime: number;\r\n    current: Orientation;\r\n}\r\n\r\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\r\n\r\n/** @internal */\r\nexport type MutableCameraState = Partial<Mutable<RenderStateCamera>>;\r\n\r\n/** A context interface for pick operations.\r\n * @remarks\r\n * This is used by some controllers to determine the position and depth of point of screen to allow e.g. orbiting around said point.\r\n * You may pass {@link View} or {@link RenderContext} directly, or wrap some custom variant of picking in your own object.\r\n * @see {@link View.pick}\r\n * @category Camera Controllers\r\n */\r\nexport interface PickContext {\r\n    pick: (x: number, y: number, options?: PickOptions) => Promise<PickSample | undefined>;\r\n}\r\n\r\n/** Common controller initialization parameters.\r\n * @remarks\r\n * No controller uses all of these parameters.\r\n * This interface represents the union of all possible intialization paramters for all possible controllers.\r\n * This is useful for deserialization, where the kind of controller is not known at compile time.\r\n * @category Camera Controllers\r\n */\r\nexport interface ControllerInitParams {\r\n    /** The kind of controller to initialize. */\r\n    readonly kind: string;\r\n\r\n    /** The camera position, if applicable. */\r\n    readonly position?: ReadonlyVec3;\r\n\r\n    /** The camera rotation, if applicable. */\r\n    readonly rotation?: ReadonlyQuat;\r\n\r\n    /** The camera perspective field of view, in degrees, if applicable. */\r\n    readonly fovDegrees?: number;\r\n\r\n    /** The camera orthographic field of meters, in degrees, if applicable. */\r\n    readonly fovMeters?: number;\r\n\r\n    /** The camera pivot point, if applicable. */\r\n    readonly pivot?: ReadonlyVec3;\r\n\r\n    /** The distance to the pivot point, if applicable. */\r\n    readonly distance?: number;\r\n};", "import { type ReadonlyQuat, glMatrix, quat, mat3, type ReadonlyVec3, vec3 } from \"gl-matrix\";\r\n\r\n\r\n/** A 3D rotation expressed as pitch, roll and yaw angles.\r\n * @see {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes}\r\n * @category Camera Controllers\r\n */\r\nexport class PitchRollYawOrientation {\r\n    private _pitch = 0;\r\n    private _yaw = 0;\r\n    private _roll = 0;\r\n    private _rot: ReadonlyQuat | undefined;\r\n\r\n    /**\r\n     * @param pitch Pitch angle, in degrees.\r\n     * @param yaw Yaw angle, in degrees.\r\n     * @param roll Roll angle, in degrees.\r\n     */\r\n    constructor(pitch: number = 0, yaw: number = 0, roll: number = 0) {\r\n        this.pitch = pitch;\r\n        this.yaw = yaw;\r\n        this.roll = roll;\r\n    }\r\n\r\n    /** Pitch angle, in degrees. */\r\n    get pitch() {\r\n        return this._pitch;\r\n    }\r\n    set pitch(value: number) {\r\n        value = clamp(value, -90, 90);\r\n        if (value != this._pitch) {\r\n            this._pitch = value;\r\n            this._rot = undefined;\r\n        }\r\n    }\r\n\r\n    /** Roll angle, in degrees. */\r\n    get roll() {\r\n        return this._roll;\r\n    }\r\n    set roll(value: number) {\r\n        while (value >= 360) value -= 360;\r\n        while (value < 0) value += 360;\r\n        if (value != this._roll) {\r\n            this._roll = value;\r\n            this._rot = undefined;\r\n        }\r\n    }\r\n\r\n    /** Yaw angle, in degrees. */\r\n    get yaw() {\r\n        return this._yaw;\r\n    }\r\n    set yaw(value: number) {\r\n        while (value >= 360) value -= 360;\r\n        while (value < 0) value += 360;\r\n        if (value != this._yaw) {\r\n            this._yaw = value;\r\n            this._rot = undefined;\r\n        }\r\n    }\r\n\r\n    /** Rotation expressed as a quaternion.\r\n     * @remarks\r\n     * The rotation will return a new object if after pitch, roll or yaw angles have changed since last time this accessor was called.\r\n     * Othewise, it returns the previous, cached, object.\r\n     * This enables {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality | strict equality}\r\n     * to determine when the rotation remains unchanged.\r\n     * @see {@link https://glmatrix.net/docs/module-quat.html}\r\n     */\r\n    get rotation() {\r\n        if (!this._rot) {\r\n            this._rot = this.computeRotation();\r\n        }\r\n        return this._rot;\r\n    }\r\n\r\n    /** Set pitch, roll and yaw angles from rotation quaternion.\r\n     * @param rot The rotation quaternion to decompose into angles.\r\n     */\r\n    decomposeRotation(rot: ReadonlyQuat) {\r\n        const { yaw, pitch, roll } = decomposeRotation(rot);\r\n        this.yaw = yaw * 180 / Math.PI;\r\n        this.pitch = pitch * 180 / Math.PI;\r\n        this.roll = roll * 180 / Math.PI;\r\n        this._rot = rot;\r\n    }\r\n\r\n    private computeRotation(): ReadonlyQuat {\r\n        const { _roll, _pitch, _yaw } = this;\r\n        return computeRotation(_roll, _pitch, _yaw);\r\n    }\r\n}\r\n\r\n/** Compute rotation quaternion from roll, pitch and yaw angles.\r\n * @param roll Roll angle in degrees,\r\n * @param pitch Pitch angle in degrees,\r\n * @param yaw Yaw angle in degrees,\r\n * @category Camera Controllers\r\n */\r\nexport function computeRotation(roll: number, pitch: number, yaw: number) {\r\n    //ported from https://github.com/BabylonJS/Babylon.js/blob/fe8e43bc526f01a3649241d3819a45455a085461/packages/dev/core/src/Maths/math.vector.ts\r\n    const halfYaw = glMatrix.toRadian(yaw) * 0.5;\r\n    const halfPitch = glMatrix.toRadian(pitch) * 0.5;\r\n    const halfRoll = glMatrix.toRadian(roll) * 0.5;\r\n\r\n    const sinRoll = Math.sin(halfRoll);\r\n    const cosRoll = Math.cos(halfRoll);\r\n    const sinPitch = Math.sin(halfPitch);\r\n    const cosPitch = Math.cos(halfPitch);\r\n    const sinYaw = Math.sin(halfYaw);\r\n    const cosYaw = Math.cos(halfYaw);\r\n\r\n    const x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\r\n    const y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\r\n    const z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\r\n    const w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\r\n    const flipYZ = quat.fromValues(0.7071067811865475, 0, 0, 0.7071067811865476);\r\n    return quat.mul(quat.create(), flipYZ, quat.fromValues(x, y, z, w));\r\n}\r\n\r\n/** Decompose rotation quaternioan into roll, pitch and yaw angles.\r\n * @param rot Rotation quaternion.\r\n * @returns Rotation angles in radians.\r\n * @category Camera Controllers\r\n */\r\nexport function decomposeRotation(rot: ReadonlyQuat) {\r\n    //ported from https://github.com/BabylonJS/Babylon.js/blob/fe8e43bc526f01a3649241d3819a45455a085461/packages/dev/core/src/Maths/math.vector.ts\r\n    const flipXZ = quat.fromValues(-0.7071067811865475, 0, 0, 0.7071067811865476);\r\n\r\n    const [qx, qy, qz, qw] = quat.mul(quat.create(), flipXZ, rot);\r\n    const zAxisY = qy * qz - qx * qw;\r\n    const limit = 0.4999999;\r\n\r\n    let yaw = 0;\r\n    let pitch = 0;\r\n    let roll = 0;\r\n    if (zAxisY < -limit) {\r\n        yaw = 2 * Math.atan2(qy, qw);\r\n        pitch = Math.PI / 2;\r\n        roll = 0;\r\n    } else if (zAxisY > limit) {\r\n        yaw = 2 * Math.atan2(qy, qw);\r\n        pitch = -Math.PI / 2;\r\n        roll = 0;\r\n    } else {\r\n        const sqw = qw * qw;\r\n        const sqz = qz * qz;\r\n        const sqx = qx * qx;\r\n        const sqy = qy * qy;\r\n        roll = Math.atan2(2.0 * (qx * qy + qz * qw), -sqz - sqx + sqy + sqw);\r\n        pitch = Math.asin(-2.0 * zAxisY);\r\n        yaw = Math.atan2(2.0 * (qz * qx + qy * qw), sqz - sqx - sqy + sqw);\r\n    }\r\n    return {\r\n        /** The yaw angle, in radians. */\r\n        yaw,\r\n        /** The pitch angle, in radians. */\r\n        pitch,\r\n        /** The roll angle, in radians. */\r\n        roll\r\n    } as const;\r\n}\r\n\r\n\r\n/** @internal */\r\nexport function clamp(value: number, min: number, max: number) {\r\n    if (value < min) {\r\n        value = min;\r\n    } else if (value > max) {\r\n        value = max;\r\n    }\r\n    return value;\r\n}\r\n\r\n/** Retuns a quaternion computed for the given direction.\r\n  * Will compute rotation with Y as the up vector unless direction is Y or snapToAxis is given\r\n  * @param dir Direction vector.\r\n  * @param snapToAxis Snap to custom rotation, uses Y as up otherwise \r\n  * @returns Rotation computed for the given direction and snap axis.\r\n  * @category Camera Controllers\r\n  */\r\nexport function rotationFromDirection(dir: ReadonlyVec3, snapToAxis?: quat) {\r\n    const up = glMatrix.equals(Math.abs(vec3.dot(vec3.fromValues(0, 0, 1), dir)), 1)\r\n        ? vec3.fromValues(0, 1, 0)\r\n        : vec3.fromValues(0, 0, 1);\r\n    if (snapToAxis) {\r\n        vec3.transformQuat(up, up, snapToAxis);\r\n    }\r\n\r\n    const right = vec3.cross(vec3.create(), up, dir);\r\n    if (snapToAxis) {\r\n        const [x, y, z] = right;\r\n        right[0] = right[1] = right[2] = 0;\r\n        const ax = Math.abs(x);\r\n        const ay = Math.abs(y);\r\n        const az = Math.abs(z);\r\n        if (ax > ay && ax > az) {\r\n            right[0] = Math.sign(x);\r\n        } else if (ay > az) {\r\n            right[1] = Math.sign(y);\r\n        } else {\r\n            right[2] = Math.sign(z);\r\n        }\r\n    }\r\n\r\n    vec3.cross(up, dir, right);\r\n    vec3.normalize(up, up);\r\n\r\n    vec3.cross(right, up, dir);\r\n    vec3.normalize(right, right);\r\n\r\n    return quat.fromMat3(\r\n        quat.create(),\r\n        mat3.fromValues(right[0], right[1], right[2], up[0], up[1], up[2], dir[0], dir[1], dir[2])\r\n    );\r\n}", "\r\nimport { type ReadonlyVec3, vec3, quat, glMatrix, type ReadonlyQuat } from \"gl-matrix\";\r\nimport { BaseController, type ControllerInitParams, type MutableCameraState, type PickContext } from \"./base\";\r\nimport { type RenderStateCamera, type RecursivePartial, mergeRecursive, type BoundingSphere } from \"core3d\";\r\nimport { PitchRollYawOrientation, clamp, decomposeRotation } from \"./orientation\";\r\nimport { ControllerInput, MouseButtons } from \"./input\";\r\n\r\n/** The flight controller mimics the behaviour of an etheral, hovering drone, allowing unconstrained movements through walls and obstacles.\r\n * @category Camera Controllers\r\n */\r\nexport class FlightController extends BaseController {\r\n    /** @internal */\r\n    protected arrowKeyScale = 0.4;\r\n    /** @internal */\r\n    protected pivotButton: MouseButtons = MouseButtons.right;\r\n    /** @internal */\r\n    protected pivotFingers: number = 3;\r\n\r\n    override kind = \"flight\";\r\n    override projection = \"pinhole\" as const;\r\n\r\n    private params: FlightControllerParams = {\r\n        linearVelocity: 1,\r\n        rotationalVelocity: 1,\r\n        pickDelay: 200,\r\n        proportionalCameraSpeed: null, // { min: 0.2, max: 1000 }\r\n        enableShiftModifierOnWheel: false\r\n    }\r\n\r\n    private _position: ReadonlyVec3 = vec3.create();\r\n    private readonly _orientation = new PitchRollYawOrientation(-30, 30);\r\n    private _pivot: Pivot | undefined;\r\n    private _fov = 60;\r\n\r\n    private readonly resetPickDelay = 3000;\r\n    private lastUpdatedMoveBegin: number = 0;\r\n    private lastUpdate: number = 0;\r\n    private moveBeginDelay = 0;\r\n    private recordedMoveBegin: ReadonlyVec3 | undefined = undefined;\r\n    private inMoveBegin = false;\r\n\r\n    /**\r\n     * @param input The input source.\r\n     * @param pick The context used for pick queries.\r\n     */\r\n    constructor(\r\n        input: ControllerInput,\r\n        /** The context used for pick queries. */\r\n        readonly pick: PickContext,\r\n    ) {\r\n        super(input);\r\n    }\r\n\r\n    /** Camera position, in world space. */\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value: ReadonlyVec3) {\r\n        this._position = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** Computed rotation quaternion, in world space.\r\n     * @remarks\r\n     * This rotation is derived from {@link pitch} and {@link yaw} angles.\r\n     */\r\n    get rotation() {\r\n        return this._orientation.rotation;\r\n    }\r\n\r\n    /** The camera pitch angle, in degrees. */\r\n    get pitch() {\r\n        return this._orientation.pitch;\r\n    }\r\n    set pitch(value: number) {\r\n        this._orientation.pitch = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera yaw angle, in degrees. */\r\n    get yaw() {\r\n        return this._orientation.yaw;\r\n    }\r\n    set yaw(value: number) {\r\n        this._orientation.yaw = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera vertical field of view angle, in degrees. */\r\n    get fov() {\r\n        return this._fov;\r\n    }\r\n    set fov(value: number) {\r\n        this._fov = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The optional pivot point to orbit around, in world space. */\r\n    get pivot() {\r\n        return this._pivot;\r\n    }\r\n\r\n    /** Update controller parameters.\r\n     * @param params Set of parameters to change.\r\n     */\r\n    updateParams(params: RecursivePartial<FlightControllerParams>) {\r\n        this.params = mergeRecursive(this.params, params);\r\n    }\r\n\r\n    override serialize(): ControllerInitParams {\r\n        const { kind, position, _orientation, _fov } = this;\r\n        const { rotation } = _orientation;\r\n        return { kind, position, rotation, fovDegrees: _fov };\r\n    }\r\n\r\n    override init(params: ControllerInitParams) {\r\n        const { kind, position, rotation, fovDegrees } = params;\r\n        console.assert(kind == this.kind);\r\n        if (position) {\r\n            this._position = position;\r\n        }\r\n        if (rotation) {\r\n            this._orientation.decomposeRotation(rotation);\r\n            this._orientation.roll = 0;\r\n        }\r\n        if (fovDegrees != undefined) {\r\n            this._fov = fovDegrees;\r\n        }\r\n        this.input.callbacks = this;\r\n        this.input.usePointerLock = true;\r\n    }\r\n\r\n    override autoFit(center: ReadonlyVec3, radius: number): void {\r\n        const { _orientation } = this;\r\n        const maxDistance = 1000;\r\n        const distance = Math.min(maxDistance, radius / Math.tan(glMatrix.toRadian(this._fov) / 2));\r\n        const dir = vec3.fromValues(0, 0, distance);\r\n        vec3.transformQuat(dir, dir, _orientation.rotation);\r\n        this._position = vec3.add(vec3.create(), center, dir)\r\n    }\r\n\r\n    override moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: ReadonlyQuat): void {\r\n        const { _orientation, _position } = this;\r\n        if (flyTime) {\r\n            let targetPitch = _orientation.pitch;\r\n            let targetYaw = _orientation.yaw;\r\n            if (rotation) {\r\n                const { pitch, yaw } = decomposeRotation(rotation)\r\n                targetPitch = pitch / Math.PI * 180;\r\n                targetYaw = yaw / Math.PI * 180;\r\n            }\r\n\r\n            this.setFlyTo({\r\n                totalFlightTime: flyTime,\r\n                end: { pos: vec3.clone(targetPosition), pitch: targetPitch, yaw: targetYaw },\r\n                begin: { pos: vec3.clone(_position), pitch: _orientation.pitch, yaw: _orientation.yaw }\r\n            });\r\n        }\r\n        else {\r\n            this._position = targetPosition;\r\n            if (rotation) {\r\n                this._orientation.decomposeRotation(rotation);\r\n            }\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override zoomTo(boundingSphere: BoundingSphere, flyTime: number = 1000): void {\r\n        const { _orientation, _position, _fov } = this;\r\n        if (flyTime) {\r\n            const dist = Math.max(boundingSphere.radius / Math.tan(glMatrix.toRadian(_fov) / 2), boundingSphere.radius);\r\n            const targetPosition = vec3.create();\r\n            vec3.add(targetPosition, vec3.transformQuat(targetPosition, vec3.fromValues(0, 0, dist), _orientation.rotation), boundingSphere.center);\r\n            this.setFlyTo({\r\n                totalFlightTime: flyTime,\r\n                end: { pos: vec3.clone(targetPosition), pitch: _orientation.pitch, yaw: _orientation.yaw + 0.05 },\r\n                begin: { pos: vec3.clone(_position), pitch: _orientation.pitch, yaw: _orientation.yaw }\r\n            });\r\n        } else {\r\n            const dist = boundingSphere.radius / Math.tan(glMatrix.toRadian(_fov) / 2);\r\n            this._position = vec3.add(vec3.create(), vec3.transformQuat(vec3.create(), vec3.fromValues(0, 0, dist), _orientation.rotation), boundingSphere.center);\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override update(): void {\r\n        const { multiplier, _orientation, params, height, _pivot, zoomPos, currentFlyTo } = this;\r\n        if (currentFlyTo) {\r\n            this._position = vec3.clone(currentFlyTo.pos);\r\n            _orientation.pitch = currentFlyTo.pitch;\r\n            _orientation.yaw = currentFlyTo.yaw;\r\n            this.changed();\r\n            return;\r\n        }\r\n        this.lastUpdate = performance.now();\r\n        let { tx, ty, tz, rx, ry, shouldPivot } = this.getTransformations();\r\n        _orientation.roll = 0;\r\n        const [zoomX, zoomY] = zoomPos;\r\n\r\n        if (rx || ry) {\r\n            const rotationalVelocity = (shouldPivot ? 180 : this._fov) * params.rotationalVelocity / height;\r\n            _orientation.pitch += rx * rotationalVelocity;\r\n            _orientation.yaw += ry * rotationalVelocity;\r\n            if (_pivot && shouldPivot && _pivot.active) {\r\n                const { center, offset, distance } = _pivot;\r\n                const pos = vec3.fromValues(0, 0, distance);\r\n                vec3.add(pos, pos, offset);\r\n                vec3.transformQuat(pos, pos, _orientation.rotation);\r\n                this._position = vec3.add(vec3.create(), center, pos);\r\n            }\r\n            this.changed();\r\n        }\r\n\r\n        if (tx || ty || tz) {\r\n            if (tz != 0) {\r\n                tx += zoomX * tz * 0.6;\r\n                ty += -zoomY * tz * 0.6;\r\n            }\r\n            const linearVelocity = multiplier * params.linearVelocity / height;\r\n            const worldPosDelta = vec3.transformQuat(vec3.create(), vec3.fromValues(tx * linearVelocity, -ty * linearVelocity, tz * linearVelocity), _orientation.rotation);\r\n            this._position = vec3.add(vec3.create(), this._position, worldPosDelta);\r\n            if (_pivot && _pivot.active) {\r\n                this.setPivot(_pivot.center, _pivot.active);\r\n            }\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\r\n        const changes: MutableCameraState = {};\r\n        const { _position, _orientation, _pivot, _fov } = this;\r\n        if (!state || !vec3.exactEquals(state.position, _position)) {\r\n            changes.position = _position;\r\n        }\r\n        if (!state || !quat.exactEquals(state.rotation, _orientation.rotation)) {\r\n            changes.rotation = _orientation.rotation;\r\n        }\r\n        if (!state || (_pivot && state.pivot && vec3.exactEquals(state.pivot, _pivot?.center))) {\r\n            changes.pivot = _pivot?.center;\r\n        }\r\n        if (!state || state.fov !== _fov) {\r\n            changes.fov = _fov;\r\n        }\r\n        if (!state) {\r\n            changes.kind = \"pinhole\";\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    override async mouseButtonChanged(event: MouseEvent): Promise<void> {\r\n        const { pick, pivotButton } = this;\r\n        if (pick) {\r\n            const changes = event.buttons;\r\n            if (changes & pivotButton) {\r\n                const sample = await pick.pick(event.offsetX, event.offsetY);\r\n                if (sample) {\r\n                    this.setPivot(sample.position, true);\r\n                } else {\r\n                    this.resetPivot(true);\r\n                }\r\n            } else {\r\n                this.resetPivot(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    override async touchChanged(event: TouchEvent): Promise<void> {\r\n        const { pointerTable, pick, pivotFingers } = this;\r\n        if (pointerTable.length == pivotFingers && pick) {\r\n            const x = pointerTable.length > 1 ? Math.round((pointerTable[0].x + pointerTable[1].x) / 2) : pointerTable[0].x;\r\n            const y = pointerTable.length > 1 ? Math.round((pointerTable[0].y + pointerTable[1].y) / 2) : pointerTable[0].y;\r\n            const sample = await pick.pick(x, y);\r\n            if (sample) {\r\n                this.setPivot(sample.position, true);\r\n            } else {\r\n                this.resetPivot(true);\r\n            }\r\n        } else {\r\n            this.resetPivot(false);\r\n        }\r\n    }\r\n\r\n    async moveBegin(event: TouchEvent | MouseEvent): Promise<void> {\r\n        const { pointerTable, pick, resetPickDelay } = this;\r\n\r\n        const deltaTime = this.lastUpdate - this.lastUpdatedMoveBegin;\r\n        if (pick == undefined || deltaTime < this.params.pickDelay || this.inMoveBegin) {\r\n            return;\r\n        }\r\n        this.inMoveBegin = true;\r\n        const setPickPosition = async (x: number, y: number) => {\r\n            const sample = await pick.pick(x, y, { async: true });\r\n            if (sample) {\r\n                if (performance.now() - this.lastUpdatedMoveBegin > 2000) { //Delay proportinal speed for better feeling on bad devices\r\n                    this.moveBeginDelay = performance.now();\r\n                }\r\n                this.recordedMoveBegin = sample.position;\r\n                this.lastUpdatedMoveBegin = performance.now();\r\n            } else if (resetPickDelay < deltaTime) {\r\n                this.recordedMoveBegin = undefined;\r\n                this.lastUpdatedMoveBegin = performance.now();\r\n            }\r\n        }\r\n\r\n        if (isTouchEvent(event)) {\r\n            if (pointerTable.length > 1) {\r\n                await setPickPosition(Math.round((pointerTable[0].x + pointerTable[1].x) / 2), Math.round((pointerTable[0].y + pointerTable[1].y) / 2))\r\n            }\r\n        } else {\r\n            await setPickPosition(event.offsetX, event.offsetY)\r\n        }\r\n        this.inMoveBegin = false;\r\n\r\n    }\r\n\r\n    private resetPivot(active: boolean) {\r\n        const { _pivot } = this;\r\n        if (_pivot) {\r\n            this.setPivot(_pivot.center, active);\r\n        }\r\n    }\r\n\r\n    private setPivot(center: ReadonlyVec3, active: boolean) {\r\n        const { _position, _orientation } = this;\r\n        const distance = vec3.distance(center, _position);\r\n        const offset = vec3.fromValues(0, 0, distance);\r\n        vec3.transformQuat(offset, offset, _orientation.rotation);\r\n        vec3.add(offset, center, offset);\r\n        vec3.sub(offset, _position, offset);\r\n        const invRot = quat.invert(quat.create(), _orientation.rotation);\r\n        vec3.transformQuat(offset, offset, invRot)\r\n        this._pivot = { center, offset, distance, active };\r\n    }\r\n\r\n    /** @internal */\r\n    protected modifiers() {\r\n        const { params, recordedMoveBegin, _position, _fov } = this;\r\n        const { proportionalCameraSpeed, enableShiftModifierOnWheel } = params;\r\n        let scale = 20;\r\n        if (proportionalCameraSpeed && recordedMoveBegin) {\r\n            scale = vec3.dist(_position, recordedMoveBegin) * Math.tan(((Math.PI / 180) * _fov) / 2) * 2;\r\n            const siceMoveDelay = performance.now() - this.moveBeginDelay;\r\n            if (siceMoveDelay < 400) {  //Delay proportinal speed for better feeling on bad devices\r\n                scale = Math.min(scale, 60 + (siceMoveDelay * 0.5));\r\n            }\r\n            let mouseWheelModifier = this.input.hasShift && !enableShiftModifierOnWheel ? 0 : clamp(scale / 3, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\r\n            const mousePanModifier = clamp(scale, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\r\n            const touchMovementModifier = clamp(scale, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\r\n            const pinchModifier = clamp(scale, proportionalCameraSpeed.min, proportionalCameraSpeed.max);\r\n            return {\r\n                mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale: 20\r\n            }\r\n        }\r\n        return {\r\n            mouseWheelModifier: this.input.hasShift && !enableShiftModifierOnWheel ? 0 : scale, mousePanModifier: scale, touchMovementModifier: scale, pinchModifier: scale, scale\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    protected getTransformations(): CameraTransformations {\r\n        const { axes, arrowKeyScale } = this;\r\n        const rotX = -axes.keyboard_arrow_up_down * arrowKeyScale - axes.mouse_lmb_move_y + axes.touch_1_move_y;\r\n        const rotY = -axes.keyboard_arrow_left_right * arrowKeyScale - axes.mouse_lmb_move_x + axes.touch_1_move_x;\r\n        const pivotX = -axes.mouse_rmb_move_y + -axes.touch_3_move_y;\r\n        const pivotY = -axes.mouse_rmb_move_x + -axes.touch_3_move_x;\r\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\r\n\r\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\r\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_mmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\r\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_mmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\r\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\r\n        const rx = shouldPivot ? pivotX : rotX;\r\n        const ry = shouldPivot ? pivotY : rotY;\r\n        return { tx, ty, tz, rx, ry, shouldPivot };\r\n    }\r\n\r\n    /** FlightController type guard function.\r\n     * @param controller The controller to type guard.\r\n     */\r\n    static is(controller: BaseController): controller is FlightController {\r\n        return controller instanceof FlightController;\r\n    }\r\n\r\n    /** FlightController type assert function.\r\n     * @param controller The controller to type assert.\r\n     */\r\n    static assert(controller: BaseController): asserts controller is FlightController {\r\n        if (!(controller instanceof FlightController))\r\n            throw new Error(\"Camera controller is not of type FlightController!\");\r\n    }\r\n}\r\n\r\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return \"TouchEvent\" in globalThis && event instanceof TouchEvent;\r\n}\r\n\r\n/** Variant of flight controller that uses middle mouse button for panning.\r\n * @category Camera Controllers\r\n */\r\nexport class CadMiddlePanController extends FlightController {\r\n    override kind = \"cadMiddlePan\" as const;\r\n\r\n    constructor(input: ControllerInput, readonly pick: PickContext, params?: FlightControllerParams) {\r\n        super(input, pick);\r\n        this.pivotButton = MouseButtons.left;\r\n        this.pivotFingers = 1;\r\n    }\r\n\r\n    override getTransformations(): CameraTransformations {\r\n        const { axes, arrowKeyScale } = this;\r\n        const rotX = -axes.keyboard_arrow_up_down * arrowKeyScale - axes.mouse_rmb_move_y + axes.touch_3_move_y;\r\n        const rotY = -axes.keyboard_arrow_left_right * arrowKeyScale - axes.mouse_rmb_move_x + axes.touch_3_move_x;\r\n        const pivotX = -axes.mouse_lmb_move_y + -axes.touch_1_move_y;\r\n        const pivotY = -axes.mouse_lmb_move_x + -axes.touch_1_move_x;\r\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\r\n\r\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\r\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_mmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\r\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_mmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\r\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\r\n        const rx = shouldPivot ? pivotX : rotX;\r\n        const ry = shouldPivot ? pivotY : rotY;\r\n\r\n        return { tx, ty, tz, rx, ry, shouldPivot };\r\n    }\r\n}\r\n\r\n/** Variant of flight controller that uses right mouse button for panning.\r\n * @category Camera Controllers\r\n */\r\nexport class CadRightPanController extends FlightController {\r\n    override kind = \"cadRightPan\" as const;\r\n\r\n    constructor(input: ControllerInput, readonly pick: PickContext, params?: FlightControllerParams) {\r\n        super(input, pick);\r\n        this.pivotButton = MouseButtons.left;\r\n        this.pivotFingers = 1;\r\n    }\r\n\r\n    override getTransformations(): CameraTransformations {\r\n        const { axes, arrowKeyScale } = this;\r\n        const rotX = -axes.keyboard_arrow_up_down * arrowKeyScale - axes.mouse_mmb_move_y + axes.touch_3_move_y;\r\n        const rotY = -axes.keyboard_arrow_left_right * arrowKeyScale - axes.mouse_mmb_move_x + axes.touch_3_move_x;\r\n        const pivotX = -axes.mouse_lmb_move_y + -axes.touch_1_move_y;\r\n        const pivotY = -axes.mouse_lmb_move_x + -axes.touch_1_move_x;\r\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\r\n\r\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\r\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_rmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\r\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_rmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\r\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\r\n        const rx = shouldPivot ? pivotX : rotX;\r\n        const ry = shouldPivot ? pivotY : rotY;\r\n\r\n        return { tx, ty, tz, rx, ry, shouldPivot };\r\n    }\r\n}\r\n\r\n/** Vassbakk's super special flight controller.\r\n * @category Camera Controllers\r\n */\r\nexport class SpecialFlightController extends FlightController {\r\n    override kind = \"special\" as const;\r\n\r\n    constructor(input: ControllerInput, readonly pick: PickContext, params?: FlightControllerParams) {\r\n        super(input, pick);\r\n        this.pivotButton = MouseButtons.middle;\r\n        this.pivotFingers = 1;\r\n    }\r\n\r\n    override getTransformations(): CameraTransformations {\r\n        const { axes, arrowKeyScale } = this;\r\n        const rotX = -axes.keyboard_arrow_up_down * arrowKeyScale - axes.mouse_rmb_move_y + axes.touch_3_move_y;\r\n        const rotY = -axes.keyboard_arrow_left_right * arrowKeyScale - axes.mouse_rmb_move_x + axes.touch_3_move_x;\r\n        const pivotX = -axes.mouse_mmb_move_y + -axes.touch_1_move_y;\r\n        const pivotY = -axes.mouse_mmb_move_x + -axes.touch_1_move_x;\r\n        const shouldPivot = Math.abs(rotX) + Math.abs(rotY) < Math.abs(pivotX) + Math.abs(pivotY);\r\n\r\n        const { mouseWheelModifier, mousePanModifier, touchMovementModifier, pinchModifier, scale } = this.modifiers();\r\n        const tx = (axes.keyboard_ad * scale) - (axes.mouse_lmb_move_x * mousePanModifier) - (axes.touch_2_move_x * touchMovementModifier);\r\n        const ty = (axes.keyboard_qe * scale) - (axes.mouse_lmb_move_y * mousePanModifier) - (axes.touch_2_move_y * touchMovementModifier);\r\n        const tz = (axes.keyboard_ws * scale) + (axes.mouse_wheel * mouseWheelModifier) + (axes.touch_pinch2 * pinchModifier);\r\n        const rx = shouldPivot ? pivotX : rotX;\r\n        const ry = shouldPivot ? pivotY : rotY;\r\n\r\n        return { tx, ty, tz, rx, ry, shouldPivot };\r\n    }\r\n}\r\n\r\n/** Flight controller initialization parameters\r\n * @category Camera Controllers\r\n */\r\nexport interface FlightControllerParams {\r\n    /** The camera linear velocity factor.\r\n     * @defaultValue 1\r\n     */\r\n    linearVelocity: number;\r\n\r\n    /** The camera rotational velocity factor.\r\n     * @defaultValue 1\r\n     */\r\n    rotationalVelocity: number;\r\n\r\n    /** Delay for pick updates, in milliseconds.\r\n     * @defaultValue 200\r\n     */\r\n    pickDelay: number;\r\n\r\n    /** Option to enable shift to modify mouse wheel speed.\r\n    * @defaultValue false\r\n    */\r\n    enableShiftModifierOnWheel: boolean;\r\n\r\n    /** \r\n     * When set, the controller will sample the distance to the pixel under the mouse cursor,\r\n     * or central pinch point, and move the camera with speed proportional to that distance.\r\n     * The min and max determines the bounds of how slow/fast it is allowed to move.\r\n     * \r\n     * Setting this to `null` disables this feature, using a constant speed factor of 1.0.\r\n     * @defaultValue null\r\n     */\r\n    proportionalCameraSpeed: { readonly min: number, readonly max: number; } | null;\r\n}\r\n\r\ninterface CameraTransformations {\r\n    tx: number,\r\n    ty: number,\r\n    tz: number,\r\n    rx: number,\r\n    ry: number,\r\n    shouldPivot: boolean\r\n}\r\n\r\ninterface Pivot {\r\n    center: ReadonlyVec3;\r\n    offset: ReadonlyVec3;\r\n    distance: number;\r\n    active: boolean;\r\n}\r\n", "\r\nimport { type ReadonlyVec3, quat, type ReadonlyQuat } from \"gl-matrix\";\r\nimport { BaseController, type ControllerInitParams, type MutableCameraState } from \"./base\";\r\nimport { type RenderStateCamera, } from \"core3d\";\r\nimport { ControllerInput } from \"./input\";\r\n\r\n/** Null type camera motion controller.\r\n * @remarks\r\n * This controller is completely passive and will not overwrite/modify any camera render state.\r\n * @category Camera Controllers\r\n */\r\nexport class NullController extends BaseController {\r\n    override kind = \"null\" as const;\r\n    override projection = undefined;\r\n\r\n    /**\r\n     * @param input The input source.\r\n     */\r\n    constructor(input: ControllerInput) {\r\n        super(input);\r\n    }\r\n\r\n    override serialize(): ControllerInitParams {\r\n        const { kind } = this;\r\n        return { kind };\r\n    }\r\n\r\n    override init(params: ControllerInitParams) {\r\n        const { kind } = params;\r\n        console.assert(kind == this.kind);\r\n        this.input.usePointerLock = false;\r\n        this.attach();\r\n    }\r\n\r\n    override autoFit(center: ReadonlyVec3, radius: number): void {\r\n    }\r\n\r\n    override update(): void {\r\n    }\r\n\r\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\r\n        return {};\r\n    }\r\n\r\n    /** NullController type guard function.\r\n     * @param controller The controller to type guard.\r\n     */\r\n    static is(controller: BaseController): controller is NullController {\r\n        return controller instanceof NullController;\r\n    }\r\n\r\n    /** NullController type assert function.\r\n     * @param controller The controller to type assert.\r\n     */\r\n    static assert(controller: BaseController): asserts controller is NullController {\r\n        if (!(controller instanceof NullController))\r\n            throw new Error(\"Camera controller is not of type NullController!\");\r\n    }\r\n}\r\n", "\r\nimport { mergeRecursive, type RenderStateCamera } from \"core3d\";\r\nimport { type ReadonlyVec3, glMatrix, vec2, vec3, type ReadonlyQuat } from \"gl-matrix\";\r\nimport { BaseController, type ControllerInitParams, type MutableCameraState } from \"./base\";\r\nimport { PitchRollYawOrientation } from \"./orientation\";\r\nimport { ControllerInput } from \"./input\";\r\n\r\n/** A camera controller for orbiting around a point of interest.\r\n * @category Camera Controllers\r\n */\r\nexport class OrbitController extends BaseController {\r\n    override kind = \"orbit\" as const;\r\n    override projection = \"pinhole\" as const;\r\n\r\n    private params: OrbitControllerParams = {\r\n        maxDistance: 1000,\r\n        linearVelocity: 1,\r\n        rotationalVelocity: 1,\r\n    };\r\n    private readonly _orientation = new PitchRollYawOrientation(-30, 30);\r\n    private _pivot: ReadonlyVec3 = vec3.create();\r\n    private _distance = 10;\r\n    private _fov = 60;\r\n\r\n    /**\r\n     * @param input The input source.\r\n     * @param params Optional initialization parameters.\r\n     */\r\n    constructor(input: ControllerInput, params?: Partial<OrbitControllerParams>) {\r\n        super(input);\r\n        Object.assign(this.params, params);\r\n    }\r\n\r\n    /** The current controller parameters. */\r\n    get parameters() {\r\n        return this.params;\r\n    }\r\n\r\n    /** Computed position, in world space.\r\n     * @remarks\r\n     * This position is derived from {@link pivot} point, {@link distance}, rotated around {@link pitch} and {@link yaw} angles.\r\n     */\r\n    get position() {\r\n        const { _orientation, _pivot, _distance } = this;\r\n        const pos = vec3.fromValues(0, 0, _distance);\r\n        vec3.transformQuat(pos, pos, _orientation.rotation);\r\n        vec3.add(pos, pos, _pivot);\r\n        return pos;\r\n    }\r\n\r\n    /** Computed rotation quaternion, in world space.\r\n     * @remarks\r\n     * This rotation is derived from {@link pitch} and {@link yaw} angles.\r\n     */\r\n    get rotation() {\r\n        return this._orientation.rotation;\r\n    }\r\n\r\n    /** The pitch angle around the pivot point, in degrees. */\r\n    get pitch() {\r\n        return this._orientation.pitch;\r\n    }\r\n    set pitch(value: number) {\r\n        this._orientation.pitch = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The yaw angle around the pivot point, in degrees. */\r\n    get yaw() {\r\n        return this._orientation.yaw;\r\n    }\r\n    set yaw(value: number) {\r\n        this._orientation.yaw = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The pivot point to orbit around, in world space. */\r\n    get pivot() {\r\n        return this._pivot;\r\n    }\r\n    set pivot(value: ReadonlyVec3) {\r\n        this._pivot = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The distance from the pivot point, in meters. */\r\n    get distance() {\r\n        return this._distance;\r\n    }\r\n    set distance(value: number) {\r\n        this._distance = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera vertical field of view angle, in degrees. */\r\n    get fov() {\r\n        return this._fov;\r\n    }\r\n    set fov(value: number) {\r\n        this._fov = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** Update controller parameters.\r\n     * @param params Set of parameters to change.\r\n     */\r\n    updateParams(params: Partial<OrbitControllerParams>) {\r\n        this.params = mergeRecursive(this.params, params);\r\n    }\r\n\r\n    override serialize(includeDerived = false): ControllerInitParams {\r\n        const { kind, pivot, _orientation, distance, fov } = this;\r\n        const { rotation } = _orientation;\r\n        return { kind, pivot, rotation, distance, fovDegrees: fov, ...(includeDerived ? { position: this.position } : undefined) };\r\n    }\r\n\r\n    override init(params: ControllerInitParams) {\r\n        const { kind, position, rotation, pivot, fovDegrees, distance } = params;\r\n        console.assert(kind == this.kind);\r\n        if (fovDegrees != undefined) {\r\n            this._fov = fovDegrees;\r\n        }\r\n        if (pivot) {\r\n            this._pivot = pivot;\r\n        }\r\n        if (rotation) {\r\n            this._orientation.decomposeRotation(rotation);\r\n            this._orientation.roll = 0;\r\n        }\r\n        if (distance) {\r\n            this._distance = distance;\r\n            if (!pivot && position && rotation) {\r\n                const tmp = vec3.fromValues(0, 0, -distance);\r\n                vec3.transformQuat(tmp, tmp, rotation);\r\n                this._pivot = vec3.add(tmp, tmp, position);\r\n            }\r\n        }\r\n        if (position && pivot) {\r\n            const { _orientation } = this;\r\n            if (!distance) {\r\n                this._distance = vec3.distance(position, pivot);\r\n            }\r\n            if (!rotation) {\r\n                const [x, y, z] = vec3.sub(vec3.create(), position, pivot);\r\n                const pitch = Math.atan2(-y, vec2.len(vec2.fromValues(x, z)));\r\n                const yaw = Math.atan2(x, z);\r\n                _orientation.yaw = yaw * 180 / Math.PI;\r\n                _orientation.pitch = pitch * 180 / Math.PI;\r\n                _orientation.roll = 0;\r\n            }\r\n        }\r\n        this.attach();\r\n        this.changed();\r\n    }\r\n\r\n    override autoFit(center: ReadonlyVec3, radius: number): void {\r\n        const { params } = this;\r\n        this._pivot = center;\r\n        this._distance = Math.min(params.maxDistance, radius / Math.tan(glMatrix.toRadian(this._fov) / 2));\r\n        this.changed();\r\n    }\r\n\r\n    override update() {\r\n        const { axes, multiplier, _pivot, _orientation, _distance, _fov, params, height } = this;\r\n        const tx = axes.keyboard_ad + axes.mouse_rmb_move_x - axes.touch_2_move_x;\r\n        const ty = -axes.keyboard_qe + axes.mouse_rmb_move_y - axes.touch_2_move_y;\r\n        const tz = axes.keyboard_ws * 2 + axes.mouse_mmb_move_y + axes.mouse_wheel / 2 + axes.touch_pinch2 * 2;\r\n        const rx = axes.keyboard_arrow_up_down / 5 + axes.mouse_lmb_move_y + axes.touch_1_move_y;\r\n        const ry = axes.keyboard_arrow_left_right / 5 + axes.mouse_lmb_move_x + axes.touch_1_move_x;\r\n\r\n        _orientation.roll = 0;\r\n        const rotationalVelocity = 180 * params.rotationalVelocity / height;\r\n        if (rx || ry) {\r\n            _orientation.pitch += -rx * rotationalVelocity;\r\n            _orientation.yaw += -ry * rotationalVelocity;\r\n            this.changed();\r\n        }\r\n\r\n        const fovRatio = Math.tan(((Math.PI / 180) * _fov) / 2) * 2;\r\n        const linearVelocity = _distance * fovRatio * multiplier * params.linearVelocity / height;\r\n        if (tz) {\r\n            this._distance += tz * linearVelocity;\r\n            this.changed();\r\n        } else if (tx || ty) {\r\n            const worldPosDelta = vec3.transformQuat(vec3.create(), vec3.fromValues(tx * linearVelocity, -ty * linearVelocity, 0), _orientation.rotation);\r\n            this._pivot = vec3.add(vec3.create(), _pivot, worldPosDelta);\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\r\n        const { _pivot, _orientation, position, _fov } = this;\r\n        const changes: MutableCameraState = {};\r\n        if (!state || !vec3.exactEquals(state.position, position)) {\r\n            changes.position = position;\r\n        }\r\n        if (!state || state.rotation !== _orientation.rotation) {\r\n            changes.rotation = _orientation.rotation;\r\n        }\r\n        if (!state || state.pivot !== _pivot) {\r\n            changes.pivot = _pivot;\r\n        }\r\n        if (!state || state.fov !== _fov) {\r\n            changes.fov = _fov;\r\n        }\r\n        if (!state) {\r\n            changes.kind = \"pinhole\";\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    /** OrbitController type guard function.\r\n     * @param controller The controller to type guard.\r\n     */\r\n    static is(controller: BaseController): controller is OrbitController {\r\n        return controller instanceof OrbitController;\r\n    }\r\n\r\n    /** OrbitController type assert function.\r\n     * @param controller The controller to type assert.\r\n     */\r\n    static assert(controller: BaseController): asserts controller is OrbitController {\r\n        if (!(controller instanceof OrbitController))\r\n            throw new Error(\"Camera controller is not of type OrbitController!\");\r\n    }\r\n}\r\n\r\n\r\n/** Orbit type camera motion controller\r\n * @category Camera Controllers\r\n */\r\nexport interface OrbitControllerParams {\r\n    /** The camera distance relative to pivot point in meters. */\r\n    readonly maxDistance: number;\r\n\r\n    /** Linear velocity modifier (default is 1.0) */\r\n    readonly linearVelocity: number;\r\n\r\n    /** Rotational velocity modifier (default is 1.0) */\r\n    readonly rotationalVelocity: number;\r\n}\r\n\r\n", "\r\nimport { type ReadonlyVec3, vec3, type ReadonlyQuat, glMatrix } from \"gl-matrix\";\r\nimport { BaseController, type ControllerInitParams, type MutableCameraState } from \"./base\";\r\nimport { mergeRecursive, type BoundingSphere, type RenderStateCamera } from \"core3d\";\r\nimport { PitchRollYawOrientation, decomposeRotation } from \"./orientation\";\r\nimport { ControllerInput } from \"./input\";\r\n\r\n/** The ortho controller is for navigating a orthographic camera.\r\n * @remarks\r\n * A key aspect of this controller is as a means to view and navigate in 2D,\r\n * aligning the parallel to the view plane to the axes or some reference plane.\r\n * The front and back clipping planes are used to reveal a limited slab of the geometry.\r\n * @category Camera Controllers\r\n */\r\nexport class OrthoController extends BaseController {\r\n    override kind = \"ortho\" as const;\r\n    override projection = \"orthographic\" as const;\r\n\r\n    private params: OrthoControllerParams = {\r\n        stepInterval: 1,\r\n        usePointerLock: false,\r\n    };\r\n    private _position: ReadonlyVec3 = vec3.create();\r\n    private _orientation = new PitchRollYawOrientation();\r\n    private _fov = 50;\r\n\r\n    /**\r\n     * @param input The input source.\r\n     */\r\n    constructor(input: ControllerInput) {\r\n        super(input);\r\n    }\r\n\r\n    /** Camera position, in world space. */\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value: ReadonlyVec3) {\r\n        this._position = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** Computed rotation quaternion, in world space.\r\n     * @remarks\r\n     * This rotation is derived from {@link pitch}, {@link yaw} and  {@link roll} angles.\r\n     */\r\n    get rotation() {\r\n        return this._orientation.rotation;\r\n    }\r\n\r\n    /** The camera pitch angle, in degrees. */\r\n    get pitch() {\r\n        return this._orientation.pitch;\r\n    }\r\n    set pitch(value: number) {\r\n        this._orientation.pitch = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera yaw angle, in degrees. */\r\n    get yaw() {\r\n        return this._orientation.yaw;\r\n    }\r\n    set yaw(value: number) {\r\n        this._orientation.yaw = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera roll angle, in degrees. */\r\n    get roll() {\r\n        return this._orientation.roll;\r\n    }\r\n    set roll(value: number) {\r\n        this._orientation.roll = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera vertical field of view angle, in meters. */\r\n    get fov() {\r\n        return this._fov;\r\n    }\r\n    set fov(value: number) {\r\n        this._fov = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** Update controller parameters.\r\n     * @param params Set of parameters to change.\r\n     */\r\n    updateParams(params: Partial<OrthoControllerParams>) {\r\n        this.params = mergeRecursive(this.params, params);\r\n        if (this.input.callbacks == this) {\r\n            this.input.usePointerLock = this.params.usePointerLock;\r\n        }\r\n    }\r\n\r\n    override serialize(): ControllerInitParams {\r\n        const { kind, position, _orientation, _fov } = this;\r\n        const { rotation } = _orientation;\r\n        return { kind, position, rotation, fovMeters: _fov };\r\n    }\r\n\r\n    override init(params: ControllerInitParams) {\r\n        const { kind, position, rotation, fovMeters, distance, fovDegrees } = params;\r\n        console.assert(kind == this.kind);\r\n        if (position) {\r\n            this._position = position;\r\n        }\r\n        if (rotation) {\r\n            this._orientation.decomposeRotation(rotation);\r\n        }\r\n        if (fovMeters) {\r\n            this._fov = fovMeters;\r\n        } else if (fovDegrees && distance) {\r\n            this._fov = OrthoController.fovFromPerspective(fovDegrees, distance);\r\n        }\r\n        this.changed();\r\n        this.input.usePointerLock = this.params.usePointerLock;\r\n        this.input.callbacks = this;\r\n    }\r\n\r\n    override autoFit(center: ReadonlyVec3, radius: number): void {\r\n        const { _orientation } = this;\r\n        const dir = vec3.fromValues(0, 0, radius);\r\n        vec3.transformQuat(dir, dir, _orientation.rotation);\r\n        this._position = vec3.add(vec3.create(), center, dir);\r\n        this._orientation.pitch = -90;\r\n        this._orientation.yaw = 0;\r\n        this._orientation.roll = 0;\r\n        this._fov = radius * 2;\r\n        this.changed();\r\n    }\r\n\r\n    override moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: ReadonlyQuat): void {\r\n        const { _orientation, _position } = this;\r\n        if (flyTime) {\r\n            let targetPitch = _orientation.pitch;\r\n            let targetYaw = _orientation.yaw;\r\n            if (rotation) {\r\n                const { pitch, yaw } = decomposeRotation(rotation)\r\n                targetPitch = pitch / Math.PI * 180;\r\n                targetYaw = yaw / Math.PI * 180;\r\n            }\r\n\r\n            this.setFlyTo({\r\n                totalFlightTime: flyTime,\r\n                end: { pos: vec3.clone(targetPosition), pitch: targetPitch, yaw: targetYaw },\r\n                begin: { pos: vec3.clone(_position), pitch: _orientation.pitch, yaw: _orientation.yaw }\r\n            });\r\n        }\r\n        else {\r\n            this._position = targetPosition;\r\n            if (rotation) {\r\n                this._orientation.decomposeRotation(rotation);\r\n            }\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override zoomTo(boundingSphere: BoundingSphere, flyTime: number = 1000): void {\r\n        const { _orientation, _position, _fov } = this;\r\n        if (flyTime) {\r\n            const dist = Math.max(boundingSphere.radius / Math.tan(glMatrix.toRadian(_fov) / 2), boundingSphere.radius);\r\n            const targetPosition = vec3.create();\r\n            vec3.add(targetPosition, vec3.transformQuat(targetPosition, vec3.fromValues(0, 0, dist), _orientation.rotation), boundingSphere.center);\r\n            this.setFlyTo({\r\n                totalFlightTime: flyTime,\r\n                end: { pos: vec3.clone(targetPosition), pitch: _orientation.pitch, yaw: _orientation.yaw + 0.05 },\r\n                begin: { pos: vec3.clone(_position), pitch: _orientation.pitch, yaw: _orientation.yaw }\r\n            });\r\n        } else {\r\n            const dist = boundingSphere.radius / Math.tan(glMatrix.toRadian(_fov) / 2);\r\n            this._position = vec3.add(vec3.create(), vec3.transformQuat(vec3.create(), vec3.fromValues(0, 0, dist), _orientation.rotation), boundingSphere.center);\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override update() {\r\n        const { axes, zoomPos, height, _position, _orientation, hasShift, currentFlyTo } = this;\r\n        if (currentFlyTo) {\r\n            this._position = vec3.clone(currentFlyTo.pos);\r\n            _orientation.pitch = currentFlyTo.pitch;\r\n            _orientation.yaw = currentFlyTo.yaw;\r\n            this.changed();\r\n            return;\r\n        }\r\n\r\n\r\n        let tx = -axes.keyboard_ad + axes.mouse_lmb_move_x + axes.mouse_rmb_move_x + axes.mouse_mmb_move_x + axes.touch_1_move_x;\r\n        let ty = -axes.keyboard_ws + axes.mouse_lmb_move_y + axes.mouse_rmb_move_y + axes.mouse_mmb_move_y + axes.touch_1_move_y;\r\n        const tz = (axes.touch_pinch3 * 0.1) + (hasShift ? axes.mouse_wheel * 0.01 : 0);\r\n        const rz = -axes.keyboard_arrow_left_right / 2;\r\n        const zoom = (hasShift ? 0 : axes.mouse_wheel) + axes.touch_pinch2 - axes.keyboard_qe;\r\n        const [zoomX, zoomY] = zoomPos;\r\n\r\n        if (rz) {\r\n            _orientation.roll += rz * 0.2;\r\n            this.changed();\r\n        }\r\n        if (tx || ty || tz || zoom) {\r\n            if (zoom != 0) {\r\n                const dz = 1 + (zoom / height);\r\n                tx += zoomX * -zoom * 0.6;\r\n                ty += zoomY * zoom * 0.6;\r\n                this._fov *= dz;\r\n            }\r\n            const scale = this._fov / height;\r\n            const deltaPos = vec3.transformQuat(vec3.create(), vec3.fromValues(tx * scale * -1, ty * scale, tz), _orientation.rotation);\r\n            this._position = vec3.add(vec3.create(), _position, deltaPos);\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\r\n        const changes: MutableCameraState = {};\r\n        if (!state || state.position !== this._position) {\r\n            changes.position = this._position;\r\n        }\r\n        if (!state || state.rotation !== this._orientation.rotation) {\r\n            changes.rotation = this._orientation.rotation;\r\n        }\r\n        if (!state || state.fov !== this._fov) {\r\n            changes.fov = this._fov;\r\n        }\r\n        if (!state) {\r\n            changes.kind = \"orthographic\";\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    //perspectiveDepth = BaseController.getDistanceFromViewPlane(pivot);\r\n    private static fovFromPerspective(perspectiveFov: number, perspectiveDepth: number) {\r\n        return Math.max(0.1, perspectiveDepth) * Math.tan(((Math.PI / 180) * perspectiveFov) / 2) * 2;\r\n    }\r\n\r\n    /** OrthoController type guard function.\r\n     * @param controller The controller to type guard.\r\n     */\r\n    static is(controller: BaseController): controller is OrthoController {\r\n        return controller instanceof OrthoController;\r\n    }\r\n\r\n    /** OrthoController type assert function.\r\n     * @param controller The controller to type assert.\r\n     */\r\n    static assert(controller: BaseController): asserts controller is OrthoController {\r\n        if (!(controller instanceof OrthoController))\r\n            throw new Error(\"Camera controller is not of type OrthoController!\");\r\n    }\r\n}\r\n\r\n/** Ortho controller initialization parameters.\r\n * @category Camera Controllers\r\n */\r\nexport interface OrthoControllerParams {\r\n    /** The interval to use for stepping clipping planes in the depth direction, i.e. when using mouse navigate buttons.\r\n     * @defaultValue 1.0\r\n     */\r\n    readonly stepInterval: number;\r\n\r\n    /** Whether to use mouse pointer lock or not.\r\n     * @defaultValue false\r\n     */\r\n    readonly usePointerLock: boolean;\r\n}\r\n\r\n", "\r\nimport { type ReadonlyVec3, vec3, type ReadonlyQuat, glMatrix } from \"gl-matrix\";\r\nimport { BaseController, type ControllerInitParams, type MutableCameraState } from \"./base\";\r\nimport { type RenderStateCamera, mergeRecursive } from \"core3d\";\r\nimport { PitchRollYawOrientation, decomposeRotation } from \"./orientation\";\r\nimport { ControllerInput } from \"./input\";\r\n\r\n/** Panorama type camera motion controller\r\n * @remarks\r\n * For rotating the camera inside a sphere with a panorama image projected onto it.\r\n * @category Camera Controllers\r\n */\r\nexport class PanoramaController extends BaseController {\r\n    override kind = \"panorama\" as const;\r\n    override projection = \"pinhole\" as const;\r\n    private params: PanoramaControllerParams = {\r\n        rotationalVelocity: 1,\r\n    }\r\n    private _position: ReadonlyVec3 = vec3.create();\r\n    private readonly _orientation = new PitchRollYawOrientation(-30, 30);\r\n    private _fov = 60;\r\n\r\n    /**\r\n     * @param input The input source.\r\n     */\r\n    constructor(input: ControllerInput) {\r\n        super(input);\r\n    }\r\n\r\n    /** Camera position, in world space. */\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value: ReadonlyVec3) {\r\n        this._position = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** Computed rotation quaternion, in world space.\r\n     * @remarks\r\n     * This rotation is derived from {@link pitch} and {@link yaw} angles.\r\n     */\r\n    get rotation() {\r\n        return this._orientation.rotation;\r\n    }\r\n\r\n    /** The camera pitch angle, in degrees. */\r\n    get pitch() {\r\n        return this._orientation.pitch;\r\n    }\r\n    set pitch(value: number) {\r\n        this._orientation.pitch = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera yaw angle, in degrees. */\r\n    get yaw() {\r\n        return this._orientation.yaw;\r\n    }\r\n    set yaw(value: number) {\r\n        this._orientation.yaw = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** The camera vertical field of view angle, in degrees. */\r\n    get fov() {\r\n        return this._fov;\r\n    }\r\n    set fov(value: number) {\r\n        this._fov = value;\r\n        this.changed();\r\n    }\r\n\r\n    /** Update controller parameters.\r\n     * @param params Set of parameters to change.\r\n     */\r\n    updateParams(params: Partial<PanoramaControllerParams>) {\r\n        this.params = mergeRecursive(this.params, params);\r\n    }\r\n\r\n    override serialize(): ControllerInitParams {\r\n        const { kind, position, _orientation, _fov } = this;\r\n        const { rotation } = _orientation;\r\n        return { kind, position, rotation, fovDegrees: _fov };\r\n    }\r\n\r\n    override init(params: ControllerInitParams) {\r\n        const { kind, position, rotation, fovDegrees } = params;\r\n        console.assert(kind == this.kind);\r\n        if (position) {\r\n            this._position = position;\r\n        }\r\n        if (rotation) {\r\n            this._orientation.decomposeRotation(rotation);\r\n            this._orientation.roll = 0;\r\n        }\r\n        if (fovDegrees != undefined) {\r\n            this._fov = fovDegrees;\r\n        }\r\n        this.input.callbacks = this;\r\n        this.input.usePointerLock = true;\r\n        this.attach();\r\n    }\r\n\r\n    override autoFit(center: ReadonlyVec3, radius: number): void {\r\n        const { _orientation } = this;\r\n        const maxDistance = 1000;\r\n        const distance = Math.min(maxDistance, radius / Math.tan(glMatrix.toRadian(this._fov) / 2));\r\n        const dir = vec3.fromValues(0, 0, distance);\r\n        vec3.transformQuat(dir, dir, _orientation.rotation);\r\n        this._position = vec3.add(vec3.create(), center, dir)\r\n    }\r\n\r\n    override moveTo(targetPosition: ReadonlyVec3, flyTime: number = 1000, rotation?: ReadonlyQuat): void {\r\n        const { _orientation, _position } = this;\r\n        if (flyTime) {\r\n            let targetPitch = _orientation.pitch;\r\n            let targetYaw = _orientation.yaw;\r\n            if (rotation) {\r\n                const { pitch, yaw } = decomposeRotation(rotation)\r\n                targetPitch = pitch / Math.PI * 180;\r\n                targetYaw = yaw / Math.PI * 180;\r\n            }\r\n\r\n            this.setFlyTo({\r\n                totalFlightTime: flyTime,\r\n                end: { pos: vec3.clone(targetPosition), pitch: targetPitch, yaw: targetYaw },\r\n                begin: { pos: vec3.clone(_position), pitch: _orientation.pitch, yaw: _orientation.yaw }\r\n            });\r\n        }\r\n        else {\r\n            this._position = targetPosition;\r\n            if (rotation) {\r\n                this._orientation.decomposeRotation(rotation);\r\n            }\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override update(): void {\r\n        const { axes, _orientation, params, height, _fov, currentFlyTo } = this;\r\n        if (currentFlyTo) {\r\n            this._position = vec3.clone(currentFlyTo.pos);\r\n            _orientation.pitch = currentFlyTo.pitch;\r\n            _orientation.yaw = currentFlyTo.yaw;\r\n            this.changed();\r\n            return;\r\n        }\r\n        const tz = axes.keyboard_ws + axes.mouse_wheel + axes.touch_pinch2;\r\n        const rx = -axes.keyboard_arrow_up_down / 5 - axes.mouse_lmb_move_y + axes.touch_1_move_y;\r\n        const ry = -axes.keyboard_arrow_left_right / 5 - axes.mouse_lmb_move_x + axes.touch_1_move_x;\r\n        _orientation.roll = 0;\r\n\r\n        if (rx || ry) {\r\n            const rotationalVelocity = this._fov * params.rotationalVelocity / height;\r\n            _orientation.pitch += rx * rotationalVelocity;\r\n            _orientation.yaw += ry * rotationalVelocity;\r\n            this.changed();\r\n        }\r\n\r\n        if (tz) {\r\n            const dz = 1 + (tz / height);\r\n            this._fov = Math.max(Math.min(60, _fov * dz), 0.1);\r\n            this.changed();\r\n        }\r\n    }\r\n\r\n    override stateChanges(state?: RenderStateCamera): Partial<RenderStateCamera> {\r\n        const changes: MutableCameraState = {};\r\n        const { _position, _orientation, _fov } = this;\r\n        if (!state || state.position !== _position) {\r\n            changes.position = _position;\r\n        }\r\n        if (!state || state.rotation !== _orientation.rotation) {\r\n            changes.rotation = _orientation.rotation;\r\n        }\r\n        if (!state || state.fov !== _fov) {\r\n            changes.fov = _fov;\r\n        }\r\n        if (!state) {\r\n            changes.kind = \"pinhole\";\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    /** PanoramaController type guard function.\r\n     * @param controller The controller to type guard.\r\n     */\r\n    static is(controller: BaseController): controller is PanoramaController {\r\n        return controller instanceof PanoramaController;\r\n    }\r\n\r\n    /** PanoramaController type assert function.\r\n     * @param controller The controller to type assert.\r\n     */\r\n    static assert(controller: BaseController): asserts controller is PanoramaController {\r\n        if (!(controller instanceof PanoramaController))\r\n            throw new Error(\"Camera controller is not of type PanoramaController!\");\r\n    }\r\n}\r\n\r\n/** Panorama camera controller parameters\r\n * @category Camera Controllers\r\n */\r\nexport interface PanoramaControllerParams {\r\n    /** The camera rotational velocity factor.\r\n     * @defaultValue 1\r\n     */\r\n    rotationalVelocity: number;\r\n}\r\n\r\n", "import type { PickContext } from \"./base\";\r\nimport { FlightController, CadMiddlePanController, CadRightPanController, SpecialFlightController } from \"./flight\";\r\nimport type { ControllerInput } from \"./input\";\r\nimport { NullController } from \"./null\";\r\nimport { OrbitController } from \"./orbit\";\r\nimport { OrthoController } from \"./ortho\";\r\nimport { PanoramaController } from \"./panorama\";\r\n\r\n/**\r\n * Return the built-in camera controllers.\r\n * @param input The control input.\r\n * @param pick The control pick context, typically the view in where\r\n */\r\nexport function builtinControllers(input: ControllerInput, pick: PickContext) {\r\n    return {\r\n        orbit: new OrbitController(input),\r\n        flight: new FlightController(input, pick),\r\n        ortho: new OrthoController(input),\r\n        panorama: new PanoramaController(input),\r\n        cadMiddlePan: new CadMiddlePanController(input, pick),\r\n        cadRightPan: new CadRightPanController(input, pick),\r\n        special: new SpecialFlightController(input, pick),\r\n        null: new NullController(input),\r\n    } as const;\r\n}\r\n\r\n/** Types of built-in camera controller.\r\n * @category Camera Controller\r\n * @category Render View\r\n */\r\nexport type BuiltinCameraControllerType = ReturnType<typeof builtinControllers>;\r\n\r\n/** Kind strings of built-in camera controller.\r\n * @category Camera Controller\r\n * @category Render View\r\n */\r\nexport type BuiltinCameraControllerKind = keyof BuiltinCameraControllerType;\r\n\r\n", "import type { RenderStateClippingPlane, RenderStateDynamicInstance, RenderStateDynamicObject } from \"core3d\";\r\nimport { quat, vec3, vec4, type ReadonlyVec4 } from \"gl-matrix\";\r\n\r\nconst transforms = {\r\n    GLToCAD: flipFuncs(flipGLtoCadVec, flipGLtoCadQuat),\r\n    CADToGL: flipFuncs(flipCADToGLVec, flipCADToGLQuat),\r\n};\r\n\r\n/** @internal */\r\nexport function flipState(changes: any, transform: \"GLToCAD\" | \"CADToGL\") {\r\n    flipRecursive(changes, transforms[transform]);\r\n}\r\n\r\nfunction flipFuncs(swapVecFunc: (v: number[]) => number[], swapQuatFunc: (q: quat) => quat) {\r\n    const state = {\r\n        camera: {\r\n            position: swapVecFunc,\r\n            rotation: swapQuatFunc,\r\n            pivot: swapVecFunc,\r\n        },\r\n        grid: {\r\n            origin: swapVecFunc,\r\n            axisX: swapVecFunc,\r\n            axisY: swapVecFunc,\r\n        },\r\n        cube: {\r\n            position: swapVecFunc,\r\n        },\r\n\r\n        clipping: {\r\n            planes: flipArray(swapVecFunc),\r\n        },\r\n        outlines: {\r\n            plane: swapVecFunc\r\n        },\r\n        scene: {\r\n            config: {\r\n                center: swapVecFunc,\r\n                offset: swapVecFunc,\r\n                boundingSphere: {\r\n                    center: swapVecFunc\r\n                },\r\n                aabb: {\r\n                    min: swapVecFunc,\r\n                    max: swapVecFunc\r\n                }\r\n            }\r\n        },\r\n        dynamic: {\r\n            objects: flipDynamicObjects(swapVecFunc, swapQuatFunc)\r\n        }\r\n    } as const;\r\n    return state;\r\n}\r\n\r\nfunction flipCADToGLVec(v: number[]) {\r\n    const clone = [...v];\r\n    const tmp = clone[1];\r\n    clone[1] = clone[2];\r\n    clone[2] = -tmp;\r\n    return clone;\r\n}\r\n\r\n\r\n/** @internal */\r\nexport function flipGLtoCadVec(v: number[]) {\r\n    const clone = [...v];\r\n    const tmp = clone[1];\r\n    clone[1] = -clone[2];\r\n    clone[2] = tmp;\r\n    return clone;\r\n}\r\n\r\n// function flipCADToGLQuat2(q: quat) {\r\n//     const flipZY = quat.fromValues(-0.7071067811865475, 0, 0, 0.7071067811865476);\r\n//     return quat.mul(quat.create(), flipZY, q);\r\n// }\r\n\r\n/** @internal */\r\nexport function flipCADToGLQuat(b: quat) {\r\n    let ax = -0.7071067811865475,\r\n        aw = 0.7071067811865475;\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2],\r\n        bw = b[3];\r\n    return quat.fromValues(\r\n        ax * bw + aw * bx,\r\n        aw * by + - ax * bz,\r\n        aw * bz + ax * by,\r\n        aw * bw - ax * bx);\r\n}\r\n\r\n// export function flipGLtoCadQuat(q: quat) {\r\n//     const flipZY = quat.fromValues(0.7071067811865475, 0, 0, 0.7071067811865476);\r\n//     return quat.mul(quat.create(), flipZY, q);\r\n// }\r\n\r\n/** @internal */\r\nexport function flipGLtoCadQuat(b: quat) {\r\n    let ax = 0.7071067811865475,\r\n        aw = 0.7071067811865475;\r\n    let bx = b[0],\r\n        by = b[1],\r\n        bz = b[2],\r\n        bw = b[3];\r\n    return quat.fromValues(\r\n        ax * bw + aw * bx,\r\n        aw * by + - ax * bz,\r\n        aw * bz + ax * by,\r\n        aw * bw - ax * bx);\r\n}\r\n\r\nfunction flipDynamicObjects(swapVecFunc: (v: number[]) => number[], swapQuatFunc: (q: quat) => quat) {\r\n    return function (ar: RenderStateDynamicObject[]) {\r\n        const flippedObjects: RenderStateDynamicObject[] = [];\r\n        for (const obj of ar) {\r\n            const flippedInstances: RenderStateDynamicInstance[] = [];\r\n            for (const inst of obj.instances) {\r\n                flippedInstances.push({\r\n                    position: swapVecFunc(inst.position as any) as vec3,\r\n                    rotation: inst.rotation ? swapQuatFunc(inst.rotation as any) : undefined,\r\n                    scale: inst.scale,\r\n                });\r\n            }\r\n            flippedObjects.push({ mesh: obj.mesh, instances: flippedInstances, baseObjectId: obj.baseObjectId });\r\n        }\r\n        return flippedObjects;\r\n    }\r\n}\r\n\r\nfunction flipArray(swapFunc: (v: number[]) => number[]) {\r\n    return function (ar: RenderStateClippingPlane[]) {\r\n        const flippedPlanes: RenderStateClippingPlane[] = [];\r\n        for (const plane of ar) {\r\n            flippedPlanes.push({\r\n                color: plane.color, outline: plane.outline,\r\n                normalOffset: swapFunc(plane.normalOffset as any as number[]) as any as ReadonlyVec4\r\n            });\r\n        }\r\n        return flippedPlanes;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport function flipRecursive(state: any, funcs: any) {\r\n    for (const key in state) {\r\n        const func = funcs ? funcs[key] : undefined;\r\n        const value = state[key];\r\n        if (func && value) {\r\n            if (typeof func == \"function\") {\r\n                state[key] = func(value);\r\n            } else {\r\n                flipRecursive(value, func);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { vec2, type ReadonlyVec2, vec3, type ReadonlyVec3 } from \"gl-matrix\";\r\nimport type { DeviationSample, PickSample } from \"web_app\";\r\n\r\n/** Deviation lable with pixel position and deviation value as string. */\r\nexport interface DeviationLabel {\r\n    /** Deviation value with up to 3 decimals. */\r\n    deviation: string;\r\n    /** X,y pixel position */\r\n    position: vec2;\r\n}\r\n\r\n/** Projection, currently only cirular from the center line position, typically used for tunnels */\r\nexport type DeviationProjection = {\r\n    /** Pixel position of center line */\r\n    centerPoint2d: ReadonlyVec2,\r\n    /** 3d position of center line */\r\n    centerPoint3d: ReadonlyVec3,\r\n}\r\n\r\n/** Settings  for deviation inspection */\r\nexport type DeviationInspectionSettings = {\r\n    /** Projection to use, currently only supports circular. Projection is needed to generate line through points and offset lables*/\r\n    projection?: DeviationProjection,\r\n    /** Option to generate line trough the deviation points, note that projection needs to also be set*/\r\n    generateLine?: boolean\r\n    /** Prioritize the smallest or largest deviations*/\r\n    deviationPrioritization: \"minimum\" | \"maximum\",\r\n}\r\n\r\n/** Deviation values taken from screen */\r\nexport type DeviationInspections = {\r\n    /** Spaced out lables for the most significant deviations based on settings */\r\n    labels: DeviationLabel[],\r\n    /** Line strip of pixel values to draw a line through the deviations on screen */\r\n    line?: vec2[]\r\n}\r\n\r\n\r\n/** @internal */\r\nexport function inspectDeviations(deviations: DeviationSample[], screenScaling: number, settings: DeviationInspectionSettings): DeviationInspections {\r\n    const sortedDeviations = deviations.sort((a, b) => settings.deviationPrioritization == \"minimum\" ? Math.abs(a.deviation) - Math.abs(b.deviation) : Math.abs(b.deviation) - Math.abs(a.deviation));\r\n    const labels: DeviationLabel[] = [];\r\n    const linePoints: { position: vec2, position3d: ReadonlyVec3 }[] = [];\r\n    const minLabelPixelRadius = 60;\r\n    const minPixelRadiusLine = 20;\r\n    const r2Label = minLabelPixelRadius * minLabelPixelRadius;\r\n    const r2Line = minPixelRadiusLine * minPixelRadiusLine;\r\n    const glCenterPos = settings.projection ? vec3.fromValues(settings.projection.centerPoint3d[0], settings.projection.centerPoint3d[2], -settings.projection.centerPoint3d[1]) : undefined;\r\n    const maxDistFromCl2 = 200;\r\n    for (let i = 0; i < sortedDeviations.length; ++i) {\r\n        const currentSample = sortedDeviations[i];\r\n        let addLabel = true;\r\n        const position = vec2.fromValues(Math.round(currentSample.x / screenScaling), Math.round(currentSample.y / screenScaling));\r\n\r\n        for (const pixel of labels) {\r\n            const dx = pixel.position[0] - position[0];\r\n            const dy = pixel.position[1] - position[1];\r\n            const sqrDist = dx * dx + dy * dy;\r\n            if (sqrDist < r2Label) {\r\n                addLabel = false;\r\n                break;\r\n            }\r\n        }\r\n        if (addLabel && glCenterPos) {\r\n            addLabel = vec3.squaredDistance(glCenterPos, currentSample.position) < maxDistFromCl2;\r\n        }\r\n        if (addLabel) {\r\n            labels.push({ position: vec2.clone(position), deviation: currentSample.deviation.toFixed(3) })\r\n        }\r\n\r\n        if (settings.generateLine) {\r\n            let addLinePoint = true;\r\n            for (const pixel of linePoints) {\r\n                const dx = pixel.position[0] - position[0];\r\n                const dy = pixel.position[1] - position[1];\r\n                const sqrDist = dx * dx + dy * dy;\r\n                if (sqrDist < r2Line) {\r\n                    addLinePoint = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (addLinePoint && glCenterPos) {\r\n                addLinePoint = vec3.squaredDistance(glCenterPos, currentSample.position) < maxDistFromCl2;\r\n            }\r\n            if (addLinePoint) {\r\n                linePoints.push({ position, position3d: currentSample.position });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    if (settings.projection) {\r\n        for (let i = 0; i < labels.length; ++i) {\r\n            const pos = labels[i].position;\r\n            const dir = vec2.sub(vec2.create(), pos, settings.projection.centerPoint2d);\r\n            vec2.normalize(dir, dir);\r\n            vec2.scaleAndAdd(labels[i].position, pos, dir, 50);\r\n        }\r\n\r\n\r\n        let anglesIdxMap: { angle: number, i: number }[] = [];\r\n        for (let i = 0; i < linePoints.length; ++i) {\r\n            const lp = vec2.sub(vec2.create(), settings.projection.centerPoint2d, linePoints[i].position);\r\n            vec2.normalize(lp, lp);\r\n            let angle = Math.atan2(lp[1], lp[0]);\r\n            if (angle < -Math.PI / 2) {\r\n                angle += Math.PI * 2;\r\n            }\r\n            anglesIdxMap.push({ angle, i });\r\n        }\r\n        anglesIdxMap = anglesIdxMap.sort((a, b) => a.angle - b.angle);\r\n        if (anglesIdxMap.length > 0) {\r\n            const line: vec2[] = [];\r\n            const line3d: ReadonlyVec3[] = [];\r\n            for (const a of anglesIdxMap) {\r\n                if (line.length > 0) {\r\n                    if (vec3.squaredDistance(line3d[line3d.length - 1], linePoints[a.i].position3d) > 50) {\r\n                        continue;\r\n                    }\r\n                }\r\n                line.push(linePoints[a.i].position);\r\n                line3d.push(linePoints[a.i].position3d);\r\n            }\r\n            return { labels, line };\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return { labels };\r\n}", "import { type ReadonlyVec3, vec3, type ReadonlyQuat, mat3 } from \"gl-matrix\";\r\nimport { downloadScene, type RenderState, type RenderStateChanges, defaultRenderState, initCore3D, mergeRecursive, RenderContext, type SceneConfig, modifyRenderState, type RenderStatistics, type DeviceProfile, type PickSample, type PickOptions, CoordSpace, type Core3DImports, type RenderStateCamera, validateRenderState, type Core3DImportMap, downloadCore3dImports } from \"core3d\";\r\nimport { builtinControllers, ControllerInput, type BaseController, type PickContext, type BuiltinCameraControllerType } from \"./controller\";\r\nimport { flipState } from \"./flip\";\r\nimport { MeasureView, createMeasureView, type MeasureEntity, downloadMeasureImports, type MeasureImportMap, type MeasureImports } from \"measure\";\r\nimport { inspectDeviations, type DeviationInspectionSettings, type DeviationInspections } from \"./buffer_inspect\";\r\n\r\n/**\r\n * A view base class for Novorender content.\r\n * @template CameraControllerType Types of camera controllers used by this view.\r\n * @template CameraControllerKind The inferred camera controller kind string union.\r\n * @remarks\r\n * The view class wraps the complexities of the `Core3D` module into a high-level abstraction.\r\n * Notably, it implements a render loop in the {@link run} function, which deals with a number of issues, such as:\r\n * - Camera controllers.\r\n * - Rendering after {@link modifyRenderState | state changes}, saving energy and battery life.\r\n * - Adjust to resizing of canvas element.\r\n * - Managing idle vs active rendering, i.e. lower fidelity rendering while the camera is moving for better frame rates.\r\n * - Adaptive performance adjustment to maintain a target frame rate target.\r\n * - Post effects.\r\n * \r\n * In the likely event that you want to change or extend some of the default behaviour,\r\n * you should make a derived View class of your own and override the methods you need.\r\n * @category Render View\r\n */\r\nexport class View<\r\n    CameraControllerTypes extends CameraControllers = BuiltinCameraControllerType,\r\n    CameraControllerKind extends string = Extract<keyof CameraControllerTypes, string>\r\n> implements Disposable {\r\n    /** Available camera controller types. */\r\n    controllers: CameraControllerTypes;\r\n\r\n    private _renderContext: RenderContext | undefined;\r\n    private _run = true;\r\n    private _deviceProfile: DeviceProfile;\r\n    private _setDeviceProfile: (value: DeviceProfile) => void;\r\n    private _stateChanges: RenderStateChanges | undefined;\r\n    private _activeController: BaseController;\r\n    private _statistics: { readonly render: RenderStatistics, readonly view: ViewStatistics } | undefined = undefined;\r\n    private _measureViewPromise: Promise<MeasureView>;\r\n    private _drawContext2d: {\r\n        width: number,\r\n        height: number,\r\n        camera: RenderStateCamera\r\n    };\r\n    private readonly _resizeObserver: ResizeObserver;\r\n\r\n    /** @internal */\r\n    protected renderStateGL: RenderState;\r\n    /** @internal */\r\n    protected renderStateCad: RenderState;\r\n    /** @internal */\r\n    protected prevRenderStateCad: RenderState | undefined;\r\n\r\n    // dynamic resolution scaling\r\n    private resolutionModifier = 1;\r\n    private baseRenderResolution = 1;\r\n    private drsHighInterval = 50;\r\n    private drsLowInterval = 100;\r\n    private lastDrsAdjustTime = 0;\r\n    private resolutionTier: 0 | 1 | 2 = 2;\r\n    private activeOutline = true;\r\n\r\n    private currentDetailBias: number = 1;\r\n\r\n    /**\r\n     * @param canvas The HtmlCanvasElement used for rendering.\r\n     * @param deviceProfile The device profile describing the host device's GPU performance characteristics and limitations.\r\n     * @param imports Imported, non-javascript resources.\r\n     * @remarks\r\n     * Your browser must run in a {@link https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts | secure}\r\n     * and {@link https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts | cross-origin isolated } context.\r\n     */\r\n    public constructor(\r\n        /** The HTMLCanvasElement used for rendering. */\r\n        readonly canvas: HTMLCanvasElement,\r\n        deviceProfile: DeviceProfile, readonly imports: Core3DImports & MeasureImports,\r\n        controllersFactory: CameraControllersFactory<CameraControllerTypes> = (builtinControllers as unknown as CameraControllersFactory<CameraControllerTypes>)\r\n    ) {\r\n        if (!isSecureContext)\r\n            throw new Error(\"Your browser is not running in an secure context!\"); // see constructor tsdoc comments for more details\r\n        if (!crossOriginIsolated)\r\n            throw new Error(\"Your browser is not running in an cross-origin isolated context!\"); // see constructor tsdoc comments for more details\r\n\r\n        this._deviceProfile = deviceProfile;\r\n        this._setDeviceProfile = initCore3D(deviceProfile, canvas, imports, this.setRenderContext);\r\n        this.renderStateGL = defaultRenderState();\r\n        this.renderStateCad = this.createRenderState(this.renderStateGL);\r\n        this._drawContext2d = {\r\n            camera: this.renderState.camera,\r\n            width: 0,\r\n            height: 0\r\n        }\r\n\r\n        const input = new ControllerInput(canvas);\r\n        this.controllers = controllersFactory(input, this);\r\n        this._activeController = Object.values(this.controllers)[0];\r\n        this._activeController.attach();\r\n\r\n        const resizeObserver = this._resizeObserver = new ResizeObserver(() => {\r\n            this.recalcBaseRenderResolution();\r\n        });\r\n        resizeObserver.observe(canvas);\r\n        this._measureViewPromise = createMeasureView(this._drawContext2d, this.imports);\r\n    }\r\n\r\n    /** Dispose of the view's GPU resources. */\r\n    [Symbol.dispose]() {\r\n        this.dispose();\r\n    }\r\n\r\n    /** Dispose of the view's GPU resources. */\r\n    dispose() {\r\n        this._resizeObserver.disconnect();\r\n        this._renderContext?.dispose();\r\n        this._renderContext = undefined;\r\n    }\r\n\r\n    // Measure view for the currently loaded scene, used for parametric measure\r\n    get measure() {\r\n        return this._measureViewPromise;\r\n    }\r\n\r\n    // The active camera controller.\r\n    get activeController(): BaseController {\r\n        return this._activeController;\r\n    }\r\n\r\n    // The current render context.\r\n    get renderContext(): RenderContext | undefined {\r\n        return this._renderContext;\r\n    }\r\n\r\n    // The current render state.\r\n    get renderState() {\r\n        return this.renderStateCad;\r\n    }\r\n\r\n    // The render state from the previous frame, if any.\r\n    get prevRenderState() {\r\n        return this.prevRenderStateCad;\r\n    }\r\n\r\n    // The render statistics from the previous frame, if any.\r\n    get statistics() {\r\n        return this._statistics;\r\n    }\r\n\r\n    /**\r\n     * The current device profile.\r\n     * @remarks\r\n     * Setting a new device profile will force a recreation of the entire render context and should generally be avoided.\r\n     * Valid cases for doing so might be users manually overriding the GPU profile of their device, or for testing/diagnostics purposes.\r\n     */\r\n    get deviceProfile() { return this._deviceProfile; }\r\n    set deviceProfile(value: DeviceProfile) {\r\n        this._deviceProfile = value;\r\n        this._setDeviceProfile?.(value); // this will in turn trigger this.useDeviceProfile\r\n    }\r\n\r\n    /** Determine if camera is looking straight down. */\r\n    isTopDown() {\r\n        const { _stateChanges, renderState } = this;\r\n        const rot = (_stateChanges?.camera?.rotation ?? renderState.camera.rotation) as ReadonlyQuat;\r\n        const mat = mat3.fromQuat(mat3.create(), rot);\r\n        return Math.abs(mat[8]) > 0.98;\r\n    }\r\n\r\n    /**\r\n     * Convert 2D pixel position to 3D position.\r\n     * @param x Pixel x coordinate, in CSS pixels.\r\n     * @param y Pixel y coordinate, in CSS pixels.\r\n     * @returns Corresponding 3D position at the view plane in world space, or undefined if there is no active render context.\r\n     */\r\n    worldPositionFromPixelPosition(x: number, y: number) {\r\n        const { _renderContext, canvas } = this;\r\n        const { width, height } = this.renderState.output;\r\n        if (_renderContext) {\r\n            const rect = canvas.getBoundingClientRect(); // dim in css pixels\r\n            const cssWidth = rect.width;\r\n            const cssHeight = rect.height;\r\n            const px = Math.min(Math.max(0, Math.round(x / cssWidth * width)), width);\r\n            const py = Math.min(Math.max(0, Math.round((1 - (y + 0.5) / cssHeight) * height)), height);\r\n            const xCS = ((px + 0.5) / width) * 2 - 1;\r\n            const yCS = ((py + 0.5) / height) * 2 - 1;\r\n            const viewClipMatrix = _renderContext[\"viewClipMatrix\"];\r\n            const viewWorldMatrix = _renderContext[\"viewWorldMatrix\"];\r\n            const posVS = vec3.fromValues((xCS / viewClipMatrix[0]), (yCS / viewClipMatrix[5]), 0);\r\n            const pos = vec3.transformMat4(vec3.create(), posVS, viewWorldMatrix);\r\n            return vec3.fromValues(pos[0], -pos[2], pos[1]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieve list of available background/IBL environments.\r\n     * @public\r\n     * @param indexUrl\r\n     * The absolute url of the index.json file.\r\n     * @returns A promise of a list of environments.\r\n     */\r\n    async availableEnvironments(indexUrl: URL): Promise<EnvironmentDescription[]> {\r\n        let environments: EnvironmentDescription[] = [];\r\n        const response = await fetch(indexUrl.toString());\r\n        if (response.ok) {\r\n            const json = await response.json();\r\n            environments = (json as string[]).map(name => {\r\n                return { name, url: new URL(name, indexUrl).toString() + \"/\", thumnbnailURL: new URL(`thumbnails/${name}.png`, indexUrl).toString() } as EnvironmentDescription;\r\n            });\r\n        }\r\n        return environments;\r\n    }\r\n\r\n    /**\r\n     * Load a scene from a url.\r\n    * @public\r\n    * @param url The absolute url to the folder containing the scene.\r\n    * @param abortSignal Optional abort controller.\r\n    * @remarks\r\n    * The url typically contains the scene id as the latter part of the path, i.e. `https://.../<scene_guid>/`.\r\n    */\r\n    async loadSceneFromURL(url: URL, abortSignal?: AbortSignal): Promise<SceneConfig> {\r\n        const measureView = await this._measureViewPromise;\r\n        measureView.loadScene(url); // TODO: include abort signal!\r\n        const webgl2Bin = new URL(url);\r\n        webgl2Bin.pathname += \"webgl2_bin/\";\r\n        const scene = await downloadScene(webgl2Bin, abortSignal);\r\n        const stateChanges = { scene };\r\n        flipState(stateChanges, \"GLToCAD\");\r\n        this.modifyRenderState(stateChanges);\r\n        return stateChanges.scene.config;\r\n    }\r\n\r\n\r\n    /**\r\n     * Inspect the deviations that is on screen\r\n     * @public\r\n     * @param settings Deviation settings, \r\n     * @returns Spaced out lables prioritizing the smallest or highest deviation values based on settings. \r\n     * Also returns a line trough the points if it is able to project the points on a line and the option is given.\r\n     */\r\n    async inspectDeviations(settings: DeviationInspectionSettings): Promise<DeviationInspections | undefined> {\r\n        const context = this._renderContext;\r\n        if (context) {\r\n            const scale = devicePixelRatio * this.resolutionModifier;\r\n            return inspectDeviations(await context.getDeviations(), scale, settings);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all object ids currently on screen\r\n     * @public\r\n     * @returns returns a set of all object ids on the screen \r\n     */\r\n    async getOutlineObjectsOnScreen() {\r\n        const context = this._renderContext;\r\n        if (context) {\r\n            context.renderPickBuffers();\r\n            const pick = (await context.buffers.pickBuffers()).pick;\r\n            return context.getOutlineObjects(pick);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Query parametric measure entity for the given coordinates\r\n     * @param x Center x coordinate in css pixels.\r\n     * @param y Center y coordinate in css pixels.\r\n     * @param options Extra options.\r\n     * @returns Parametric measure entity, if non exists in the current location, the poisiton will be retuned.\r\n     */\r\n    async pickMeasureEntity(x: number, y: number, options?: PickOptions): Promise<MeasureEntity | undefined> {\r\n        const sample = await this.pick(x, y, options);\r\n        if (sample) {\r\n            const measureView = await this._measureViewPromise;\r\n            return (await measureView.core.pickMeasureEntity(sample.objectId, sample.position)).entity;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Query object and geometry information for given view coordinate.\r\n     * @param x Center x coordinate in css pixels.\r\n     * @param y Center y coordinate in css pixels.\r\n     * @param options Extra options.\r\n     * @returns The sample within the sample disc that is closest to the camera, if any.\r\n     */\r\n    async pick(x: number, y: number, options?: PickOptions): Promise<PickSampleExt | undefined> {\r\n        const context = this._renderContext;\r\n        if (context) {\r\n            const samples = await context.pick(x, y, options);\r\n            if (samples.length) {\r\n                let sampleType: \"edge\" | \"corner\" | \"surface\" = \"surface\";\r\n                const edgeNormal1 = vec3.create();\r\n                const edgeNormal2 = vec3.create();\r\n\r\n                const edgeThreshold = 0.8; // the cos() value of the edge angle threshold.\r\n                // select the sample that is closest to the camera.\r\n                const centerSample = samples.reduce((a, b) => {\r\n                    if (sampleType == \"surface\" && vec3.dot(a.normal, b.normal) < edgeThreshold) {\r\n                        vec3.copy(edgeNormal1, a.normal);\r\n                        vec3.copy(edgeNormal2, b.normal);\r\n                        sampleType = \"edge\";\r\n                    }\r\n                    if (options?.pickOutline === true) {\r\n                        if (b.clippingOutline == false) {\r\n                            return a;\r\n                        }\r\n                    }\r\n                    return a.depth < b.depth ? a : b\r\n                });\r\n                if (sampleType as any == \"edge\") {\r\n                    samples.forEach(v => {\r\n                        if (vec3.dot(v.normal, edgeNormal1) < edgeThreshold && vec3.dot(v.normal, edgeNormal2) < edgeThreshold) {\r\n                            sampleType = \"corner\";\r\n                        }\r\n                    });\r\n                }\r\n                if (options?.pickOutline === true && centerSample.clippingOutline == false) {\r\n                    return undefined;\r\n                }\r\n                const worldViewMatrixNormal = context.prevState?.matrices.getMatrixNormal(CoordSpace.World, CoordSpace.View) ?? mat3.create();\r\n                const flippedSample: PickSampleExt = {\r\n                    ...centerSample,\r\n                    position: vec3.fromValues(centerSample.position[0], -centerSample.position[2], centerSample.position[1]),\r\n                    normal: vec3.fromValues(centerSample.normal[0], -centerSample.normal[2], centerSample.normal[1]),\r\n                    sampleType,\r\n                    normalVS: vec3.transformMat3(vec3.create(), centerSample.normal, worldViewMatrixNormal),\r\n                    deviation: this.deviceProfile.quirks.adreno600 ? undefined : centerSample.deviation\r\n                }\r\n                return flippedSample;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch to a new kind of camera controller.\r\n     * @param kind The type of camera controller to switch to.\r\n     * @param initialState Optional initial state for the new camera controller. Undefined properties will be copied/adapted from the current render state.\r\n     * @param options Switch options.\r\n     * @template T Kind of camera controller.\r\n     * @returns The new camera controller.\r\n     * @remarks\r\n     * The function will also set the {@link RenderStateCamera.kind | camera projection model}.\r\n     */\r\n\r\n    async switchCameraController<T extends CameraControllerKind>(\r\n        kind: T,\r\n        initialState?: CameraControllerInitialValues,\r\n        options?: CameraControllerOptions\r\n    ): Promise<CameraControllerTypes[T]> {\r\n        const autoInit = options?.autoInit ?? false;\r\n        function isControllerKind(kind: string, controllers: Object): kind is CameraControllerKind {\r\n            return kind in controllers;\r\n        }\r\n        if (!isControllerKind(kind, this.controllers))\r\n            throw new Error(`Unknown controller kind: ${kind}!`);\r\n\r\n        const { controllers, _renderContext } = this;\r\n        let { _activeController } = this;\r\n\r\n        // find minimum renderered distance\r\n        let distance: number | undefined;\r\n        if (autoInit && _renderContext && _renderContext.prevState) {\r\n            _renderContext.renderPickBuffers();\r\n            const pick = (await _renderContext.buffers.pickBuffers()).pick;\r\n            const depths = _renderContext.getLinearDepths(pick);\r\n            distance = Number.MAX_VALUE;\r\n            for (const depth of depths) {\r\n                distance = Math.min(distance, depth);\r\n            }\r\n        }\r\n\r\n        // transfer what state we can from previous controller\r\n        const prevState = _activeController.serialize(true /* include derived properties as well */);\r\n        const controller = controllers[kind];\r\n        _activeController = this._activeController = controller;\r\n        const { position, rotation, pivot, fovMeters } = prevState;\r\n        _activeController.init({ kind, position: initialState?.position ?? position, rotation: initialState?.rotation ?? rotation, pivot, distance, fovMeters: initialState?.fov ?? (kind != \"panorama\" ? fovMeters : undefined) });\r\n        const changes = _activeController.stateChanges();\r\n        this.modifyRenderState({ camera: changes });\r\n        return controller;\r\n    }\r\n\r\n    /**\r\n     * Start the main render loop for the view.\r\n     * @param abortSignal Signal to abort any pending downloads and exit render loop.\r\n     * @remarks\r\n     * This method will not exit until you call {@link exit}.\r\n     */\r\n    async run(abortSignal?: AbortSignal) {\r\n        let prevState: RenderState | undefined;\r\n        let prevRenderTime = performance.now();\r\n        let wasCameraMoving = false;\r\n        let idleFrameTime = 0;\r\n        let wasIdle = false;\r\n        const frameIntervals: number[] = [];\r\n        let possibleChanges = false;\r\n        while (this._run && !(abortSignal?.aborted ?? false)) {\r\n            const { _renderContext, _activeController, deviceProfile } = this;\r\n            const renderTime = await RenderContext.nextFrame(_renderContext);\r\n            const frameTime = renderTime - prevRenderTime;\r\n            const cameraChanges = _activeController.renderStateChanges(this.renderStateCad.camera, renderTime - prevRenderTime);\r\n            if (cameraChanges) {\r\n                this.modifyRenderState(cameraChanges);\r\n            }\r\n\r\n            const isIdleFrame = idleFrameTime > 500;\r\n            if (_renderContext && !_renderContext.isContextLost()) {\r\n                _renderContext.poll(); // poll for events, such as async reads and shader linking\r\n\r\n                if (isIdleFrame) { //increase resolution and detail bias on idleFrame\r\n                    if (deviceProfile.tier > 0 && this.renderState.toonOutline.on == false) {\r\n                        //Enable features when on idle frame\r\n                        this.modifyRenderState({ toonOutline: { on: true }, outlines: { on: true } });\r\n                    }\r\n                    if (!wasIdle) {\r\n                        //Set max quality and resolution when the camera stops moving\r\n                        this.resolutionModifier = Math.min(1, this.baseRenderResolution * 2);\r\n                        this.resize();\r\n                        this.modifyRenderState({ quality: { detail: 1 } });\r\n                        this.currentDetailBias = 1;\r\n                        wasIdle = true;\r\n                        //If pick is not already rendered then start to make the pick buffer aviable when the camera stops \r\n                    }\r\n                } else {\r\n                    if (wasIdle) {\r\n                        //Reset back to default when camera starts moving\r\n                        this.resolutionModifier = this.baseRenderResolution;\r\n                        this.resolutionTier = 2;\r\n                        //Disable features when moving to increase performance\r\n                        this.modifyRenderState({ toonOutline: { on: false } });\r\n                        this.activeOutline = true;\r\n                        wasIdle = false;\r\n                    } else {\r\n\r\n                        frameIntervals.push(frameTime);\r\n                        this.dynamicQualityAdjustment(frameIntervals);\r\n                    }\r\n                    const activeDetailModifier = 0.5;\r\n                    if (this.renderStateGL.quality.detail != activeDetailModifier) {\r\n                        this.currentDetailBias = activeDetailModifier;\r\n                        this.modifyRenderState({ quality: { detail: activeDetailModifier } });\r\n                    }\r\n                }\r\n\r\n                this.animate?.(renderTime);\r\n\r\n                if (this._stateChanges) {\r\n                    this.applyChanges(this._stateChanges);\r\n                    this._stateChanges = undefined;\r\n                }\r\n\r\n                const { renderStateGL } = this;\r\n                if (prevState !== renderStateGL || _renderContext.changed) {\r\n                    prevState = renderStateGL;\r\n                    const statsPromise = _renderContext.render(renderStateGL);\r\n                    statsPromise.then((stats) => {\r\n                        this._statistics = { render: stats, view: { resolution: this.resolutionModifier, detailBias: deviceProfile.detailBias * this.currentDetailBias, fps: stats.frameInterval ? 1000 / stats.frameInterval : undefined } };\r\n                        this.render?.(isIdleFrame);\r\n                        possibleChanges = true;\r\n                    });\r\n                } else if (possibleChanges) {\r\n                    this.render?.(isIdleFrame);\r\n                    if (isIdleFrame) {\r\n                        //Render pick buffer if there is nothing else to render and camera is not moving. \r\n                        //Make it feel better for slower devices when picking idle frame\r\n                        _renderContext.renderPickBuffers();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._activeController.moving) {\r\n                wasCameraMoving = true;\r\n                idleFrameTime = 0;\r\n            } else if (!wasCameraMoving) {\r\n                idleFrameTime += frameTime;\r\n            }\r\n            wasCameraMoving = this._activeController.moving;\r\n            prevRenderTime = renderTime;\r\n        }\r\n    }\r\n\r\n    /** Signal the render loop to exit.\r\n     * @see {@link run}.\r\n     * @deprecated Use {@link run} `abortSignal` instead.\r\n     */\r\n    exit() {\r\n        this._run = false;\r\n    }\r\n\r\n    /** Accumulate render state changes.\r\n     * @param changes The changes to apply to the current view render state.\r\n     * @remarks\r\n     * These changes will be applied and a single call to the {@link modifyRenderState} function just prior to rendering each frame.\r\n     */\r\n    modifyRenderState(changes: RenderStateChanges): void {\r\n        this._stateChanges = mergeRecursive(this._stateChanges, changes);\r\n    }\r\n\r\n    /**\r\n     * Validate render state changes made since last rendered frame.\r\n     * @param changes The render state changes to validate, or undefined to validate changes applied via {@link View.modifyRenderState} since last rendered frame.\r\n     * @returns An array of validation errors, if any.\r\n     * @see {@link View.modifyRenderState}\r\n     * @remarks\r\n     * Validation is useful for catching potential bugs and problems early.\r\n     * It should not be performed in production code, however, since it is non-trivial in terms of performance, particularly on large sets of dynamic objects.\r\n     */\r\n    validateRenderState(changes?: RenderStateChanges): readonly Error[] {\r\n        changes ??= this._stateChanges;\r\n        const changesCopy = { ...changes };\r\n        flipState(changesCopy, \"CADToGL\"); // we assume this will only mutate root properties.\r\n        const newState = mergeRecursive(this.renderStateGL, changesCopy) as RenderState;\r\n        return validateRenderState(newState, changesCopy);\r\n    }\r\n\r\n    /**\r\n     * Override this in a derived class to modify render state just prior to rendering.\r\n     * @param time The frame render timestamp in millisecond.\r\n     * @virtual\r\n     */\r\n    animate?(time: number): void;\r\n\r\n    /**\r\n     * Override this in a derived class to handle render state validation.\r\n     * @param newState The new render state about to be rendered\r\n     * @param changes The changes that went into the new render state.\r\n     * @virtual\r\n     */\r\n    validate?(newState: RenderState, changes: RenderStateChanges): void;\r\n\r\n    /**\r\n     * Override this in a derived class for custom rendering of e.g. 2D content, such as text and lines etc.\r\n     * @param isIdleFrame Was the camera moving or not.\r\n     * @virtual\r\n     */\r\n    render?(isIdleFrame: boolean): void;\r\n\r\n    /** \r\n     * Callback function to update render context.\r\n     * @param context A new render context.\r\n     * @remarks\r\n     * A new render context may be set each time the underlying webgl context is lost and restored,\r\n     * or when certain state changes are made that forces a recreation of the context, such as setting a new {@link deviceProfile}.\r\n     * @virtual\r\n     */\r\n    protected readonly setRenderContext = (context: RenderContext) => {\r\n        this._renderContext = context;\r\n        this.useDeviceProfile(this._deviceProfile);\r\n    }\r\n\r\n    private useDeviceProfile(deviceProfile: DeviceProfile) {\r\n        this.resolutionModifier = deviceProfile.renderResolution;\r\n        this.baseRenderResolution = deviceProfile.renderResolution;\r\n        this.recalcBaseRenderResolution();\r\n        this.drsHighInterval = (1000 / deviceProfile.framerateTarget) * 1.2;\r\n        this.drsLowInterval = (1000 / deviceProfile.framerateTarget) * 0.9;\r\n    }\r\n\r\n    private resize() {\r\n        const scale = devicePixelRatio * this.resolutionModifier;\r\n        // const scale = 1.0;\r\n        let { width, height } = this.canvas.getBoundingClientRect();\r\n        this._drawContext2d.width = width;\r\n        this._drawContext2d.height = height;\r\n        width = Math.round(width * scale);\r\n        height = Math.round(height * scale);\r\n        const { output } = this.renderStateGL;\r\n        if (width != output.width || height != output.height) {\r\n            this.applyChanges({ output: { width, height } });\r\n        }\r\n    }\r\n\r\n    private recalcBaseRenderResolution() {\r\n        const { deviceProfile } = this;\r\n        if (deviceProfile.tier < 2) {\r\n            const maxRes = deviceProfile.tier == 0 ? 720 * 1280 : 1440 * 2560;\r\n            let baseRenderResolution = deviceProfile.renderResolution / devicePixelRatio;\r\n            const { width, height } = this.canvas.getBoundingClientRect();\r\n            let idleRes = baseRenderResolution * 2 * width * height;\r\n            if (idleRes > maxRes) {\r\n                baseRenderResolution *= maxRes / idleRes;\r\n            }\r\n            this.baseRenderResolution = baseRenderResolution;\r\n            this.resolutionModifier = baseRenderResolution;\r\n        }\r\n        this.resize();\r\n    }\r\n\r\n    private applyChanges(changes: RenderStateChanges) {\r\n        this.prevRenderStateCad = this.renderStateCad;\r\n        this.renderStateCad = mergeRecursive(this.renderStateCad, changes) as RenderState;\r\n        this._drawContext2d.camera = this.renderStateCad.camera;\r\n        flipState(changes, \"CADToGL\");\r\n        this.renderStateGL = modifyRenderState(this.renderStateGL, changes);\r\n        this.validate?.(this.renderStateGL, changes);\r\n    }\r\n\r\n    private createRenderState(state: RenderState) {\r\n        const clone = structuredClone(state);\r\n        flipState(clone, \"GLToCAD\");\r\n        return clone;\r\n    }\r\n\r\n\r\n    //Dynamically change the quality of rendering based on the last 9 frames \r\n    private dynamicQualityAdjustment(frameIntervals: number[]) {\r\n        const samples = 9;\r\n        if (frameIntervals.length == samples) {\r\n            const sortedIntervals = [...frameIntervals];\r\n            sortedIntervals.sort();\r\n            const medianInterval = sortedIntervals[Math.floor(samples / 2)];\r\n            frameIntervals.splice(0, 1);\r\n            const cooldown = 3000;\r\n            const now = performance.now();\r\n            //To handle dynamic on and off clipping outline based on framerate.\r\n            if (this.activeOutline) {\r\n                const activeOutline = medianInterval < this.drsLowInterval && this.resolutionTier == 2;\r\n                if (this.activeOutline != activeOutline) {\r\n                    this.activeOutline = activeOutline;\r\n                    this.modifyRenderState({ outlines: { on: this.activeOutline } });\r\n                }\r\n            }\r\n            if (now > this.lastDrsAdjustTime + cooldown) { // add a cooldown period before changing anything\r\n                this.dynamicResolutionScaling(medianInterval, now);\r\n            }\r\n        }\r\n    }\r\n\r\n    private dynamicResolutionScaling(medianInterval: number, now: number) {\r\n        const highFrameInterval = this.drsHighInterval;\r\n        const lowFrameInterval = this.drsLowInterval;\r\n\r\n        const resolutionTiers = [0.4, 0.6, 1];\r\n        if (medianInterval > highFrameInterval) {\r\n            if (this.resolutionTier != 0) {\r\n                this.resolutionModifier = this.baseRenderResolution * resolutionTiers[--this.resolutionTier];\r\n                this.resize();\r\n            }\r\n            this.lastDrsAdjustTime = now; // reset cooldown whenever we encounter a slow frame so we don't change back to high res too eagerly\r\n            return;\r\n        } else if (medianInterval < lowFrameInterval) {\r\n            if (this.resolutionTier != 2) {\r\n                this.resolutionModifier = this.baseRenderResolution * resolutionTiers[++this.resolutionTier];\r\n                this.lastDrsAdjustTime = now; // reset cooldown whenever we encounter a slow frame so we don't change back to high res too eagerly\r\n                this.resize();\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    static async downloadImports(map: ViewImportmap): Promise<ViewImports> {\r\n        const core3dPromise = downloadCore3dImports(map);\r\n        const measurePromise = downloadMeasureImports(map);\r\n        const [core3d, measure] = await Promise.all([core3dPromise, measurePromise]);\r\n        return {\r\n            ...core3d,\r\n            ...measure\r\n        }\r\n    }\r\n}\r\n\r\n/** Background/IBL environment description\r\n * @category Render View\r\n */\r\nexport interface EnvironmentDescription {\r\n    /** Display name of environment */\r\n    readonly name: string;\r\n\r\n    /** Data URL. */\r\n    readonly url: string;\r\n\r\n    /** Thumbnail URL. */\r\n    readonly thumnbnailURL: string;\r\n}\r\n\r\n/** View related render statistics.\r\n * @category Render View\r\n */\r\nexport interface ViewStatistics {\r\n    /** Effective resolution factor. */\r\n    readonly resolution: number,\r\n\r\n    /** Effective detail bias factor. */\r\n    readonly detailBias: number,\r\n\r\n    /** Effective frames per second, if available. */\r\n    readonly fps?: number,\r\n}\r\n\r\n/** Extended pick sample information.\r\n * @category Render View\r\n */\r\nexport interface PickSampleExt extends PickSample {\r\n    /** Sample normal, in view space. */\r\n    readonly normalVS: ReadonlyVec3;\r\n\r\n    /** Whether sample lies on an edge, corner or surface. */\r\n    readonly sampleType: \"edge\" | \"corner\" | \"surface\";\r\n}\r\n\r\n/** @ignore */\r\nexport type CameraControllers<T extends string = string> = {\r\n    readonly [P in T]: BaseController;\r\n}\r\n\r\n/** Camera controller factory function signature type.\r\n * @template T dude\r\n */\r\nexport type CameraControllersFactory<T extends CameraControllers> = (input: ControllerInput, pick: PickContext) => T;\r\n\r\n/** Optional values to initialize camera controller. */\r\nexport interface CameraControllerInitialValues {\r\n    /** The camera position. */\r\n    readonly position?: ReadonlyVec3;\r\n    /** The camera rotation. */\r\n    readonly rotation?: ReadonlyQuat;\r\n    /** The camera field of view.\r\n     * @see {@link RenderStateCamera.fov}.\r\n     */\r\n    readonly fov?: number;\r\n}\r\n\r\n/** Camera controller switch options.\r\n * @category Camera Controller\r\n * @category Render View\r\n */\r\nexport interface CameraControllerOptions {\r\n    /** Whether to attempt an auto initializion of camera position or not.\r\n     * @remarks\r\n     * This is a heuristic won't work well for scenes with clusters of geometry scattered far apart.\r\n     * Georeferenced autocad models that contains \"meta\" geometry at origo are often problematic and may require you to supply a position manually.\r\n     */\r\n    readonly autoInit?: boolean;\r\n}\r\n\r\nexport type ViewImports = Core3DImports & MeasureImports;\r\nexport type ViewImportmap = Core3DImportMap & MeasureImportMap;", "import type { AtLeastOne, RGB, RGBA, RGBATransform } from \"core3d/state\";\r\n\r\n/** \r\n * Create a highlight color transform that doesn't change colors.\r\n * @category Render State\r\n */\r\nexport function createNeutralHighlight(): RGBATransform {\r\n    return [\r\n        1, 0, 0, 0, 0,\r\n        0, 1, 0, 0, 0,\r\n        0, 0, 1, 0, 0,\r\n        0, 0, 0, 1, 0,\r\n    ] as const\r\n}\r\n\r\n/** \r\n * Create a highlight color transform that replaces material opacity.\r\n * @param opacity New material opacity between 0 and 1, where 0 is 100% transparent and 1.0 is 100% opaque.\r\n * @category Render State\r\n */\r\nexport function createTransparentHighlight(opacity: number): RGBATransform {\r\n    return [\r\n        1, 0, 0, 0, 0,\r\n        0, 1, 0, 0, 0,\r\n        0, 0, 1, 0, 0,\r\n        0, 0, 0, opacity, 0,\r\n    ] as const\r\n}\r\n\r\n/** \r\n * Create a highlight color transform that replaces material colors.\r\n * @param color New material color or color modifier with optional alpha to be used uniformly across selection.\r\n * @category Render State\r\n */\r\nexport function createColorSetHighlight(color: RGB | RGBA): RGBATransform {\r\n    const [r, g, b, a] = color;\r\n    return [\r\n        0, 0, 0, 0, r,\r\n        0, 0, 0, 0, g,\r\n        0, 0, 0, 0, b,\r\n        0, 0, 0, 0, a ?? 1,\r\n    ] as const\r\n}\r\n\r\n/** \r\n * Create a highlight color transform that modifies material colors.\r\n * @param color New material color or color modifier with optional alpha.\r\n * @remarks\r\n * Colors can either be replaced or modified using the {@link LinearTransform}.\r\n * @category Render State\r\n */\r\nexport function createRGBATransformHighlight(options: AtLeastOne<RGBAOptions>): RGBATransform {\r\n    const r = normalizeLinearTransform(options.red);\r\n    const g = normalizeLinearTransform(options.green);\r\n    const b = normalizeLinearTransform(options.blue);\r\n    const a = normalizeLinearTransform(options.opacity);\r\n    return [\r\n        r[0], 0, 0, 0, r[1],\r\n        0, g[0], 0, 0, g[1],\r\n        0, 0, b[0], 0, b[1],\r\n        0, 0, 0, a[0], a[1],\r\n    ] as const\r\n}\r\n\r\n/** \r\n * Create a highlight color transform that modifies material colors using hue, saturation and lightness.\r\n * @param color New material hue, saturation and lightness modifier with optional alpha.\r\n * @category Render State\r\n */\r\nexport function createHSLATransformHighlight(options: AtLeastOne<HSLAOptions>): RGBATransform {\r\n    const [ls, lo] = normalizeLinearTransform(options.lightness);\r\n    const [as, ao] = normalizeLinearTransform(options.opacity);\r\n\r\n    function mix(a: number, b: number, t: number) {\r\n        return a + (b - a) * t;\r\n    }\r\n\r\n    const ss = options.saturation ?? 1;\r\n    const s0 = mix(1 / 3, 1, ss) * ls;\r\n    const s1 = mix(1 / 3, 0, ss) * ls;\r\n    // TODO: Weigh RGB differently based on perceived brightness ~(0.3, 0.6, 0.1)?\r\n    // TODO: Add hue offset?\r\n\r\n    return [\r\n        s0, s1, s1, 0, lo,\r\n        s1, s0, s1, 0, lo,\r\n        s1, s1, s0, 0, lo,\r\n        0, 0, 0, as, ao,\r\n    ] as const;\r\n}\r\n\r\nfunction isLinearTransform(transform: LinearTransform | number | undefined): transform is LinearTransform {\r\n    return typeof (transform) == \"object\";\r\n}\r\n\r\nfunction normalizeLinearTransform(transform: LinearTransform | number | undefined) {\r\n    let scale = 1;\r\n    let offset = 0;\r\n    if (isLinearTransform(transform)) {\r\n        if (transform.scale != undefined) {\r\n            scale = transform.scale;\r\n        }\r\n        if (transform.offset != undefined) {\r\n            offset = transform.offset;\r\n        }\r\n    } else if (typeof transform == \"number\") {\r\n        scale = 0;\r\n        offset = transform;\r\n    }\r\n    return [scale, offset];\r\n}\r\n\r\n/** Options for RGBA + alpha color transformation.\r\n * @remarks\r\n * All input values are between 0 and 1.\r\n * @category Render State\r\n */\r\nexport interface RGBAOptions {\r\n    /** Red color adjustment. */\r\n    readonly red: number | LinearTransform;\r\n    /** Green color adjustment. */\r\n    readonly green: number | LinearTransform;\r\n    /** Blue color adjustment. */\r\n    readonly blue: number | LinearTransform;\r\n    /** Opacity/alpha adjustment. */\r\n    readonly opacity: number | LinearTransform;\r\n}\r\n\r\n/** Options for HSL + alpha color transformation.\r\n * @remarks\r\n * All input values are between 0 and 1.\r\n * See {@link https://en.wikipedia.org/wiki/HSL_and_HSV | Wikipedia} for more details on the HSV color space.\r\n * @category Render State\r\n */\r\nexport interface HSLAOptions {\r\n    /** Lightness adjustment. */\r\n    readonly lightness: number | LinearTransform;\r\n    /** Saturation adjustment (scale). */\r\n    readonly saturation: number;\r\n    // /** Hue adjustment (offset). */\r\n    // readonly hue: number;\r\n    /** Opacity/alpha adjustment. */\r\n    readonly opacity: number | LinearTransform;\r\n}\r\n\r\n\r\n/** Linear transform options.\r\n * @remarks\r\n * The transform is performed by first applying scale, then adding offset, i.e.: result = value * scale + offset.\r\n * If scale = 0, offset will effectively replace input value.\r\n * @category Render State\r\n */\r\nexport interface LinearTransform {\r\n    /** Multiplicand for input value. Default = 1.*/\r\n    readonly scale?: number;\r\n    /** Addend for scaled input value. Default = 0. */\r\n    readonly offset?: number;\r\n}\r\n", "import { type ReadonlyVec2, type ReadonlyVec3, vec2, vec3, quat } from \"gl-matrix\";\r\nimport type { RenderState, RenderStateDynamicGeometry, RenderStateDynamicInstance, RenderStateDynamicMaterial, RenderStateDynamicMesh, RenderStateDynamicMeshPrimitive, RenderStateDynamicObject, RenderStateDynamicVertexAttributes } from \"core3d/state\";\r\n\r\nconst unlitMaterial: RenderStateDynamicMaterial = {\r\n    kind: \"unlit\",\r\n};\r\n\r\nconst defaultMaterial: RenderStateDynamicMaterial = {\r\n    kind: \"ggx\",\r\n    metallicFactor: 1,\r\n    roughnessFactor: 0.1,\r\n};\r\n\r\nconst defaultInstance: RenderStateDynamicInstance = {\r\n    position: vec3.create(),\r\n};\r\n\r\n/** @internal */\r\nexport function createRandomInstances(count = 1, radius?: number) {\r\n    const instances: RenderStateDynamicInstance[] = [];\r\n    const r = radius ?? count <= 1 ? 0 : Math.pow(count, 1 / 3) * 2;\r\n    const rndCoord = () => ((Math.random() * 2 - 1) * r);\r\n    const rndAngle = () => (Math.random() * 360);\r\n    for (var i = 0; i < count; i++) {\r\n        const position = vec3.fromValues(rndCoord(), rndCoord(), rndCoord());\r\n        if (vec3.sqrLen(position) > r * r) {\r\n            i--;\r\n            continue;\r\n        }\r\n        const rotation = quat.fromEuler(quat.create(), rndAngle(), rndAngle(), rndAngle());\r\n        instances.push({ position, rotation })\r\n    }\r\n    return instances;\r\n}\r\n\r\n/**\r\n * Create a simple cube mesh object.\r\n * @param material The material to use, or undefined for default material.\r\n * @example\r\n * ```typescript\r\n * const cube = createCubeObject();\r\n * view.modifyRenderState({ dynamic: { objects: [cube] } });\r\n * ```\r\n * @category Geometry\r\n * @experimental\r\n */\r\nexport function createCubeObject(material?: RenderStateDynamicMaterial): RenderStateDynamicObject {\r\n    const vertices = createCubeVertices((pos, norm, col) => ([...pos, ...norm, ...col]));\r\n    const indices = createCubeIndices();\r\n    material ??= defaultMaterial;\r\n\r\n    const attributes = {\r\n        position: { kind: \"FLOAT_VEC3\", buffer: vertices, byteStride: 36, byteOffset: 0 },\r\n        normal: { kind: \"FLOAT_VEC3\", buffer: vertices, byteStride: 36, byteOffset: 12 },\r\n        color0: { kind: \"FLOAT_VEC3\", buffer: vertices, byteStride: 36, byteOffset: 24 },\r\n    } as const satisfies RenderStateDynamicVertexAttributes;\r\n\r\n    const geometry: RenderStateDynamicGeometry = {\r\n        primitiveType: \"TRIANGLES\",\r\n        attributes,\r\n        indices,\r\n    };\r\n\r\n    const primitive: RenderStateDynamicMeshPrimitive = { geometry, material };\r\n    const mesh: RenderStateDynamicMesh = { primitives: [primitive] };\r\n    const instances = [defaultInstance];\r\n    return { mesh, instances };\r\n}\r\n\r\nfunction createCubeVertices(pack: (position: ReadonlyVec3, normal: ReadonlyVec3, color: ReadonlyVec3) => Iterable<number>) {\r\n    function face(x: ReadonlyVec3, y: ReadonlyVec3, color: ReadonlyVec3) {\r\n        const normal = vec3.cross(vec3.create(), y, x);\r\n        function vert(fx: \"add\" | \"sub\", fy: \"add\" | \"sub\") {\r\n            const pos = vec3.clone(normal);\r\n            vec3[fx](pos, pos, x);\r\n            vec3[fy](pos, pos, y);\r\n            return pack(pos, normal, color);\r\n        }\r\n        return [\r\n            ...vert(\"sub\", \"sub\"),\r\n            ...vert(\"add\", \"sub\"),\r\n            ...vert(\"sub\", \"add\"),\r\n            ...vert(\"add\", \"add\"),\r\n        ];\r\n    }\r\n\r\n    return new Float32Array([\r\n        ...face([0, 0, -1], [0, 1, 0], [1, 0, 0]), // right (1, 0, 0)\r\n        ...face([0, 0, 1], [0, 1, 0], [0, 1, 1]), // left (-1, 0, 0)\r\n        ...face([1, 0, 0], [0, 0, 1], [0, 1, 0]), // top (0, 1, 0)\r\n        ...face([1, 0, 0], [0, 0, -1], [1, 0, 1]), // bottom (0, -1, 0)\r\n        ...face([1, 0, 0], [0, 1, 0], [0, 0, 1]), // front (0, 0, 1)\r\n        ...face([-1, 0, 0], [0, 1, 0], [1, 1, 0]), // back (0, 0, -1)\r\n    ])\r\n}\r\n\r\nfunction createCubeIndices() {\r\n    let idxOffset = 0;\r\n    function face() {\r\n        const idx = [0, 2, 1, 1, 2, 3].map(i => i + idxOffset);\r\n        idxOffset += 4;\r\n        return idx;\r\n    }\r\n    return new Uint16Array([\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n        ...face(),\r\n    ]);\r\n}\r\n\r\n\r\n/**\r\n * Create a simple sphere mesh object.\r\n * @param detail The level of tesselation, expressed as # subdivisions of the base icosahedron.\r\n * @param material The material to use, or undefined for default material.\r\n * @example\r\n * ```typescript\r\n * const sphere = createSphereObject();\r\n * view.modifyRenderState({ dynamic: { objects: [sphere] } });\r\n * ```\r\n * @category Geometry\r\n * @experimental\r\n */\r\nexport function createSphereObject(detail = 5, material?: RenderStateDynamicMaterial): RenderStateDynamicObject {\r\n    const radius = 1;\r\n    const { positionBuffer, normalBuffer, texCoordBuffer } = icosahedron(radius, detail);\r\n\r\n    material ??= defaultMaterial;\r\n\r\n    const attributes = {\r\n        position: { kind: \"FLOAT_VEC3\", buffer: positionBuffer },\r\n        normal: { kind: \"FLOAT_VEC3\", buffer: normalBuffer },\r\n        texCoord0: { kind: \"FLOAT_VEC2\", buffer: texCoordBuffer },\r\n    } as const satisfies RenderStateDynamicVertexAttributes;\r\n\r\n    const geometry: RenderStateDynamicGeometry = {\r\n        primitiveType: \"TRIANGLES\",\r\n        attributes,\r\n        indices: positionBuffer.length / 3,\r\n    };\r\n\r\n    const primitive: RenderStateDynamicMeshPrimitive = { geometry, material };\r\n    const mesh: RenderStateDynamicMesh = { primitives: [primitive] };\r\n    return { mesh, instances: [defaultInstance] };\r\n}\r\n\r\nfunction icosahedron(radius: number, detail: number) {\r\n    const t = (1 + Math.sqrt(5)) / 2;\r\n    const vertices = [\r\n        - 1, t, 0, 1, t, 0, - 1, - t, 0, 1, - t, 0,\r\n        0, - 1, t, 0, 1, t, 0, - 1, - t, 0, 1, - t,\r\n        t, 0, - 1, t, 0, 1, - t, 0, - 1, - t, 0, 1\r\n    ];\r\n    const indices = [\r\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11,\r\n        1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8,\r\n        3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9,\r\n        4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1\r\n    ];\r\n    return polyhedron(vertices, indices, radius, detail);\r\n}\r\n\r\nfunction polyhedron(vertices: number[], indices: number[], radius: number, detail: number) {\r\n    const vertexBuffer: number[] = [];\r\n    const uvBuffer: number[] = [];\r\n\r\n    // the subdivision creates the vertex buffer data\r\n    subdivide(detail);\r\n\r\n    // all vertices should lie on a conceptual sphere with a given radius\r\n    applyRadius(radius);\r\n\r\n    // finally, create the uv data\r\n    generateUVs();\r\n\r\n    // build non-indexed geometry\r\n    const positionBuffer = new Float32Array(vertexBuffer);\r\n    const normalBuffer = new Float32Array(vertexBuffer);\r\n    const texCoordBuffer = new Float32Array(uvBuffer);\r\n\r\n    if (detail == 0) {\r\n        computeVertexNormals(); // flat normals\r\n    } else {\r\n        normalizeNormals(); // smooth normals\r\n    }\r\n\r\n    return { positionBuffer, normalBuffer, texCoordBuffer } as const;\r\n\r\n    // helper functions\r\n    function subdivide(detail: number) {\r\n        const a = vec3.create();\r\n        const b = vec3.create();\r\n        const c = vec3.create();\r\n\r\n        // iterate over all faces and apply a subdivision with the given detail value\r\n        for (let i = 0; i < indices.length; i += 3) {\r\n            // get the vertices of the face\r\n            getVertexByIndex(indices[i + 0], a);\r\n            getVertexByIndex(indices[i + 1], b);\r\n            getVertexByIndex(indices[i + 2], c);\r\n\r\n            // perform subdivision\r\n            subdivideFace(a, b, c, detail);\r\n        }\r\n    }\r\n\r\n    function subdivideFace(a: ReadonlyVec3, b: ReadonlyVec3, c: ReadonlyVec3, detail: number) {\r\n        const cols = detail + 1;\r\n\r\n        // we use this multidimensional array as a data structure for creating the subdivision\r\n        const v: ReadonlyVec3[][] = [];\r\n\r\n        // construct all of the vertices for this subdivision\r\n        for (let i = 0; i <= cols; i++) {\r\n            v[i] = [];\r\n            const aj = vec3.lerp(vec3.create(), a, c, i / cols);\r\n            const bj = vec3.lerp(vec3.create(), b, c, i / cols);\r\n            const rows = cols - i;\r\n            for (let j = 0; j <= rows; j++) {\r\n                if (j === 0 && i === cols) {\r\n                    v[i][j] = aj;\r\n                } else {\r\n                    v[i][j] = vec3.lerp(vec3.create(), aj, bj, j / rows);\r\n                }\r\n            }\r\n        }\r\n\r\n        // construct all of the faces\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < 2 * (cols - i) - 1; j++) {\r\n                const k = Math.floor(j / 2);\r\n                if (j % 2 === 0) {\r\n                    pushVertex(v[i][k + 1]);\r\n                    pushVertex(v[i + 1][k]);\r\n                    pushVertex(v[i][k]);\r\n                } else {\r\n                    pushVertex(v[i][k + 1]);\r\n                    pushVertex(v[i + 1][k + 1]);\r\n                    pushVertex(v[i + 1][k]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function applyRadius(radius: number) {\r\n        const vertex = vec3.create();\r\n        // iterate over the entire buffer and apply the radius to each vertex\r\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\r\n            vertex[0] = vertexBuffer[i + 0];\r\n            vertex[1] = vertexBuffer[i + 1];\r\n            vertex[2] = vertexBuffer[i + 2];\r\n            vec3.scale(vertex, vec3.normalize(vertex, vertex), radius);\r\n            vertexBuffer[i + 0] = vertex[0];\r\n            vertexBuffer[i + 1] = vertex[1];\r\n            vertexBuffer[i + 2] = vertex[2];\r\n        }\r\n    }\r\n\r\n    function generateUVs() {\r\n        const vertex = vec3.create();\r\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\r\n            vertex[0] = vertexBuffer[i + 0];\r\n            vertex[1] = vertexBuffer[i + 1];\r\n            vertex[2] = vertexBuffer[i + 2];\r\n\r\n            const u = azimuth(vertex) / 2 / Math.PI + 0.5;\r\n            const v = inclination(vertex) / Math.PI + 0.5;\r\n            uvBuffer.push(u, 1 - v);\r\n        }\r\n        correctUVs();\r\n        correctSeam();\r\n    }\r\n\r\n    function correctSeam() {\r\n        // handle case when face straddles the seam, see #3269\r\n        for (let i = 0; i < uvBuffer.length; i += 6) {\r\n            // uv data of a single face\r\n            const x0 = uvBuffer[i + 0];\r\n            const x1 = uvBuffer[i + 2];\r\n            const x2 = uvBuffer[i + 4];\r\n\r\n            const max = Math.max(x0, x1, x2);\r\n            const min = Math.min(x0, x1, x2);\r\n\r\n            // 0.9 is somewhat arbitrary\r\n            if (max > 0.9 && min < 0.1) {\r\n                if (x0 < 0.2) uvBuffer[i + 0] += 1;\r\n                if (x1 < 0.2) uvBuffer[i + 2] += 1;\r\n                if (x2 < 0.2) uvBuffer[i + 4] += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function pushVertex(vertex: ReadonlyVec3) {\r\n        vertexBuffer.push(...vertex);\r\n    }\r\n\r\n    function getVertexByIndex(index: number, vertex: vec3) {\r\n        const stride = index * 3;\r\n        vertex[0] = vertices[stride + 0];\r\n        vertex[1] = vertices[stride + 1];\r\n        vertex[2] = vertices[stride + 2];\r\n    }\r\n\r\n    function correctUVs() {\r\n        const a = vec3.create();\r\n        const b = vec3.create();\r\n        const c = vec3.create();\r\n        const centroid = vec3.create();\r\n\r\n        const uvA = vec2.create();\r\n        const uvB = vec2.create();\r\n        const uvC = vec2.create();\r\n\r\n        for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\r\n            vec3.set(a, vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\r\n            vec3.set(b, vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\r\n            vec3.set(c, vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\r\n            vec2.set(uvA, uvBuffer[j + 0], uvBuffer[j + 1]);\r\n            vec2.set(uvB, uvBuffer[j + 2], uvBuffer[j + 3]);\r\n            vec2.set(uvC, uvBuffer[j + 4], uvBuffer[j + 5]);\r\n\r\n            vec3.add(centroid, a, b);\r\n            vec3.add(centroid, centroid, c);\r\n            vec3.scale(centroid, centroid, 1. / 3);\r\n\r\n            const azi = azimuth(centroid);\r\n\r\n            correctUV(uvA, j + 0, a, azi);\r\n            correctUV(uvB, j + 2, b, azi);\r\n            correctUV(uvC, j + 4, c, azi);\r\n        }\r\n    }\r\n\r\n    function correctUV(uv: ReadonlyVec2, stride: number, vector: ReadonlyVec3, azimuth: number) {\r\n        if ((azimuth < 0) && (uv[0] === 1)) {\r\n            uvBuffer[stride] = uv[0] - 1;\r\n        }\r\n        if ((vector[0] === 0) && (vector[2] === 0)) {\r\n            uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\r\n        }\r\n    }\r\n\r\n    // Angle around the Y axis, counter-clockwise when looking from above.\r\n    function azimuth(vector: ReadonlyVec3) {\r\n        return Math.atan2(vector[2], - vector[0]);\r\n    }\r\n\r\n    // Angle above the XZ plane.\r\n    function inclination(vector: ReadonlyVec3) {\r\n        return Math.atan2(- vector[1], Math.sqrt((vector[0] * vector[0]) + (vector[2] * vector[2])));\r\n    }\r\n\r\n    function computeVertexNormals() {\r\n        if (positionBuffer !== undefined) {\r\n            const cb = vec3.create(), ab = vec3.create();\r\n            // non-indexed elements (unconnected triangle soup)\r\n            for (let i = 0, il = positionBuffer.length; i < il; i += 9) {\r\n                const pA = positionBuffer.subarray(i + 0, i + 3);\r\n                const pB = positionBuffer.subarray(i + 3, i + 6);\r\n                const pC = positionBuffer.subarray(i + 6, i + 9);\r\n                vec3.sub(cb, pC, pB);\r\n                vec3.sub(ab, pA, pB);\r\n                vec3.cross(cb, cb, ab);\r\n                vec3.normalize(cb, cb);\r\n                vec3.copy(normalBuffer.subarray(i + 0, i + 3), cb);\r\n                vec3.copy(normalBuffer.subarray(i + 3, i + 6), cb);\r\n                vec3.copy(normalBuffer.subarray(i + 6, i + 9), cb);\r\n            }\r\n        }\r\n    }\r\n\r\n    function normalizeNormals() {\r\n        for (let i = 0, il = normalBuffer.length; i < il; i += 3) {\r\n            const normal = normalBuffer.subarray(i, i + 3);\r\n            vec3.normalize(normal, normal);\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * A library for building Novorender web apps.\r\n * @module\r\n */\r\nimport { glMatrix } from \"gl-matrix\";\r\nexport * from \"../core3d\";\r\nexport * from \"../offline\";\r\nexport * from \"../measure\";\r\nexport * from \"./device\";\r\nexport * from \"./view\";\r\nexport * from \"./buffer_inspect\";\r\nexport * from \"./controller\";\r\nexport * from \"./highlight\";\r\nexport * from \"./geometry\";\r\n\r\ndeclare const NPM_PACKAGE_VERSION: string | undefined;\r\n\r\n/**\r\n * NPM package version, if applicable.\r\n */\r\nexport const packageVersion = NPM_PACKAGE_VERSION;\r\n\r\n// THIS IS VERY IMPORTANT!!! MUST BE SET PRIOR TO CREATING ANY GL MATRICES, PREFERABLY AS THE FIRST LINE OF CODE IN THE WHOLE APP!\r\n// Float32Array doesn't have enough resolution for scenes with georeferenced coordinates.\r\nglMatrix.setMatrixArrayType(Array);\r\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAI,UAAU;AACd,IAAI,aAAa,OAAO,iBAAiB,cAAc,eAAe;AACtE,IAAI,SAAS,KAAK;AAOlB,SAAS,mBAAmB,MAAM;AACvC,eAAa;AACf;AACA,IAAI,SAAS,KAAK,KAAK;AAOhB,SAAS,SAAS,GAAG;AAC1B,SAAO,IAAI;AACb;AAWO,SAAS,OAAO,GAAG,GAAG;AAC3B,SAAO,KAAK,IAAI,IAAI,CAAC,KAAK,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AAC5E;AACA,IAAI,CAAC,KAAK;AAAO,OAAK,QAAQ,WAAY;AACxC,QAAI,IAAI,GACJ,IAAI,UAAU;AAElB,WAAO,KAAK;AACV,WAAK,UAAU,CAAC,IAAI,UAAU,CAAC;AAAA,IACjC;AAEA,WAAO,KAAK,KAAK,CAAC;AAAA,EACpB;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAAS,SAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,SAAS,KAAK,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,EAAE;AACb,SAAO;AACT;AAQO,SAAS,MAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAgBO,SAAS,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACtE,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAiBO,SAAS,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACpE,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAAS,SAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAEhC,MAAI,QAAQ,GAAG;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX,OAAO;AACL,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AAAA,EACd;AAEA,SAAO;AACT;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,CAAC,MAAM,MAAM,MAAM;AAC7B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,SAAO;AACT;AAQO,SAAS,YAAY,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,SAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,CAAC,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,SAAO;AACT;AAUO,SAAS,UAAU,KAAK,GAAG,GAAG;AACnC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,SAAO;AACT;AAUO,SAAS,OAAO,KAAK,GAAG,KAAK;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,IAAI,KAAK,IAAI,GAAG,GAChB,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAaO,SAAS,gBAAgB,KAAK,GAAG;AACtC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAaO,SAAS,aAAa,KAAK,KAAK;AACrC,MAAI,IAAI,KAAK,IAAI,GAAG,GAChB,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAaO,SAAS,YAAY,KAAK,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG;AACrC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAE5E,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,SAAO;AACT;AAUO,SAAS,WAAW,KAAK,OAAO,QAAQ;AAC7C,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAAS,IAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AAC1I;AAQO,SAAS,KAAK,GAAG;AACtB,SAAO,KAAK,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AACxE;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAAS,qBAAqB,KAAK,GAAG,GAAGC,QAAO;AACrD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAAS,YAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AAC7J;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACjwB;AAMO,IAAI,MAAM;AAMV,IAAI,MAAM;;;ACzwBjB;AAAA;AAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA,sBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,qBAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,sBAAAC;AAAA,EAAA,4BAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA,mBAAAC;AAAA,EAAA,iBAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AAEpC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAAA,EACZ;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AAuBO,SAASC,YAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACzG,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAwBO,SAASC,KAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACvG,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASC,UAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAEhC,MAAI,QAAQ,GAAG;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,EAAE;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAAA,EACZ,OAAO;AACL,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAEA,SAAO;AACT;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAE5E,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,SAAO;AACT;AAQO,SAASC,aAAY,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,SAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC3E;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AAEd,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,SAAO;AACT;AAUO,SAASC,WAAU,KAAK,GAAG,GAAG;AACnC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AAEnB,MAAI,MAAM,KAAK;AACb,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AAC/C,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AAC/C,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAChD,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAAA,EAClD,OAAO;AACL,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,EAAE;AACV,UAAM,EAAE,EAAE;AACV,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAAA,EAC9C;AAEA,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AAWO,SAASC,QAAO,KAAK,GAAG,KAAK,MAAM;AACxC,MAAI,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC;AACd,MAAIC,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AACV,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AAEd,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AACR,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,EAAE;AACV,QAAM,EAAE,EAAE;AAEV,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAElB,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,MAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,MAAI,MAAM,KAAK;AAEb,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAEA,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE;AAEd,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE;AAEd,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AAEb,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,SAAO;AACT;AAaO,SAASC,iBAAgB,KAAK,GAAG;AACtC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAASC,aAAY,KAAK,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAcO,SAASC,cAAa,KAAK,KAAK,MAAM;AAC3C,MAAI,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC;AACd,MAAIH,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AAEV,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AAER,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,EAAE,IAAI,IAAI,IAAI,IAAI;AACtB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAiBO,SAAS,wBAAwB,KAAK,GAAG,GAAG;AAEjD,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,KAAK,KAAK;AACnB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK,KAAK;AACnB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,EAAE,IAAI,KAAK,KAAK;AACpB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,cAAc,IAAa,WAAW,CAAC;AAC3C,MAAI,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,YAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnD,MAAI,YAAY,GAAG;AACjB,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACjE,OAAO;AACL,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAAA,EAC7D;AAEA,0BAAwB,KAAK,GAAG,WAAW;AAC3C,SAAO;AACT;AAWO,SAAS,eAAe,KAAK,KAAK;AACvC,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,SAAO;AACT;AAYO,SAAS,WAAW,KAAK,KAAK;AACnC,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,EAAE;AAChB,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,KAAK;AACpC,MAAI,UAAU,IAAa,WAAW,CAAC;AACvC,aAAW,SAAS,GAAG;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,EAAE,IAAI;AACrB,MAAI,QAAQ,OAAO,OAAO;AAC1B,MAAI,IAAI;AAER,MAAI,QAAQ,GAAG;AACb,QAAI,KAAK,KAAK,QAAQ,CAAG,IAAI;AAC7B,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,QAAQ,OAAO,MAAM;AACrC,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,MAAM;AACtB,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,OAAO;AACL,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAAA,EAClB;AAEA,SAAO;AACT;AAmBO,SAAS,6BAA6B,KAAK,GAAG,GAAG,GAAG;AAEzD,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,KAAK,KAAK,KAAK,OAAO;AAC3B,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,KAAK,OAAO;AAC3B,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,EAAE,KAAK,KAAK,KAAK,OAAO;AAC5B,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAsBO,SAAS,mCAAmC,KAAK,GAAG,GAAG,GAAG,GAAG;AAElE,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,SAAS,KAAK,KAAK,OAAO;AAC9B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,QAAQ;AACvD,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAUO,SAASI,UAAS,KAAK,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,EAAE,IAAI,IAAI,KAAK;AACnB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAcO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,QAAQ;AACtB,MAAI,KAAK,KAAK,MAAM;AACpB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,OAAO,IAAI;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,OAAO,IAAI;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,QAAQ,QAAQ;AAC1B,MAAI,CAAC,KAAK,MAAM,UAAU;AAC1B,MAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,MAAM,OAAO,IAAI;AAC3B,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAeO,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,QAAI,EAAE,IAAI,IAAI,MAAM,OAAO;AAAA,EAC7B,OAAO;AACL,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,KAAK;AAAA,EACjB;AAEA,SAAO;AACT;AAMO,IAAI,cAAc;AAelB,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,EAAE,IAAI,MAAM;AAChB,QAAI,EAAE,IAAI,MAAM,OAAO;AAAA,EACzB,OAAO;AACL,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,CAAC;AAAA,EACb;AAEA,SAAO;AACT;AAaO,SAAS,2BAA2B,KAAK,KAAK,MAAM,KAAK;AAC9D,MAAI,QAAQ,KAAK,IAAI,IAAI,YAAY,KAAK,KAAK,GAAK;AACpD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,WAAW,KAAK,IAAI,IAAI,eAAe,KAAK,KAAK,GAAK;AAC1D,MAAI,SAAS,KAAO,UAAU;AAC9B,MAAI,SAAS,KAAO,QAAQ;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,GAAG,UAAU,YAAY,SAAS;AAC3C,MAAI,CAAC,KAAK,QAAQ,WAAW,SAAS;AACtC,MAAI,EAAE,IAAI,OAAO,OAAO;AACxB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,MAAM,QAAQ,OAAO;AAC/B,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAgBO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI,IAAI;AACd,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,KAAK,OAAO,SAAS;AAC3B,MAAI,EAAE,KAAK,MAAM,UAAU;AAC3B,MAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAMO,IAAI,QAAQ;AAgBZ,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,KAAK,OAAO,SAAS;AAC3B,MAAI,EAAE,KAAK,MAAM,UAAU;AAC3B,MAAI,EAAE,IAAI,OAAO;AACjB,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAYO,SAAS,OAAO,KAAK,KAAK,QAAQ,IAAI;AAC3C,MAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAIJ;AACxC,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,UAAU,OAAO,CAAC;AAEtB,MAAI,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,SAAS;AAC7I,WAAOT,UAAS,GAAG;AAAA,EACrB;AAEA,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,EAAAS,OAAM,IAAI,KAAK,MAAM,IAAI,IAAI,EAAE;AAC/B,QAAMA;AACN,QAAMA;AACN,QAAMA;AACN,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAWO,SAAS,SAAS,KAAK,KAAK,QAAQ,IAAI;AAC7C,MAAI,OAAO,IAAI,CAAC,GACZ,OAAO,IAAI,CAAC,GACZ,OAAO,IAAI,CAAC,GACZ,MAAM,GAAG,CAAC,GACV,MAAM,GAAG,CAAC,GACV,MAAM,GAAG,CAAC;AACd,MAAI,KAAK,OAAO,OAAO,CAAC,GACpB,KAAK,OAAO,OAAO,CAAC,GACpB,KAAK,OAAO,OAAO,CAAC;AACxB,MAAIA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM;AAC1B,EAAAA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAE/B,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASK,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI;AAClP;AAQO,SAASC,MAAK,GAAG;AACtB,SAAO,KAAK,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;AACxH;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,SAAO;AACT;AAUO,SAASC,gBAAe,KAAK,GAAG,GAAG;AACxC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,SAAO;AACT;AAWO,SAASC,sBAAqB,KAAK,GAAG,GAAGZ,QAAO;AACrD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,SAAO;AACT;AASO,SAASa,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE;AAChS;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC;AAC52C;AAMO,IAAIC,OAAMjB;AAMV,IAAIkB,OAAMN;;;ACr3DjB;AAAA;AAAA,aAAAO;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA;AAAA,cAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA;;;ACAA;AAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,iBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAQO,SAAS,OAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AAUO,SAASC,YAAW,GAAG,GAAG,GAAG;AAClC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAWO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,OAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,GAAG,GAAGA,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAAS,SAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AASO,SAAS,gBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AAQO,SAAS,cAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI;AAE9B,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,SAAO;AACT;AASO,SAAS,IAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC/C;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAWO,SAAS,KAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AAaO,SAAS,QAAQ,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,gBAAgB,IAAI,IAAI,KAAK;AAC3C,MAAI,UAAU,gBAAgB,IAAI,KAAK;AACvC,MAAI,UAAU,gBAAgB,IAAI;AAClC,MAAI,UAAU,gBAAgB,IAAI,IAAI;AACtC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,SAAO;AACT;AAaO,SAAS,OAAO,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACzC,MAAI,gBAAgB,IAAI;AACxB,MAAI,wBAAwB,gBAAgB;AAC5C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,wBAAwB;AACtC,MAAI,UAAU,IAAI,IAAI;AACtB,MAAI,UAAU,IAAI,eAAe;AACjC,MAAI,UAAU,eAAe;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,SAAO;AACT;AASO,SAAS,OAAO,KAAKD,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,IAAa,OAAO,IAAI,IAAM;AAClC,MAAI,SAAS,KAAK,KAAK,IAAM,IAAI,CAAC,IAAIA;AACtC,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,CAAC,IAAI,IAAIA;AACb,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAC9C,MAAI,KAAK;AACT,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK;AACpD,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK;AACpD,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,KAAK;AACrD,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AAEvC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AAGX,MAAI,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK;AAExB,MAAI,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK;AAE3B,MAAI,KAAK,KAAK;AACd,SAAO;AACP,SAAO;AACP,SAAO;AAEP,UAAQ;AACR,UAAQ;AACR,UAAQ;AAER,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,SAAO;AACT;AAUO,SAASE,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC;AACV,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AAEjD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC;AACV,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AAEjD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC;AAEV,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAQO,SAAS,MAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,MAAM,OAAO,MACb,SAAS,OAAO,IAAI,GAAG,CAAC,IAAI;AAChC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAAS,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACtD;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACvD;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACnQ;AAMO,IAAIC,OAAMV;AAMV,IAAIW,OAAMV;AAMV,IAAI,MAAM;AAMV,IAAI,OAAO;AAMX,IAAI,UAAU;AAMd,IAAI,MAAM;AAMV,IAAI,SAAS;AAcb,IAAI,UAAU,WAAY;AAC/B,MAAI,MAAMP,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AClxBF;AAAA;AAAA,aAAAkB;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAWO,SAASC,YAAW,GAAG,GAAG,GAAG,GAAG;AACrC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAYO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG,GAAG;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAEtC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC7D;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG,GAAG;AAClC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,CAAC,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,CAAC,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AAIjB,MAAI,IAAI,IAAI,IAAI;AAChB,MAAI,IAAI;AAER,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,MAAI,IAAI,KAAK,MAAM,IAAI,MAAM,EAAE;AAC/B,MAAI,CAAC,IAAIA,SAAQ;AACjB,MAAI,CAAC,IAAIA,SAAQ;AACjB,MAAI,CAAC,IAAIA,SAAQ,KAAK;AACtB,MAAI,CAAC,IAAIA,SAAQ,KAAK;AACtB,SAAO;AACT;AAUO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI;AAClD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI;AAClD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI;AACnD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI;AACnD,SAAO;AACT;AAUO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AAEZ,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK;AAEjC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACpE;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACxE;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACxV;AAMO,IAAIC,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,QAAOrB;AAMX,IAAIsB,WAAUrB;AAMd,IAAIM,OAAML;AAMV,IAAIqB,UAASpB;AAcb,IAAIqB,WAAU,WAAY;AAC/B,MAAI,MAAMxC,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AFvoBK,SAASyC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,UAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAWO,SAAS,aAAa,KAAK,MAAM,KAAK;AAC3C,QAAM,MAAM;AACZ,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AACrB,SAAO;AACT;AAeO,SAAS,aAAa,UAAU,GAAG;AACxC,MAAI,MAAM,KAAK,KAAK,EAAE,CAAC,CAAC,IAAI;AAC5B,MAAI,IAAI,KAAK,IAAI,MAAM,CAAG;AAE1B,MAAI,IAAa,SAAS;AACxB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACrB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACrB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AAAA,EACvB,OAAO;AAEL,aAAS,CAAC,IAAI;AACd,aAAS,CAAC,IAAI;AACd,aAAS,CAAC,IAAI;AAAA,EAChB;AAEA,SAAO;AACT;AASO,SAAS,SAAS,GAAG,GAAG;AAC7B,MAAI,aAAaC,KAAI,GAAG,CAAC;AACzB,SAAO,KAAK,KAAK,IAAI,aAAa,aAAa,CAAC;AAClD;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAWO,SAAS,WAAW,KAAK,GAAG;AACjC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,IAAI,IAAM,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC;AACxD,SAAO;AACT;AASO,SAAS,IAAI,KAAK,GAAG;AAC1B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACvC,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,IAAI,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,IAAI;AACvC,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC;AACxB,SAAO;AACT;AASO,SAAS,GAAG,KAAK,GAAG;AACzB,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACvC,MAAI,IAAI,IAAI,IAAI,KAAK,MAAM,GAAG,CAAC,IAAI,IAAI;AACvC,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACrD,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,KAAG,KAAK,CAAC;AACT,EAAAC,OAAM,KAAK,KAAK,CAAC;AACjB,MAAI,KAAK,GAAG;AACZ,SAAO;AACT;AAWO,SAAS,MAAM,KAAK,GAAG,GAAG,GAAG;AAGlC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,OAAO,OAAO,OAAO,QAAQ;AAEjC,UAAQ,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAE3C,MAAI,QAAQ,GAAK;AACf,YAAQ,CAAC;AACT,SAAK,CAAC;AACN,SAAK,CAAC;AACN,SAAK,CAAC;AACN,SAAK,CAAC;AAAA,EACR;AAGA,MAAI,IAAM,QAAiB,SAAS;AAElC,YAAQ,KAAK,KAAK,KAAK;AACvB,YAAQ,KAAK,IAAI,KAAK;AACtB,aAAS,KAAK,KAAK,IAAM,KAAK,KAAK,IAAI;AACvC,aAAS,KAAK,IAAI,IAAI,KAAK,IAAI;AAAA,EACjC,OAAO;AAGL,aAAS,IAAM;AACf,aAAS;AAAA,EACX;AAGA,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,SAAO;AACT;AAQO,SAASC,QAAO,KAAK;AAG1B,MAAI,KAAc,OAAO;AACzB,MAAI,KAAc,OAAO;AACzB,MAAI,KAAc,OAAO;AACzB,MAAI,eAAe,KAAK,KAAK,IAAI,EAAE;AACnC,MAAI,SAAS,KAAK,KAAK,EAAE;AACzB,MAAI,CAAC,IAAI,eAAe,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AACnD,MAAI,CAAC,IAAI,eAAe,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AACnD,MAAI,CAAC,IAAI,SAAS,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AAC7C,MAAI,CAAC,IAAI,SAAS,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AAC7C,SAAO;AACT;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAIP,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC7C,MAAI,SAASA,OAAM,IAAMA,OAAM;AAE/B,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,KAAK;AACd,SAAO;AACT;AAUO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAaO,SAAS,SAAS,KAAK,GAAG;AAG/B,MAAI,SAAS,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC9B,MAAI;AAEJ,MAAI,SAAS,GAAK;AAEhB,YAAQ,KAAK,KAAK,SAAS,CAAG;AAE9B,QAAI,CAAC,IAAI,MAAM;AACf,YAAQ,MAAM;AAEd,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AACzB,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AACzB,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AAAA,EAC3B,OAAO;AAEL,QAAI,IAAI;AACR,QAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAAG,UAAI;AACrB,QAAI,EAAE,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;AAAG,UAAI;AAC7B,QAAI,KAAK,IAAI,KAAK;AAClB,QAAI,KAAK,IAAI,KAAK;AAClB,YAAQ,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAG;AAClE,QAAI,CAAC,IAAI,MAAM;AACf,YAAQ,MAAM;AACd,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AACzC,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AACzC,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AAAA,EAC3C;AAEA,SAAO;AACT;AAYO,SAAS,UAAU,KAAK,GAAG,GAAG,GAAG;AACtC,MAAI,YAAY,MAAM,KAAK,KAAK;AAChC,OAAK;AACL,OAAK;AACL,OAAK;AACL,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,SAAO;AACT;AAQO,SAASQ,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACpE;AASO,IAAIC,SAAaA;AAYjB,IAAIC,cAAkBA;AAUtB,IAAIC,QAAYA;AAahB,IAAIC,OAAWA;AAWf,IAAIC,OAAWA;AAMf,IAAIC,OAAMb;AAWV,IAAII,SAAaA;AAUjB,IAAIL,OAAWA;AAYf,IAAIe,QAAYA;AAQhB,IAAIC,UAAcA;AAMlB,IAAIC,OAAMD;AASV,IAAIE,iBAAqBA;AAMzB,IAAIC,UAASD;AAUb,IAAIE,aAAiBA;AASrB,IAAIC,eAAmBA;AASvB,IAAIC,UAAcA;AAalB,IAAI,aAAa,WAAY;AAClC,MAAI,UAAexB,QAAO;AAC1B,MAAI,YAAiBY,YAAW,GAAG,GAAG,CAAC;AACvC,MAAI,YAAiBA,YAAW,GAAG,GAAG,CAAC;AACvC,SAAO,SAAU,KAAK,GAAG,GAAG;AAC1B,QAAIV,OAAW,IAAI,GAAG,CAAC;AAEvB,QAAIA,OAAM,WAAW;AACnB,MAAK,MAAM,SAAS,WAAW,CAAC;AAChC,UAAS,IAAI,OAAO,IAAI;AAAU,QAAK,MAAM,SAAS,WAAW,CAAC;AAClE,MAAK,UAAU,SAAS,OAAO;AAC/B,mBAAa,KAAK,SAAS,KAAK,EAAE;AAClC,aAAO;AAAA,IACT,WAAWA,OAAM,UAAU;AACzB,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,aAAO;AAAA,IACT,OAAO;AACL,MAAK,MAAM,SAAS,GAAG,CAAC;AACxB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,IAAIA;AACb,aAAOoB,WAAU,KAAK,GAAG;AAAA,IAC3B;AAAA,EACF;AACF,EAAE;AAaK,IAAI,SAAS,WAAY;AAC9B,MAAI,QAAQtB,QAAO;AACnB,MAAI,QAAQA,QAAO;AACnB,SAAO,SAAU,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACnC,UAAM,OAAO,GAAG,GAAG,CAAC;AACpB,UAAM,OAAO,GAAG,GAAG,CAAC;AACpB,UAAM,KAAK,OAAO,OAAO,IAAI,KAAK,IAAI,EAAE;AACxC,WAAO;AAAA,EACT;AACF,EAAE;AAYK,IAAI,UAAU,WAAY;AAC/B,MAAI,OAAY,OAAO;AACvB,SAAO,SAAU,KAAK,MAAM,OAAO,IAAI;AACrC,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,WAAOsB,WAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AACF,EAAE;;;AGrsBF;AAAA;AAAA,aAAAG;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AASO,SAASC,YAAW,GAAG,GAAG;AAC/B,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GACd,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GACd,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI;AACrB;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI;AACrB;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI;AAEtB,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjC;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,MAAI,CAAC,IAAI,IAAI,CAAC,IAAI;AAClB,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAIA;AACvB,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI;AAC3B,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,SAAO;AACT;AAWO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,SAAO;AACT;AAYO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AACnC,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG,KAAK;AAErC,MAAI,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GACf,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GACf,OAAO,KAAK,IAAI,GAAG,GACnB,OAAO,KAAK,IAAI,GAAG;AAEvB,MAAI,CAAC,IAAI,KAAK,OAAO,KAAK,OAAO,EAAE,CAAC;AACpC,MAAI,CAAC,IAAI,KAAK,OAAO,KAAK,OAAO,EAAE,CAAC;AACpC,SAAO;AACT;AAQO,SAASC,OAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GAEZ,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAEhE,SAAS,QAAQ,KAAK,KAAK,KAAK,MAAM;AAEtC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACxC;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACtC;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAC9K;AAMO,IAAIZ,OAAML;AAMV,IAAIkB,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,QAAOvB;AAMX,IAAIwB,WAAUvB;AAMd,IAAIwB,UAAStB;AAcb,IAAIuB,WAAU,WAAY;AAC/B,MAAI,MAAM1C,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AC9mBK,SAAS,OAAO,IAA4B,QAAoB;AACnE,QAAM,IAAI,GAAG;AACb,QAAM,IAAI,GAAG;AACb,MAAI,OAAO;AACX,MAAI,OAAO;AACP,YAAQ,GAAG;AACf,MAAI,OAAO;AACP,YAAQ,GAAG;AACf,MAAI,OAAO;AACP,YAAQ,GAAG;AACf,QAAM,SAAS,GAAG,OAAO,UAAU,SAAS;AAC5C,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,QAAQ,OAAO,SAAS;AAC9B,QAAM,MAAM,OAAO,UAAU,OAAO,OAAO,OAAO;AAClD,QAAM,MAAM,OAAO,eAAe,OAAO,OAAO,OAAO;AAEvD,KAAG,gBAAgB,GAAG,kBAAkB,GAAG;AAC3C,KAAG,gBAAgB,GAAG,kBAAkB,GAAG;AAC3C,KAAG,gBAAgB,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM;AACvF,KAAG,gBAAgB,GAAG,aAAa,IAAI;AAC3C;;;AC1BO,SAAS,eAAe,IAA4B,QAAmC;AAC1F,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,QAAQ,GAAG,OAAO,SAAS,aAAa;AAC9C,QAAM,SAAS,GAAG,aAAa;AAC/B,KAAG,WAAW,QAAQ,MAAM;AAC5B,MAAI,cAAc,QAAQ;AACtB,OAAG,WAAW,QAAQ,OAAO,UAAU,KAAK;AAAA,EAChD,OAAO;AACH,OAAG,WAAW,QAAQ,OAAO,SAAS,KAAK;AAAA,EAC/C;AACA,KAAG,WAAW,QAAQ,IAAI;AAC1B,SAAO;AACX;AAEO,SAAS,eAAe,IAA4B,QAAsB;AAC7E,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,YAAY,OAAO,oBAAoB;AAC7C,QAAM,eAAe,OAAO,iBAAiB;AAC7C,QAAM,MAAM,OAAO;AACnB,QAAM,UAAU,YAAY,OAAO,GAAG,IAAI,MAAM,IAAI,WAAW,GAAG;AAClE,KAAG,WAAW,QAAQ,OAAO,YAAY;AACzC,KAAG,cAAc,QAAQ,cAAc,SAAS,WAAW,OAAO,QAAQ;AAC1E,KAAG,WAAW,QAAQ,IAAI;AAC9B;;;ACxBO,SAAS,QAAQ,IAA4B,QAAqB;AACrE,QAAM,EAAE,KAAK,IAAI;AACjB,UAAQ,MAAM;AAAA,IACV,KAAK,eAAe;AAChB,UAAI,OAAO;AACX,UAAI,OAAO,SAAS,QAAW;AAC3B,WAAG,WAAW,GAAG,OAAO,KAAK;AAC7B,gBAAQ,GAAG;AAAA,MACf;AACA,UAAI,OAAO,SAAS,QAAW;AAC3B,WAAG,WAAW,OAAO,KAAK;AAC1B,gBAAQ,GAAG;AAAA,MACf;AACA,UAAI,OAAO,WAAW,QAAW;AAC7B,WAAG,aAAa,OAAO,OAAO;AAC9B,gBAAQ,GAAG;AAAA,MACf;AACA,UAAI,MAAM;AACN,WAAG,MAAM,IAAI;AAAA,MACjB;AACA;AAAA,IACJ;AAAA,IACA,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,iBAAiB;AAClB,YAAM,EAAE,WAAW,IAAI;AACvB,YAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,YAAM,UAAU,aAAa,SAAS,OAAO,UAAU;AACvD,SAAG,cAAc,GAAG,IAAI,GAAG,cAAc,GAAG,OAAO,OAAO;AAC1D;AAAA,IACJ;AAAA,IACA,KAAK,SAAS;AACV,YAAM,EAAE,WAAW,IAAI;AACvB,YAAM,OAAO,OAAO,QAAQ;AAC5B,YAAM,SAAS,GAAG;AAClB,YAAM,QAAQ,OAAO,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC;AACzC,cAAQ,MAAM;AAAA,QACV,KAAK;AAAS,aAAG,cAAc,QAAQ,cAAc,GAAG,KAAK;AAAG;AAAA,QAChE,KAAK;AAAO,aAAG,cAAc,QAAQ,cAAc,GAAG,KAAK;AAAG;AAAA,QAC9D,KAAK;AAAQ,aAAG,eAAe,QAAQ,cAAc,GAAG,KAAK;AAAG;AAAA,QAChE;AAAS,+BAAqB,IAAI;AAAA,MACtC;AACA;AAAA,IACJ;AAAA,IACA;AAAS,4BAAsB,IAAI;AAAA,EACvC;AACJ;AAmCA,SAAS,sBAAsB,OAAc;AACzC,QAAM,IAAI,MAAM,wBAAwB,KAAK,GAAG;AACpD;AAEA,SAAS,qBAAqB,OAAc;AACxC,QAAM,IAAI,MAAM,6BAA6B,KAAK,GAAG;AACzD;;;ACvFO,SAAS,aAAa,IAA4B,UAAU,OAAO;AACtE,MAAI,MAAM,gBAAgB,IAAI,EAAE;AAChC,MAAI,CAAC,OAAO,SAAS;AACjB,UAAM,oBAAoB,EAAE;AAC5B,oBAAgB,IAAI,IAAI,GAAG;AAAA,EAC/B;AACA,SAAO;AACX;AAEA,SAAS,oBAAoB,IAA4B;AACrD,SAAO;AAAA,IACH,kBAAkB,GAAG,aAAa,wBAAwB;AAAA;AAAA,IAC1D,uBAAuB,GAAG,aAAa,6BAA6B;AAAA,IACpE,aAAa,GAAG,aAAa,oBAAoB;AAAA,IACjD,WAAW,GAAG,aAAa,kBAAkB;AAAA,IAC7C,oBAAoB,GAAG,aAAa,0BAA0B;AAAA,IAC9D,oBAAoB,GAAG,aAAa,iCAAiC;AAAA,IACrE,iBAAiB,GAAG,aAAa,wBAAwB;AAAA,EAC7D;AACJ;AAEA,IAAM,kBAAkB,oBAAI,QAA8C;;;ACnBnE,SAAS,OAAO,IAA4B,QAAoC;AACnF,MAAI,gBAAgB;AACpB,QAAM,OAAO,OAAO,QAAQ;AAC5B,QAAM,gBAAgB,GAAG,IAAI;AAC7B,MAAI,YAAY,MAAM,GAAG;AACrB,UAAM,EAAE,UAAU,IAAI,aAAa,EAAE;AACrC,QAAI,WAAW;AACX,YAAM,EAAE,WAAW,QAAQ,aAAa,IAAI;AAC5C,cAAQ,OAAO,MAAM;AAAA,QACjB,KAAK;AACD,gBAAM,EAAE,YAAY,aAAa,IAAI;AACrC,oBAAU,qBAAqB,eAAe,YAAY,gBAAgB,GAAG,QAAQ,gBAAgB,GAAG,SAAS;AACjH;AAAA,QACJ,KAAK;AACD,gBAAM,EAAE,aAAa,mBAAmB,UAAU,IAAI;AACtD,oBAAU,uBAAuB,eAAe,QAAQ,gBAAgB,GAAG,GAAG,SAAS,GAAG,aAAa,qBAAqB,GAAG,SAAS;AACxI;AAAA,MACR;AACA,YAAM,OAAO,gBAAgB;AAC7B,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,yBAAiB,kBAAkB,OAAO,IAAI,IAAI,GAAG,IAAI;AAAA,MAC7D;AAAA,IACJ,OAAO;AACH,cAAQ,KAAK,6BAA6B;AAAA,IAC9C;AAAA,EACJ,OAAO;AACH,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,YAAY,MAAM,GAAG;AACrB,YAAM,EAAE,cAAc,IAAI;AAC1B,sBAAgB,kBAAkB,OAAO,IAAI,IAAI;AACjD,UAAI,WAAW,MAAM,GAAG;AACpB,WAAG,sBAAsB,eAAe,OAAO,GAAG,OAAO,SAAS,GAAG,OAAO,cAAc,GAAG,aAAa;AAAA,MAC9G,OAAO;AACH,WAAG,oBAAoB,eAAe,OAAO,SAAS,GAAG,OAAO,aAAa;AAAA,MACjF;AAAA,IACJ,OAAO;AACH,sBAAgB,kBAAkB,OAAO,IAAI;AAC7C,UAAI,WAAW,MAAM,GAAG;AACpB,YAAI,QAAQ,MAAM,GAAG;AACjB,aAAG,kBAAkB,eAAe,OAAO,UAAU,OAAO,UAAU,OAAO,GAAG,OAAO,SAAS,GAAG,OAAO,cAAc,CAAC;AAAA,QAC7H,OAAO;AACH,aAAG,aAAa,eAAe,OAAO,GAAG,OAAO,SAAS,GAAG,OAAO,cAAc,CAAC;AAAA,QACtF;AAAA,MACJ,OAAO;AACH,WAAG,WAAW,eAAe,OAAO,SAAS,GAAG,KAAK;AAAA,MACzD;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,iBAAiB,GAAG,WAAW;AAC/B,WAAO,EAAE,QAAQ,GAAG,OAAO,GAAG,WAAW,cAAc;AAAA,EAC3D,WAAW,iBAAiB,GAAG,OAAO;AAClC,WAAO,EAAE,QAAQ,GAAG,OAAO,eAAe,WAAW,EAAE;AAAA,EAC3D,OAAO;AACH,WAAO,EAAE,QAAQ,eAAe,OAAO,GAAG,WAAW,EAAE;AAAA,EAC3D;AACJ;AAEA,SAAS,kBAAkB,aAAqB,eAAuB;AACnE,UAAQ,eAAe;AAAA,IACnB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AAAA,IACL,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB,KAAK;AACD,aAAO,cAAc;AAAA,IACzB;AACI,aAAO;AAAA,EACf;AACJ;AAEA,SAAS,YAAY,QAAuF;AACxG,SAAO,mBAAmB,UAAU,OAAO,iBAAiB;AAChE;AAEA,SAAS,WAAW,QAAwI;AACxJ,SAAO,eAAe,UAAU,OAAO,aAAa;AACxD;AAEA,SAAS,QAAQ,QAAuD;AACpE,SAAO,WAAW,UAAU,SAAS,UAAU,OAAO,SAAS;AACnE;AAEA,SAAS,YAAY,QAAuF;AACxG,SAAO,eAAe,UAAU,OAAO,aAAa;AACxD;;;AC1FO,SAAS,SAAS,IAA4B;AACjD,MAAI,MAAM,YAAY,IAAI,EAAE;AAC5B,MAAI,CAAC,KAAK;AACN,UAAM,gBAAgB,EAAE;AACxB,gBAAY,IAAI,IAAI,GAAG;AAAA,EAC3B;AACA,SAAO;AACX;AAEA,IAAM,cAAc,oBAAI,QAA0C;AAElE,SAAS,gBAAgB,IAA4B;AACjD,QAAM,QAAQ;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAGA,QAAM,SAAS,CAAC;AAChB,aAAW,QAAQ,OAAO;AACtB,WAAO,IAAI,IAAI,GAAG,aAAa,GAAG,IAAI,CAAC;AAAA,EAC3C;AACA,SAAO;AACX;;;ACzDO,SAAS,oBAAoB,IAA4B,QAA6C;AACzG,QAAM,cAAc,GAAG,kBAAkB;AACzC,QAAM,SAAS,SAAS,EAAE;AAC1B,UAAQ,OAAO,OAAO,MAAM,UAAU,OAAO,qBAAqB;AAClE,KAAG,gBAAgB,GAAG,aAAa,WAAW;AAE9C,WAAS,KAAK,SAA6B,YAAoB;AAC3D,UAAM,SAAS,GAAG,QAAQ,IAAI;AAC9B,QAAI,oBAAoB,OAAO,GAAG;AAC9B,YAAM,EAAE,QAAQ,IAAI;AACpB,UAAI,QAAQ,UAAU,QAAW;AAC7B,cAAM,YAAY,GAAG,QAAQ,aAAa,YAAY;AACtD,WAAG,qBAAqB,QAAQ,YAAY,WAAW,SAAS,QAAQ,SAAS,CAAC;AAAA,MACtF,OAAO;AACH,WAAG,wBAAwB,QAAQ,YAAY,SAAS,QAAQ,SAAS,GAAG,QAAQ,KAAK;AAAA,MAC7F;AAAA,IACJ,OAAO;AACH,YAAM,EAAE,aAAa,IAAI;AACzB,SAAG,wBAAwB,QAAQ,YAAY,GAAG,cAAc,YAAY;AAAA,IAChF;AAAA,EACJ;AACA,MAAI,OAAO;AACP,SAAK,OAAO,OAAO,GAAG,gBAAgB;AAC1C,MAAI,OAAO;AACP,SAAK,OAAO,SAAS,GAAG,kBAAkB;AAC9C,MAAI,IAAI,GAAG;AACX,aAAW,SAAS,OAAO,OAAO;AAC9B,QAAI,OAAO;AACP,WAAK,OAAO,CAAC;AAAA,IACjB;AACA;AAAA,EACJ;AAEA,QAAM,QAAQ;AACd,MAAI,OAAO;AACP,UAAM,SAAS,GAAG,uBAAuB,GAAG,WAAW;AACvD,YAAQ,QAAQ;AAAA,MACZ,KAAK,GAAG;AACJ;AAAA,MACJ,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACrD,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC9C,KAAK,GAAG;AACJ,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACzD;AACI,cAAM,IAAI,MAAM,4BAA4B;AAAA,IACpD;AAAA,EACJ;AAEA,KAAG,gBAAgB,GAAG,aAAa,IAAI;AACvC,SAAO;AACX;AAEO,SAAS,wBAAwB,IAA4B,QAAqC;AACrG,MAAI,CAAC,OAAO,aAAa;AACrB;AAAA,EACJ;AACA,QAAM,cAAwB,CAAC;AAC/B,MAAI,OAAO,SAAS,OAAO,SAAS;AAChC,gBAAY,KAAK,GAAG,wBAAwB;AAAA,EAChD,WAAW,OAAO,OAAO;AACrB,gBAAY,KAAK,GAAG,gBAAgB;AAAA,EACxC,WAAW,OAAO,SAAS;AACvB,gBAAY,KAAK,GAAG,kBAAkB;AAAA,EAC1C;AACA,MAAI,IAAI;AACR,aAAW,cAAc,OAAO,OAAO;AACnC,QAAI,YAAY;AACZ,kBAAY,KAAK,GAAG,oBAAoB,CAAC;AAAA,IAC7C;AACA;AAAA,EACJ;AACA,QAAM,EAAE,aAAa,KAAK,IAAI;AAC9B,QAAM,SAAS,GAAG,IAAI;AACtB,KAAG,gBAAgB,QAAQ,WAAW;AACtC,KAAG,sBAAsB,QAAQ,WAAW;AAC5C,KAAG,gBAAgB,QAAQ,IAAI;AACnC;AAEA,SAAS,oBAAoB,YAAyE;AAClG,SAAO,OAAO,cAAc,YAAY,aAAa;AACzD;;;ACpBO,SAAS,kBAAkB,MAAc;AAC5C,UAAQ,MAAM;AAAA,IACV,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,aAAO;AAAA,EAGf;AACA,QAAM,IAAI,MAAM,wBAAwB,IAAI,GAAG;AACnD;;;AC7FO,UAAU,mBAAmB,IAA+D;AAC/F,MAAI,aAAa,EAAE,EAAE,WAAW;AAC5B,UAAM;AAAA,MACF,MAAM;AAAA,MACN,WAAW;AAAA,IACf;AAAA,EACJ;AACJ;AAGO,SAAS,UAAU,IAA4B,QAAmC;AACrF,QAAM,SAAS,OAAO;AACtB,QAAM,SAAS,GAAG,aAAa,GAAG,OAAO,IAAI,CAAC;AAC9C,KAAG,aAAa,QAAQ,MAAM;AAC9B,KAAG,cAAc,MAAM;AACvB,SAAO;AACX;AAIO,SAAS,qBAAqB,IAA4B,QAA4B;AACzF,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,aAAa,aAAa,IAAI,MAAM;AAC1C,QAAM,SAAS,UAAU,IAAI,EAAE,MAAM,iBAAiB,QAAQ,aAAa,OAAO,aAAa,CAAC;AAChG,QAAM,WAAW,UAAU,IAAI,EAAE,MAAM,mBAAmB,QAAQ,cAAc,OAAO,kBAAkB,kBAAkB,CAAC;AAC5H,QAAM,UAAU,GAAG,cAAc;AACjC,KAAG,aAAa,SAAS,MAAM;AAC/B,KAAG,aAAa,SAAS,QAAQ;AACjC,SAAO,EAAE,SAAS,QAAQ,SAAS;AACvC;AAEO,SAAS,eAAe,IAA4B,QAAiD;AACxG,QAAM,EAAE,SAAS,QAAQ,SAAS,IAAI;AACtC,MAAI,GAAG,oBAAoB,SAAS,GAAG,WAAW,KAAK,GAAG,cAAc,GAAG;AACvE,YAAQ,OAAO,GAAG,oBAAoB,SAAS,GAAG,gBAAgB,KAAK,CAAC;AACxE,OAAG,aAAa,SAAS,MAAM;AAC/B,OAAG,aAAa,SAAS,QAAQ;AACjC,OAAG,aAAa,MAAM;AACtB,OAAG,aAAa,QAAQ;AAAA,EAC5B,OAAO;AACH,UAAM,SAAS,EAAE,MAAM,GAAG,kBAAkB,OAAO,GAAG,QAAQ,GAAG,iBAAiB,MAAM,GAAG,UAAU,GAAG,iBAAiB,QAAQ,EAAE;AACnI,WAAO;AAAA,EACX;AACJ;AAEO,SAAS,gBAAgB,IAA4B,QAAuB;AAC/E,QAAM,EAAE,OAAO,mBAAmB,qBAAqB,iBAAiB,aAAa,YAAY,IAAI;AACrG,QAAM,aAAuB,CAAC;AAC9B,MAAI,aAAa,EAAE,EAAE,WAAW;AAC5B,eAAW,KAAK,4CAA4C;AAAA,EAChE;AACA,QAAM,gBAAgB;AAAA,EAAoB,WAAW,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAC7D,QAAM,SAAS,eAAe;AAC9B,QAAM,UAAU,OAAO,IAAI,UAAQ,WAAW,IAAI;AAAA,CAAI,GAAG,KAAK,EAAE,KAAK;AACrE,QAAM,SAAS,eAAe;AAC9B,QAAM,KAAK,SAAS,UAAU,SAAS,OAAO;AAC9C,QAAM,KAAK,SAAS,UAAU,UAAU,OAAO,kBAAkB;AACjE,QAAM,eAAe,cAAc,IAAI,iBAAiB,EAAE;AAC1D,QAAM,iBAAiB,cAAc,IAAI,mBAAmB,EAAE;AAC9D,QAAM,UAAU,GAAG,cAAc;AAEjC,KAAG,aAAa,SAAS,YAAY;AACrC,KAAG,aAAa,SAAS,cAAc;AAEvC,MAAI,mBAAmB;AACnB,UAAM,EAAE,UAAU,WAAW,IAAI;AACjC,OAAG,0BAA0B,SAAS,UAAU,GAAG,UAAU,CAAC;AAAA,EAClE;AAGA,KAAG,YAAY,OAAO;AACtB,KAAG,gBAAgB,OAAO;AAE1B,KAAG,aAAa,SAAS,YAAY;AACrC,KAAG,aAAa,SAAS,cAAc;AACvC,KAAG,aAAa,YAAY;AAC5B,KAAG,aAAa,cAAc;AAE9B,MAAI,CAAC,GAAG,oBAAoB,SAAS,GAAG,WAAW,KAAK,CAAC,GAAG,cAAc;AACtE,UAAM,IAAI,MAAM;AAAA,EAAsC,GAAG,kBAAkB,OAAO,CAAC,EAAE;AAEzF,KAAG,WAAW,OAAO;AAErB,MAAI,qBAAqB;AACrB,QAAI,MAAM;AACV,eAAW,QAAQ,qBAAqB;AACpC,UAAI,MAAM;AACN,cAAM,aAAa,GAAG,qBAAqB,SAAS,IAAI;AACxD,YAAI,cAAc,GAAG,eAAe;AAChC,aAAG,oBAAoB,SAAS,YAAY,GAAG;AAAA,QACnD,OAAO;AACH,kBAAQ,KAAK,sCAAsC,IAAI,GAAG;AAAA,QAC9D;AAAA,MACJ;AACA;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,iBAAiB;AACjB,QAAI,IAAI;AACR,eAAW,QAAQ,iBAAiB;AAChC,YAAM,WAAW,GAAG,mBAAmB,SAAS,IAAI;AACpD,SAAG,UAAU,UAAU,GAAG;AAAA,IAC9B;AAAA,EACJ;AAEA,KAAG,WAAW,IAAI;AAClB,SAAO;AACX;AAEA,SAAS,cAAc,IAA4B,MAA2C,QAA6B;AACvH,QAAM,SAAS,GAAG,aAAa,GAAG,IAAI,CAAC;AACvC,KAAG,aAAa,QAAQ,MAAM;AAC9B,KAAG,cAAc,MAAM;AACvB,MAAI,CAAC,GAAG,mBAAmB,QAAQ,GAAG,cAAc,KAAK,CAAC,GAAG,cAAc,GAAG;AAC1E,UAAM,WAAW,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,kBAAkB;AACtD,UAAM,WAAW,GAAG,iBAAiB,MAAM;AAC3C,UAAM,IAAI,MAAM,4BAA4B,QAAQ;AAAA,EAAe,QAAQ,EAAE;AAAA,EACjF;AACA,SAAO;AACX;AAEA,SAAS,oBAAoB,IAAgD;AACzE,SAAO;AAAA,IACH,SAAS;AAAA,IACT,YAAY,CAAC,GAAG,mBAAmB,EAAE,CAAC;AAAA,IACtC,mBAAmB;AAAA,MACf,OAAO;AAAA,MACP,KAAK;AAAA,MACL,WAAW;AAAA,MACX,aAAa;AAAA,MACb,WAAW;AAAA,MACX,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,sBAAsB;AAAA,MACtB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,iBAAiB;AAAA,IACrB;AAAA,IACA,OAAO,CAAC;AAAA,IACR,SAAS,CAAC;AAAA,IACV,aAAa;AAAA,EACjB;AACJ;AAEA,SAAS,aAAa,IAA4B,QAAkE;AAChH,MAAI,CAAC;AACD,WAAO;AACX,MAAI,OAAO,UAAU;AACjB,WAAO;AACX,QAAM,IAAI,EAAE,GAAG,oBAAoB,EAAE,GAAG,GAAG,OAAO;AAClD,QAAM2C,WAAU,YAAY,EAAE,OAAO;AAAA;AACrC,QAAM,aAAa,EAAE,WAAW,IAAI,SAAO,cAAc,IAAI,IAAI,MAAM,IAAI,SAAS;AAAA,CAAI,EAAE,KAAK,EAAE;AACjG,QAAM,aAAa,OAAO,QAAQ,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC,MAAM,SAAS,MAAO,aAAa,SAAS,KAAK,IAAI;AAAA,CAAM,EAAE,KAAK,EAAE;AACjI,QAAM,QAAQ,EAAE,MAAM,IAAI,UAAQ,WAAW,IAAI;AAAA,CAAI,EAAE,KAAK,EAAE;AAC9D,QAAM,UAAU,EAAE,QAAQ,IAAI,SAAO,WAAW,IAAI,IAAI,IAAI,IAAI,KAAK;AAAA,CAAI,EAAE,KAAK,EAAE;AAClF,QAAM,SAAS,EAAE;AACjB,QAAM,SAASA,WAAU,aAAa,aAAa,QAAQ,UAAU;AACrE,SAAO;AACX;;;ACzKO,SAAS,aAAa,IAA4B,QAA0B;AAC/E,QAAM,IAAI,OAAO,KAAK;AACtB,QAAM,IAAI,OAAO,KAAK;AACtB,QAAM,QAAQ,OAAO,SAAS,GAAG;AACjC,QAAM,SAAS,OAAO,UAAU,GAAG;AACnC,KAAG,gBAAgB,GAAG,aAAa,OAAO,WAAW;AACrD,aAAW,EAAE,QAAQ,YAAY,QAAQ,KAAK,KAAK,OAAO,SAAS;AAC/D,OAAG,WAAW,GAAG,mBAAmB,MAAM;AAC1C,OAAG,WAAW,GAAG,UAAU,CAAC;AAC5B,OAAG,WAAW,GAAG,GAAG,OAAO,QAAQ,GAAG,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC;AAAA,EAC9D;AAEA,KAAG,gBAAgB,GAAG,aAAa,IAAI;AACvC,KAAG,WAAW,GAAG,mBAAmB,IAAI;AACxC,KAAG,WAAW,GAAG,IAAI;AACzB;;;ACbO,SAAS,qBAAqB,IAA4B,QAA+C;AAC5G,QAAM,SAAS,SAAS,EAAE;AAC1B,QAAM,SAAS,GAAG,mBAAmB;AACrC,QAAM,EAAE,gBAAgB,OAAO,OAAO,IAAI;AAC1C,QAAM,UAAU,OAAO,WAAW,SAAY,IAAI,OAAO,YAAY,QAAQ,OAAO,cAAc,OAAO;AACzG,UAAQ,OAAO,WAAW,OAAO,WAAW;AAC5C,KAAG,iBAAiB,GAAG,cAAc,MAAM;AAC3C,MAAI,OAAO,YAAY,QAAW;AAC9B,OAAG,oBAAoB,GAAG,cAAc,GAAG,cAAc,GAAG,OAAO,MAAM;AAAA,EAC7E,OAAO;AACH,OAAG,+BAA+B,GAAG,cAAc,SAAS,GAAG,cAAc,GAAG,OAAO,MAAM;AAAA,EACjG;AACA,KAAG,iBAAiB,GAAG,cAAc,IAAI;AACzC,SAAO;AACX;;;ACVO,SAAS,gBAAgB,IAA4B,QAAqC;AAC7F,QAAM,UAAU,GAAG,cAAc;AACjC,KAAG,YAAY,GAAG,OAAO;AACzB,QAAM,EAAE,oBAAoB,qBAAqB,QAAQ,QAAQ,MAAAC,OAAM,iBAAiB,YAAY,IAAI;AACxG,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,oBAAoB,GAAG,kBAAkB,CAAC;AAC/E,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,oBAAoB,GAAG,mBAAmB,CAAC;AAChF,MAAIA,OAAM;AACN,UAAM,CAAC,GAAG,GAAG,CAAC,IAAIA;AAClB,OAAG,kBAAkB,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAC;AACtD,OAAG,kBAAkB,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAC;AACtD,QAAI;AACA,SAAG,kBAAkB,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAC;AAAA,EAC9D;AACA,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,iBAAiB,MAAM;AAC5D,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,iBAAiB,MAAM;AAC5D,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,sBAAsB,GAAG,eAAe,CAAC;AAC9E,MAAI;AACA,OAAG,kBAAkB,SAAS,GAAG,sBAAsB,GAAG,WAAW,CAAC;AAC1E,SAAO;AACX;;;AC3BO,SAAS,QAAQ,IAA4B,QAA4B;AAC5E,MAAI,CAAC,QAAQ;AACT,UAAM,SAAS,SAAS,EAAE;AAC1B,aAAS,eAAe,MAAM;AAAA,EAClC;AAEA,QAAM,EAAE,OAAO,MAAM,OAAO,SAAS,QAAQ,SAAS,SAAS,aAAa,mBAAmB,aAAa,mBAAmB,UAAU,UAAU,eAAe,IAAI;AAEtK,WAAS,QAAQ,KAAmD,OAA4B;AAC5F,QAAI,UAAU,QAAW;AACrB,UAAI,OAAO;AACP,WAAG,OAAO,GAAG,GAAG,CAAC;AAAA,MACrB,OAAO;AACH,WAAG,QAAQ,GAAG,GAAG,CAAC;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAEA,WAASC,KAAO,QAA+D,QAAW,kBAAuB,MAA4B;AACzI,QAAI,KAAK,KAAK,SAAO,OAAQ,GAAG,MAAM,MAAS,GAAG;AAC9C,YAAM,OAAO,KAAK,IAAI,SAAO;AACzB,cAAM,IAAI,OAAQ,GAAG,KAAK,cAAc,GAAG;AAC3C,eAAO,OAAO,KAAK,WAAW,GAAG,CAAiC,IAAI;AAAA,MAC1E,CAAC;AACD,MAAW,OAAQ,MAAM,IAAI,IAAI;AAAA,IACrC;AAAA,EACJ;AAEA,UAAQ,UAAU,OAAO,YAAY;AACrC,UAAQ,sBAAsB,OAAO,iBAAiB;AACtD,EAAAA,KAAI,CAAC,SAAwD;AAAE,OAAG,UAAU,GAAG,IAAI;AAAA,EAAG,GAAG,QAAQ,WAAW;AAC5G,EAAAA,KAAI,UAAQ,GAAG,SAAS,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,MAAM,GAAG,QAAQ,kBAAkB,UAAU;AAEhH,MAAI,OAAO;AACP,UAAM,gBAAgB,iBAAiB;AACvC,UAAM,EAAE,mBAAmB,IAAI,aAAa,EAAE;AAC9C,QAAI,oBAAoB;AAEpB,UAAI,MAAM,QAAQ;AACd,2BAAmB,WAAW,GAAG,OAAO,CAAC;AAAA,MAC7C,OAAO;AACH,2BAAmB,YAAY,GAAG,OAAO,CAAC;AAAA,MAC9C;AACA,MAAAA,KAAI,CAAC,SAAS,cAAc,mBAAmB,0BAA0B,GAAG,SAAS,SAAS,GAAG,OAAO,eAAe,eAAe,eAAe;AACrJ,MAAAA,KAAI,CAAC,QAAQ,QAAQ,UAAU,aAAa,mBAAmB,sBAAsB,GAAG,QAAQ,QAAQ,UAAU,QAAQ,GAAG,OAAO,eAAe,UAAU,UAAU,YAAY,UAAU;AAAA,IACjM,OAAO;AACH,cAAQ,SAAS,MAAM,MAAM;AAC7B,MAAAA,KAAI,GAAG,uBAAuB,OAAO,eAAe,eAAe,eAAe;AAClF,MAAAA,KAAI,GAAG,mBAAmB,OAAO,eAAe,UAAU,UAAU,YAAY,UAAU;AAAA,IAC9F;AACA,IAAAA,KAAI,CAAC,SAAoD;AAAE,SAAG,WAAW,GAAG,IAAI;AAAA,IAAG,GAAG,OAAO,eAAe,OAAO;AAAA,EACvH;AAEA,MAAI,MAAM;AACN,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,aAAa,KAAK,MAAM;AAChC,IAAAA,KAAI,GAAG,UAAU,MAAM,eAAe,MAAM;AAC5C,IAAAA,KAAI,GAAG,WAAW,MAAM,eAAe,WAAW;AAAA,EACtD;AAEA,MAAI,OAAO;AACP,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,cAAc,MAAM,IAAI;AAChC,IAAAA,KAAI,GAAG,WAAW,OAAO,eAAe,MAAM;AAC9C,IAAAA,KAAI,GAAG,WAAW,OAAO,eAAe,WAAW;AACnD,IAAAA,KAAI,CAAC,UAAqC,GAAG,WAAW,GAAG,KAAK,GAAG,OAAO,eAAe,OAAO;AAAA,EACpG;AAEA,MAAI,SAAS;AACT,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,uBAAuB,QAAQ,UAAU;AACjD,IAAAA,KAAI,GAAG,eAAe,SAAS,eAAe,gBAAgB,aAAa;AAAA,EAC/E;AAEA,MAAI,QAAQ;AACR,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,4BAA4B,OAAO,eAAe;AAC1D,YAAQ,mBAAmB,OAAO,QAAQ;AAC1C,IAAAA,KAAI,GAAG,gBAAgB,QAAQ,eAAe,iBAAiB,gBAAgB;AAAA,EACnF;AAEA,MAAI,SAAS;AACT,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,gBAAgB,QAAQ,IAAI;AACpC,IAAAA,KAAI,UAAQ,GAAG,QAAQ,KAAK,KAAK,GAAG,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,MAAM,GAAG,SAAS,eAAe,KAAK;AAAA,EAC5G;AAEA,MAAI,SAAS;AACT,UAAM,gBAAgB,iBAAiB;AACvC,YAAQ,gBAAgB,QAAQ,IAAI;AACpC,IAAAA,KAAI,CAAC,MAAM,KAAK,SAAS,GAAG,oBAAoB,GAAG,OAAO,MAAM,KAAK,IAAI,GAAG,SAAS,eAAe,QAAQ,OAAO,WAAW;AAC9H,IAAAA,KAAI,CAAC,MAAM,KAAK,SAAS,GAAG,oBAAoB,GAAG,MAAM,MAAM,KAAK,IAAI,GAAG,SAAS,eAAe,YAAY,WAAW,eAAe;AAAA,EAC7I;AAEA,MAAI,sBAAsB,QAAW;AACjC,OAAG,gBAAgB,iBAAiB;AAAA,EACxC;AAEA,MAAI,gBAAgB,QAAW;AAC3B,OAAG,gBAAgB,GAAG,aAAa,WAAW;AAAA,EAClD;AAEA,MAAI,aAAa;AACb,OAAG,YAAY,YAAY,IAAI,OAAK,GAAG,CAAE,CAAC,CAAC;AAAA,EAC/C;AAEA,QAAM,EAAE,QAAQ,IAAI;AACpB,MAAI,YAAY,QAAW;AACvB,OAAG,WAAW,OAAO;AAAA,EACzB;AAEA,MAAI,mBAAmB;AACnB,aAAS,IAAI,GAAG,IAAI,kBAAkB,QAAQ,KAAK;AAC/C,YAAM,WAAW,kBAAkB,CAAC;AACpC,UAAI,UAAU;AACV,cAAM,EAAE,MAAM,OAAO,IAAI;AACzB,WAAG,eAAe,IAAI,GAAG,EAAE,GAAG,MAAM;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,UAAU;AACV,UAAM,WAAW,GAAG;AACpB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAM,UAAU,SAAS,CAAC;AAC1B,YAAM,UAAU,SAAS,WAAW;AACpC,SAAG,cAAc,WAAW,CAAC;AAC7B,SAAG,YAAY,GAAG,SAAS,QAAQ,YAAY,GAAG,OAAO;AACzD,YAAM,UAAU,SAAS,WAAW;AACpC,SAAG,YAAY,GAAG,OAAO;AACzB,SAAG,UAAU,SAAS,WAAW,MAAM,CAAC;AAAA,IAC5C;AACA,OAAG,cAAc,QAAQ;AAAA,EAC7B;AAEA,MAAI,UAAU;AACV,QAASC,YAAT,SAAkB,SAA0D;AACxE,aAAO,QAAQ,KAAK,WAAW,QAAQ;AAAA,IAC3C,GACSC,YAAT,SAAkB,SAA0D;AACxE,aAAO,QAAQ,KAAK,WAAW,GAAG;AAAA,IACtC;AALS,QAAAD,uBAGA,WAAAC;AAGT,eAAW,WAAW,UAAU;AAC5B,UAAID,UAAS,OAAO,GAAG;AACnB,cAAM,aAAa,UAAU,QAAQ,IAAI;AACzC,WAAG,UAAU,EAAE,QAAQ,UAAU,QAAQ,aAAa,OAAO,QAAQ,KAAK;AAAA,MAC9E,WAAWC,UAAS,OAAO,GAAG;AAC1B,cAAM,aAAa,UAAU,QAAQ,IAAI;AACzC,WAAG,UAAU,EAAE,QAAQ,UAAU,QAAQ,KAAK;AAAA,MAClD,OAAO;AACH,cAAM,aAAa,UAAU,QAAQ,IAAI;AACzC,WAAG,UAAU,EAAE,QAAQ,UAAU,QAAQ,KAAK;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,gBAAgB;AAChB,QAAI,MAAM;AACV,eAAW,wBAAwB,gBAAgB;AAC/C,UAAI,yBAAyB;AACzB;AACJ,UAAI,4BAA4B,oBAAoB,GAAG;AACnD,cAAM,EAAE,QAAQ,YAAY,SAAS,IAAI;AACzC,WAAG,gBAAgB,GAAG,gBAAgB,KAAK,QAAQ,YAAY,QAAQ;AAAA,MAC3E,OAAO;AACH,WAAG,eAAe,GAAG,gBAAgB,KAAK,oBAAoB;AAAA,MAClE;AACA;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,SAAS,eAAe,QAAyB;AACpD,SAAO;AAAA,IACH,GAAG;AAAA,IACH,aAAa,CAAC,MAAM;AAAA,IACpB,mBAAmB,MAA+B,OAAO,kBAAkB,EAAE,KAAK,EAAE,MAAM,MAAM,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;AAAA,IACtH,UAAU,MAA6B,OAAO,gCAAgC,EAAE,KAAK,IAAI;AAAA,EAC7F;AACJ;AAwJA,SAAS,4BAA4B,QAA6F;AAC9H,SAAO,UAAU,QAAQ,gBAAgB,UAAU,cAAc;AACrE;AAEA,IAAM,mBAAmB;AAAA,EACrB,OAAO;AAAA,IACH,QAAQ;AAAA;AAAA,IACR,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA;AAAA,IAClB,UAAU;AAAA;AAAA,IACV,QAAQ;AAAA;AAAA,IACR,eAAe;AAAA;AAAA,IACf,aAAa;AAAA;AAAA,IACb,UAAU;AAAA;AAAA,IACV,QAAQ;AAAA;AAAA,EACZ;AAAA,EAEA,MAAM;AAAA,IACF,QAAQ;AAAA;AAAA,IACR,MAAM;AAAA;AAAA,IACN,WAAW;AAAA;AAAA,EACf;AAAA,EAEA,OAAO;AAAA,IACH,MAAM;AAAA;AAAA,IACN,MAAM;AAAA;AAAA,IACN,WAAW;AAAA;AAAA,IACX,OAAO,CAAC,GAAG,CAAC;AAAA;AAAA,EAChB;AAAA,EAEA,cAAc;AAAA;AAAA,EAEd,WAAW,CAAC,MAAM,MAAM,MAAM,IAAI;AAAA,EAElC,SAAS;AAAA,IACL,YAAY;AAAA;AAAA,IACZ,cAAc;AAAA;AAAA,IACd,aAAa;AAAA;AAAA,EACjB;AAAA,EAEA,QAAQ;AAAA,IACJ,iBAAiB;AAAA;AAAA,IACjB,UAAU;AAAA;AAAA,IACV,eAAe;AAAA;AAAA,IACf,gBAAgB;AAAA;AAAA,EACpB;AAAA,EAEA,SAAS;AAAA,IACL,MAAM;AAAA;AAAA,IACN,MAAM;AAAA;AAAA,IACN,WAAW;AAAA;AAAA,IACX,KAAK;AAAA;AAAA,IACL,UAAU;AAAA;AAAA,IACV,eAAe;AAAA;AAAA,IACf,SAAS;AAAA;AAAA,EACb;AAAA,EAEA,UAAU;AAAA;AAAA,IACN,GAAG;AAAA,IACH,GAAG;AAAA,IACH,OAAO;AAAA,IACP,QAAQ;AAAA,EACZ;AAAA,EAEA,SAAS;AAAA,IACL,MAAM;AAAA;AAAA,IACN,KAAK;AAAA;AAAA,MACD,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EAEA,mBAAmB;AAAA;AAAA,EAEnB,aAAa;AAAA,EACb,mBAAmB;AAAA,EAEnB,SAAS;AAAA,EACT,UAAU,CAAC;AAAA,EACX,gBAAgB,CAAC;AAAA;AACrB;;;AC5ZO,SAAS,gBAAgB,IAA4B,QAAuB;AAC/E,QAAM,UAAU,GAAG,cAAc;AACjC,QAAM,QAAQ,OAAO,SAAS,OAAO,MAAM;AAC3C,QAAM,SAAS,OAAO,UAAU,OAAO,MAAM;AAC7C,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,KAAG,cAAc,GAAG,QAAQ;AAC5B,KAAG,YAAY,QAAQ,OAAO;AAE9B,QAAM,EAAE,gBAAgB,QAAQ,MAAM,UAAU,IAAI,cAAc,IAAI,OAAO,gBAAgB,UAAU,SAAS,OAAO,OAAO,MAAS;AAIvI,WAAS,aAAa,WAAwB,MAA2B,OAAe,OAAe,OAAe,QAAQ,GAAG;AAC7H,QAAI,CAAC;AACD;AACJ,UAAM,SAAS;AACf,UAAM,OAAO,YAAY,OAAO,MAAM,IAAI,SAAS;AACnD,UAAM,SAAS,YAAY,OAAO,IAAI,IAAI,KAAK,SAAS;AACxD,UAAM,aAAa,MAAM,cAAc;AACvC,UAAM,aAAa,MAAM,cAAc,QAAQ;AAC/C,UAAM,SAAS,WAAW,OAAO,OAAO,IAAI,UAAU,QAAQ,YAAY,aAAa,UAAU,iBAAiB;AAClH,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,QAAI,MAAM;AACN,UAAI,OAAO;AACP,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrH,OAAO;AACH,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrG;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxH,OAAO;AACH,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxG;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,gBAAgB,OAAe,OAAsD;AAC1F,aAAS,QAAQ,KAAmD;AAChE,aAAO,MAAM,QAAQ,GAAG;AAAA,IAC5B;AACA,UAAM,IAAI,KAAK;AACf,QAAI,QAAQ,KAAK,GAAG;AAChB,cAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,YAAY;AACZ,YAAI,OAAO,GAAG;AACd,iBAAS,OAAO,OAAO;AACnB,uBAAc,QAAwB,KAAK,OAAO,QAAQ,GAAG,SAAS,CAAC;AAAA,QAC3E;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,YAAI,UAAU,GAAG,YAAY;AACzB,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC;AAAA,QAC9E,OACK;AACD,kBAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,KAAK;AAAA,QAC1E;AAAA,MACJ,OAAO;AACH,gBAAQ,OAAO,UAAU,GAAG,UAAU;AACtC,qBAAa,GAAG,YAAY,OAAO,OAAO,OAAO,MAAM;AAAA,MAC3D;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,eAAe,SAAiB,GAAG;AACxC,QAAI,OAAO;AACP,SAAG,aAAa,QAAQ,QAAQ,gBAAgB,OAAO,QAAQ,KAAK;AAAA,IACxE,OAAO;AACH,SAAG,aAAa,QAAQ,QAAQ,gBAAgB,OAAO,MAAM;AAAA,IACjE;AAAA,EACJ;AAEA,MAAI,aAAa,QAAQ;AAErB,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,WAAW,OAAO,WAAW;AACnC,UAAM,SAAS,WAAW,UAAU,QAAQ;AAC5C,mBAAe,MAAM;AACrB,QAAI,CAAC,UAAU;AACX,eAAS,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AACzC,cAAM,SAAS,QAAQ,KAAK;AAC5B,YAAI,QAAQ;AACR,0BAAgB,OAAO,MAAM;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,WAAW,eAAe,OAAO,KAAK,GAAG;AACrC,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,QAAI,mBAAmB,EAAE,WAAW,KAAK,KAAK,WAAW,MAAM,KAAK,OAAO;AACvE,YAAM,IAAI,MAAM,oEAAoE,KAAK,KAAK,MAAM,IAAI;AAAA,IAC5G;AACA,UAAM,SAAS,kBAAkB,KAAK,KAAK,KAAK,IAAI,OAAO,MAAM,CAAC,IAAI;AACtE,mBAAe,MAAM;AACrB,oBAAgB,GAAG,OAAO,KAAK;AAC/B,QAAI,mBAAmB,OAAO,OAAO;AACjC,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ,OAAO;AACH,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,OAAG,WAAW,GAAG,YAAY,GAAG,gBAAgB,OAAO,QAAQ,GAAG,QAAS,MAAO,OAAO,KAA2B;AACpH,QAAI,mBAAmB,WAAW,KAAK,KAAK,WAAW,MAAM,GAAG;AAC5D,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ;AACA,KAAG,YAAY,QAAQ,IAAI;AAC3B,SAAO;AACX;AAEO,SAAS,gBAAgB,IAA4B,eAA6B,QAAuB;AAC5G,QAAM,QAAQ,OAAO,SAAS,OAAO,MAAM;AAC3C,QAAM,SAAS,OAAO,UAAU,OAAO,MAAM;AAC7C,QAAM,SAAS,GAAG,OAAO,IAAI;AAC7B,QAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,KAAG,cAAc,GAAG,QAAQ;AAC5B,KAAG,YAAY,QAAQ,aAAa;AAEpC,QAAM,EAAE,gBAAgB,QAAQ,MAAM,UAAU,IAAI,cAAc,IAAI,OAAO,gBAAgB,UAAU,SAAS,OAAO,OAAO,MAAS;AAIvI,WAAS,aAAa,WAAgD,MAA2B,OAAe,OAAe,OAAe,QAAQ,GAAG;AACrJ,QAAI,CAAC;AACD;AACJ,UAAM,SAAS;AACf,UAAM,OAAO,YAAY,OAAO,MAAM,IAAI,SAAS;AACnD,UAAM,SAAS,YAAY,OAAO,IAAI,IAAI,KAAK,SAAS;AACxD,UAAM,aAAa,MAAM,cAAc;AACvC,UAAM,aAAa,MAAM,cAAc,QAAQ;AAC/C,UAAM,SAAS,WAAW,OAAO,OAAO,IAAI,UAAU,QAAQ,YAAY,aAAa,UAAU,iBAAiB;AAClH,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,UAAM,UAAU;AAChB,QAAI,MAAM;AACN,UAAI,OAAO;AACP,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrH,OAAO;AACH,WAAG,cAAc,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,QAAkB,MAAM,MAAM;AAAA,MACrG;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxH,OAAO;AACH,WAAG,wBAAwB,WAAW,OAAO,SAAS,SAAS,OAAO,OAAO,gBAAgB,MAAO;AAAA,MACxG;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,gBAAgB,OAAe,OAAsD;AAC1F,aAAS,QAAQ,KAAmD;AAChE,aAAO,MAAM,QAAQ,GAAG;AAAA,IAC5B;AACA,UAAM,IAAI,KAAK;AACf,QAAI,QAAQ,KAAK,GAAG;AAChB,cAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,YAAY;AACZ,YAAI,OAAO,GAAG;AACd,iBAAS,OAAO,OAAO;AACnB,uBAAc,QAAwB,KAAK,OAAO,QAAQ,GAAG,SAAS,CAAC;AAAA,QAC3E;AAAA,MACJ;AAAA,IACJ,OAAO;AACH,UAAI,OAAO;AACP,YAAI,UAAU,GAAG,YAAY;AACzB,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC;AAAA,QAC9E,OACK;AACD,kBAAQ,OAAO,UAAU,GAAG,gBAAgB;AAC5C,uBAAa,GAAG,YAAY,OAAO,OAAO,QAAQ,GAAG,SAAS,GAAG,KAAK;AAAA,QAC1E;AAAA,MACJ,OAAO;AACH,gBAAQ,OAAO,UAAU,GAAG,UAAU;AACtC,qBAAa,GAAG,YAAY,OAAO,OAAO,OAAO,MAAM;AAAA,MAC3D;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI,aAAa,QAAQ;AAErB,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,WAAW,OAAO,WAAW;AACnC,UAAM,SAAS,WAAW,UAAU,QAAQ;AAC5C,QAAI,CAAC,UAAU;AACX,eAAS,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AACzC,cAAM,SAAS,QAAQ,KAAK;AAC5B,YAAI,QAAQ;AACR,0BAAgB,OAAO,MAAM;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,WAAW,eAAe,OAAO,KAAK,GAAG;AACrC,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,QAAI,mBAAmB,EAAE,WAAW,KAAK,KAAK,WAAW,MAAM,KAAK,OAAO;AACvE,YAAM,IAAI,MAAM,oEAAoE,KAAK,KAAK,MAAM,IAAI;AAAA,IAC5G;AACA,UAAM,SAAS,kBAAkB,KAAK,KAAK,KAAK,IAAI,OAAO,MAAM,CAAC,IAAI;AACtE,oBAAgB,GAAG,OAAO,KAAK;AAC/B,QAAI,mBAAmB,OAAO,OAAO;AACjC,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ,OAAO;AACH,UAAM,kBAAkB,qBAAqB,UAAU,OAAO;AAC9D,OAAG,YAAY,GAAG,oCAAoC,GAAG,IAAI;AAC7D,OAAG,WAAW,GAAG,YAAY,GAAG,gBAAgB,OAAO,QAAQ,GAAG,QAAS,MAAO,OAAO,KAA2B;AACpH,QAAI,mBAAmB,WAAW,KAAK,KAAK,WAAW,MAAM,GAAG;AAC5D,SAAG,eAAe,MAAM;AAAA,IAC5B;AAAA,EACJ;AACA,KAAG,YAAY,QAAQ,IAAI;AAC/B;AAEA,SAAS,WAAW,OAAe;AAC/B,UAAQ,QAAS,QAAQ,MAAO;AACpC;AAEA,SAAS,mBAAmB,QAAkH;AAC1I,SAAO,OAAO,WAAW,YAAY;AACzC;AAEA,SAAS,eAAe,OAAuC;AAC3D,SAAO,SAAS,UAAa,MAAM,QAAQ,KAAK,KAAK,iBAAiB,eAAe,YAAY,OAAO,KAAK;AACjH;AAEA,SAAS,cAAc,IAA4B,sBAAuF,YAA8B;AACpK,MAAI,mBAAmB,oBAAoB,GAAG;AAC1C,UAAM,iBAAiB,kBAAkB,oBAAoB;AAC7D,UAAM,SAAS;AACf,UAAM,OAAO;AACb,UAAM,YAAY;AAClB,WAAO,EAAE,gBAAgB,QAAQ,MAAM,UAAU;AAAA,EACrD,OAAO;AACH,UAAM,iBAAiB,GAAG,oBAAoB;AAC9C,UAAM,SAAS,4BAA4B,cAAc;AACzD,UAAM,OAAO,GAAG,UAAW;AAC3B,UAAM,YAAY,kBAAkB,UAAW;AAC/C,WAAO,EAAE,gBAAgB,QAAQ,MAAM,UAAU;AAAA,EACrD;AACJ;AAiOA,IAAM,8BAA8B;AAAA,EAChC,eAAO;AAAA,EACP,gBAAQ;AAAA,EACR,2BAAmB;AAAA,EACnB,qBAAa;AAAA,EACb,iBAAS;AAAA,EACT,eAAM;AAAA,EACN,qBAAY;AAAA,EACZ,gBAAO;AAAA,EACP,sBAAa;AAAA,EACb,iBAAQ;AAAA,EACR,uBAAc;AAAA,EACd,mBAAU;AAAA,EACV,kBAAS;AAAA,EACT,oBAAW;AAAA,EACX,kBAAS;AAAA,EACT,wBAAe;AAAA,EACf,qBAAY;AAAA,EACZ,uBAAc;AAAA,EACd,kBAAS;AAAA,EACT,yBAAgB;AAAA,EAChB,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,2BAAkB;AAAA,EAClB,oBAAW;AAAA,EACX,gBAAO;AAAA,EACP,iBAAQ;AAAA,EACR,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,iBAAQ;AAAA,EACR,kBAAS;AAAA,EACT,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,kBAAS;AAAA,EACT,mBAAU;AAAA,EACV,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,mBAAU;AAAA,EACV,oBAAW;AAAA,EACX,oBAAW;AAAA,EACX,qBAAY;AAAA,EACZ,oBAAW;AAAA,EACX,qBAAY;AAAA,EACZ,8BAAqB;AAAA,EACrB,8BAAqB;AAAA,EACrB,+BAAsB;AAAA,EACtB,6BAAoB;AAAA,EACpB,8BAAqB;AACzB;AAGA,IAAM,oBAAoB;AAAA;AAAA,EAEttlBO,SAAS,cAAc,IAA4B,cAAc,OAAc;AAClF,QAAM,EAAE,mBAAmB,IAAI,aAAa,EAAE;AAC9C,MAAI,oBAAoB;AAEpB,OAAG,aAAa,mBAAmB,gBAAgB;AACnD,UAAM,gBAAgB,GAAG,SAAS,mBAAmB,eAAe,mBAAmB,sBAAsB,KAAK,IAAI;AACtH,QAAI;AACA,aAAO,IAAI,WAAW,IAAI,kBAAkB;AAAA;AAE5C,aAAO,IAAI,SAAS,IAAI,kBAAkB;AAAA,EAClD,OAAO;AACH,QAAI,aAAa;AACb,aAAO,IAAI,SAAS,EAAE;AAAA,IAC1B,OAAO;AACH,aAAO,IAAI,UAAU,EAAE;AAAA,IAC3B;AAAA,EACJ;AACJ;AAIA,IAAM,YAAN,MAAgB;AAAA,EAKZ,YAAqB,IAA4B;AAA5B;AACjB,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,UAAU,QAAQ,QAAQ,MAAS;AAAA,EAC5C;AAAA,EAPS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EAOT,UAAU;AAAA,EAAE;AAAA,EACZ,QAAQ;AAAA,EAAE;AAAA,EACV,MAAM;AAAA,EAAE;AAAA,EACR,OAAO;AACH,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,WAAN,MAAe;AAAA,EAQX,YAAqB,IAA4B;AAA5B;AACjB,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,UAAU,IAAI,QAA4B,aAAW;AAAE,WAAK,UAAU;AAAA,IAAS,CAAC;AAAA,EACzF;AAAA,EAVS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACD,YAAY;AAAA,EACZ,UAAU;AAAA,EACV;AAAA,EAOR,UAAU;AACN,SAAK,UAAU,MAAS;AACxB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,QAAQ;AACJ,SAAK,GAAG,SAAS;AACjB,SAAK,YAAY,YAAY,IAAI;AAAA,EACrC;AAAA,EAEA,MAAM;AACF,SAAK,GAAG,SAAS;AACjB,SAAK,UAAU,YAAY,IAAI;AAAA,EACnC;AAAA,EAEA,OAAO;AACH,SAAK,UAAU,KAAK,UAAU,KAAK,SAAS;AAC5C,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,WAAN,MAAe;AAAA,EAOX,YAAqB,IAAqC,KAA0C;AAA/E;AAAqC;AACtD,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,QAAQ,GAAG,YAAY;AAC5B,SAAK,UAAU,IAAI,QAA4B,aAAW;AAAE,WAAK,UAAU;AAAA,IAAS,CAAC;AAAA,EACzF;AAAA,EAVS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACQ;AAAA,EACT;AAAA,EAQR,UAAU;AACN,UAAM,EAAE,IAAI,OAAO,QAAQ,IAAI;AAC/B,OAAG,YAAY,KAAK;AACpB,cAAU,MAAS;AACnB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,QAAQ;AACJ,UAAM,EAAE,IAAI,KAAK,MAAM,IAAI;AAC3B,OAAG,WAAW,IAAI,kBAAkB,KAAK;AAAA,EAC7C;AAAA,EAEA,MAAM;AACF,UAAM,EAAE,IAAI,IAAI,IAAI;AACpB,OAAG,SAAS,IAAI,gBAAgB;AAAA,EACpC;AAAA,EAEA,OAAO;AACH,UAAM,EAAE,IAAI,KAAK,OAAO,QAAQ,IAAI;AACpC,QAAI,WAAW,GAAG,aAAa,IAAI,gBAAgB;AACnD,QAAI,CAAC,UAAU;AACX,YAAM,YAAY,GAAG,kBAAkB,OAAO,GAAG,sBAAsB;AACvE,UAAI,WAAW;AACX,cAAM,cAAc,GAAG,kBAAkB,OAAO,GAAG,YAAY;AAC/D,kBAAU,cAAc,GAAO;AAC/B,aAAK,UAAU;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,YAAY,IAAI,IAAI,KAAK,eAAe,KAAM;AAC9C,gBAAU,MAAS;AACnB,WAAK,UAAU;AACf,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;AAGA,IAAM,aAAN,MAAiB;AAAA,EAQb,YAAqB,IAAqC,KAA0C;AAA/E;AAAqC;AACtD,SAAK,eAAe,YAAY,IAAI;AACpC,SAAK,aAAa,GAAG,YAAY;AACjC,SAAK,WAAW,GAAG,YAAY;AAC/B,SAAK,UAAU,IAAI,QAA4B,CAAC,SAAS,WAAW;AAAE,WAAK,UAAU;AAAA,IAAS,CAAC;AAAA,EACnG;AAAA,EAZS,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACQ;AAAA,EACA;AAAA,EACT;AAAA,EASR,UAAU;AACN,UAAM,EAAE,IAAI,YAAY,UAAU,QAAQ,IAAI;AAC9C,OAAG,YAAY,UAAU;AACzB,OAAG,YAAY,QAAQ;AACvB,cAAU,MAAS;AACnB,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,QAAQ;AACJ,UAAM,EAAE,KAAK,WAAW,IAAI;AAC5B,QAAI,gBAAgB,YAAY,IAAI,aAAa;AAAA,EACrD;AAAA,EAEA,MAAM;AACF,UAAM,EAAE,KAAK,SAAS,IAAI;AAC1B,QAAI,gBAAgB,UAAU,IAAI,aAAa;AAAA,EACnD;AAAA,EAEA,OAAO;AACH,UAAM,EAAE,IAAI,KAAK,YAAY,UAAU,QAAQ,IAAI;AACnD,QAAI,WAAW,GAAG,aAAa,IAAI,gBAAgB;AACnD,QAAI,CAAC,UAAU;AACX,YAAM,YAAY,GAAG,kBAAkB,UAAU,GAAG,sBAAsB;AAC1E,UAAI,WAAW;AACX,cAAM,YAAY,GAAG,kBAAkB,YAAY,GAAG,YAAY;AAClE,cAAM,UAAU,GAAG,kBAAkB,UAAU,GAAG,YAAY;AAC9D,cAAM,cAAc,UAAU;AAC9B,kBAAU,cAAc,GAAO;AAC/B,aAAK,UAAU;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,YAAY,IAAI,IAAI,KAAK,eAAe,KAAM;AAC9C,gBAAU,MAAS;AACnB,WAAK,UAAU;AACf,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;;;ACtLO,SAAS,oBAAoB,IAA4B,QAAiC;AAC7F,QAAM,EAAE,MAAM,mBAAmB,eAAe,OAAO,MAAM,IAAI;AACjE,QAAM,OAAO,GAAG,IAAI;AACpB,KAAG,sBAAsB,GAAG,oBAAoB,iBAAiB;AACjE,WAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,OAAG,eAAe,GAAG,2BAA2B,GAAG,cAAc,CAAC,CAAC;AAAA,EACvE;AACA,KAAG,uBAAuB,IAAI;AAC9B,KAAG,OAAO,GAAG,kBAAkB;AAC/B,KAAG,WAAW,MAAM,SAAS,GAAG,KAAK;AACrC,KAAG,QAAQ,GAAG,kBAAkB;AAChC,KAAG,qBAAqB;AACxB,KAAG,sBAAsB,GAAG,oBAAoB,IAAI;AACpD,WAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,OAAG,eAAe,GAAG,2BAA2B,GAAG,IAAI;AAAA,EAC3D;AACJ;;;ACqCO,SAAS,mBAAsD,IAA4B,SAAuB,OAAU,QAAiB;AAChJ,QAAM,YAAiB,CAAC;AACxB,aAAW,QAAQ,OAAO;AACtB,cAAU,IAAI,IAAI,GAAG,mBAAmB,SAAS,GAAG,UAAU,EAAE,GAAG,IAAI,EAAE;AAAA,EAC7E;AACA,SAAO;AACX;AAGO,SAAS,WAAyD,QAAW;AAEhF,QAAM,aAAgD,CAAC;AACvD,MAAI,SAAS;AACb,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC/C,UAAM,EAAE,WAAW,YAAY,KAAK,IAAI,aAAa,KAAK;AAC1D,UAAM,UAAW,YAAY,KAAO,SAAS,YAAY,KAAK;AAC9D,cAAU;AACV,UAAM,UAAoB,CAAC;AAC3B,aAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACjC,eAAS,YAAY,GAAG,YAAY,YAAY,aAAa;AACzD,gBAAQ,KAAK,QAAQ;AAAA,MACzB;AACA,UAAI,OAAO,GAAG;AACV,iBAAU,SAAS,IAAK,CAAC;AAAA,MAC7B;AAAA,IACJ;AACA,eAAW,GAAG,IAAI;AAAA,EACtB;AACA,QAAM,YAAa,SAAS,IAAK,CAAC,KAAK;AAEvC,QAAM,SAAS,IAAI,YAAY,QAAQ;AACvC,QAAM,QAAQ;AAAA,IACV,KAAK,IAAI,WAAW,MAAM;AAAA,IAC1B,KAAK,IAAI,YAAY,MAAM;AAAA,IAC3B,KAAK,IAAI,aAAa,MAAM;AAAA,EAChC;AACA,QAAM,aAAa;AAAA,IACf,KAAK,CAAC,UAAkB;AACpB,UAAI,CAAC,OAAO,UAAU,KAAK,GAAG;AAC1B,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AAAA,IACJ;AAAA,IACA,KAAK,CAAC,UAAkB;AACpB,UAAI,QAAQ,KAAK,CAAC,OAAO,UAAU,KAAK,GAAG;AACvC,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC5D;AAAA,IACJ;AAAA,IACA,KAAK,CAAC,UAAkB;AAAA,IAAE;AAAA,EAC9B;AAEA,QAAM,aAAa,IAAI,WAAW,QAAQ;AAE1C,QAAMC,SAAQ;AAAA,IACV;AAAA,IACA;AAAA,IACA,QAAQ,CAAC;AAAA,EACb;AAEA,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC/C,UAAM,gBAAgB,aAAa,KAAK,EAAE;AAC1C,UAAM,OAAO,MAAM,aAAa;AAChC,UAAM,WAAW,WAAW,aAAa;AACzC,UAAM,UAAU,WAAW,GAAG;AAC9B,UAAM,QAAQ,QAAQ,CAAC,IAAI;AAC3B,UAAM,MAAM,QAAQ,QAAQ,SAAS,CAAC,IAAI,IAAI;AAC9C,UAAM,OAAO,OAAO,GAAG;AACvB,UAAM,MACF,QAAQ,SAAS,MAAM;AACnB,aAAO,KAAK,QAAQ,CAAC,CAAC,KAAK;AAAA,IAC/B,IAAI,QAAQ,SAAS,QAAQ,UAAU,QAAQ,UAAU,MAAM;AAC3D,aAAO,KAAK,QAAQ,CAAC,CAAC;AAAA,IAC1B,IAAI,MAAM;AACN,aAAO,QAAQ,IAAI,OAAK,KAAK,CAAC,CAAC;AAAA,IACnC;AAEJ,UAAMC,OACF,QAAQ,SAAS,CAACC,WAAmB;AACjC,WAAK,QAAQ,CAAC,CAAC,IAAIA,SAAQ,KAAK;AAChC,iBAAW,OAAO,OAAO,GAAG;AAAA,IAChC,IAAI,QAAQ,SAAS,QAAQ,UAAU,QAAQ,UAAU,CAACA,WAAkB;AACxE,eAASA,MAAK;AACd,WAAK,QAAQ,CAAC,CAAC,IAAIA;AACnB,iBAAW,OAAO,OAAO,GAAG;AAAA,IAChC,IAAI,CAACC,YAA8B;AAC/B,cAAQ,OAAOA,QAAO,UAAU,QAAQ,MAAM;AAC9C,eAAS,IAAI,GAAG,IAAIA,QAAO,QAAQ,KAAK;AACpC,iBAASA,QAAO,CAAC,CAAC;AAClB,aAAK,QAAQ,CAAC,CAAC,IAAIA,QAAO,CAAC;AAAA,MAC/B;AACA,iBAAW,OAAO,OAAO,GAAG;AAAA,IAChC;AAEJ,YAAQ,eAAeH,OAAM,QAAQ,KAAK;AAAA,MACtC,cAAc;AAAA,MACd,YAAY;AAAA,MACZ;AAAA,MACA,KAAAC;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,SAAOD;AACX;AAEA,IAAM,aAAN,MAAiB;AAAA,EAIb,YAAqB,MAAc;AAAd;AACjB,SAAK,QAAQ;AACb,SAAK,MAAM;AAAA,EACf;AAAA,EANA;AAAA,EACA;AAAA,EAOA,IAAI,UAAU;AACV,WAAO,KAAK,SAAS,KAAK;AAAA,EAC9B;AAAA,EAEA,QAAQ;AACJ,SAAK,QAAQ,KAAK;AAClB,SAAK,MAAM;AAAA,EACf;AAAA,EAEA,QAAQ;AACJ,SAAK,QAAQ;AACb,SAAK,MAAM,KAAK;AAAA,EACpB;AAAA,EAEA,OAAO,OAAe,KAAa;AAC/B,QAAI,KAAK,QAAQ,OAAO;AACpB,WAAK,QAAQ;AAAA,IACjB;AACA,QAAI,KAAK,MAAM,KAAK;AAChB,WAAK,MAAM;AAAA,IACf;AAAA,EACJ;AACJ;AAQA,IAAM,eAAe;AAAA,EACjB,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC1D,KAAK,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EACzD,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC1D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE1D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE1D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,OAAO,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC3D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAE1D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAAA,EAC1D,MAAM,EAAE,MAAM,OAAO,WAAW,GAAG,YAAY,GAAG,MAAM,EAAE;AAC9D;;;ACrNO,SAAS,oBAAoB,IAA4B,QAAmD;AAC/G,QAAM,MAAM,GAAG,kBAAkB;AACjC,QAAM,EAAE,mBAAmB,IAAI,SAAS,EAAE;AAC1C,KAAG,gBAAgB,GAAG;AACtB,QAAM,EAAE,WAAW,IAAI;AACvB,WAAS,IAAI,GAAG,IAAI,oBAAoB,KAAK;AACzC,UAAM,eAAe,WAAW,CAAC;AACjC,QAAI,cAAc;AACd,YAAM,EAAE,MAAM,WAAW,qBAAqB,IAAI,eAAe,aAAa,IAAI;AAClF,YAAM,gBAAgB,aAAa,iBAAiB;AACpD,YAAM,UAAU,aAAa,WAAW;AACxC,YAAM,aAAa,aAAa,cAAc;AAC9C,YAAM,aAAa,aAAa,cAAc;AAC9C,YAAM,iBAAiB,aAAa,mBAAmB,SAAS,IAAI,IAAI,KAAK,CAAC,IAAI;AAClF,YAAM,aAAa,aAAa,cAAc;AAC9C,SAAG,WAAW,GAAG,cAAc,aAAa,MAAM;AAClD,SAAG,wBAAwB,CAAC;AAC5B,UAAI,WAAW;AACX,WAAG,qBAAqB,GAAG,gBAAgB,GAAG,aAAa,GAAG,YAAY,UAAU;AAAA,MACxF,OAAO;AACH,WAAG,oBAAoB,GAAG,gBAAgB,GAAG,aAAa,GAAG,YAAY,YAAY,UAAU;AAAA,MACnG;AACA,SAAG,oBAAoB,GAAG,OAAO;AAAA,IACrC,OAAO;AACH,SAAG,yBAAyB,CAAC;AAAA,IACjC;AAAA,EACJ;AAAC;AACD,MAAI,OAAO,SAAS;AAChB,OAAG,WAAW,GAAG,sBAAsB,OAAO,OAAO;AAAA,EACzD;AACA,KAAG,gBAAgB,IAAI;AACvB,KAAG,WAAW,GAAG,cAAc,IAAI;AACnC,KAAG,WAAW,GAAG,sBAAsB,IAAI;AAC3C,SAAO;AACX;AAwDA,SAAS,SAAS,MAAwD;AACtE,SAAO,MAAM,QAAQ,IAAI;AAC7B;AAEA,IAAM,iBAAiB;AAAA,EACnB,OAAO,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EAC/D,YAAY,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EACpE,YAAY,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EACpE,YAAY,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,MAAM;AAAA,EACpE,gBAAgB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACjF,qBAAqB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACtF,qBAAqB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACtF,qBAAqB,EAAE,MAAM,GAAG,WAAW,MAAM,sBAAsB,eAAe;AAAA,EACtF,SAAS,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACpE,cAAc,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACzE,cAAc,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACzE,cAAc,EAAE,MAAM,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EACzE,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAC9E,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAC9E,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAC9E,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AAAA,EAChF,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,OAAO,sBAAsB,QAAQ;AACpF;;;ACnHO,SAAS,qBAAkC;AAC9C,QAAM,QAAqB;AAAA,IACvB,QAAQ;AAAA,MACJ,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa;AAAA,IACjB;AAAA,IACA,YAAY,CACZ;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAU,CAAC,GAAG,GAAG,CAAC;AAAA,MAClB,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MACrB,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,KAAK;AAAA,IACT;AAAA,IACA,SAAS;AAAA,MACL,QAAQ;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACH,gBAAgB;AAAA,IACpB;AAAA,IACA,MAAM;AAAA,MACF,SAAS;AAAA,MACT,QAAQ,CAAC,KAAI,KAAI,GAAE;AAAA,MACnB,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,MAChB,QAAQ,CAAC,GAAG,GAAG,CAAC;AAAA,MAChB,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,MACf,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,MACf,OAAO;AAAA,MACP,OAAO;AAAA,MACP,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,SAAS;AAAA,MACT,UAAU,CAAC,GAAG,GAAG,CAAC;AAAA,MAClB,OAAO;AAAA,IACX;AAAA,IACA,OAAO;AAAA,IACP,SAAS;AAAA,MACL,mBAAmB;AAAA,QACf,OAAO;AAAA,UACH,EAAE,UAAU,KAAK,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE;AAAA,UACpC,EAAE,UAAU,GAAG,OAAO,CAAC,KAAK,KAAK,CAAC,EAAE;AAAA,UACpC,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,KAAK,CAAC,EAAE;AAAA,UAClC,EAAE,UAAU,IAAI,OAAO,CAAC,KAAK,GAAG,GAAG,EAAE;AAAA,QACzC;AAAA,MACJ;AAAA,MACA,cAAc;AAAA,IAClB;AAAA,IACA,SAAS;AAAA,MACL,SAAS,CAAC;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACN,SAAS;AAAA,MACT,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ,CAAC;AAAA,IACb;AAAA,IACA,YAAY;AAAA,MACR,eAAe;AAAA,MACf,QAAQ,CAAC;AAAA,IACb;AAAA,IACA,UAAU;AAAA,MACN,IAAI;AAAA,MACJ,SAAS;AAAA,MACT,OAAO,CAAC,IAAI,IAAI,EAAE;AAAA;AAAA,MAClB,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,IACtB;AAAA,IACA,aAAa;AAAA,MACT,UAAU;AAAA,MACV;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,QACF,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,iBAAiB;AAAA,MACrB;AAAA,MACA,WAAW;AAAA,QACP,OAAO;AAAA,QACP,WAAW;AAAA,QACX,eAAe;AAAA,UACX,OAAO;AAAA,YACH,EAAE,UAAU,IAAI,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACpC,EAAE,UAAU,MAAM,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACtC,EAAE,UAAU,OAAO,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACvC,EAAE,UAAU,MAAM,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACtC,EAAE,UAAU,KAAK,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,YACrC,EAAE,UAAU,GAAG,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;AAAA,UACvC;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,sBAAsB;AAAA,IAC1B;AAAA,IACA,aAAa;AAAA,MACT,IAAI;AAAA,MACJ,SAAS;AAAA,MACT,OAAO,CAAC,GAAG,GAAG,CAAC;AAAA,IACnB;AAAA,IACA,MAAM;AAAA,MACF,kBAAkB;AAAA,IACtB;AAAA,EACJ;AACA,SAAO;AACX;;;AC1FO,SAAS,kBAAkB,OAAoB,SAA0C;AAC5F,QAAM,WAAW,eAAe,OAAO,OAAO;AAC9C,SAAO;AACX;AAUO,SAAS,eAAe,UAAe,SAAc;AACxD,QAAMI,SAAQ,EAAE,GAAG,SAAS;AAC5B,aAAW,OAAO,SAAS;AACvB,UAAM,gBAAgB,WAAW,SAAS,GAAG,IAAI;AACjD,UAAM,eAAe,QAAQ,GAAG;AAChC,QAAI,gBAAgB,UAAa,OAAO,gBAAgB,YAAY,CAAC,MAAM,QAAQ,YAAY,KAAK,CAAC,YAAY,OAAO,YAAY,KAAK,EAAE,wBAAwB,MAAM;AACrK,MAAAA,OAAM,GAAG,IAAI,eAAe,eAAe,YAAY;AAAA,IAC3D,OAAO;AACH,MAAAA,OAAM,GAAG,IAAI;AAAA,IACjB;AAAA,EACJ;AACA,SAAOA;AACX;;;ACjCO,SAAS,oBAAoB,UAAuB,SAA+C;AACtG,QAAM,WAAW,IAAI,kBAAkB;AACvC,MAAI,QAAQ,YAAY;AACpB,aAAS,WAAW,SAAS,UAAU;AAAA,EAC3C;AACA,MAAI,QAAQ,QAAQ;AAChB,aAAS,OAAO,SAAS,MAAM;AAAA,EACnC;AACA,MAAI,QAAQ,UAAU;AAClB,aAAS,SAAS,SAAS,QAAQ;AAAA,EACvC;AACA,MAAI,QAAQ,SAAS;AACjB,aAAS,QAAQ,SAAS,OAAO;AAAA,EACrC;AACA,MAAI,QAAQ,MAAM;AACd,aAAS,KAAK,SAAS,IAAI;AAAA,EAC/B;AACA,MAAI,QAAQ,YAAY;AACpB,aAAS,WAAW,SAAS,UAAU;AAAA,EAC3C;AACA,MAAI,QAAQ,QAAQ;AAChB,aAAS,OAAO,SAAS,MAAM;AAAA,EACnC;AACA,MAAI,QAAQ,MAAM;AACd,aAAS,KAAK,SAAS,IAAI;AAAA,EAC/B;AACA,MAAI,QAAQ,QAAQ;AAChB,aAAS,OAAO,SAAS,MAAM;AAAA,EACnC;AACA,MAAI,QAAQ,SAAS;AACjB,aAAS,QAAQ,SAAS,OAAO;AAAA,EACrC;AACA,MAAI,QAAQ,SAAS,SAAS,OAAO;AACjC,aAAS,MAAM,SAAS,KAAK;AAAA,EACjC;AACA,MAAI,QAAQ,SAAS;AACjB,aAAS,QAAQ,SAAS,OAAO;AAAA,EACrC;AACA,MAAI,QAAQ,aAAa;AACrB,aAAS,YAAY,SAAS,WAAW;AAAA,EAC7C;AACA,MAAI,QAAQ,aAAa;AACrB,aAAS,YAAY,SAAS,WAAW;AAAA,EAC7C;AACA,SAAO,SAAS;AACpB;AAEA,IAAM,oBAAN,MAAwB;AAAA,EACX,SAAkB,CAAC;AAAA,EAE5B,WAAW,OAA8B;AACrC,UAAM,EAAE,MAAM,IAAI,IAAI;AACtB,QAAI,QAAQ,QAAW;AACnB,WAAK,QAAQ,IAAI,EAAE,eAAe,GAAG,CAAC,EAAE,OAAO,iBAAiB;AAAA,IACpE;AACA,QAAI,OAAO,QAAW;AAClB,WAAK,IAAI,GAAG,EAAE,MAAM,EAAE,OAAO,gBAAgB;AAAA,IACjD;AAAA,EACJ;AAAA,EAEA,OAAO,OAA0B;AAC7B,UAAM,EAAE,KAAK,MAAM,IAAI,IAAI;AAE3B,SAAK,QAAQ,GAAG,EAAE,eAAe,GAAG,GAAG,EAAE,OAAO,YAAY;AAC5D,SAAK,QAAQ,IAAI,EAAE,SAAS,EAAE,OAAO,aAAa;AAClD,SAAK,QAAQ,GAAG,EAAE,IAAI,MAAM,aAAa,EAAE,OAAO,YAAY;AAAA,EAClE;AAAA,EAEA,SAAS,OAA4B;AACjC,UAAM,EAAE,OAAO,IAAI;AACnB,SAAK,QAAQ,OAAO,MAAM,EAAE,IAAI,CAAC,EAAE,OAAO,wBAAwB;AAClE,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,YAAM,QAAQ,OAAO,CAAC;AACtB,WAAK,MAAM,MAAM,YAAY,EAAE,MAAM,EAAE,UAAU,GAAG,OAAO,mBAAmB,CAAC,gBAAgB;AAAA,IACnG;AAAA,EACJ;AAAA,EAEA,QAAQ,OAAkC;AACtC,UAAM,EAAE,QAAQ,IAAI;AACpB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,YAAM,MAAM,QAAQ,CAAC;AACrB,UAAI,IAAI,gBAAgB,QAAW;AAC/B,aAAK,QAAQ,IAAI,YAAY,EAAE,QAAQ,EAAE,IAAI,UAAW,EAAE,SAAS,UAAW,EAAE,UAAU,GAAG,OAAO,mBAAmB,CAAC,gBAAgB;AAAA,MAC5I;AACA,YAAM,EAAE,WAAW,IAAI,IAAI;AAC3B,eAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACxC,cAAM,YAAY,WAAW,CAAC;AAC9B,cAAM,gBAAgB,CAAC,SAAiB,mBAAmB,CAAC,qBAAqB,CAAC,KAAK,IAAI;AAC3F,cAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,YAAI,SAAS,QAAQ,OAAO;AACxB,gBAAM,iBAAiB,SAAS,kBAAkB;AAClD,gBAAM,kBAAkB,SAAS,mBAAmB;AACpD,eAAK,QAAQ,cAAc,EAAE,eAAe,GAAG,CAAC,EAAE,UAAU,GAAG,OAAO,cAAc,yBAAyB,CAAC;AAC9G,eAAK,QAAQ,eAAe,EAAE,eAAe,GAAG,CAAC,EAAE,UAAU,GAAG,OAAO,cAAc,0BAA0B,CAAC;AAAA,QACpH;AACA,YAAI,UAAU,OAAO,SAAS,WAAW,WAAW,SAAS,UAAU,SAAS,QAAQ;AACxF,YAAI,mBAAmB,KAAK,QAAQ,OAAO,EAAE,QAAQ,EAAE,SAAS;AAChE,gBAAQ,SAAS,eAAe;AAAA,UAC5B,KAAK,SAAS;AACV,+BAAmB,iBAAiB,YAAY,CAAC;AACjD;AAAA,UACJ;AAAA,UACA,KAAK,cAAc;AACf,+BAAmB,iBAAiB,IAAI,CAAC;AACzC;AAAA,UACJ;AAAA,UACA,KAAK,aAAa;AACd,+BAAmB,iBAAiB,YAAY,CAAC;AACjD;AAAA,UACJ;AAAA,UACA,KAAK;AAAA,UACL,KAAK,gBAAgB;AACjB,+BAAmB,iBAAiB,IAAI,CAAC;AACzC;AAAA,UACJ;AAAA,QACJ;AACA,yBAAiB,UAAU,GAAG,OAAO,cAAc,kBAAkB,CAAC;AAAA,MAC1E;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW,OAAmC;AAC1C,UAAM,EAAE,OAAO,IAAI;AACnB,SAAK,QAAQ,OAAO,MAAM,EAAE,IAAI,GAAG,EAAE,OAAO,eAAe;AAAA,EAC/D;AAAA,EAEA,KAAK,OAAwB;AACzB,UAAM,EAAE,OAAO,OAAO,UAAAC,WAAU,OAAO,MAAM,IAAI;AACjD,SAAK,QAAQ,KAAK,EAAE,SAAS,EAAE,OAAO,YAAY;AAClD,SAAK,QAAQ,KAAK,EAAE,SAAS,EAAE,OAAO,YAAY;AAClD,SAAK,QAAQA,SAAQ,EAAE,SAAS,EAAE,OAAO,eAAe;AACxD,SAAK,QAAQ,KAAK,EAAE,OAAO,EAAE,OAAO,YAAY;AAChD,SAAK,QAAQ,KAAK,EAAE,OAAO,EAAE,OAAO,YAAY;AAChD,SAAK,QAAQ,KAAK,EAAE,gBAAgB,OAAO,YAAY,EAAE,OAAO,YAAY;AAAA,EAChF;AAAA,EAEA,SAAS,OAA4B;AACjC,UAAM,EAAE,MAAM,IAAI;AAClB,SAAK,MAAM,KAAK,EAAE,MAAM,EAAE,OAAO,4BAA4B;AAAA,EACjE;AAAA,EAEA,OAAO,OAA0B;AAC7B,UAAM,EAAE,OAAO,QAAQ,YAAY,IAAI;AACvC,SAAK,QAAQ,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,cAAc;AAC9D,SAAK,QAAQ,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,eAAe;AAChE,SAAK,QAAQ,WAAW,EAAE,QAAQ,EAAE,eAAe,GAAG,EAAE,EAAE,OAAO,oBAAoB;AAAA,EACzF;AAAA,EAEA,KAAK,OAAwB;AACzB,UAAM,EAAE,iBAAiB,IAAI;AAC7B,SAAK,QAAQ,gBAAgB,EAAE,eAAe,GAAG,CAAC,EAAE,OAAO,uBAAuB;AAAA,EACtF;AAAA,EAEA,OAAO,OAA8B;AACjC,UAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,QAAI,KAAK,OAAO;AACZ,WAAK,QAAQ,KAAK,KAAK,EAAE,SAAS,EAAE,OAAO,mBAAmB;AAAA,IAClE;AACA,QAAI,KAAK,UAAU;AACf,WAAK,QAAQ,KAAK,QAAQ,EAAE,SAAS,EAAE,OAAO,sBAAsB;AAAA,IACxE;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,QAAQ,KAAK,MAAM,EAAE,SAAS,EAAE,OAAO,oBAAoB;AAAA,IACpE;AACA,SAAK,QAAQ,UAAU,KAAK,EAAE,eAAe,GAAG,CAAC,EAAE,OAAO,wBAAwB;AAClF,SAAK,QAAQ,UAAU,SAAS,EAAE,eAAe,GAAG,CAAC,EAAE,OAAO,4BAA4B;AAC1F,SAAK,SAAS,UAAU,aAAa,EAAE,MAAM,EAAE,OAAO,gCAAgC;AAAA,EAC1F;AAAA,EAEA,QAAQ,OAA2B;AAC/B,UAAM,EAAE,OAAO,IAAI;AACnB,SAAK,QAAQ,MAAM,EAAE,SAAS,EAAE,OAAO,gBAAgB;AAAA,EAC3D;AAAA,EAEA,MAAM,OAAyB;AAC3B,UAAM,EAAE,IAAI,IAAI;AAChB,QAAI,OAAO,QAAW;AAClB,WAAK,IAAI,GAAG,EAAE,MAAM,EAAE,OAAO,WAAW;AAAA,IAC5C;AAAA,EACJ;AAAA,EAEA,QAAQ,OAA2B;AAC/B,UAAM,EAAE,kBAAkB,IAAI;AAC9B,SAAK,SAAS,iBAAiB,EAAE,MAAM,EAAE,OAAO,2BAA2B;AAAA,EAC/E;AAAA,EAEA,YAAY,OAA+B;AAAA,EAC3C;AAAA,EAEA,YAAY,OAA+B;AAAA,EAC3C;AAAA,EAEA,QAAQ,OAAe;AACnB,WAAO,IAAI,iBAAiB,MAAM,KAAK;AAAA,EAC3C;AAAA,EAEA,QAAQ,OAAqB;AACzB,WAAO,IAAI,iBAAiB,MAAM,KAAK;AAAA,EAC3C;AAAA,EAEA,MAAM,OAAqB;AACvB,WAAO,IAAI,eAAe,MAAM,KAAK;AAAA,EACzC;AAAA,EAEA,SAAS,OAA6C;AAClD,WAAO,IAAI,kBAAkB,MAAM,KAAK;AAAA,EAC5C;AAAA,EAEA,IAAI,OAAe;AACf,WAAO,IAAI,aAAa,MAAM,KAAK;AAAA,EACvC;AACJ;AAEA,IAAM,gBAAN,MAA0D;AAAA,EAEtD,YAAqB,SAAqC,OAAU;AAA/C;AAAqC;AAAA,EAAY;AAAA,EADtE,SAAmB,CAAC;AAAA,EAGpB,MAAM,SAAiB;AACnB,SAAK,OAAO,KAAK,OAAO;AAAA,EAC5B;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,OAAO,SAAS,IAAI,OAAO;AAAA,EAC3C;AAAA,EAEA,OAAO,MAAc;AACjB,QAAI,KAAK,OAAO,QAAQ;AACpB,YAAM,UAAU,GAAG,IAAI,IAAI,KAAK,YAAY,CAAC,KAAK,KAAK,OAAO,KAAK,GAAG,CAAC;AACvE,WAAK,QAAQ,OAAO,KAAK,IAAI,MAAM,OAAO,CAAC;AAAA,IAC/C;AAAA,EACJ;AAAA,EAEA,cAAc;AACV,WAAO,KAAK,MAAM,SAAS;AAAA,EAC/B;AACJ;AAEA,IAAM,mBAAN,cAA+B,cAAsB;AAAA,EACjD,UAAU;AACN,QAAI,CAAC,OAAO,UAAU,KAAK,KAAK,GAAG;AAC/B,WAAK,MAAM,qBAAqB;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,WAAW;AACP,QAAI,KAAK,SAAS,GAAG;AACjB,WAAK,MAAM,2BAA2B;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,IAAIC,MAAa,SAAkB;AAC/B,QAAI,KAAK,QAAQA,MAAK;AAClB,WAAK,MAAM,+BAA+B,WAAWA,IAAG,GAAG;AAAA,IAC/D;AACA,WAAO;AAAA,EACX;AAAA,EAEA,IAAIC,MAAa,SAAkB;AAC/B,QAAI,KAAK,QAAQA,MAAK;AAClB,WAAK,MAAM,4BAA4B,WAAWA,IAAG,GAAG;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,KAAa,SAAkB;AACvC,QAAI,KAAK,SAAS,KAAK;AACnB,WAAK,MAAM,wBAAwB,WAAW,GAAG,GAAG;AAAA,IACxD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,KAAa,SAAkB;AACpC,QAAI,KAAK,SAAS,KAAK;AACnB,WAAK,MAAM,qBAAqB,WAAW,GAAG,GAAG;AAAA,IACrD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,eAAeD,OAAM,GAAGC,OAAM,GAAG;AAC7B,SAAK,IAAID,IAAG;AACZ,SAAK,IAAIC,IAAG;AACZ,WAAO;AAAA,EACX;AAAA,EAEA,eAAeD,OAAM,GAAGC,OAAM,GAAG;AAC7B,SAAK,YAAYD,IAAG;AACpB,SAAK,SAASC,IAAG;AACjB,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,SAAiB;AACzB,QAAI,CAAC,OAAO,UAAU,KAAK,QAAQ,OAAO,GAAG;AACzC,WAAK,MAAM,uBAAuB,OAAO,GAAG;AAAA,IAChD;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,mBAAN,cAA+B,cAA4B;AAAA,EACvD,OAAO,UAAU,MAAM;AACnB,UAAMC,OAAM,aAAK,OAAO,KAAK,KAAK;AAClC,QAAIA,OAAM,IAAI,WAAWA,OAAM,IAAI,SAAS;AACxC,WAAK,MAAM,kCAAkC;AAAA,IACjD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,KAAmB,SAAkB,UAAU,MAAM;AACjE,UAAM,KAAK,aAAK,IAAI,KAAK,OAAO,GAAG;AACnC,QAAI,KAAK,CAAC,WAAW,KAAK,IAAI,SAAS;AACnC,WAAK,MAAM,4BAA4B,WAAW,IAAI,SAAS,CAAC,EAAE;AAAA,IACtE;AACA,WAAO;AAAA,EACX;AAAA,EAEA,UAAU;AACN,QAAI,aAAK,IAAI,KAAK,OAAO,KAAK,KAAK,KAAK,GAAG;AACvC,WAAK,MAAM,mBAAmB;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,iBAAN,cAA6B,cAA4B;AAAA,EACrD,MAAM,UAAU,MAAM;AAClB,UAAM,CAAC,GAAG,GAAG,CAAC,IAAI,KAAK;AACvB,UAAMA,OAAM,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AAC3C,QAAIA,OAAM,IAAI,WAAWA,OAAM,IAAI,SAAS;AACxC,WAAK,MAAM,wDAAwD;AAAA,IACvE;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,oBAAN,cAAgC,cAAoD;AAAA,EAChF,QAAQ;AACJ,UAAM,EAAE,MAAM,IAAI,KAAK;AACvB,QAAI,MAAM,SAAS,GAAG;AAClB,UAAI,UAAU,MAAM,CAAC,EAAE;AACvB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,cAAM,UAAU,MAAM,CAAC,EAAE;AACzB,YAAI,UAAU,SAAS;AACnB,eAAK,MAAM,8CAA8C;AAAA,QAC7D;AACA,kBAAU;AAAA,MACd;AAAA,IACJ,OAAO;AACH,WAAK,MAAM,iCAAiC;AAAA,IAChD;AACA,WAAO;AAAA,EACX;AACJ;AAEA,IAAM,eAAN,cAA2B,cAAsB;AAAA,EAC7C,QAAQ;AACJ,QAAI;AACA,UAAI,IAAI,KAAK,KAAK;AAAA,IACtB,QAAQ;AACJ,WAAK,MAAM,8BAA8B;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AACJ;;;AClPO,IAAK,aAAL,kBAAKC,gBAAL;AAEH,EAAAA,wBAAA;AAEA,EAAAA,wBAAA;AAEA,EAAAA,wBAAA;AANQ,SAAAA;AAAA,GAAA;AA2LL,IAAM,SAAS;AAoHf,IAAK,eAAL,kBAAKC,kBAAL;AAOH,EAAAA,4BAAA;AAQA,EAAAA,4BAAA;AAfQ,SAAAA;AAAA,GAAA;AAqBL,IAAK,aAAL,kBAAKC,gBAAL;AACH,EAAAA,wBAAA,YAAS,cAAT;AAAqB,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AAAQ,EAAAA,wBAAA;AADrD,SAAAA;AAAA,GAAA;AAqIL,IAAK,kBAAL,kBAAKC,qBAAL;AAEH,EAAAA,kCAAA;AAEA,EAAAA,kCAAA;AAEA,EAAAA,kCAAA;AAEA,EAAAA,kCAAA;AAEA,EAAAA,kCAAA;AAEA,EAAAA,kCAAA;AAZQ,SAAAA;AAAA,GAAA;;;AC7kBZ,SAAS,MAAM,MAAkB,IAAwB;AACrD,SAAO,OAAO,IAAI;AACtB;AAGO,SAAS,wBAAwB,OAA4E;AAChH,QAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,QAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,QAAM,cAAc,QAAQ;AAC5B,QAAM,OAAO,OAAO,MAAM,KAAK,KAAK;AACpC,QAAM,YAAY,aAAK,wBAAwB,aAAK,OAAO,GAAG,OAAO,UAAU,OAAO,QAAQ;AAC9F,QAAM,WAAW,aAAK,OAAO;AAC7B,MAAI,OAAO,QAAQ,gBAAgB;AAC/B,UAAM,SAAS,OAAO,QAAQ,OAAO;AACrC,UAAM,aAAa,OAAO,MAAM;AAChC,UAAM,YAAY,aAAa;AAC/B,iBAAK,MAAM,UAAU,CAAC,WAAW,WAAW,CAAC,YAAY,YAAY,OAAO,MAAM,OAAO,GAAG;AAAA,EAChG,OACK;AACD,iBAAK,YAAY,UAAU,MAAM,aAAa,OAAO,MAAM,OAAO,GAAG;AAAA,EACzE;AACA,SAAO,IAAI,aAAa,WAAW,QAAQ;AAC/C;AAEA,IAAM,eAAN,MAAuC;AAAA,EAC3B,QAAQ,IAAI,MAAwB,IAAI,CAAC;AAAA,EACzC,QAAQ,IAAI,MAAwB,IAAI,CAAC;AAAA,EAEjD,YAAY,WAAiB,UAAgB;AACzC,SAAK,MAAM,iCAAuC,CAAC,IAAI;AACvD,SAAK,MAAM,gCAAsC,CAAC,IAAI;AACtD,UAAM,YAAY,KAAK,MAAM,iCAAuC,CAAC,IAAI,aAAK,OAAO;AACrF,UAAM,WAAW,KAAK,MAAM,gCAAsC,CAAC,IAAI,aAAK,OAAO;AACnF,iBAAK,OAAO,WAAW,SAAS;AAChC,iBAAK,OAAO,UAAU,QAAQ;AAAA,EAClC;AAAA,EAEA,UAAU,MAAkB,IAA8B;AACtD,YAAQ,OAAO,QAAQ,EAAE;AACzB,UAAM,MAAM,MAAM,MAAM,EAAE;AAC1B,QAAI,IAAI,KAAK,MAAM,GAAG;AACtB,QAAI,CAAC,GAAG;AACJ,WAAK,MAAM,GAAG,IAAI,IAAI,aAAK,OAAO;AAElC,UAAI,KAAK,MAAM;AACX,qBAAK,SAAS,GAAG,KAAK,UAAU,KAAK,GAAG,EAAE,GAAG,KAAK,UAAU,MAAM,KAAK,CAAC,CAAC;AAAA,MAC7E,OAAO;AACH,qBAAK,SAAS,GAAG,KAAK,UAAU,OAAO,GAAG,EAAE,GAAG,KAAK,UAAU,MAAM,OAAO,CAAC,CAAC;AAAA,MACjF;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,MAAkB,IAA8B;AAC5D,YAAQ,OAAO,QAAQ,EAAE;AACzB,UAAM,MAAM,MAAM,MAAM,EAAE;AAC1B,QAAI,IAAI,KAAK,MAAM,GAAG;AACtB,QAAI,CAAC,GAAG;AACJ,WAAK,MAAM,GAAG,IAAI,IAAI,aAAK,OAAO;AAClC,mBAAK,eAAe,GAAG,KAAK,UAAU,MAAM,EAAE,CAAC;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AACJ;;;ACxDO,SAAS,kBAAkB,OAAoB,UAAiC;AACnF,QAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,QAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,QAAM,SAAS,QAAQ;AACvB,QAAM,aAAa,OAAO,MAAM;AAChC,QAAM,YAAY,aAAa;AAE/B,QAAM,OAAO,aAAK,OAAO;AACzB,QAAM,QAAQ,aAAK,OAAO;AAC1B,QAAM,MAAM,aAAK,OAAO;AACxB,QAAM,SAAS,aAAK,OAAO;AAC3B,QAAM,OAAO,aAAK,OAAO;AACzB,QAAM,MAAM,aAAK,OAAO;AACxB,QAAM,QAAQ,aAAK,OAAO;AAE1B,eAAK,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,IAAI;AACpC,eAAK,IAAI,KAAK,GAAG,GAAG,IAAI,OAAO,GAAG;AAClC,eAAK,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC;AAE3B,MAAI,OAAO,QAAQ,gBAAgB;AAC/B,iBAAK,IAAI,MAAM,IAAI,GAAG,GAAG,SAAS;AAClC,iBAAK,IAAI,OAAO,GAAG,GAAG,GAAG,SAAS;AAClC,iBAAK,IAAI,KAAK,GAAG,GAAG,GAAG,UAAU;AACjC,iBAAK,IAAI,QAAQ,GAAG,IAAI,GAAG,UAAU;AAAA,EACzC,OAAO;AACH,UAAM,aAAa,eAAS,SAAS,OAAO,MAAM,CAAC;AACnD,UAAM,aAAa,KAAK,KAAK,KAAK,IAAI,UAAU,IAAI,MAAM;AAC1D,iBAAK,IAAI,MAAM,CAAC,KAAK,IAAI,UAAU,GAAG,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAChE,iBAAK,IAAI,OAAO,KAAK,IAAI,UAAU,GAAG,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAChE,iBAAK,IAAI,KAAK,GAAG,KAAK,IAAI,UAAU,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAC9D,iBAAK,IAAI,QAAQ,GAAG,CAAC,KAAK,IAAI,UAAU,GAAG,KAAK,IAAI,UAAU,GAAG,CAAC;AAAA,EACtE;AAGA,QAAM,SAAS,aAAK,OAAO;AAC3B,QAAM,WAAW,aAAK,OAAO;AAC7B,QAAM,SAAS,SAAS,qCAA2C;AACnE,QAAM,eAAe,SAAS,2CAAiD;AAC/E,eAAK,eAAe,UAAU,MAAM;AACpC,QAAM,SAAS,CAAC,MAAM,OAAO,KAAK,QAAQ,MAAM,KAAK,KAAK;AAC1D,aAAW,SAAS,QAAQ;AACxB,UAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,iBAAK,IAAI,QAAQ,GAAG,GAAG,CAAC;AACxB,iBAAK,cAAc,QAAQ,QAAQ,YAAY;AAC/C,UAAMC,YAAW,SAAS,aAAK,IAAI,UAAU,MAAM;AACnD,iBAAK,IAAI,OAAO,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAACA,SAAQ;AAAA,EAC9D;AACA,SAAO,EAAE,MAAM,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO,QAAQ,CAAC,MAAM,OAAO,KAAK,QAAQ,MAAM,GAAG,EAAE;AACvG;;;ACjCO,IAAM,gBAAN,MAAoB;AAAA;AAAA,EAkBvB,YAEa,IAEA,OAEA,QAEA,SAEA,aACX;AATW;AAEA;AAEA;AAEA;AAEA;AAET,UAAM,WAAW,KAAK,WAAW;AAAA;AAAA,MAE7B,OAAO,YAAY,cAAc,EAAE,MAAM,cAAc,OAAO,QAAQ,gBAAgB,kBAAkB,MAAM,cAAc,OAAO,KAAK,CAAC;AAAA,MACzI,MAAM,YAAY,cAAc,EAAE,MAAM,cAAc,OAAO,QAAQ,gBAAgB,YAAY,MAAM,gBAAgB,OAAO,KAAK,CAAC;AAAA;AAAA,MACpI,OAAO,YAAY,cAAc,EAAE,MAAM,cAAc,OAAO,QAAQ,gBAAgB,sBAAsB,MAAM,SAAS,OAAO,KAAK,CAAC;AAAA,IAC5I;AAEA,UAAM,gBAAgB,KAAK,gBAAgB;AAAA,MACvC,WAAW,UAAU,IAAI,YAAY,mBAAmB,EAAE,gBAAgB,kBAAkB,OAAO,QAAQ,QAAQ,CAAC,IAAI;AAAA,MACxH,WAAW,UAAU,IAAI,YAAY,mBAAmB,EAAE,gBAAgB,sBAAsB,OAAO,QAAQ,QAAQ,CAAC,IAAI;AAAA,IAChI;AAEA,SAAK,eAAe;AAAA,MAChB,OAAO,YAAY,kBAAkB;AAAA,QACjC,OAAO;AAAA,UACH,EAAE,MAAM,eAAe,SAAS,SAAS,MAAM;AAAA,UAC/C;AAAA;AAAA,QACJ;AAAA,QACA,OAAO,EAAE,MAAM,oBAAoB,SAAS,SAAS,MAAM;AAAA,MAC/D,CAAC;AAAA,MACD,WAAW,UAAU,IAAI,YAAY,kBAAkB;AAAA,QACnD,OAAO;AAAA,UACH,EAAE,MAAM,oBAAoB,cAAc,cAAc,UAAU;AAAA,QACtE;AAAA,QACA,OAAO,EAAE,MAAM,oBAAoB,cAAc,cAAc,UAAU;AAAA,MAC7E,CAAC,IAAI;AAAA,MACL,MAAM,YAAY,kBAAkB;AAAA,QAChC,OAAO;AAAA,UACH;AAAA,UACA,EAAE,MAAM,oBAAoB,SAAS,SAAS,KAAK;AAAA,QACvD;AAAA,QACA,OAAO,EAAE,MAAM,oBAAoB,SAAS,SAAS,MAAM;AAAA,MAC/D,CAAC;AAAA,IACL;AAEA,SAAK,cAAc;AAAA,MACf,MAAM,YAAY,aAAa,EAAE,MAAM,qBAAqB,UAAU,QAAQ,SAAS,IAAI,OAAO,cAAc,CAAC;AAAA,IACrH;AAEA,SAAK,cAAc;AAAA,MACf,MAAM,IAAI,YAAY,QAAQ,SAAS,CAAC;AAAA,IAC5C;AAAA,EACJ;AAAA;AAAA,EAtEA,wBAAwB;AAAA;AAAA,EAEf;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA,EACD;AAAA,EACA;AAAA;AAAA,EA+DR,cAAc;AACV,UAAM,EAAE,IAAI,cAAc,OAAO,OAAO,IAAI;AAC5C,UAAM,EAAE,WAAW,MAAM,IAAI;AAC7B,QAAI,WAAW;AACX,aAAO,IAAI,EAAE,QAAQ,WAAW,aAAa,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,CAAC;AAC3H,8BAAwB,IAAI,EAAE,MAAM,eAAe,aAAa,WAAW,OAAO,CAAC,IAAI,GAAG,OAAO,KAAK,CAAC;AAAA,IAC3G;AAAA,EACJ;AAAA;AAAA,EAGA,WAAW,aAAkD,SAAsB;AAC/E,UAAM,EAAE,IAAI,aAAa,IAAI;AAC7B,QAAI,SAAS,UAAU,kBAAsB;AAC7C,QAAI,QAAQ,UAAU,iBAAqB;AAC3C,QAAI,SAAS,UAAU,kBAAsB;AAC7C,4BAAwB,IAAI,EAAE,MAAM,oBAAoB,aAAa,aAAa,WAAW,GAAG,OAAO,CAAC,OAAO,IAAI,GAAG,MAAM,CAAC;AAAA,EACjI;AAAA;AAAA,EAGQ,OAAO;AACX,UAAM,EAAE,IAAI,OAAO,QAAQ,cAAc,YAAY,IAAI;AACzD,iBAAa,IAAI;AAAA,MACb;AAAA,MAAO;AAAA,MAAQ,aAAa,aAAa;AAAA,MAAM,SAAS;AAAA,QACpD,EAAE,YAAY,qBAAqB,QAAQ,YAAY,MAAM,QAAQ,gBAAgB,MAAM,eAAe;AAAA,MAC9G;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA,EAGA,MAAM,cAAc;AAChB,QAAI,KAAK,yBAAyB,CAAC,KAAK,WAAW;AAC/C,YAAM,EAAE,GAAG,IAAI;AACf,WAAK,KAAK;AACV,WAAK,wBAAwB;AAC7B,YAAM,OAAO,GAAG,UAAU,GAAG,4BAA4B,CAAC;AAC1D,WAAK,YAAY,EAAE,MAAM,UAAU,CAAC,EAAE;AAAA,IAC1C;AACA,QAAI,KAAK,WAAW;AAChB,YAAM,EAAE,SAAS,IAAI,KAAK;AAC1B,UAAI;AACJ,YAAM,UAAU,WAAW,MAAM;AAC7B,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,cAAI,oBAAoB,SAAS,CAAC,GAAG;AACjC,qBAAS,OAAO,GAAG,CAAC;AACpB,6BAAiB,QAAQ;AAAA,UAC7B;AAAA,QACJ;AAAA,MACJ,GAAG,GAAG;AACN,YAAM,UAAU,IAAI,QAAc,CAAC,SAAS,WAAW;AACnD,2BAAmB;AAAA,UACf,SAAS,MAAM;AACX,yBAAa,OAAO;AACpB,oBAAQ;AAAA,UACZ;AAAA,UACA;AAAA,QACJ;AACA,iBAAS,KAAK,gBAAgB;AAAA,MAClC,CAAC;AAGD,YAAM;AACN,aAAO,KAAK;AAAA,IAChB,OAAO;AACH,aAAO,QAAQ,QAAQ,KAAK,WAAW;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA,EAGA,UAAU;AACN,SAAK,gBAAgB;AACrB,SAAK,YAAY,QAAQ;AAAA,EAC7B;AAAA;AAAA,EAGA,gBAAgB;AACZ,UAAM,EAAE,IAAI,WAAW,aAAa,YAAY,IAAI;AACpD,QAAI,WAAW;AACX,YAAM,EAAE,MAAM,SAAS,IAAI;AAC3B,YAAM,SAAS,GAAG,eAAe,MAAM,GAAG,yBAAyB,CAAC;AACpE,UAAI,UAAU,GAAG,aAAa;AAC1B,mBAAW,WAAW,UAAU;AAC5B,kBAAQ,OAAO,cAAc;AAAA,QACjC;AACA,aAAK,gBAAgB;AAAA,MACzB,WAAW,UAAU,GAAG,iBAAiB;AAGrC,WAAG,WAAW,GAAG,mBAAmB,YAAY,IAAI;AACpD,WAAG,iBAAiB,GAAG,mBAAmB,GAAG,YAAY,IAAI;AAC7D,WAAG,WAAW,GAAG,mBAAmB,IAAI;AAExC,mBAAW,WAAW,UAAU;AAC5B,kBAAQ,QAAQ;AAAA,QACpB;AACA,aAAK,gBAAgB;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGQ,kBAAkB;AACtB,SAAK,GAAG,WAAW,KAAK,WAAW,QAAQ,IAAI;AAC/C,SAAK,YAAY;AAAA,EACrB;AACJ;;;ACpMO,IAAM,cAAN,MAAkB;AAAA;AAAA,EAIrB,YAEa,IAEA,MACQ,YAA8B;AAHtC;AAEA;AACQ;AACjB,SAAK,WAAW,IAAI,IAAI;AAAA,EAC5B;AAAA,EAViB,cAAc,oBAAI,IAAmC;AAAA,EAYtE,IAAI,eAA+C;AAC/C,UAAM,EAAE,YAAY,IAAI;AACxB,cAAU,UAAU;AAChB,iBAAW,SAAS,YAAY,OAAO,GAAG;AACtC,mBAAW,QAAQ,OAAO;AACtB,gBAAM,EAAE,GAAG,KAAK;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,QAAQ;AAAA,EACnB;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EAEA,aAAa,QAAsB;AAC/B,WAAO,KAAK,IAAI,eAAe,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,UAAU,QAAQ,OAAO,MAAM,UAAU,YAAY,MAAM,EAAE,CAAC;AAAA,EAC3H;AAAA,EAEA,kBAAkB,QAA2B;AACzC,WAAO,KAAK,IAAI,oBAAoB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,cAAc,CAAC;AAAA,EACjF;AAAA,EAEA,cAAc,QAAuB;AACjC,WAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,UAAU,CAAC;AAAA,EACzE;AAAA,EAEA,mBAAmB,QAA4B;AAC3C,UAAM,MAAM,qBAAqB,KAAK,IAAI,MAAM;AAChD,SAAK,IAAI,IAAI,SAAS,EAAE,MAAM,UAAU,CAAC;AACzC,WAAO;AAAA,EACX;AAAA,EAEA,mBAAmB,QAA4B;AAC3C,WAAO,KAAK,IAAI,qBAAqB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,gBAAgB,UAAU,kBAAkB,KAAK,IAAI,MAAM,EAAE,CAAC;AAAA,EACjI;AAAA,EAEA,cAAc,QAAuB;AACjC,WAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,UAAU,CAAC;AAAA,EACzE;AAAA,EAEA,cAAc,QAAuB;AACjC,WAAO,KAAK,IAAI,gBAAgB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,WAAW,QAAQ,OAAO,MAAM,UAAU,aAAa,MAAM,EAAE,CAAC;AAAA,EAC9H;AAAA,EAEA,0BAA0B;AACtB,WAAO,KAAK,IAAI,KAAK,GAAG,wBAAwB,GAAI,EAAE,MAAM,oBAAoB,CAAC;AAAA,EACrF;AAAA,EAEA,kBAAkB,QAAmD;AACjE,WAAO,KAAK,IAAI,oBAAoB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,cAAc,CAAC;AAAA,EACjF;AAAA,EAEQ,IAA6B,UAAa,MAAuB;AACrE,YAAQ,OAAO,SAAS,YAAY,KAAK,WAAW,OAAO,CAAC;AAC5D,QAAI,CAAC,KAAK,YAAY,IAAI,QAAQ,GAAG;AACjC,WAAK,YAAY,IAAI,UAAU,CAAC,IAAI,CAAC;AAAA,IACzC,OAAO;AACH,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAAqD,WAA8C;AAC3G,UAAM,eAA+B,CAAC;AACtC,YAAQ,OAAO,UAAU,SAAS,CAAC;AACnC,SAAK,IAAI,WAAW,YAAY;AAChC,UAAM,aAAa,KAAK,YAAY,IAAI,KAAK;AAC7C,QAAI,YAAY;AACZ,iBAAW,KAAK,GAAG,YAAY;AAAA,IACnC;AAAA,EACJ;AAAA,EAEA,UAAU,WAA8C;AACpD,SAAK,IAAI,SAAS;AAAA,EACtB;AAAA,EAEQ,IAAI,WAA8C,aAA8B;AACpF,UAAM,EAAE,IAAI,YAAY,IAAI;AAC5B,eAAW,YAAY,WAAW;AAC9B,UAAI,CAAC;AACD;AACJ,YAAM,QAAQ,KAAK,YAAY,IAAI,QAAQ;AAC3C,UAAI,SAAS,MAAM,SAAS,GAAG;AAC3B,mBAAW,QAAQ,OAAO;AACtB,uBAAa,KAAK,IAAI;AAAA,QAC1B;AACA,cAAM,CAAC,OAAO,IAAI;AAClB,WAAG,SAAS,QAAQ,IAAI,EAAE,EAAE,QAAQ;AACpC,oBAAY,OAAO,QAAQ;AAAA,MAC/B,OAAO;AACH,cAAM,IAAI,MAAM,8BAA8B;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,YAAY;AACR,SAAK,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC;AACtC,SAAK,YAAY,MAAM;AAAA,EAC3B;AAAA,EAEA,UAAU;AACN,QAAI,KAAK,IAAI;AACT,WAAK,UAAU;AACf,WAAK,WAAW,OAAO,IAAI;AAAA,IAC/B;AAAA,EACJ;AACJ;AAEA,SAAS,YAAY,QAAsB;AACvC,SAAO,cAAc,SAAS,OAAO,WAAW,OAAO,QAAQ;AACnE;AAEA,SAAS,kBAAkB,IAA4B,QAA4B;AAC/E,QAAM,EAAE,OAAO,QAAQ,eAAe,IAAI;AAC1C,QAAM,UAAU,OAAO,WAAW,QAAQ,SAAS,EAAE,EAAE,cAAc,OAAO,WAAW;AACvF,QAAM,gBAAgB,KAAK,KAAK,yBAAyB,cAAc,CAAC;AACxE,SAAO,QAAQ,SAAS,gBAAgB;AAC5C;AAEA,SAAS,aAAa,QAAuB;AACzC,QAAM,QAAQ,OAAO,SAAS,OAAO,MAAM;AAC3C,QAAM,SAAS,OAAO,UAAU,OAAO,MAAM;AAC7C,QAAM,QAAQ,WAAW,SAAS,OAAO,QAAQ;AACjD,QAAM,QAAQ,OAAO,QAAQ,qBAAqB,IAAI;AACtD,QAAM,iBAAiB,QAAQ,SAAS,QAAQ;AAChD,MAAI,cAAc;AAClB,MAAI,SAAS;AACb,MAAI,aAAa,QAAQ;AACrB,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,WAAW,OAAO,WAAW;AACnC,aAAS,WAAW,UAAU,QAAQ;AAAA,EAC1C;AACA,MAAI,qBAAqB,UAAU,OAAO,mBAAmBC,YAAW,KAAK,KAAKA,YAAW,MAAM,GAAG;AAClG,aAAS,KAAK,IAAI,KAAK,KAAK,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC;AAAA,EACzD;AACA,WAAS,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AACzC,mBAAe,kBAAkB;AAAA,EACrC;AACA,QAAM,gBAAgB,KAAK,KAAK,yBAAyB,OAAO,cAAc,CAAC;AAC/E,SAAO,KAAK,KAAK,cAAc,aAAa;AAChD;AAyBA,SAASC,YAAW,OAAe;AAC/B,UAAQ,QAAS,QAAQ,MAAO;AACpC;AAgBA,IAAM,2BAA2B;AAAA,EAC7B,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,mBAAmB;AAAA,EACnB,aAAa;AAAA,EACb,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,OAAO;AAAA,EACP,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,UAAU;AAAA,EACV,SAAS;AAAA,EACT,WAAW;AAAA,EACX,SAAS;AAAA,EACT,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,SAAS;AAAA,EACT,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,UAAU;AAAA,EACV,WAAW;AAAA,EACX,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA;AAAA,EAErB,gCAAgC;AAAA,EAChC,iCAAiC;AAAA,EACjC,iCAAiC;AAAA,EACjC,iCAAiC;AAAA;AAAA,EAEjC,iCAAiC;AAAA,EACjC,uCAAuC;AAAA,EACvC,uCAAuC;AAAA,EACvC,uCAAuC;AAAA;AAAA,EAEvC,sBAAsB;AAAA,EACtB,6BAA6B;AAAA,EAC7B,uBAAuB;AAAA,EACvB,8BAA8B;AAAA,EAC9B,wBAAwB;AAAA,EACxB,6BAA6B;AAAA,EAC7B,yBAAyB;AAAA,EACzB,oCAAoC;AAAA,EACpC,4CAA4C;AAAA,EAC5C,6CAA6C;AAAA;AAAA,EAE7C,mCAAmC;AAAA,EACnC,oCAAoC;AAAA,EACpC,mCAAmC;AAAA,EACnC,oCAAoC;AAAA;AAAA,EAEpC,6BAA6B;AAAA;AAAA,EAE7B,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,gCAAgC,MAAM,IAAI;AAAA,EAC1C,wCAAwC,MAAM,IAAI;AAAA,EAClD,iCAAiC,MAAM,KAAK;AAAA,EAC5C,yCAAyC,MAAM,KAAK;AAAA,EACpD,iCAAiC,MAAM,KAAK;AAAA,EAC5C,yCAAyC,MAAM,KAAK;AAAA,EACpD,kCAAkC,MAAM,KAAK;AAAA,EAC7C,0CAA0C,MAAM,KAAK;AAAA,EACrD,kCAAkC,MAAM,KAAK;AAAA,EAC7C,0CAA0C,MAAM,KAAK;AAAA,EACrD,kCAAkC,MAAM,KAAK;AAAA,EAC7C,0CAA0C,MAAM,KAAK;AAAA;AAAA,EAErD,kCAAkC;AAAA,EAClC,wCAAwC;AAAA,EACxC,wCAAwC;AAAA,EACxC,0CAA0C;AAAA;AAAA,EAE1C,4BAA4B;AAAA,EAC5B,mCAAmC;AAAA,EACnC,kCAAkC;AAAA,EAClC,yCAAyC;AAC7C;;;ACxUO,SAAS,aAAa,QAA4B,OAA6D,YAAY;AAC9H,MAAI,QAAQ;AACR,QAAI,eAAe,KAAK,MAAM;AAC9B,QAAIC,OAAM,aAAa;AACvB,UAAM,QAAQ,IAAI,KAAKA,IAAG;AAC1B,aAAS,IAAI,GAAG,IAAIA,MAAK,KAAK;AAC1B,YAAM,CAAC,IAAI,aAAa,WAAW,CAAC;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AACJ;AAGO,SAAS,gCAAgC,OAAmC;AAC/E,QAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AAC3B,QAAM,QAAQ,aAAK,WAAW,IAAI,IAAI,EAAE;AACxC,QAAM,OAAO,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE,KAAK,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE,IAAI,IAAI,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE,IAAI,IAAI;AAChH,QAAM,QAAQ,aAAK,WAAW,GAAG,GAAG,CAAC;AACrC,QAAM,IAAI,IAAI;AACd,QAAM,QAAQ,aAAK,MAAM,aAAK,OAAO,GAAG,OAAO,KAAK;AACpD,eAAK,MAAM,OAAO,OAAO,KAAK;AAC9B,eAAK,UAAU,OAAO,KAAK;AAC3B,eAAK,MAAM,OAAO,OAAO,KAAK;AAC9B,eAAK,UAAU,OAAO,KAAK;AAC3B,QAAM,CAAC,IAAI,IAAI,EAAE,IAAI;AACrB,QAAM,CAAC,IAAI,IAAI,EAAE,IAAI;AACrB,SAAO,aAAK;AAAA,IACR;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACZ;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACZ;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IACZ,KAAK,CAAC;AAAA,IAAM,KAAK,CAAC;AAAA,IAAM,KAAK,CAAC;AAAA,IAAM;AAAA,EACxC;AACJ;;;ACpCA,IAAM,aAAa,IAAI,WAAW,CAAC,KAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAAM,IAAM,IAAM,IAAM,EAAI,CAAC;AAC1G,IAAM,aAAa,KAAM,KAAK;AAE9B,IAAM,kBAAkB;AAAA,EACpB,yBAAiB,GAAG;AAAA,EACpB,iCAAwB,GAAG;AAAA,EAC3B,mCAA0B,GAAG;AAAA,EAC7B,mCAA0B,GAAG;AAAA,EAC7B,sBAAc,GAAG;AAAA;AAAA,EAEjB,iBAAS,GAAG;AAAA,EACZ,0BAAkB,GAAG;AAAA,EACrB,wBAAgB,GAAG;AAAA,EACnB,8BAAqB,GAAG;AAAA,EACxB,gBAAQ,GAAG;AAAA,EACX,iBAAS,GAAG;AAAA,EACZ,eAAO,GAAG;AAAA;AAAA,EAEV,qCAA4B,GAAG;AAAA,EAC/B,wCAA+B,GAAG;AAAA,EAClC,yCAAgC,GAAG;AACvC;AAGA,IAAM,oBAAoB;AAAA,EACtB,eAAO,GAAG;AAAA,EACV,gBAAQ,GAAG;AAAA,EACX,iBAAS,GAAG;AAAA,EACZ,qBAAa,GAAG;AAAA,EAChB,2BAAmB,GAAG;AAAA,EACtB,2BAAmB,GAAG;AAAA,EACtB,0BAAiB,GAAG;AAAA,EACpB,qBAAY,GAAG;AAAA,EACf,2BAAkB,GAAG;AAAA,EACrB,eAAO,GAAG;AAAA,EACV,eAAM,GAAG;AAAA,EACT,wBAAe,GAAG;AAAA,EAClB,uBAAc,GAAG;AAAA,EACjB,wBAAe,GAAG;AAAA,EAClB,yBAAgB,GAAG;AACvB;AAGA,IAAM,4BAA4B;AAAA,EAC9B,eAAM,GAAG;AAAA,EACT,qBAAY,GAAG;AAAA,EACf,gBAAO,GAAG;AAAA,EACV,sBAAa,GAAG;AAAA,EAChB,iBAAQ,GAAG;AAAA,EACX,uBAAc,GAAG;AAAA,EACjB,mBAAU,GAAG;AAAA,EACb,kBAAS,GAAG;AAAA,EACZ,oBAAW,GAAG;AAAA,EACd,kBAAS,GAAG;AAAA,EACZ,wBAAe,GAAG;AAAA,EAClB,qBAAY,GAAG;AAAA,EACf,uBAAc,GAAG;AAAA,EACjB,kBAAS,GAAG;AAAA,EACZ,yBAAgB,GAAG;AAAA,EACnB,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,2BAAkB,GAAG;AAAA,EACrB,oBAAW,GAAG;AAAA,EACd,gBAAO,GAAG;AAAA,EACV,iBAAQ,GAAG;AAAA,EACX,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,iBAAQ,GAAG;AAAA,EACX,kBAAS,GAAG;AAAA,EACZ,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,kBAAS,GAAG;AAAA,EACZ,mBAAU,GAAG;AAAA,EACb,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,mBAAU,GAAG;AAAA,EACb,oBAAW,GAAG;AAAA,EACd,oBAAW,GAAG;AAAA,EACd,qBAAY,GAAG;AAAA,EACf,oBAAW,GAAG;AAAA,EACd,qBAAY,GAAG;AAAA;AAEnB;AAIA,IAAM,0BAA0B;AAAA,EAC5B,yCAAgC,GAAG;AAAA,EACnC,0CAAiC,GAAG;AAAA,EACpC,0CAAiC,GAAG;AAAA,EACpC,0CAAiC,GAAG;AAAA,EACpC,+BAAsB,GAAG;AAAA,EACzB,sCAA6B,GAAG;AAAA,EAChC,gCAAuB,GAAG;AAAA,EAC1B,uCAA8B,GAAG;AAAA,EACjC,iCAAwB,GAAG;AAAA,EAC3B,sCAA6B,GAAG;AAAA,EAChC,kCAAyB,GAAG;AAAA,EAC5B,6CAAoC,GAAG;AAAA,EACvC,qDAA4C,GAAG;AAAA,EAC/C,sDAA6C,GAAG;AAAA,EAChD,4CAAmC,GAAG;AAAA,EACtC,6CAAoC,GAAG;AAAA,EACvC,4CAAmC,GAAG;AAAA,EACtC,6CAAoC,GAAG;AAAA,EACvC,sCAA6B,GAAG;AAAA;AAAA;AAAA;AAIpC;AAGA,IAAM,wBAAwB;AAAA,EAC1B,GAAG;AAAA,EACH,GAAG;AAAA;AAAA;AAAA;AAAA;AAKP;AAGA,SAAS,YAAY,KAAiB;AAClC,QAAM,aAAa,IAAI,SAAS,IAAI,QAAQ,IAAI,YAAY,EAAE;AAC9D,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AACxC,QAAI,WAAW,SAAS,CAAC,KAAK,WAAW,CAAC,GAAG;AACzC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AAAA,EACJ;AAGA,QAAM,WAAW,YAAY;AAC7B,QAAM,iBAAiB,IAAI,SAAS,IAAI,QAAQ,KAAK,IAAI,YAAY,KAAK,QAAQ;AAClF,QAAM,aAAa,eAAe,UAAU,GAAG,IAAI;AACnD,QAAM,eAAe,eAAe;AAEpC,SAAO;AAAA,IACH,QAAQ,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC3D,YAAY,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC/D,UAAU,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC7D,kBAAkB,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IACrE,sBAAsB,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IACzE,YAAY,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC/D,aAAa,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAChE,YAAY,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC/D,uBAAuB,eAAe,UAAU,IAAI,UAAU,YAAY;AAAA;AAAA,IAC1E,eAAe,eAAe,UAAU,KAAK,UAAU,YAAY;AAAA;AAAA,IACnE,sBAAsB,eAAe,UAAU,KAAK,UAAU,YAAY;AAAA;AAAA,IAC1E,qBAAqB,eAAe,UAAU,KAAK,UAAU,YAAY;AAAA;AAAA,IACzE;AAAA,EACJ;AACJ;AAIA,UAAU,UAAU,QAAgB,KAAiB,cAAuB;AACxE,QAAM,OAAO,KAAK,IAAI,GAAG,OAAO,oBAAoB;AACpD,QAAM,WAAW,KAAK,IAAI,GAAG,OAAO,qBAAqB;AACzD,QAAM,QAAQ,OAAO;AACrB,QAAM,QAAQ,KAAK,IAAI,GAAG,OAAO,UAAU;AAC3C,MAAI,aAAa,aAAa,OAAO;AACrC,QAAM,iBAAkB,SAAS,KAAK,OAAO,yBAAyB,IAAK,IAAI,WAAW,QAAQ;AAClG,QAAM,WAAW,IAAI,SAAS,IAAI,QAAQ,IAAI,UAAU;AAExD,WAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACjC,UAAM,QAAQ,OAAO,cAAc;AACnC,UAAM,SAAS,OAAO,eAAe;AACrC,UAAM,YAAY,SAAS,SAAS,YAAY,YAAY;AAC5D,kBAAc;AACd,UAAM,cAAc,YAAY;AAChC,YAAQ,OAAO,cAAc,KAAK,CAAC;AACnC,aAAS,UAAU,GAAG,UAAU,UAAU,WAAW;AACjD,eAAS,OAAO,GAAG,OAAO,OAAO,QAAQ;AACrC,iBAAS,UAAU,GAAG,UAAU,OAAO,WAAW;AAE9C,gBAAM,QAAQ;AACd,wBAAc;AACd,gBAAM,MAAM;AACZ,gBAAM,QAAQ,EAAE,KAAK,SAAS,MAAM,OAAO,QAAQ,WAAW,CAAC,OAAO,GAAG,GAAG,QAAQ,IAAI,SAAS,OAAO,GAAG,EAAE;AAC7G,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,UAAQ,OAAO,cAAc,IAAI,UAAU;AAC/C;AAGO,SAAS,SAAS,KAAgC;AACrD,QAAM,SAAS,YAAY,GAAG;AAC9B,QAAM,EAAE,aAAa,IAAI;AACzB,QAAM,aAAa,kBAAkB,OAAO,oBAAoB;AAChE,QAAM,UAAU,OAAO,wBAAwB;AAC/C,QAAM,SAAS,OAAO,iBAAiB;AACvC,QAAM,OAAO,OAAO,aAAa;AACjC,QAAM,UAAU,OAAO,uBAAuB;AAC9C,QAAM,UAAU,KAAK,IAAI,GAAG,OAAO,oBAAoB;AACvD,QAAM,iBAAiB,sBAAsB,OAAO,gBAAgB;AACpE,QAAM,OAAO,UAAU,kBAAkB,SAAS,qBAAqB,OAAO,eAAe;AAC7F,QAAM,OAAO,OAAO,SAAS,gBAAgB,OAAO,MAAM,IAAI;AAC9D,QAAM,MAAM,EAAE,OAAO,OAAO,YAAY,QAAQ,OAAO,aAAa,GAAI,OAAO,EAAE,OAAO,OAAO,WAAW,IAAI,OAAW;AACzH,MAAI,OAAsC;AAC1C,MAAI,QAAQ;AACR,UAAM,SAAS,IAAI,MAAM,OAAO,EAAE,KAAK,IAAI,EAAE,IAAI,OAAM,CAAC,CAAW;AACnE,eAAW,SAAS,UAAU,QAAQ,KAAK,YAAY,GAAG;AACtD,aAAO,MAAM,GAAG,EAAE,MAAM,IAAI,IAAI,MAAM;AAAA,IAC1C;AACA,WAAO;AAAA,EACX,OAAO;AACH,WAAO,IAAI,MAAoB,OAAO;AACtC,eAAW,SAAS,UAAU,QAAQ,KAAK,YAAY,GAAG;AACtD,WAAK,MAAM,GAAG,IAAI,MAAM;AAAA,IAC5B;AAAA,EACJ;AACA,QAAM,YAAY,UAAU,EAAE,SAAS,KAAK,IAAa,EAAE,OAAO,KAAK,CAAC,EAAE;AAC1E,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,IACH,GAAG;AAAA,EACP;AAEJ;;;ACtOO,IAAM,mBAAN,MAA+C;AAAA,EACzC,OAAO;AAAA,EACR;AAAA,EACR;AAAA,EACA;AAAA;AAAA,EAMS,WAAW;AAAA,IAChB,mBAAmB;AAAA,IACnB,UAAU;AAAA,EACd;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,wBAAwB,SAAS,MAAM,UAAU,SAAS;AAAA,EACzE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,EAAE,cAAc,eAAe,IAAI,QAAQ,QAAQ,QAAQ,WAAW;AAC5E,UAAM,MAAM,QAAQ,YAAY,YAAY;AAC5C,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,OAAO,WAAW,CAAC;AACvG,UAAM,sBAAsB,CAAC,UAAU,YAAY;AACnD,UAAM,kBAAkB,CAAC,mBAAmB,uBAAuB;AACnE,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,qBAAqB,gBAAgB,CAAC;AAC1H,WAAO,EAAE,KAAK,UAAU,QAAQ;AAAA,EACpC;AAAA,EAEA,MAAM,iBAAiB,SAAc;AACjC,QAAI,KAAK,iBAAiB;AACtB,WAAK,gBAAgB,MAAM;AAAA,IAC/B;AACA,UAAM,kBAAkB,KAAK,kBAAkB,IAAI,gBAAgB;AACnE,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI;AACA,YAAM,WAAW;AAAA,QACbC,UAAiD,IAAI,IAAI,gBAAgB,OAAO,CAAC;AAAA,QACjFA,UAAwC,IAAI,IAAI,kBAAkB,OAAO,CAAC;AAAA,QAC1EA,UAAwC,IAAI,IAAI,kBAAkB,OAAO,CAAC;AAAA,MAC9E;AACA,YAAM,CAAC,UAAU,SAAS,MAAM,IAAI,MAAM,QAAQ,IAAI,QAAQ;AAC9D,WAAK,gBAAgB,EAAE,SAAS,UAAU,OAAO;AAAA,IACrD,UAAE;AACE,WAAK,kBAAkB;AAAA,IAC3B;AAEA,mBAAeA,UAAkC,KAAU;AACvD,YAAM,WAAW,MAAM,MAAM,KAAK,EAAE,MAAM,QAAQ,OAAO,CAAC;AAC1D,UAAI,SAAS,IAAI;AACb,YAAI,UAAU,MAAM,SAAS,YAAY;AACzC,YAAI,SAAS,SAAS,IAAI,WAAW,OAAO,CAAC;AAC7C,eAAO;AAAA,MACX,OAAO;AACH,cAAM,IAAI,MAAM,cAAc,SAAS,MAAM,IAAI,SAAS,MAAM,EAAE;AAAA,MACtE;AAAA,IACJ;AAAA,EACJ;AACJ;AAKA,IAAM,0BAAN,MAA6D;AAAA,EAGzD,YAAqB,SAAiC,QAAmC,UAA6B,WAAsB;AAAvH;AAAiC;AAAmC;AAA6B;AAClH,SAAK,SAAS,UAAU,IAAI,cAAc,QAAQ,uBAAuB;AAAA,EAC7E;AAAA,EAJA;AAAA,EAMA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,WAAW,QAAQ,UAAU,OAAO,IAAI;AACzD,UAAM,EAAE,IAAI,IAAI;AAChB,UAAM,EAAE,WAAW,IAAI;AAEvB,QAAI,QAAQ,gBAAgB,EAAE,WAAW,CAAC,GAAG;AACzC,eAAS,OAAO,oBAAoB,WAAW,QAAQ;AACvD,cAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAC7D,YAAM,EAAE,IAAI,IAAI,MAAM;AACtB,UAAI,KAAK;AACL,YAAI,OAAO,OAAO,KAAK;AACnB,iBAAO,iBAAiB,IAAI,IAAI,GAAG,CAAC,EAAE,KAAK,MAAM;AAAE,oBAAQ,UAAU;AAAA,UAAM,CAAC;AAAA,QAChF;AAAA,MACJ,OAAO;AACH,gBAAQ,kBAAkB,IAAI;AAC9B,YAAI,OAAO,MAAM;AACjB,aAAK,SAAS,IAAI,cAAc,QAAQ,uBAAuB;AAAA,MACnE;AACA,aAAO,MAAM;AAAA,IACjB;AAEA,QAAI,OAAO,eAAe;AACtB,cAAQ,kBAAkB,OAAO,aAAa;AAC9C,UAAI,OAAO,MAAM;AACjB,WAAK,SAAS,IAAI,cAAc,OAAO,cAAc,MAAM;AAC3D,eAAS,OAAO,WAAW,QAAQ,YAAY;AAC/C,cAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAC7D,aAAO,gBAAgB;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,WAAW,OAAO,IAAI;AACvC,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,EAAE,IAAI,gBAAgB,eAAe,WAAW,IAAI;AAE1D,UAAM,aAAa,MAAM,WAAW,SAAS,CAAC,MAAM,MAAM,MAAM,CAAC;AAEjE,SAAK,CAAC,MAAM,WAAW,SAAS,MAAM,WAAW,QAAQ,MAAM,OAAO,QAAQ,gBAAgB;AAC1F,YAAM,EAAE,SAAS,IAAI,QAAQ;AAC7B,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,QAAQ;AAAA,QACzC,UAAU;AAAA,UACN,EAAE,MAAM,oBAAoB,SAAS,QAAQ,SAAS,cAAc;AAAA,UACpE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,QACvE;AAAA,QACA,OAAO;AAAA,UACH,MAAM;AAAA,UACN,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,oBAAoB,KAAK;AAAA,IACrC,OAAO;AACH,cAAQ,IAAI,EAAE,MAAM,SAAS,YAAY,GAAG,OAAO,WAAW,CAAC;AAAA,IACnE;AAAA,EACJ;AAAA,EAEA,cAAc;AACV,UAAM,EAAE,OAAO,IAAI;AACnB,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;AClJO,IAAM,aAAN,MAAyC;AAAA,EACnC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,UAAU;AAAA,EACd;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,kBAAkB,SAAS,MAAM,UAAU,SAAS;AAAA,EACnE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,EAAE,cAAc,eAAe,IAAI,QAAQ,QAAQ,QAAQ,KAAK;AACtE,UAAM,MAAM,QAAQ,YAAY,MAAM;AACtC,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAC3F,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,qBAAqB,CAAC,UAAU,MAAM,EAAE,CAAC;AAC7H,WAAO,EAAE,KAAK,UAAU,QAAQ;AAAA,EACpC;AACJ;AAKA,IAAM,oBAAN,MAAuD;AAAA,EACnD,YAAqB,SAAiC,QAA6B,UAA6B,WAAsB;AAAjH;AAAiC;AAA6B;AAA6B;AAAA,EAAwB;AAAA,EAExI,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,MAAM,sBAAsB,IAAI;AACxC,QAAI,QAAQ,gBAAgB,EAAE,MAAM,sBAAsB,CAAC,GAAG;AAC1D,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,YAAM,EAAE,OAAO,OAAO,OAAO,IAAI;AACjC,YAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,qBAAqB,CAAC;AAC9G,aAAO,SAAS,aAAK,cAAc,aAAK,OAAO,GAAG,QAAQ,gBAAgB;AAC1E,aAAO,QAAQ;AACf,aAAO,QAAQ;AACf,aAAO,SAAS,KAAK;AACrB,aAAO,SAAS,KAAK;AACrB,aAAO,QAAQ,KAAK;AACpB,aAAO,QAAQ,KAAK;AACpB,aAAO,WAAW,KAAK;AACvB,cAAQ,oBAAoB,UAAU,KAAK,QAAQ;AAAA,IACvD;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,EAAE,IAAI,eAAe,IAAI;AAE/B,QAAI,MAAM,KAAK,SAAS;AACpB,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,QAAQ;AAAA,QACzC,OAAO;AAAA,UACH,MAAM;AAAA,UACN,WAAW;AAAA,QACf;AAAA,QACA,QAAQ;AAAA,UACJ,iBAAiB;AAAA,QACrB;AAAA,QACA,OAAO;AAAA,UACH,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACd;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AAAA,EACJ;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;ACpGA,IAAM,cAAc,oBAAI,IAAuD;AAC/E,IAAM,cAAc,UAAU,QAAQ,aAAa;AAGnD,eAAe,aAAa,SAAiB;AACzC,MAAI;AACA,UAAM,OAAO,MAAM;AACnB,WAAO,MAAM,KAAK,mBAAmB,OAAO;AAAA,EAChD,QAAQ;AAAA,EACR;AACJ;AAGA,eAAsB,mBAAmB,UAAiD;AACtF,QAAM,IAAI,iCAAiC,KAAK,QAAQ;AACxD,MAAI,KAAK,EAAE,UAAU,GAAG;AACpB,UAAM,CAAC,GAAG,SAAS,QAAQ,IAAI;AAC/B,QAAI,eAAe,MAAM,YAAY,IAAI,OAAO;AAChD,QAAI,iBAAiB,MAAM;AACvB,UAAI,YAAY,cAAc,MAAM;AACpC,UAAI,CAAC,WAAW;AACZ,oBAAY,MAAM,aAAa,OAAO;AACtC,YAAI,WAAW;AACX,yBAAe,IAAI,QAAQ,SAAS;AACpC,sBAAY,IAAI,SAAS,YAAY;AAAA,QACzC,OAAO;AACH,sBAAY,IAAI,SAAS,IAAI;AAAA,QACjC;AAAA,MACJ;AACA,UAAI,WAAW;AACX,YAAI;AACA,gBAAM,aAAa,MAAM,UAAU,cAAc,QAAQ;AACzD,gBAAM,OAAO,MAAM,WAAW,QAAQ;AAEtC,iBAAO,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,gBAAgB,2BAA2B,EAAE,CAAC;AAAA,QACtG,QAAQ;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEJ;;;ACtCO,IAAM,oBAAN,MAAwB;AAAA,EAI3B,YAA6BC,WAAkD;AAAlD,oBAAAA;AAAA,EAC7B;AAAA,EAJA,SAA2C,QAAQ,QAAQ,MAAS;AAAA,EACpE,UAAU;AAAA,EAKV,QAAQ;AACJ,SAAK,SAAS,KAAK,SAAS;AAAA,EAChC;AAAA,EAEA,QAAQ;AACJ,SAAK,UAAU;AAAA,EACnB;AACJ;AAGO,IAAM,aAAN,MAAiB;AAAA,EAIpB,YAAmB,SAAe;AAAf;AAAA,EACnB;AAAA,EAJA,kBAAkB;AAAA,EAClB;AAAA,EAKA,MAAM,WAAW;AACb,QAAI,KAAK,kBAAkB,GAAG;AAC1B,YAAM,kBAAkB,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3D,aAAK,kBAAkB;AAAA,MAC3B,CAAC;AACD,YAAM;AACN,WAAK,kBAAkB;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEA,MAAc,QAAQ,UAAkB;AACpC,UAAM,MAAM,IAAI,IAAI,UAAU,KAAK,OAAO;AAC1C,QAAI,CAAC,IAAI;AACL,UAAI,SAAS,KAAK,SAAS,UAAU;AACzC,UAAM,WAAW,MAAM,mBAAmB,IAAI,QAAQ,KAAK,MAAM,MAAM,KAAK,EAAE,MAAM,OAAO,CAAC;AAC5F,QAAI,CAAC,SAAS,IAAI;AACd,YAAM,IAAI,MAAM,eAAe,SAAS,MAAM,KAAK,SAAS,UAAU,KAAK,GAAG,GAAG;AAAA,IACrF;AACA,WAAO;AAAA,EACX;AAAA,EAEA,6BAA6B,UAAkB,QAAyC;AACpF,UAAMC,QAAO;AACb,UAAMD,YAAW,IAAI,kBAAkB,UAAU,SAAY,oBAAoB,aAAa;AAC9F,IAAAA,UAAS,MAAM;AACf,WAAOA;AAEP,mBAAe,oBAAoB;AAC/B,UAAI;AACA,QAAAC,MAAK;AACL,cAAM,WAAW,MAAMA,MAAK,QAAQ,QAAQ;AAC5C,YAAI,CAAC,SAAS;AACV,gBAAM,IAAI,MAAM,eAAe,SAAS,MAAM,IAAI,SAAS,UAAU,GAAG;AAC5E,cAAM,SAAS,SAAS,KAAM,UAAU;AACxC,cAAM,UAAU,IAAI,WAAW,MAAO;AACtC,YAAI,SAAS;AACb,eAAO,CAACD,UAAS,SAAS;AACtB,gBAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,cAAI;AACA;AACJ,kBAAQ,IAAI,OAAO,MAAM;AACzB,oBAAU,MAAM;AAAA,QACpB;AACA,YAAI,CAACA,UAAS,SAAS;AACnB,kBAAQ,OAAO,UAAU,QAAQ,MAAM;AACvC,iBAAO,QAAQ;AAAA,QACnB,OAAO;AACH,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ,UAAE;AACE,QAAAC,MAAK;AACL,YAAIA,MAAK,mBAAmB,KAAKA,MAAK,iBAAiB;AACnD,UAAAA,MAAK,gBAAgB;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AAEA,mBAAe,gBAAgB;AAC3B,UAAI;AACA,QAAAA,MAAK;AACL,cAAM,WAAW,MAAMA,MAAK,QAAQ,QAAQ;AAC5C,YAAI,CAAC,SAAS;AACV,gBAAM,IAAI,MAAM,eAAe,SAAS,MAAM,IAAI,SAAS,UAAU,GAAG;AAE5E,cAAM,SAAS,SAAS,KAAM,UAAU;AACxC,cAAM,SAAuB,CAAC;AAC9B,YAAI,OAAO;AACX,eAAO,CAACD,UAAS,SAAS;AACtB,gBAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,cAAI;AACA;AACJ,iBAAO,KAAK,KAAK;AACjB,kBAAQ,MAAM;AAAA,QAClB;AACA,YAAI,CAACA,UAAS,SAAS;AACnB,gBAAM,UAAU,IAAI,WAAW,IAAI;AACnC,cAAI,SAAS;AACb,qBAAW,SAAS,QAAQ;AACxB,oBAAQ,IAAI,OAAO,MAAM;AACzB,sBAAU,MAAM;AAAA,UACpB;AACA,iBAAO,QAAQ;AAAA,QACnB,OAAO;AACH,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ,UAAE;AACE,QAAAC,MAAK;AACL,YAAIA,MAAK,mBAAmB,KAAKA,MAAK,iBAAiB;AACnD,UAAAA,MAAK,gBAAgB;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACrHO,IAAM,QAAN,MAAY;AAAA,EACN;AAAA,EAET,YAAY,QAA2B;AACnC,SAAK,QAAQ,IAAI,WAAW,QAAQ,GAAG,CAAC;AAAA,EAC5C;AAAA;AAAA,EAGA,WAAW;AACP,UAAM,EAAE,MAAM,IAAI;AAClB,eAAU;AACN,UAAI,QAAQ,gBAAgB,OAAO,GAAG,kBAAgB,cAAY,KAAK,kBAAgB;AACnF;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,WAAW;AACP,YAAQ,OAAO,KAAK,UAAU,MAAS;AACvC,UAAM,EAAE,MAAM,IAAI;AAClB,eAAU;AACN,UAAI,QAAQ,gBAAgB,OAAO,GAAG,kBAAgB,cAAY,KAAK,kBAAgB;AACnF;AAAA,MACJ;AACA,cAAQ,KAAK,OAAO,GAAG,cAAY;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA,EAGA,MAAM,YAAY;AACd,UAAM,EAAE,MAAM,IAAI;AAClB,eAAU;AACN,UAAI,QAAQ,gBAAgB,OAAO,GAAG,kBAAgB,cAAY,KAAK,kBAAgB;AACnF;AAAA,MACJ;AACA,YAAM,EAAE,OAAO,MAAM,IAAI,QAAQ,UAAU,OAAO,GAAG,cAAY;AACjE,UAAI,OAAO;AACP,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,QAAQ,gBAAgB,OAAO,GAAG,gBAAc,gBAAc,KAAK,gBAAc;AACjF,YAAM,IAAI,MAAM,2DAA2D;AAAA,IAC/E;AACA,YAAQ,OAAO,OAAO,CAAC;AAAA,EAC3B;AACJ;;;ACvCO,IAAM,eAAe;AAErB,IAAM,eAAN,MAAmB;AAAA,EAYtB,YAAqB,QAAqB;AAArB;AACjB,SAAK,MAAM,IAAI,WAAW,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,WAAW,iBAAiB,CAAC;AACjG,SAAK,OAAO,IAAI,YAAY,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,YAAY,iBAAiB,CAAC;AACpG,SAAK,OAAO,IAAI,YAAY,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,YAAY,iBAAiB,CAAC;AACpG,SAAK,MAAM,IAAI,UAAU,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,UAAU,iBAAiB,CAAC;AAC/F,SAAK,OAAO,IAAI,WAAW,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,WAAW,iBAAiB,CAAC;AAClG,SAAK,OAAO,IAAI,WAAW,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,WAAW,iBAAiB,CAAC;AAClG,SAAK,OAAO,IAAI,YAAY,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,YAAY,iBAAiB,CAAC;AACpG,SAAK,OAAO,IAAI,aAAa,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,aAAa,iBAAiB,CAAC;AACtG,SAAK,OAAO,IAAI,aAAa,QAAQ,GAAG,KAAK,MAAM,OAAO,aAAa,aAAa,iBAAiB,CAAC;AAAA,EAC1G;AAAA,EArBA,MAAM;AAAA,EACW;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAcT,KAA2B,IAAO,MAAiB;AACvD,QAAI,QAAQ;AACR,aAAO,GAAG,SAAS,GAAG,CAAC;AAC3B,UAAM,QAAQ,GAAG;AACjB,QAAI,UAAW,QAAQ,KAAO,KAAK,MAAM,QAAQ,KAAK;AACtD,YAAQ,OAAO,WAAW,KAAK,UAAU,KAAK;AAC9C,UAAM,SAAS,KAAK,MAAM,WAAW;AACrC,UAAM,MAAM,QAAQ;AACpB,SAAK,MAAM,MAAM,GAAG;AACpB,WAAO,GAAG,SAAS,OAAO,GAAG;AAAA,EACjC;AAAA,EAEA,IAAI,MAAM;AACN,WAAO,KAAK,OAAO,KAAK,OAAO;AAAA,EACnC;AAAA,EAEA,GAAG,MAAc;AACb,WAAO,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,EACnC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,GAAG,MAAc;AACb,WAAO,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,EACnC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,MAAc;AACd,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACpC;AACJ;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIO,IAAM,UAAU;AAGhB,IAAW,gBAAX,kBAAWC,mBAAX;AACH,EAAAA,8BAAA,YAAS,KAAT;AACA,EAAAA,8BAAA,WAAQ,KAAR;AACA,EAAAA,8BAAA,gBAAa,KAAb;AACA,EAAAA,8BAAA,gBAAa,KAAb;AACA,EAAAA,8BAAA,eAAY,KAAZ;AACA,EAAAA,8BAAA,oBAAiB,KAAjB;AACA,EAAAA,8BAAA,kBAAe,KAAf;AAPc,SAAAA;AAAA,GAAA;AAWX,IAAW,0BAAX,kBAAWC,6BAAX;AACH,EAAAA,kDAAA,YAAS,KAAT;AACA,EAAAA,kDAAA,WAAQ,KAAR;AACA,EAAAA,kDAAA,cAAW,KAAX;AACA,EAAAA,kDAAA,kBAAe,KAAf;AAJc,SAAAA;AAAA,GAAA;AAQX,IAAW,eAAX,kBAAWC,kBAAX;AACH,EAAAA,4BAAA,YAAS,KAAT;AACA,EAAAA,4BAAA,uBAAoB,KAApB;AACA,EAAAA,4BAAA,iBAAc,KAAd;AACA,EAAAA,4BAAA,eAAY,KAAZ;AAJc,SAAAA;AAAA,GAAA;AAQX,IAAW,kBAAX,kBAAWC,qBAAX;AACH,EAAAA,kCAAA,eAAY,KAAZ;AADc,SAAAA;AAAA,GAAA;AAmLX,SAAS,WAAW,GAAiB;AACxC,QAAM,QAAQ,EAAE,IAAI,EAAE;AACtB,QAAM,QAAQ,EAAE,GAAG,EAAE;AACrB,QAAM,SAAS;AAAA,IACX,SAAS;AAAA,IACT,WAAW;AAAA,MACP,QAAQ,MAAM,CAAC;AAAA,MACf,MAAM,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACvD,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,WAAW,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACzB,WAAW,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC7B,QAAQ;AAAA,QACJ,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB,QAAQ;AAAA,QACJ,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK;AAAA,UACD,QAAQ,MAAM,CAAC;AAAA,UACf,KAAK;AAAA,YACD,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,UACA,KAAK;AAAA,YACD,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,QACJ;AAAA,QACA,QAAQ;AAAA,UACJ,QAAQ,MAAM,CAAC;AAAA,UACf,OAAO;AAAA,YACH,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,UACA,QAAQ,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QAC1B;AAAA,MACJ;AAAA,MACA,WAAW,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MAC5D,qBAAqB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,IAC1E;AAAA,IACA,WAAW,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,IACxB,qBAAqB,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,IACnC,mBAAmB;AAAA,MACf,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,YAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC1B,aAAa,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC3B,iBAAiB,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,QAAQ,MAAM,CAAC;AAAA,MACf,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,cAAc,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC3B,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,UAAU,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MAC3D,wBAAwB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACzE,mBAAmB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACpE,qBAAqB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACtE,UAAU,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,EAAE;AAAA,IAC7D;AAAA,IACA,aAAa;AAAA,MACT,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACvB,WAAW;AAAA,QACP,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACvB;AAAA,MACA,YAAY,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,IACjE;AAAA,IACA,QAAQ;AAAA,MACJ,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU;AAAA,QACN,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,QAAQ,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC5B,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAChB,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAChB,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACpB;AAAA,MACA,OAAO,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC3B,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAClB,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QACpB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QACnB,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACxB;AAAA,MACA,UAAU,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC9B,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,cAAc,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAClC,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,YAAY;AAAA,QACR,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC7C;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,QAAQ,MAAM,CAAC;AAAA,MACf,eAAe,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,IACxD;AAAA,IACA,aAAa,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,IACnD,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,EAChC;AACA,UAAQ,OAAO,EAAE,GAAG;AACpB,SAAO;AACX;;;AChWO,IAAMC,WAAU;AA6MhB,SAASC,YAAW,GAAiB;AACxC,QAAM,QAAQ,EAAE,IAAI,CAAC;AACrB,QAAM,QAAQ,EAAE,GAAG,EAAE;AACrB,QAAM,SAAS;AAAA,IACX,SAAS;AAAA,IACT,WAAW;AAAA,MACP,QAAQ,MAAM,CAAC;AAAA,MACf,MAAM,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACvD,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,WAAW,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACzB,WAAW,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC7B,QAAQ;AAAA,QACJ,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB,QAAQ;AAAA,QACJ,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK;AAAA,UACD,QAAQ,MAAM,CAAC;AAAA,UACf,KAAK;AAAA,YACD,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,UACA,KAAK;AAAA,YACD,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,QACJ;AAAA,QACA,QAAQ;AAAA,UACJ,QAAQ,MAAM,CAAC;AAAA,UACf,OAAO;AAAA,YACH,QAAQ,MAAM,CAAC;AAAA,YACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,YACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,UACrB;AAAA,UACA,QAAQ,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QAC1B;AAAA,MACJ;AAAA,MACA,WAAW,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,IAChE;AAAA,IACA,WAAW,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,IACxB,mBAAmB;AAAA,MACf,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,YAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC1B,aAAa,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC3B,iBAAiB,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,IACnC;AAAA,IACA,SAAS;AAAA,MACL,QAAQ,MAAM,CAAC;AAAA,MACf,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,UAAU,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACxB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,cAAc,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC3B,YAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACzB,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MAC5B,UAAU,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MAC3D,wBAAwB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACzE,mBAAmB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACpE,qBAAqB,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,MACtE,UAAU,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,EAAE;AAAA,IAC7D;AAAA,IACA,aAAa;AAAA,MACT,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACvB,WAAW;AAAA,QACP,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACnB,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACvB;AAAA,MACA,YAAY,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE;AAAA,IACjE;AAAA,IACA,QAAQ;AAAA,MACJ,QAAQ,MAAM,CAAC;AAAA,MACf,UAAU;AAAA,QACN,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,QAAQ,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC5B,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAChB,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAChB,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACpB;AAAA,MACA,OAAO,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC3B,QAAQ,MAAM,CAAC;AAAA,QACf,KAAK,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QAClB,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QACpB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,QACnB,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,MACxB;AAAA,MACA,UAAU,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAC9B,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,cAAc,CAAC,MAAM,CAAC,IAAI,SAAY;AAAA,QAClC,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACjB,GAAG,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MACrB;AAAA,MACA,YAAY;AAAA,QACR,QAAQ,MAAM,CAAC;AAAA,QACf,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,MAC7C;AAAA,IACJ;AAAA,IACA,UAAU;AAAA,MACN,QAAQ,MAAM,CAAC;AAAA,MACf,eAAe,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,IACxD;AAAA,IACA,aAAa,CAAC,MAAM,CAAC,IAAI,SAAY,EAAE,IAAI,MAAM,CAAC,CAAC;AAAA,IACnD,eAAe,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA,EAChC;AACA,UAAQ,OAAO,EAAE,GAAG;AACpB,SAAO;AACX;;;ACpVA,IAAM,EAAE,cAAAC,eAAc,yBAAAC,0BAAyB,eAAAC,gBAAe,iBAAAC,iBAAgB,IAAI;AAalF,SAAS,gBAAgB,QAA0C;AAC/D,SAAO,OAAO,WAAmB;AACrC;AAEO,SAAS,mBAAmBC,UAAiB;AAChD,SAAOA,YAAmB,WAAWA,YAAoBA;AAC7D;AAyBA,IAAM,uBAAuB,CAAC,UAAU,SAAS,aAAa,cAAc,aAAa,kBAAkB,cAAc;AA6FzH,SAAS,QAAQ,GAAqB,GAAW;AAC7C,SAAO,aAAK,WAAW,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACjD;AAKA,SAAS,SAAS,GAAqE,GAAkB;AACrG,QAAM,QAAQ,EAAE,MAAM,CAAC;AACvB,QAAM,MAAM,QAAQ,EAAE,MAAM,CAAC;AAC7B,SAAO,CAAC,OAAO,GAAG;AACtB;AAEA,SAAS,sBAAsB,eAA8B,YAAoB;AAC7E,UAAQ,eAAe;AAAA,IACnB,KAAKC,eAAc;AACf,aAAO;AAAA,IACX,KAAKA,eAAc;AACf,aAAO,aAAa;AAAA,IACxB,KAAKA,eAAc;AACf,aAAO;AAAA,IACX,KAAKA,eAAc;AACf,aAAO,aAAa;AAAA,IACxB,KAAKA,eAAc;AACf,aAAO,aAAa;AAAA,IACxB,KAAKA,eAAc;AACf,aAAO,aAAa;AAAA,IACxB,KAAKA,eAAc;AACf,aAAO,aAAa;AAAA,IACxB;AACI,cAAQ,KAAK,2BAA2B,aAAa,GAAG;AAAA,EAChE;AACJ;AAEA,SAAS,iBAAiB,YAAoB;AAC1C,SAAO;AAAA,IACH,UAAU,EAAE,MAAM,aAAa,YAAY,CAAC,KAAK,KAAK,GAAG,EAAE;AAAA,IAC3D,QAAQ,EAAE,MAAM,WAAW,YAAY,CAAC,KAAK,KAAK,GAAG,EAAE;AAAA,IACvD,UAAU,EAAE,MAAM,cAAc,YAAY,CAAC,KAAK,GAAG,EAAE;AAAA,IACvD,OAAO,EAAE,MAAM,YAAY,YAAY,CAAC,OAAO,SAAS,QAAQ,OAAO,EAAE;AAAA,IACzE,cAAc,EAAE,MAAM,aAAa,YAAY,CAAC,KAAK,KAAK,GAAG,EAAE;AAAA,IAC/D,YAAY,EAAE,MAAM,cAAc,YAAY,CAAC,KAAK,KAAK,KAAK,GAAG,EAAE,MAAM,GAAG,UAAU,EAAE;AAAA,IACxF,eAAe,EAAE,MAAM,WAAW;AAAA,IAClC,UAAU,EAAE,MAAM,YAAY;AAAA,EAClC;AACJ;AAKA,SAAS,qBAAqB,SAAuC,aAAa,GAAG;AACjF,MAAI,SAAS;AACb,MAAI,UAAe,CAAC;AACpB,WAAS,YAAY,WAAmB;AACpC,UAAM,UAAU,YAAY,KAAK,SAAS,YAAY,KAAK;AAC3D,cAAU;AAAA,EACd;AACA,MAAI,WAAW;AACf,QAAM,gBAAgB,iBAAiB,UAAU;AACjD,aAAW,UAAU,SAAS;AAC1B,UAAM,EAAE,MAAM,WAAW,IAAI,cAAc,MAAM;AACjD,UAAM,QAAQ,YAAY,UAAU;AACpC,eAAW,KAAK,IAAI,UAAU,KAAK,iBAAiB;AACpD,gBAAY,KAAK,iBAAiB;AAClC,YAAQ,MAAM,IAAI;AAClB,cAAU,KAAK,oBAAoB;AAAA,EACvC;AACA,cAAY,QAAQ;AACpB,UAAQ,SAAS;AACjB,SAAO;AACX;AAEA,SAAS,qBAAqB,oBAA6C,YAA6B,cAAuB,cAAuB;AAClJ,QAAM,cAAmC,CAAC,UAAU;AACpD,MAAI,qBAAqBC,yBAAwB;AAAQ,gBAAY,KAAK,QAAQ;AAClF,MAAI,qBAAqBA,yBAAwB;AAAU,gBAAY,KAAK,UAAU;AACtF,MAAI,qBAAqBA,yBAAwB;AAAO,gBAAY,KAAK,OAAO;AAChF,MAAI,qBAAqBA,yBAAwB;AAAc,gBAAY,KAAK,cAAc;AAC9F,MAAI,aAAa;AAAG,gBAAY,KAAK,YAAY;AACjD,MAAI,cAAc;AACd,gBAAY,KAAK,eAAe;AAAA,EACpC;AACA,MAAI,cAAc;AACd,gBAAY,KAAK,UAAU;AAAA,EAC/B;AACA,SAAO;AACX;AAGO,SAAS,4BAA4B,mBAAsC,OAAc,wBAAiC,WAA2C;AACxK,MAAI,aAAa;AACjB,MAAI,oBAAoB;AACxB,MAAI,kBAAkB;AACtB,MAAI,mBAAmB;AACvB,MAAI,sBAAsB;AAE1B,QAAM,CAAC,OAAO,GAAG,IAAI;AACrB,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AAC9B,UAAM,WAAW,kBAAkB,SAAS,CAAC;AAC7C,QAAI,YAAY,QAAQ,KAAK,MAAM;AAC/B,YAAM,UAAU,kBAAkB,WAAW,CAAC;AAC9C,YAAM,WAAW,kBAAkB,YAAY,CAAC;AAChD,YAAMC,gBAAe,kBAAkB,gBAAgB,CAAC;AACxD,YAAM,aAAa,kBAAkB,WAAW,CAAC;AACjD,YAAM,aAAa,kBAAkB,cAAc,CAAC;AACpD,YAAM,gBAAgB,kBAAkB,cAAc,CAAC;AAGvD,YAAM,eAAeA,iBAAgB;AACrC,YAAM,eAAe;AACrB,YAAM,CAAC,KAAK,GAAG,IAAI,IAAI,qBAAqB,YAAY,YAAY,cAAc,YAAY;AAC9F,YAAM,oBAAoB,yBACtB,qBAAqB,CAAC,GAAG,CAAC,EAAE,SAAS,qBAAqB,MAAM,UAAU,EAAE,SAC5E,qBAAqB,CAAC,KAAK,GAAG,IAAI,GAAG,UAAU,EAAE;AACrD,oBAAc,sBAAsB,eAAe,UAAU,UAAU,QAAQ,KAAK;AACpF,yBAAmB;AACnB,0BAAoB;AACpB,6BAAuB,WAAW;AAClC,2BAAqBA;AAAA,IACzB,OAAO;AAAA,IAEP;AAAA,EACJ;AACA,QAAM,YAAY,mBAAmB,QAAS,IAAI;AAClD,QAAM,WAAW,oBAAoB,sBAAsB,kBAAkB;AAC7E,SAAO,EAAE,YAAY,SAAS;AAClC;AAEA,SAAS,MAAM,OAAmB;AAC9B,SAAO,MAAM,UAAU,IAAI,KAAK,OAAO,QAAM,OAAO,EAAE,SAAS,EAAE,EAAE,YAAY,GAAG,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE;AACxG;AAGO,SAAS,YAAY,UAAkB,QAAgB,wBAAiC,WAAuD;AAClJ,QAAM,EAAE,WAAW,UAAU,IAAI;AACjC,QAAM,WAAuB,CAAC;AAI9B,QAAM,wBAAkC,CAAC;AAEzC,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,UAAM,aAAa,UAAU,WAAW,CAAC;AACzC,UAAM,YAAY,UAAU,UAAU,CAAC;AACvC,UAAM,CAAC,WAAW,OAAO,IAAI,SAAS,UAAU,MAAM,CAAC;AACvD,UAAM,OAAO,UAAU,MAAM,WAAW,OAAO;AAC/C,UAAM,KAAK,MAAM,IAAI;AACrB,UAAM,YAAY,UAAU,UAAU,CAAC;AACvC,UAAM,WAAW,UAAU,cAAc,CAAC;AAC1C,UAAM,SAAS,QAAQ,UAAU,QAAQ,CAAC;AAC1C,UAAMC,SAAQ,UAAU,MAAM,CAAC;AAC/B,UAAM,SAAqB;AAAA,MACvB,KAAK;AAAA,QACD,KAAK,QAAQ,UAAU,OAAO,IAAI,KAAK,CAAC;AAAA,QACxC,KAAK,QAAQ,UAAU,OAAO,IAAI,KAAK,CAAC;AAAA,MAC5C;AAAA,MACA,QAAQ;AAAA,QACJ,QAAQ,QAAQ,UAAU,OAAO,OAAO,OAAO,CAAC;AAAA,QAChD,QAAQ,UAAU,OAAO,OAAO,OAAO,CAAC;AAAA,MAC5C;AAAA,IACJ;AAEA,UAAM,EAAE,QAAQ,IAAI,IAAI;AACxB,iBAAK,IAAI,OAAO,QAAgB,OAAO,QAAQ,MAAM;AACrD,iBAAK,IAAI,IAAI,KAAa,IAAI,KAAK,MAAM;AACzC,iBAAK,IAAI,IAAI,KAAa,IAAI,KAAK,MAAM;AAEzC,UAAM,yBAAyB,SAAS,UAAU,WAAW,CAAC;AAC9D,UAAM,mBAAmB,sBAAsB,UAAU;AACzD,UAAM,EAAE,YAAY,SAAS,IAAI,4BAA4B,OAAO,mBAAmB,wBAAwB,wBAAwB,SAAS;AAChJ,UAAM,kBAAkB,cAAc,oBAAoB;AAC1D,QAAI;AACJ,QAAI,gBAAgB,MAAM,GAAG;AACzB,YAAM,CAAC,UAAU,MAAM,IAAI,SAAS,OAAO,UAAU,qBAAqB,CAAC;AAC3E,UAAI,YAAY,QAAQ;AACpB,8BAAsB,CAAC,GAAG,OAAO,oBAAoB,MAAM,UAAU,MAAM,CAAC;AAAA,MAChF;AAAA,IACJ;AAEA,aAAS,KAAK,EAAE,IAAI,YAAY,WAAW,WAAW,UAAU,QAAQ,OAAAA,QAAO,QAAQ,YAAY,iBAAiB,UAAU,oBAAoB,CAAC;AAAA,EACvJ;AACA,SAAO;AACX;AAGO,UAAU,aAAa,QAAgB,WAA2C;AACrF,QAAM,EAAE,QAAQ,IAAI;AACpB,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,UAAM,WAAW,QAAQ,SAAS,CAAC;AACnC,UAAM,YAAY,QAAQ,cAAc,CAAC;AACzC,QAAI,YAAY,QAAQ,KAAK,MAAM;AAC/B,YAAM,aAAa,QAAQ,WAAW,CAAC;AACvC,YAAMC,YAAW,QAAQ,SAAS,CAAC;AACnC,YAAM,gBAAgB,QAAQ,cAAc,CAAC;AAC7C,YAAM,eAAe,iBACjB,OAAQ,QAAQ,SAAS,MAAM,CAAC,KAAK,MAAM,aAAaJ,eAAc,kBAAkB,aAAaA,eAAc,aACnHK,cAAa,YACb,QAAQ,aAAa,CAAC;AAC1B,YAAM,gBAAgB,QAAQ,cAAc,CAAC;AAC7C,YAAM,aAAa,QAAQ,WAAW,CAAC;AACvC,YAAM,aAAa,QAAQ,cAAc,CAAC;AAC1C,YAAM,cAAc,SAAS,QAAQ,UAAU,CAAC;AAChD,YAAM,aAAa,SAAS,QAAQ,wBAAwB,CAAC;AAC7D,YAAM,eAAe,SAAS,QAAQ,UAAU,CAAC;AACjD,YAAM,EAAE,YAAY,UAAAD,WAAU,eAAe,cAAc,eAAe,YAAY,YAAY,aAAa,YAAY,aAAa;AAAA,IAC5I;AAAA,EACJ;AACJ;AAIA,SAAS,uBAA6CE,OAAoB,KAAQ,KAAQ,YAAoB,YAAoB,OAAe,KAAa;AAC1J,QAAM,SAAS,aAAa,IAAI;AAChC,QAAM,SAAS,aAAa,IAAI;AAChC,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,MAAI,IAAI;AACR,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AAC9B,QAAI,CAAC,IAAI,IAAI,CAAC;AACd,SAAK;AAAA,EACT;AACJ;AAEA,SAAS,uBAA6CA,OAAoB,KAAQ,KAAa,YAAoB,YAAoB,OAAe,KAAa;AAC/J,QAAM,SAAS,aAAa,IAAI;AAChC,QAAM,SAAS,aAAa,IAAI;AAChC,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,UAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AAC3C,MAAI,IAAI;AACR,WAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AAC9B,QAAI,CAAC,IAAI;AACT,SAAK;AAAA,EACT;AACJ;AAEA,SAAS,YAAYA,OAAoB,QAAgB,wBAAiC,gBAAyB,YAAwB,WAAyD;AAChM,QAAM,EAAE,QAAQ,YAAY,IAAI;AAEhC,QAAM,oBAAoB,CAAC,GAAG,aAAa,QAAQ,SAAS,CAAC;AAE7D,MAAI,YAA2B,CAAC;AAChC,QAAM,qBAAqB,oBAAI,IAAY;AAU3C,QAAM,SAAS,oBAAI,IAAmB;AACtC,WAAS,IAAI,GAAG,IAAI,kBAAkB,QAAQ,KAAK;AAC/C,UAAM,EAAE,cAAc,eAAe,YAAY,YAAY,WAAW,IAAI,kBAAkB,CAAC;AAC/F,UAAM,MAAM,GAAG,YAAY,IAAI,aAAa,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU;AACtF,QAAI,QAAQ,OAAO,IAAI,GAAG;AAC1B,QAAI,CAAC,OAAO;AACR,cAAQ,EAAE,cAAc,eAAe,YAAY,YAAY,gBAAgB,CAAC,EAAE;AAClF,aAAO,IAAI,KAAK,KAAK;AAAA,IACzB;AACA,UAAM,eAAe,KAAK,CAAC;AAAA,EAC/B;AAGA,aAAW,MAAM,SAAS;AAG1B,aAAW,EAAE,cAAc,eAAe,YAAY,YAAY,eAAe,KAAK,OAAO,OAAO,GAAG;AAmDnG,QAASC,oBAAT,SAA4C,iBAAiE;AACzG,YAAM,UAAyB,CAAC;AAChC,YAAMC,WAAU,CAAC;AACjB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,eAAe,GAAG;AACxD,cAAM,SAAS;AACf,YAAIC,SAAQ;AACZ,YAAI,QAAQ;AACR,UAAAA,SAAQ,QAAQ,QAAQ,MAAM;AAC9B,cAAIA,SAAQ,GAAG;AACX,YAAAA,SAAQ,QAAQ;AAChB,oBAAQ,KAAK,MAAM;AAAA,UACvB;AAAA,QACJ;AACA,gBAAQ,IAAID,UAAS,KAAKC,MAAK;AAAA,MACnC;AACA,aAAO,CAAC,SAASD,QAAO;AAAA,IAC5B;AAhBS,2BAAAD;AAlDT,QAAI,eAAe,UAAU;AACzB;AACJ,UAAM,cAAc,eAAe,IAAI,OAAK,kBAAkB,CAAC,CAAC;AAChE,UAAM,eAAe,YAAY,KAAK,OAAK,EAAE,iBAAiB,GAAI;AAClE,UAAM,eAAe,YAAY,KAAK,OAAK,EAAE,YAAY,UAAU;AAEnE,UAAM,iBAAiB,qBAAqB,YAAY,YAAY,cAAc,YAAY;AAC9F,UAAM,CAAC,SAAS,GAAG,gBAAgB,IAAI;AACvC,UAAM,cAAc,yBAAyB,mBAAmB;AAChE,UAAM,iBAAiB,qBAAqB,CAAC,OAAO,GAAG,UAAU,EAAE;AACnE,UAAM,oBAAoB,iBAAiB;AAC3C,UAAM,gBAAgB,qBAAqB,aAAa,UAAU;AAClE,UAAM,eAAe,cAAc;AAEnC,UAAM,eAAe,CAAC,GAAG,IAAI,IAAY,YAAY,IAAI,QAAM,GAAG,UAAU,CAAC,CAAC,EAAE,KAAK;AACrF,QAAI,cAAc;AAClB,QAAI,aAAa;AACjB,QAAI,eAAe;AACnB,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,YAAM,KAAK,YAAY,CAAC;AACxB,YAAM,SAAS,GAAG,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC;AACnD,YAAM,SAAS,GAAG,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC;AACjD,qBAAe;AACf,oBAAc;AACd,UAAI,iBAAiBP,eAAc,WAAW;AAC1C,wBAAgB,KAAK,OAAO,SAAS,IAAI,SAAS,UAAU,CAAC;AAAA,MACjE;AAAA,IACJ;AACA,UAAM,eAAe,IAAI,YAAY,cAAc,YAAY;AAC/D,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,kBAAkB,iBAAiBA,eAAc,WAAW;AAC5D,0BAAoB,IAAI,WAAW,IAAI,YAAY,eAAe,iBAAiB,CAAC;AACpF,+BAAyB,IAAI,YAAY,YAAY;AACrD,2BAAqB,IAAI,WAAW,YAAY;AAAA,IACpD;AACA,UAAM,iBAAiB,yBAAyB,IAAI,YAAY,cAAc,cAAc,IAAI;AAChG,QAAI;AACJ,QAAI,aAAa;AACb,oBAAc,KAAK,cAAc,QAAS,cAAc,aAAa,UAAU;AAAA,IACnF;AACA,UAAM,kBAAkB,IAAI,WAAW,WAAW;AAClD,QAAI,cAAc;AAClB,QAAI,eAAe;AACnB,QAAI,iBAAiB;AACrB,QAAI,aAA8B,CAAC;AAEnC,UAAM,eAA2C,CAAC;AAoBlD,UAAM,CAAC,eAAe,MAAM,IAAIO,kBAAiB;AAAA,MAC7C,SAAS;AAAA,MACT,WAAW,iBAAiB;AAAA,MAC5B,KAAK;AAAA,MACL,QAAQ,mBAAmB;AAAA,MAC3B,OAAO,wBAAwB;AAAA,MAC/B,cAAc,oBAAoB;AAAA,IACtC,CAAC;AAED,eAAW,cAAc,cAAc;AACnC,YAAM,SAAS,YAAY,OAAO,QAAM,GAAG,cAAc,UAAU;AACnE,UAAI,OAAO,UAAU;AACjB;AAEJ,YAAM,iBAAiB,cAAc,cAAc;AAEnD,iBAAW,WAAW,QAAQ;AAC1B,cAAM,EAAE,aAAa,YAAY,eAAe,YAAAG,aAAY,SAAS,IAAI;AACzE,cAAM,UAAU,EAAE,eAAe,SAAS;AAC1C,cAAM,CAAC,UAAU,MAAM,IAAI;AAC3B,cAAM,CAAC,UAAU,MAAM,IAAI;AAG3B,cAAM,gBAAgB,iBAAiBA,WAAU;AACjD,mBAAW,cAAc,aAAa;AAClC,gBAAM,EAAE,MAAM,WAAW,IAAI,cAAc,UAAU;AACrD,gBAAM,MAAM,IAAI,KAAK,cAAc,eAAe,YAAY;AAC9D,gBAAMC,SAAQ,YAAY,UAAU;AACpC,mBAAS,IAAI,GAAG,IAAIA,QAAO,KAAK;AAC5B,kBAAM,OAAO,cAAc,UAAU,IAAK,IAAI,KAAK;AACnD,gBAAI,cAAc,QAAQ;AACtB,kBAAI,MAAM,QAAQ,IAAI,QAAQ,UAAU;AACxC,kBAAI,YAAY;AACZ,sBAAM,QAAQ,IAAI,KAAK,WAAW,CAAC,CAAC;AAAA,cACxC;AACA,qCAAuBL,OAAM,KAAK,KAAK,MAAM,cAAc,UAAU,MAAM;AAAA,YAC/E,OAAO;AACH,oBAAM,MAAM,QAAQ,IAAI,SAAS,UAAU;AAC3C,qCAAuBA,OAAM,KAAK,KAAK,MAAM,cAAc,UAAU,MAAM;AAAA,YAC/E;AAAA,UACJ;AAAA,QACJ;AAGA,YAAI,wBAAwB;AAC5B,YAAI,qBAAqB,wBAAwB;AAC7C,gBAAM,EAAE,GAAG,GAAG,EAAE,IAAI,OAAO;AAC3B,cAAI,IAAI,iBAAiB,IAAI;AAC7B,cAAI,eAAe,aAAa;AAC5B,qCAAyB,SAAS,YAAY;AAC9C,qBAAS,IAAI,UAAU,IAAI,QAAQ,KAAK;AAEpC,oBAAM,MAAM,YAAY,CAAC,IAAI;AAC7B,gCAAkB,GAAG,IAAI,EAAE,GAAG;AAC9B,gCAAkB,GAAG,IAAI,EAAE,GAAG;AAC9B,gCAAkB,GAAG,IAAI,EAAE,GAAG;AAAA,YAClC;AAAA,UACJ,OAAO;AACH,qCAAyB,SAAS,YAAY;AAC9C,qBAAS,IAAI,UAAU,IAAI,QAAQ,KAAK;AACpC,oBAAM,MAAM;AACZ,gCAAkB,GAAG,IAAI,EAAE,GAAG;AAC9B,gCAAkB,GAAG,IAAI,EAAE,GAAG;AAC9B,gCAAkB,GAAG,IAAI,EAAE,GAAG;AAAA,YAClC;AAAA,UACJ;AACA,iCAAuB,KAAK,UAAU,gBAAgB,iBAAiB,qBAAqB;AAAA,QAChG;AAEA,YAAI,gBAAgB;AAEhB,gBAAM,MAAM,IAAI,WAAW,gBAAgB,eAAe,cAAc;AACxE,iCAAuBA,OAAM,KAAK,OAAO,SAAS,GAAG,GAAG,gBAAgB,UAAU,MAAM;AACxF,iCAAuBA,OAAM,KAAK,OAAO,SAAS,GAAG,GAAG,gBAAgB,UAAU,MAAM;AACxF,iCAAuBA,OAAM,KAAK,OAAO,SAAS,GAAG,GAAG,gBAAgB,UAAU,MAAM;AAAA,QAC5F;AAGA,YAAI,eAAe,aAAa;AAC5B,mBAAS,IAAI,UAAU,IAAI,QAAQ,KAAK;AACpC,wBAAY,aAAa,IAAI,YAAY,CAAC,IAAI;AAAA,UAClD;AAAA,QACJ;AAEA,cAAM,YAAY,gBAAgB,SAAS;AAC3C,cAAM,cAAc,kBAAkB,SAAS,YAAY;AAE3D,cAAM,iBAAiB,WAAW,QAAQ,QAAQ,KAAK;AACvD,YAAI,gBAAgB;AAChB,0BAAgB,KAAK,gBAAgB,cAAc,SAAS;AAC5D,8BAAoB,KAAK,gBAAgB,gBAAgB,WAAW;AAAA,QACxE;AAGA,cAAM,OAAO,aAAa,SAAS;AACnC,YAAI,QAAQ,KAAK,aAAa,IAAI,EAAE,YAAY,UAAU;AAEtD,uBAAa,IAAI,EAAE,YAAY;AAC/B,uBAAa,IAAI,EAAE,cAAc;AAAA,QACrC,OAAO;AACH,uBAAa,KAAK,EAAE,UAAU,aAAa,cAAc,WAAW,eAAe,gBAAgB,YAAY,CAAC;AAAA,QACpH;AACA,0BAAkB;AAClB,wBAAgB,SAAS;AAAA,MAC7B;AAEA,YAAM,eAAe,cAAc,cAAc;AACjD,YAAM,aAAa,kBAAkB,cAAc,YAAY,oBAAoB;AACnF,YAAM,QAAQ,eAAe;AAC7B,iBAAW,KAAK,EAAE,YAAY,YAAY,OAAO,gBAAgB,MAAM,CAAC;AAAA,IAC5E;AAEA,YAAQ,OAAO,gBAAgB,WAAW;AAC1C,YAAQ,OAAO,eAAe,UAAU;AACxC,YAAQ,OAAO,mBAAmB,wBAAwB,UAAU,EAAE;AACtE,UAAM,UAAU,eAAe;AAE/B,UAAM,CAAC,cAAc,UAAU,IAAI,YAAY,CAAC,EAAE;AAClD,QAAI;AACJ,QAAI,aAAa,cAAc;AAC3B,yBAAmB;AAAA,IACvB;AAEA,QAAI,oBAAoB,QAAW;AAC/B,yBAAmB,IAAI,gBAAgB;AAAA,IAC3C;AAEA,UAAM,SAAS;AACf,UAAM,iBAAiB,cAAc,KAAK,cAAc,IAAI,UAAmB,YAAY,UAAU;AACrG,UAAM,mBAAmB;AAAA,MACrB,UAAU,EAAE,MAAM,cAAc,QAAQ,OAAO,KAAK,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,cAAc,UAAU,GAAG,YAAY,yBAAyB,IAAI,OAAO;AAAA,MACxM,SAAS,aAAaL,yBAAwB,WAAW,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,QAAQ,YAAY,MAAM,YAAY,cAAc,QAAQ,GAAG,YAAY,OAAO,IAAI;AAAA,MACnO,UAAU,eAAe,EAAE,MAAM,gBAAgB,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,iBAAiB,YAAY,OAAO,YAAY,cAAc,eAAe,GAAG,YAAY,OAAO,IAAI;AAAA,MAClN,UAAU,eAAe,EAAE,MAAM,gBAAgB,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,gBAAgB,YAAY,OAAO,YAAY,cAAc,UAAU,GAAG,YAAY,OAAO,IAAI;AAAA,MAC5M,WAAW,aAAaA,yBAAwB,aAAa,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,cAAc,YAAY,OAAO,YAAY,cAAc,UAAU,GAAG,YAAY,OAAO,IAAI;AAAA,MAChP,QAAQ,aAAaA,yBAAwB,UAAU,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,iBAAiB,YAAY,MAAM,YAAY,cAAc,OAAO,GAAG,YAAY,OAAO,IAAI;AAAA,MACzO,eAAe,aAAaA,yBAAwB,iBAAiB,IAAI,EAAE,MAAM,cAAc,QAAQ,OAAO,SAAS,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,cAAc,cAAc,GAAG,YAAY,OAAO,IAAI;AAAA,MACtP,YAAY,cAAc,IAAI,EAAE,MAAM,gBAAgB,QAAQ,OAAO,SAAS,gBAAgB,YAAY,eAAe,cAAc,YAAY,OAAO,YAAY,cAAc,YAAY,GAAG,YAAY,OAAO,IAAI;AAAA,MAC1N,YAAY,oBAAoB,EAAE,MAAM,cAAc,QAAQ,OAAO,QAAQ,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,GAAG,YAAY,GAAG,IAAI;AAAA,MAC5K,YAAY,oBAAoB,EAAE,MAAM,cAAc,QAAQ,OAAO,QAAQ,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,GAAG,YAAY,GAAG,IAAI;AAAA,MAC5K,YAAY,oBAAoB,EAAE,MAAM,cAAc,QAAQ,OAAO,QAAQ,gBAAgB,GAAG,eAAe,SAAS,YAAY,MAAM,YAAY,IAAI,YAAY,GAAG,IAAI;AAAA,MAC7K,gBAAgB,oBAAoB,EAAE,MAAM,gBAAgB,QAAQ,OAAO,OAAO,gBAAgB,GAAG,eAAe,gBAAgB,YAAY,OAAO,YAAY,GAAG,YAAY,EAAE,IAAI;AAAA,MACxL,WAAW,EAAE,MAAM,gBAAgB,QAAQ,OAAO,WAAW,gBAAgB,GAAG,eAAe,iBAAiB,YAAY,OAAO,YAAY,GAAG,YAAY,EAAE;AAAA,MAChK,cAAc,EAAE,MAAM,gBAAgB,QAAQ,OAAO,cAAc,gBAAgB,GAAG,eAAe,iBAAiB,YAAY,OAAO,YAAY,GAAG,YAAY,EAAE;AAAA,IAC1K;AAEA,iBAAa,KAAK,CAAC,GAAG,MAAO,EAAE,WAAW,EAAE,QAAS;AAErD,cAAU,KAAK;AAAA,MACX;AAAA,MACA,eAAe,qBAAqB,aAAa;AAAA,MACjD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,aAAW,MAAM,OAAO;AAExB,QAAM,WAAW,IAAI,MAA+B,OAAO,YAAY,MAAM;AAC7E,QAAM,EAAE,YAAY,IAAI;AACxB,aAAW,KAAK,oBAAoB;AAChC,UAAM,CAAC,OAAO,GAAG,IAAI,SAAS,YAAY,YAAY,CAAC;AACvD,UAAM,WAAW,YAAY,SAAS,CAAC;AACvC,UAAM,YAAY;AAAA,MACd,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,MAC3B,YAAY,UAAU,IAAI,CAAC;AAAA,IAC/B;AACA,UAAM,MAAM,OAAO,cAAc,SAAS,OAAO,GAAG;AACpD,UAAM,SAAS,SAAS,GAAG;AAC3B,aAAS,CAAC,IAAI,EAAE,UAAU,WAAW,OAAO;AAAA,EAChD;AAGA,SAAO,EAAE,WAAW,SAAS;AACjC;AAEO,SAAS,UAAUK,OAAoB,IAAY,wBAAiC,gBAAyBM,UAAiB,QAAqB,YAAwB,aAAsB;AACpM,UAAQ,OAAO,mBAAmBA,QAAO,CAAC;AAC1C,QAAM,IAAI,IAAI,aAAa,MAAM;AACjC,MAAI,SAASA,YAAmB,UAAkB,WAAW,CAAC,IAAaC,YAAW,CAAC;AACvF,MAAI;AACJ,cAAY,cAAe,cACvB,WAAW,QAAQ,QAAQ,KAAK,MAChC;AACJ,QAAM,aAAa,YAAY,IAAI,QAAQ,wBAAwB,SAAS;AAC5E,QAAM,WAAW,YAAYP,OAAM,QAAQ,wBAAwB,gBAAgB,YAAY,SAAS;AACxG,SAAO,EAAE,YAAY,SAAS;AAClC;;;AC3qBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAI;AACG,SAAS,eAAe,KAAK;AAChC,SAAO;AACX;AAGA,IAAI,qBAAqB;AAEzB,SAAS,kBAAkB;AACvB,MAAI,uBAAuB,QAAQ,mBAAmB,eAAe,GAAG;AACpE,yBAAqB,IAAI,WAAW,KAAK,OAAO,MAAM;AAAA,EAC1D;AACA,SAAO;AACX;AAEA,SAAS,oBAAoB,KAAKQ,MAAK;AACnC,QAAM,QAAQ;AACd,SAAO,gBAAgB,EAAE,SAAS,MAAM,GAAG,MAAM,IAAIA,IAAG;AAC5D;AAEA,IAAM,OAAO,IAAI,MAAM,GAAG,EAAE,KAAK,MAAS;AAE1C,KAAK,KAAK,QAAW,MAAM,MAAM,KAAK;AAEtC,SAAS,UAAU,KAAK;AAAE,SAAO,KAAK,GAAG;AAAG;AAE5C,IAAI,YAAY,KAAK;AAErB,SAAS,WAAW,KAAK;AACrB,MAAI,MAAM;AAAK;AACf,OAAK,GAAG,IAAI;AACZ,cAAY;AAChB;AAEA,SAAS,WAAW,KAAK;AACrB,QAAM,MAAM,UAAU,GAAG;AACzB,aAAW,GAAG;AACd,SAAO;AACX;AAGO,SAAS,OAAO;AACnB,OAAK,KAAK;AACd;AAEA,IAAI,kBAAkB;AAEtB,SAAS,kBAAkB,KAAK,QAAQ;AACpC,QAAM,MAAM,OAAO,IAAI,SAAS,GAAG,CAAC,MAAM;AAC1C,kBAAgB,EAAE,IAAI,KAAK,MAAM,CAAC;AAClC,oBAAkB,IAAI;AACtB,SAAO;AACX;AAEA,SAAS,cAAc,KAAK;AACxB,MAAI,cAAc,KAAK;AAAQ,SAAK,KAAK,KAAK,SAAS,CAAC;AACxD,QAAM,MAAM;AACZ,cAAY,KAAK,GAAG;AAEpB,OAAK,GAAG,IAAI;AACZ,SAAO;AACX;AASO,SAAS,6BAA6B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AACzF,MAAI,OAAO,kBAAkB,KAAK,KAAK,iBAAiB;AACxD,MAAI,OAAO;AACX,QAAM,OAAO,kBAAkB,KAAK,KAAK,iBAAiB;AAC1D,QAAM,OAAO;AACb,OAAK,6BAA6B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACtH;AAEA,IAAI,sBAAsB;AAE1B,SAAS,mBAAmB;AACxB,MAAI,wBAAwB,QAAQ,oBAAoB,eAAe,GAAG;AACtE,0BAAsB,IAAI,YAAY,KAAK,OAAO,MAAM;AAAA,EAC5D;AACA,SAAO;AACX;AAEA,SAAS,mBAAmB,KAAK,QAAQ;AACrC,QAAM,MAAM,OAAO,IAAI,SAAS,GAAG,CAAC,MAAM;AAC1C,mBAAiB,EAAE,IAAI,KAAK,MAAM,CAAC;AACnC,oBAAkB,IAAI;AACtB,SAAO;AACX;AASO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,QAAM,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AAC3D,QAAM,OAAO;AACb,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACvH;AAEA,IAAI,sBAAsB;AAE1B,SAAS,mBAAmB;AACxB,MAAI,wBAAwB,QAAQ,oBAAoB,eAAe,GAAG;AACtE,0BAAsB,IAAI,YAAY,KAAK,OAAO,MAAM;AAAA,EAC5D;AACA,SAAO;AACX;AAEA,SAAS,mBAAmB,KAAK,QAAQ;AACrC,QAAM,MAAM,OAAO,IAAI,SAAS,GAAG,CAAC,MAAM;AAC1C,mBAAiB,EAAE,IAAI,KAAK,MAAM,CAAC;AACnC,oBAAkB,IAAI;AACtB,SAAO;AACX;AASO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,QAAM,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AAC3D,QAAM,OAAO;AACb,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACvH;AAUO,SAAS,6BAA6B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AACzF,MAAI,OAAO,kBAAkB,KAAK,KAAK,iBAAiB;AACxD,MAAI,OAAO;AACX,QAAM,OAAO,kBAAkB,KAAK,KAAK,iBAAiB;AAC1D,QAAM,OAAO;AACb,OAAK,6BAA6B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACtH;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,QAAM,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AAC3D,QAAM,OAAO;AACb,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACvH;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,QAAM,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AAC3D,QAAM,OAAO;AACb,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACvH;AAEA,IAAI,uBAAuB;AAE3B,SAAS,oBAAoB;AACzB,MAAI,yBAAyB,QAAQ,qBAAqB,eAAe,GAAG;AACxE,2BAAuB,IAAI,aAAa,KAAK,OAAO,MAAM;AAAA,EAC9D;AACA,SAAO;AACX;AAEA,SAAS,oBAAoB,KAAK,QAAQ;AACtC,QAAM,MAAM,OAAO,IAAI,SAAS,GAAG,CAAC,MAAM;AAC1C,oBAAkB,EAAE,IAAI,KAAK,MAAM,CAAC;AACpC,oBAAkB,IAAI;AACtB,SAAO;AACX;AASO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,oBAAoB,KAAK,KAAK,iBAAiB;AAC1D,MAAI,OAAO;AACX,QAAM,OAAO,oBAAoB,KAAK,KAAK,iBAAiB;AAC5D,QAAM,OAAO;AACb,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACvH;AAEA,IAAI,uBAAuB;AAE3B,SAAS,oBAAoB;AACzB,MAAI,yBAAyB,QAAQ,qBAAqB,eAAe,GAAG;AACxE,2BAAuB,IAAI,aAAa,KAAK,OAAO,MAAM;AAAA,EAC9D;AACA,SAAO;AACX;AAEA,SAAS,oBAAoB,KAAK,QAAQ;AACtC,QAAM,MAAM,OAAO,IAAI,SAAS,GAAG,CAAC,MAAM;AAC1C,oBAAkB,EAAE,IAAI,KAAK,MAAM,CAAC;AACpC,oBAAkB,IAAI;AACtB,SAAO;AACX;AASO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,oBAAoB,KAAK,KAAK,iBAAiB;AAC1D,MAAI,OAAO;AACX,QAAM,OAAO,oBAAoB,KAAK,KAAK,iBAAiB;AAC5D,QAAM,OAAO;AACb,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,MAAM,MAAM,aAAa,aAAa,OAAO,GAAG;AACvH;AAUO,SAAS,6BAA6B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AACzF,MAAI,OAAO,kBAAkB,KAAK,KAAK,iBAAiB;AACxD,MAAI,OAAO;AACX,OAAK,6BAA6B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAC/G;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAChH;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAChH;AAUO,SAAS,6BAA6B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AACzF,MAAI,OAAO,kBAAkB,KAAK,KAAK,iBAAiB;AACxD,MAAI,OAAO;AACX,OAAK,6BAA6B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAC/G;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAChH;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,mBAAmB,KAAK,KAAK,iBAAiB;AACzD,MAAI,OAAO;AACX,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAChH;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,oBAAoB,KAAK,KAAK,iBAAiB;AAC1D,MAAI,OAAO;AACX,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAChH;AAUO,SAAS,8BAA8B,KAAK,KAAK,aAAa,aAAa,OAAO,KAAK;AAC1F,MAAI,OAAO,oBAAoB,KAAK,KAAK,iBAAiB;AAC1D,MAAI,OAAO;AACX,OAAK,8BAA8B,MAAM,MAAM,cAAc,GAAG,GAAG,KAAK,aAAa,aAAa,OAAO,GAAG;AAChH;AAEO,SAAS,+BAA+B,MAAM,MAAM,MAAM;AAC7D,MAAI,WAAW,UAAU,IAAI,EAAE,QAAQ,UAAU,IAAI,EAAE,YAAY,UAAU,IAAI,EAAE,UAAU,EAAE,IAAI,oBAAoB,MAAM,IAAI,CAAC;AACtI;AAEO,SAAS,2BAA2B,MAAM;AAC7C,aAAW,IAAI;AACnB;;;ACzWA,eAAsB,oBAAoB,UAA8C;AACpF,MAAI,UAAU;AAAA,IACV,CAAC,qBAAqB,GAAG;AAAA,EAC7B;AACA,QAAM,EAAE,SAAS,IAAI,MAAM,YAAY,YAAY,UAAU,OAAO;AACpE,EAAY,eAAe,SAAS,OAAO;AAC3C,SAAO;AACX;;;ACFO,IAAM,gBAAN,MAAoB;AAAA,EAMvB,YAAqB,MAAiE;AAAjE;AAAA,EACrB;AAAA,EANS,aAAa,IAAI,WAAW;AAAA,EAC5B,YAAY,oBAAI,IAA+B;AAAA,EACxD,aAA+B;AAAA;AAAA,EAC/B;AAAA,EAKA,QAAQ,KAAqB;AACzB,YAAQ,IAAI,MAAM;AAAA,MACd,KAAK;AACD,aAAK,KAAK,GAAG;AACb;AAAA,MACJ,KAAK;AACD,aAAK,MAAM,GAAG;AACd;AAAA,MACJ,KAAK;AACD,aAAK,KAAK,GAAG;AACb;AAAA,MACJ,KAAK;AACD,aAAK,MAAM,GAAG;AACd;AAAA,MACJ,KAAK;AACD,aAAK,SAAS,GAAG;AACjB;AAAA,IAIR;AAAA,EACJ;AAAA,EAEA,MAAc,KAAK,KAAkB;AACjC,UAAM,EAAC,UAAU,OAAM,IAAI;AAE3B,SAAK,OAAO,MAAM,oBAAoB,QAAQ;AAE9C,UAAM,UAAU,IAAI,WAAW,QAAQ,CAAC;AACxC,UAAM,QAAQ,IAAI,MAAM,MAAM;AAC9B,SAAK,aAAa,EAAE,QAAQ,SAAS,MAAM;AAC3C,UAAM,eAAe,EAAE,MAAM,SAAS;AACtC,SAAK,KAAK,YAAY;AAAA,EAC1B;AAAA,EAEQ,YAAY,QAAqB,QAAqB;AAC1D,QAAG,KAAK,MAAM;AACV,YAAM,EAAE,WAAW,IAAI;AACvB,YAAM,EAAE,IAAI,SAAAC,UAAS,yBAAyB,gBAAgB,YAAY,IAAI;AAC9E,YAAM,EAAE,YAAY,SAAS,IAAI,UAAU,KAAK,MAAM,IAAI,yBAAyB,gBAAgBA,UAAS,QAAQ,YAAY,WAAW;AAC3I,YAAM,WAAyB,EAAE,MAAM,SAAS,IAAI,YAAY,SAAS;AACzE,YAAMC,YAA2B,CAAC;AAClC,iBAAW,EAAE,eAAe,QAAQ,KAAK,SAAS,WAAW;AACzD,QAAAA,UAAS,KAAK,GAAG,aAAa;AAC9B,YAAI,OAAO,WAAW,UAAU;AAC5B,UAAAA,UAAS,KAAK,QAAQ,MAAM;AAAA,QAChC;AAAA,MACJ;AACA,WAAK,KAAK,UAAUA,SAAQ;AAAA,IAChC,OAAK;AACD,cAAQ,MAAM,6BAA6B;AAAA,IAC/C;AAAA,EACJ;AAAA,EAEA,MAAc,MAAM,QAAsB;AACtC,UAAM,EAAE,IAAI,OAAO,IAAI;AACvB,QAAI;AACA,WAAK,YAAY,QAAQ,MAAM;AAAA,IACnC,SAAS,OAAO;AACZ,WAAK,MAAM,IAAI,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA,EAEA,MAAc,KAAK,QAAqB;AACpC,UAAM,EAAE,YAAY,UAAU,IAAI;AAClC,UAAM,EAAE,KAAK,IAAI,SAAS,IAAI;AAC9B,QAAI;AACA,YAAMC,YAAW,WAAW,6BAA6B,KAAK,IAAI,YAAY,QAAQ,CAAC;AACvF,gBAAU,IAAI,IAAIA,SAAQ;AAC1B,YAAM,SAAS,MAAMA,UAAS;AAC9B,gBAAU,OAAO,EAAE;AACnB,UAAI,QAAQ;AACR,aAAK,YAAY,QAAQ,MAAM;AAAA,MACnC,OAAO;AACH,cAAM,aAA6B,EAAE,MAAM,WAAW,GAAG;AACzD,aAAK,KAAK,UAAU;AAAA,MACxB;AAAA,IACJ,SAAS,OAAO;AACZ,WAAK,MAAM,IAAI,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA,EAEQ,WAAW,IAAY;AAC3B,UAAM,EAAE,UAAU,IAAI;AACtB,UAAMA,YAAW,UAAU,IAAI,EAAE;AACjC,cAAU,OAAO,EAAE;AACnB,WAAO,EAAE,UAAAA,UAAS;AAAA,EACtB;AAAA,EAEQ,MAAM,IAAY,OAAY;AAClC,UAAM,EAAE,UAAAA,UAAS,IAAI,KAAK,WAAW,EAAE;AACvC,UAAM,WAAW,EAAE,MAAM,SAAS,IAAI,MAAM;AAC5C,SAAK,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEQ,MAAM,QAAsB;AAChC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,UAAAA,UAAS,IAAI,KAAK,WAAW,EAAE;AACvC,IAAAA,WAAU,MAAM;AAAA,EACpB;AAAA,EAEA,MAAc,SAAS,QAAyB;AAC5C,UAAM,EAAE,WAAW,WAAW,IAAI;AAClC,eAAWA,aAAY,UAAU,OAAO,GAAG;AACvC,MAAAA,UAAS,MAAM;AAAA,IACnB;AACA,UAAM,WAAW,SAAS;AAC1B,YAAQ,OAAO,UAAU,QAAQ,CAAC;AAClC,UAAM,gBAAgB,EAAE,MAAM,cAAc;AAC5C,SAAK,KAAK,aAAa;AAAA,EAC3B;AACJ;;;AC7HA,IAAM,UAAU,IAAI,cAAc,CAAC,KAAsBC,cAA8B;AACnF,cAAY,KAAK,EAAE,UAAAA,UAAS,CAAC;AACjC,CAAC;AAED,YAAY,OAAK;AACb,QAAM,MAAM,EAAE;AACd,MAAI,IAAI,QAAQ,SAAS;AACrB,UAAM;AAAA,EACV,OAAO;AACH,YAAQ,QAAQ,GAAG;AAAA,EACvB;AACJ;;;ACWA,SAAS,kBAAkB,YAA8B,SAAiC;AACtF,QAAM,MAAW,CAAC;AAClB,WAAS,cAAc,GAA+B;AAClD,WAAO,IAAI,EAAE,GAAG,GAAG,QAAQ,QAAQ,EAAE,MAAM,EAAE,IAAuB;AAAA,EACxE;AACA,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACnD,QAAI,GAAG,IAAI,cAAc,KAAK;AAAA,EAClC;AAEA,SAAO;AACX;AAGO,UAAU,aAAa,aAA0B,UAAwB;AAC5E,QAAM,WAAW,SAAS,SAAS,IAAI,QAAM;AACzC,QAAI,IAAI;AACJ,aAAO,YAAY,cAAc,GAAG,MAAM;AAAA,IAC9C;AAAA,EACJ,CAAC;AAED,aAAW,WAAW,SAAS,WAAW;AAGtC,UAAM,EAAE,kBAAkB,eAAe,SAAS,aAAa,cAAc,YAAY,cAAc,aAAa,IAAI;AACxH,UAAM,UAAU,cAAc,IAAI,QAAM;AACpC,aAAO,YAAY,aAAa,EAAE,MAAM,gBAAgB,SAAS,GAAG,CAAC;AAAA,IACzE,CAAC;AACD,UAAM,KAAK,OAAO,WAAW,WAAW,YAAY,aAAa,EAAE,MAAM,wBAAwB,SAAS,QAAQ,CAAC,IAAI;AACvH,UAAM,QAAQ,OAAO,WAAW,WAAW,UAAU,QAAQ;AAC7D,UAAM,YAAY,mBAAmB,cAAc,mBAAmB;AACtE,UAAM,EAAE,YAAY,YAAY,YAAY,gBAAgB,UAAU,QAAQ,UAAU,UAAU,UAAU,OAAO,cAAc,YAAY,WAAW,aAAa,IAAI,kBAAkB,kBAAkB,OAAO;AACpN,UAAM,qBAAqB,CAAC,YAAY,YAAY,YAAY,gBAAgB,YAAY;AAC5F,UAAM,mBAAmB,CAAC,UAAU,QAAQ,UAAU,UAAU,UAAU,OAAO,cAAc,YAAY,SAAS;AAIpH,UAAM,cAAc,QAAQ,iBAAiB,UAAW,MAAM;AAC9D,UAAM,iBAAiB,aAAa,QAAQ,iBAAiB,aAAc,MAAM,IAAI;AAErF,UAAM,MAAM,YAAY,kBAAkB,EAAE,YAAY,kBAAkB,SAAS,GAAG,CAAC;AACvF,UAAM,aAAa,SAAS,UAAU,IAAI,YAAY,kBAAkB,EAAE,YAAY,CAAC,QAAQ,GAAG,SAAS,GAAG,CAAC,IAAI;AACnH,UAAM,eAAe,qBAAqB,YAAY,kBAAkB,EAAE,YAAY,mBAAmB,CAAC,IAAI;AAC9G,gBAAY,YAAY,KAAK,GAAG,QAAQ,OAAO,SAAO,OAAO,eAAe,OAAO,cAAc,CAAC;AAClG,QAAI,IAAI;AACJ,kBAAY,YAAY,KAAK,EAAE;AAAA,IACnC;AAEA,UAAM,aAAyB,KAC3B,EAAE,MAAM,YAAY,MAAM,QAAQ,eAAe,WAAW,MAAM,IAClE,EAAE,MAAM,UAAU,MAAM,QAAQ,eAAe,MAAM;AACzD,UAAM,wBAAwB,QAAQ;AACtC,UAAM,mBAAmB,SAAS,qBAAqB,KAAK;AAC5D,UAAM,EAAE,KAAK,YAAY,cAAc,aAAa,gBAAgB,YAAY,YAAY,aAAa,cAAc,cAAc,cAAuD,iBAAiB;AAAA,EACjN;AACJ;AAGO,SAAS,qBAAqB,IAA4B,MAAY,YAAoC;AAC7G,QAAM,EAAE,aAAa,eAAe,IAAI;AACxC,MAAI,aAAa;AACb,UAAM,kBAAkB,IAAI,WAAW,KAAK,WAAW;AACvD,QAAI,YAAY;AACZ,iBAAW,EAAE,UAAU,aAAa,UAAU,KAAK,KAAK,cAAc;AAClE,cAAM,YAAY,WAAW,QAAQ;AACrC,YAAI,WAAW;AACX,0BAAgB,KAAK,WAAW,aAAa,SAAS;AAAA,QAC1D;AAAA,MACJ;AAAA,IACJ;AACA,mBAAe,IAAI,EAAE,MAAM,gBAAgB,SAAS,iBAAiB,cAAc,YAAY,CAAC;AAAA,EACpG;AAEA,MAAI,gBAAgB;AAChB,UAAM,qBAAqB,IAAI,WAAW,KAAK,YAAY;AAC3D,QAAI,YAAY;AACZ,iBAAW,EAAE,UAAU,eAAe,YAAY,KAAK,KAAK,cAAc;AACtE,cAAM,YAAY,WAAW,QAAQ;AACrC,YAAI,WAAW;AACX,6BAAmB,KAAK,WAAW,eAAe,WAAW;AAAA,QACjE;AAAA,MACJ;AAAA,IACJ;AACA,mBAAe,IAAI,EAAE,MAAM,gBAAgB,SAAS,oBAAoB,cAAc,eAAe,CAAC;AAAA,EAC1G;AACJ;AAGO,SAAS,WAAW,aAA0B,MAAY;AAC7D,QAAM,EAAE,KAAK,YAAY,cAAc,aAAa,gBAAgB,iBAAiB,IAAI;AACzF,cAAY,OAAO,KAAK,YAAY,cAAc,aAAa,gBAAgB,gBAAgB;AACnG;AAGO,SAAS,mBAAmB,MAAY,WAAwF;AAEnI,QAAM,aAAa,KAAK,WAAW,OAAO,QAAO,KAAK,EAAE,aAAc,cAAc,CAAC;AACrF,MAAI,WAAW,UAAU,GAAG;AACxB;AAAA,EACJ;AACA,QAAM,cAAc,IAAI,WAAW,WAAW,IAAI,OAAK,EAAE,UAAU,CAAC;AACpE,QAAM,aAAa,IAAI,WAAW,WAAW,IAAI,OAAK,EAAE,KAAK,CAAC;AAC9D,QAAM,YAAY,YAAY;AAC9B,QAAM,EAAE,WAAW,IAAI;AACvB,QAAM,EAAE,KAAK,IAAI;AACjB,WAASC,YAAW,QAA2D;AAC3E,WAAO,eAAe;AAAA,EAC1B;AACA,MAAIA,YAAW,UAAU,GAAG;AACxB,UAAM,EAAE,UAAU,IAAI;AACtB,WAAO;AAAA,MACH,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACb,QAAQ;AAAA,IACZ;AAAA,EACJ,OAAO;AACH,WAAO;AAAA,MACH,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MACZ,QAAQ;AAAA,IACZ;AAAA,EACJ;AACJ;AAGO,SAAS,mBAAmB,MAAY,mBAA2B;AACtE,MAAI,gBAAgB;AACpB,QAAM,gBAAgB,KAAK,WAAW,QAAQ;AAC9C,aAAW,aAAa,KAAK,YAAY;AACrC,UAAM,YAAY,KAAK,UAAU;AACjC,SAAK,oBAAoB,cAAc,GAAG;AACtC,uBAAiBC,mBAAkB,UAAU,OAAO,aAAa;AAAA,IACrE;AAAA,EACJ;AACA,SAAO;AACX;AAEA,SAASA,mBAAkB,aAAqB,eAAuB;AACnE,MAAI,iBAAiB;AACrB,UAAQ,eAAe;AAAA,IACnB,KAAK;AACD,uBAAiB,cAAc;AAC/B;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AACD,uBAAiB,cAAc;AAAG;AAAA,IACtC,KAAK;AACD,uBAAiB,cAAc;AAAG;AAAA,IACtC,KAAK;AACD,uBAAiB,cAAc;AAAG;AAAA,IACtC;AACI,uBAAiB;AAAA,EACzB;AACA,SAAO;AACX;;;ACpLO,IAAM,aAAN,MAAiB;AAAA,EAQpB,YAAqB,QAAgB;AAAhB;AACjB,WAAO,YAAY,OAAK;AACpB,WAAK,QAAQ,EAAE,IAAuB;AAAA,IAC1C;AAAA,EACJ;AAAA,EAXS,kBAAkB,oBAAI,IAAmC;AAAA,EAClE,kBAAiC,QAAQ,QAAQ;AAAA,EACzC;AAAA,EACR,gBAA+B,QAAQ,QAAQ;AAAA,EACvC;AAAA,EACR,UAAU;AAAA,EAQV,MAAM,KAAK,QAA2B,UAAuB;AACzD,SAAK,gBAAgB,IAAI,QAAc,CAAC,YAAY;AAChD,WAAK,gBAAgB;AAAA,IACzB,CAAC;AACD,UAAM,MAAmB,EAAE,MAAM,QAAQ,QAAQ,SAAS;AAC1D,SAAK,KAAK,GAAG;AACb,UAAM,KAAK;AAAA,EACf;AAAA,EAEA,IAAI,kBAAkB;AAClB,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA,EAEQ,KAAK,KAAqB;AAC9B,SAAK,OAAO,YAAY,GAAG;AAAA,EAC/B;AAAA,EAEQ,QAAQ,KAAsB;AAClC,QAAI,IAAI,QAAQ,UAAU;AACtB,YAAM,EAAE,cAAc,IAAI;AAC1B,WAAK,gBAAgB;AACrB,sBAAgB;AAChB;AAAA,IACJ;AACA,QAAI,IAAI,QAAQ,eAAe;AAC3B,YAAM,EAAE,gBAAgB,IAAI;AAC5B,WAAK,kBAAkB;AACvB,wBAAkB;AAClB;AAAA,IACJ;AACA,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAM,iBAAiB,gBAAgB,IAAI,EAAE;AAC7C,QAAI,gBAAgB;AAChB,sBAAgB,OAAO,EAAE;AACzB,YAAM,EAAE,SAAS,OAAO,IAAI;AAC5B,cAAQ,IAAI,MAAM;AAAA,QACd,KAAK;AACD,kBAAQ,GAAG;AACX;AAAA,QACJ,KAAK;AACD,kBAAQ,MAAS;AACjB;AAAA,QACJ,KAAK;AACD,iBAAO,IAAI,KAAK;AAChB;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW;AACP,SAAK,kBAAkB,IAAI,QAAc,CAAC,YAAY;AAClD,WAAK,kBAAkB;AAAA,IAC3B,CAAC;AACD,UAAM,MAAuB,EAAE,MAAM,YAAY;AACjD,SAAK,KAAK,GAAG;AACb,SAAK,gBAAgB,MAAM;AAAA,EAC/B;AAAA,EAEA,UAAU;AACN,UAAM,MAAoB,EAAE,MAAM,QAAQ;AAC1C,SAAK,KAAK,GAAG;AAAA,EACjB;AAAA,EAEA,UAAU,QAAqB,IAAY,eAA8BC,UAAmD;AACxH,UAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAM,iBAAiB,cAAc,SAAS;AAC9C,UAAM,cAAc;AACpB,UAAM,WAAyB,EAAE,MAAM,SAAS,QAAQ,IAAI,SAAAA,UAAS,yBAAyB,MAAM,gBAAgB,YAAY;AAChI,UAAM,UAAU,IAAI,QAAiC,CAAC,SAAS,WAAW;AACtE,sBAAgB,IAAI,IAAI,EAAE,SAAS,OAAO,CAAC;AAAA,IAC/C,CAAC;AACD,SAAK,KAAK,QAAQ;AAClB,WAAO;AAAA,EACX;AAAA,EAEA,SAAS,MAAkBA,UAAmD;AAC1E,UAAM,EAAE,gBAAgB,IAAI;AAC5B,UAAM,EAAE,cAAc,IAAI,KAAK,QAAQ;AACvC,UAAM,EAAE,IAAI,KAAK,IAAI;AACrB,QAAI,KAAK,QAAQ,OAAO,QAAW;AAC/B,aAAO,QAAQ,QAAQ,MAAS;AAAA,IACpC;AACA,UAAM,MAAM,IAAI,IAAI,KAAK,QAAQ,GAAG;AACpC,QAAI,YAAY,KAAK;AACrB,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,iBAAiB,cAAc,SAAS;AAC9C,UAAM,cAAc;AACpB,UAAM,UAAuB,EAAE,MAAM,QAAQ,IAAI,SAAAA,UAAS,KAAK,IAAI,SAAS,GAAG,UAAU,yBAAyB,MAAM,gBAAgB,YAAY;AACpJ,YAAQ,OAAO,YAAY,CAAC;AAC5B,UAAM,WAAyB,EAAE,MAAM,SAAS,GAAG;AACnD,UAAM,QAAQ,MAAM;AAAE,WAAK,KAAK,QAAQ;AAAA,IAAG;AAC3C,SAAK,WAAW,EAAE,MAAM;AACxB,SAAK,KAAK,OAAO;AACjB,WAAO,IAAI,QAAiC,CAAC,SAAS,WAAW;AAC7D,sBAAgB,IAAI,IAAI,EAAE,SAAS,OAAO,CAAC;AAAA,IAC/C,CAAC;AAAA,EACL;AACJ;;;AC7DO,IAAMC,cAAN,MAAM,YAAW;AAAA,EAmCpB,YAAqB,SAAiC,MAAgB,QAAuC;AAAxF;AAAiC;AAClD,SAAK,eAAe,OAAO,UAAU,WAAW,OAAO,eAAe;AACtE,SAAK,SAAS,OAAO,UAAU,WAAW,SAAS;AAEnD,UAAM,EAAE,QAAQ,IAAI,IAAI,KAAK;AAC7B,UAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,SAAK,KAAK,KAAK;AACf,SAAK,cAAc,QAAQ,cAAc,YAAY,MAAM;AAC3D,SAAK,SAAS;AACd,SAAK,SAAS;AACd,SAAK,UAAU,aAAK,WAAW,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;AACjE,UAAM,CAAC,IAAI,IAAI,EAAE,IAAI,IAAI;AACzB,UAAM,CAAC,IAAI,IAAI,EAAE,IAAI,IAAI;AACzB,SAAK,UAAU;AAAA,MACX,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,MAC7B,aAAK,WAAW,IAAI,IAAI,IAAI,CAAC;AAAA,IACjC;AAKA,SAAK,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI;AAE5G,SAAK,eAAe,WAAW;AAAA,MAC3B,kBAAkB;AAAA,MAClB,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,KAAK;AAAA,MACL,KAAK;AAAA,IACT,CAAC;AACD,SAAK,aAAa,OAAO,YAAY,KAAK,IAAI,GAAG,KAAK,SAAS;AAAA,EACnE;AAAA,EAvES;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAyB,CAAC;AAAA,EAC1B,SAAiB,CAAC;AAAA,EAClB;AAAA,EACA;AAAA,EACT;AAAA,EACiB;AAAA,EACA;AAAA,EACT,2BAA2B;AAAA,EACnC,QAAQ;AAAA,EACR;AAAA,EACA,aAAa;AAAA,EACb,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,OAAgB,wBAAwB;AAAA,IACpC,CAAC,eAAwB,GAAG;AAAA,IAC5B,CAAC,iBAA0B,GAAG;AAAA,IAC9B,CAAC,aAAsB,GAAG;AAAA,IAC1B,CAAC,cAAuB,GAAG;AAAA,IAC3B,CAAC,iBAA0B,GAAG;AAAA,EAClC;AAAA,EACA,OAAgB,sBAAsB;AAAA,IAClC,CAAC,eAAwB,GAAG;AAAA,IAC5B,CAAC,iBAA0B,GAAG;AAAA,IAC9B,CAAC,aAAsB,GAAG;AAAA,IAC1B,CAAC,cAAuB,GAAG;AAAA,IAC3B,CAAC,iBAA0B,GAAG;AAAA,EAClC;AAAA,EAyCA,UAAU;AACN,UAAM,EAAE,QAAQ,UAAU,UAAU,YAAY,IAAI;AACpD,eAAW,QAAQ,QAAQ;AACvB,iBAAW,aAAa,IAAI;AAAA,IAChC;AACA,QAAI,UAAU;AACV,kBAAY,OAAO,QAAQ;AAC3B,WAAK,WAAW;AAAA,IACpB;AACA,YAAQ,OAAO,YAAY,QAAQ,CAAC;AACpC,gBAAY,QAAQ;AACpB,eAAW,SAAS,UAAU;AAC1B,YAAM,QAAQ;AAAA,IAClB;AACA,WAAO,SAAS;AAChB,aAAS,SAAS;AAClB,SAAK,UAAU,MAAM;AACrB,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,CAAC,KAAK;AAAA,EACjB;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK,OAAO,SAAS,KAAK,KAAK,YAAY;AAAA,EACtD;AAAA,EAEA,IAAI,oBAAoB;AACpB,QAAI,EAAE,UAAU,IAAI,KAAK;AACzB,eAAW,SAAS,KAAK,UAAU;AAC/B,UAAI,MAAM,aAAa;AACnB,qBAAa,EAAE,KAAK,MAAM,KAAK;AAAA,MACnC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,6BAA8C;AACtD,UAAM,EAAE,YAAY,eAAe,SAAS,aAAa,IAAI;AAC7D,UAAM,SAAS,QAAQ,OAAO,gBAAgB,EAAE,KAAK;AACrD,WAAO,CAAC,WAAW,KAAK,UAAW,cAAc,gBAAmB,gBAAgB,gCAAiC,CAAC,KAAK;AAAA,EAC/H;AAAA,EAEA,IAAI,0BAA0B;AAC1B,UAAM,EAAE,oBAAoB,IAAI,KAAK;AACrC,QAAI,qBAAqB;AACrB,YAAM,EAAE,WAAW,IAAI,KAAK;AAE5B,UAAI,oBAAoB,MAAM,QAAM,WAAW,EAAE,KAAK,GAAI,GAAG;AACzD,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,OAAqB;AACjC,UAAM,EAAE,SAAS,QAAQ,QAAQ,IAAI;AACrC,UAAMC,YAAW,aAAK,IAAI,OAAO,OAAO;AACxC,QAAI,KAAK,IAAIA,SAAQ,IAAI,QAAQ;AAC7B,aAAO;AAAA,IACX;AACA,QAAI,OAAO;AACX,eAAW,UAAU,SAAS;AAC1B,YAAMA,YAAW,aAAK,IAAI,OAAO,MAAM;AACvC,YAAM,UAAU,KAAK,KAAKA,SAAQ;AAClC,UAAI,QAAQ,WAAW,MAAM;AACzB,eAAO;AAAA,MACX;AACA,UAAI,SAAS;AACT,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,kBAAkB,OAAuC;AAC7D,UAAM,EAAE,SAAS,QAAQ,QAAQ,IAAI;AACrC,QAAI,cAAc;AAClB,QAAI,eAAe;AACnB,UAAM,EAAE,OAAO,IAAI,MAAM;AACzB,eAAW,SAAS,QAAQ;AACxB,YAAMA,YAAW,aAAK,IAAI,OAAO,OAAO;AACxC,UAAIA,YAAW,QAAQ;AACnB,uBAAe;AACf,sBAAc;AACd;AAAA,MACJ,WAAWA,YAAW,CAAC;AACnB,sBAAc;AAAA,IACtB;AACA,QAAI,gBAAgB,cAAc;AAE9B,qBAAe;AACf,oBAAc;AACd,iBAAW,UAAU,SAAS;AAC1B,mBAAW,SAAS,QAAQ;AACxB,gBAAMA,YAAW,aAAK,IAAI,OAAO,MAAM;AACvC,cAAIA,YAAW,GAAG;AACd,0BAAc;AAAA,UAClB,OAAO;AACH,2BAAe;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,aAAa;AACjB,QAAI,cAAc;AACd,mBAAa;AAAA,IACjB,WAAW,CAAC,aAAa;AACrB,mBAAa;AAAA,IACjB,OAAO;AACH,mBAAa;AAAA,IACjB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,qBAAqB;AACrB,QAAI,gBAAgB;AACpB,QAAI,KAAK,cAAc,cAAiB;AACpC,YAAM,EAAE,kBAAkB,IAAI;AAC9B,UAAI,mBAAmB;AACnB,mBAAW,QAAQ,KAAK,QAAQ;AAC5B,2BAAiB,mBAAmB,MAAM,iBAAiB;AAAA,QAC/D;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,OAA2B,mBAA+B,iBAAoB;AAEjF,SAAK,aAAc,oBAAoB,kBAAsB,KAAK,kBAAkB,KAAK,IAAI;AAG7F,UAAM,EAAE,SAAS,SAAS,YAAY,QAAQ,UAAU,MAAM,cAAc,SAAS,IAAI;AACzF,UAAM,EAAE,QAAQ,UAAU,YAAY,IAAI;AAC1C,UAAM,aAAa,YAAY;AAC/B,UAAMC,cAAa,SAAS,oCAA0C;AACtE,UAAM,eAAe,KAAK,eAAe,aAAK,IAAI,YAAY,OAAO;AAErE,QAAI,cAAc,cAAiB;AAC/B,WAAK,gBAAgB;AAAA,IACzB,WAAW,OAAO,QAAQ,WAAW;AACjC,YAAMD,YAAW,KAAK,IAAI,MAAO,eAAe,MAAM;AACtD,WAAK,gBAAiB,KAAK,OAAO,YAAW,sBAAsB,KAAK,YAAY,IAAIC,YAAW,CAAC,KAAM,CAACD,YAAWC,YAAW,EAAE;AAAA,IAGvI,OAAO;AACH,WAAK,gBAAgB,KAAK,OAAO,YAAW,oBAAoB,KAAK,YAAY,IAAIA,YAAW,CAAC;AAAA,IACrG;AAEA,QAAI,QAAQ,qBAAqB,CAAC,KAAK,0BAA0B;AAC7D,UAAI,EAAE,QAAQ,OAAAC,OAAM,IAAI;AACxB,YAAM,CAAC,IAAI,IAAI,EAAE,IAAI;AACrB,YAAM,CAAC,IAAI,IAAI,EAAE,IAAI,MAAM;AAC3B,YAAM,mBAAmB,aAAK;AAAA,QAC1BA;AAAA,QAAO;AAAA,QAAG;AAAA,QAAG;AAAA,QACb;AAAA,QAAGA;AAAA,QAAO;AAAA,QAAG;AAAA,QACb;AAAA,QAAG;AAAA,QAAGA;AAAA,QAAO;AAAA,QACb,KAAK;AAAA,QAAI;AAAA,QAAI,KAAK;AAAA,QAAI;AAAA,MAC1B;AACA,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,aAAO,mBAAmB;AAC1B,UAAI,UAAU;AACV,uBAAe,QAAQ,cAAc,IAAI,EAAE,MAAM,kBAAkB,SAAS,aAAa,QAAQ,cAAc,SAAS,CAAC;AAAA,MAC7H;AACA,WAAK,2BAA2B;AAAA,IACpC;AAEA,QAAI,QAAQ,OAAO;AACf,UAAI,IAAI,GAAG,IAAI,GAAG,IAAI;AACtB,cAAQ,YAAY;AAAA,QAChB,KAAK;AAAoB,cAAI;AAAM;AAAA,QACnC,KAAK;AAAiB,cAAI;AAAG;AAAA,MACjC;AACA,cAAQ,KAAK,OAAO;AAAA,QAChB,KAAK;AAAuB,cAAI;AAAG;AAAA,QACnC,KAAK;AAAiB,cAAI;AAAG;AAAA,MACjC;AACA,YAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,MAAM,qBAAqB,CAAC;AACpH,YAAM,EAAE,KAAAC,MAAK,KAAAC,KAAI,IAAI,KAAK,OAAO;AACjC,YAAM,EAAE,OAAO,IAAI;AACnB,aAAO,aAAa,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC;AAC9C,aAAO,MAAM,aAAK,cAAc,aAAK,OAAO,GAAGD,MAAK,gBAAgB;AACpE,aAAO,MAAM,aAAK,cAAc,aAAK,OAAO,GAAGC,MAAK,gBAAgB;AACpE,UAAI,UAAU;AACV,uBAAe,QAAQ,cAAc,IAAI,EAAE,MAAM,kBAAkB,SAAS,aAAa,QAAQ,cAAc,SAAS,CAAC;AAAA,MAC7H;AAAA,IACJ;AAGA,eAAW,SAAS,UAAU;AAC1B,YAAM,OAAO,OAAO,KAAK,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA,EAEA,MAAM,eAAe;AACjB,UAAM,EAAE,SAAS,UAAU,QAAQ,YAAY,IAAI;AACnD,UAAM,EAAE,eAAe,QAAQ,SAAAC,UAAS,oBAAoB,IAAI;AAChE,SAAK,QAAQ;AACb,UAAM,UAAU,MAAM,OAAO,SAAS,MAAMA,QAAO;AACnD,QAAI,SAAS;AACT,YAAM,EAAE,YAAY,SAAS,IAAI;AACjC,iBAAW,QAAQ,YAAY;AAC3B,cAAM,QAAQ,IAAI,YAAW,SAAS,MAAM,IAAI;AAChD,iBAAS,KAAK,KAAK;AAAA,MACvB;AACA,aAAO,KAAK,GAAG,aAAa,aAAa,QAAQ,CAAC;AAElD,UAAI,QAAQ,uBAAuB,qBAAqB;AACpD,oBAAW,iBAAiB,SAAS,MAAM;AAAA,MAC/C;AACA,WAAK,WAAW,YAAY,aAAa,EAAE,MAAM,kBAAkB,UAAU,KAAK,aAAa,OAAO,WAAW,CAAC;AAClH,qBAAe,KAAK,QAAQ,cAAc,IAAI,EAAE,MAAM,kBAAkB,SAAS,KAAK,aAAa,QAAQ,cAAc,KAAK,SAAS,CAAC;AACxI,oBAAc,UAAU;AACxB,WAAK,QAAQ;AAAA,IACjB,OAAO;AACH,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAEA,gBAAgB,YAAoC;AAChD,UAAM,EAAE,SAAS,OAAO,IAAI;AAC5B,UAAM,EAAE,GAAG,IAAI,QAAQ;AACvB,eAAW,QAAQ,QAAQ;AACvB,2BAAqB,IAAI,MAAM,UAAU;AAAA,IAC7C;AAAA,EACJ;AAAA,EAEA,OAAO,iBAAiB,SAAwB,QAAyB;AACrE,UAAM,EAAE,eAAe,WAAW,IAAI;AACtC,UAAM,EAAE,GAAG,IAAI;AACf,eAAW,QAAQ,QAAQ;AACvB,2BAAqB,IAAI,MAAM,UAAU;AAAA,IAC7C;AAAA,EACJ;AACJ;;;ACrWA,eAAsB,cAAc,KAAU,aAAsD;AAChG,QAAM,UAAU,IAAI,IAAI,GAAG;AAC3B,UAAQ,YAAY;AACpB,MAAI,SAAU,MAAM,SAAS,SAAS,QAAQ,WAAW;AACzD,MAAI,OAAO,IAAI;AAGX,QAAI,EAAE,QAAQ,OAAO,IAAI;AACzB,aAAS,eAAe,MAAM;AAC9B,aAAS,eAAe,MAAM;AAC9B,aAAS,EAAE,GAAG,QAAQ,QAAQ,OAAO;AAAA,EACzC;AACA,MAAI,CAAC,mBAAmB,OAAO,OAAO,GAAG;AACrC,UAAM,IAAI,MAAM,8BAA8B,OAAO,QAAQ,GAAG;AAAA,EACpE;AACA,SAAO,EAAE,KAAK,IAAI,SAAS,GAAG,OAAO;AACzC;AAEA,SAAS,eAAe,GAA+B;AACnD,QAAM,CAAC,GAAG,GAAG,CAAC,IAAI;AAClB,SAAO,aAAK,WAAW,GAAG,GAAG,CAAC,CAAC;AACnC;AAGA,eAAsB,qBAAqB,SAAwB,QAAqB,eAA8D;AAClJ,QAAM,EAAE,OAAO,IAAI,aAAa,OAAO,IAAI;AAC3C,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,SAAS,MAAM,OAAO,UAAU,QAAQ,IAAI,eAAe,OAAO,OAAO;AAC/E,MAAI,CAAC;AACD;AACJ,QAAM,EAAE,WAAW,IAAI;AACvB,QAAM,YAAgC,CAAC;AACvC,MAAI,WAAW;AACf,aAAW,aAAa,YAAY;AAChC,UAAM,eAAe,UAAU;AAC/B,UAAM,QAAQ,IAAIC,YAAW,SAAS,WAAW,YAAY;AAC7D,cAAU,UAAU,UAA6B,IAAI;AACrD,eAAW;AAAA,EACf;AACA,SAAO,WAAW,YAAY;AAClC;AAEA,eAAe,SAA2C,KAAU,MAAS,QAAsB;AAC/F,QAAM,WAAW,MAAM,mBAAmB,IAAI,QAAQ,KAAK,MAAM,MAAM,KAAK,EAAE,MAAM,QAAQ,OAAO,CAAC;AACpG,MAAI,SAAS,IAAI;AACb,WAAQ,MAAM,SAAS,IAAI,EAAE;AAAA,EACjC,OAAO;AACH,UAAM,IAAI,MAAM,cAAc,SAAS,MAAM,IAAI,SAAS,MAAM,EAAE;AAAA,EACtE;AACJ;;;ACjEO,SAAS,cAAc,UAAgD;AAC1E,MAAI,SAAS,MAAM,UAAU;AACzB,WAAO,CAAC,GAAG,CAAC;AAChB,SAAO,CAAC,SAAS,MAAM,CAAC,EAAE,UAAU,SAAS,MAAM,SAAS,MAAM,SAAS,CAAC,EAAE,QAAQ;AAC1F;AAGO,SAAS,sBAAsB,MAAc,UAAmE;AACnH,QAAM,EAAE,MAAM,IAAI;AAClB,QAAM,IAAI,MAAM;AAChB,QAAM,SAAS,IAAI,kBAAkB,OAAO,CAAC;AAC7C,MAAI,IAAI,GAAG;AAIP,QAASC,YAAT,SAAkBC,QAAe;AAC7B,YAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,MAAMA,MAAK,EAAE;AAClC,aAAO,aAAK,WAAW,GAAG,GAAG,GAAG,KAAK,CAAC;AAAA,IAC1C;AAHS,mBAAAD;AAHT,UAAM,WAAW,MAAM,CAAC,EAAE;AAC1B,UAAM,WAAW,MAAM,IAAI,CAAC,EAAE;AAC9B,QAAI,YAAY;AAKhB,UAAM,QAAQA,UAAS,CAAC;AACxB,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,YAAM,SAAS,IAAI,OAAO,QAAQ,WAAW,YAAY;AACzD,eAAS,IAAI,WAAW,IAAI,IAAI,GAAG,KAAK;AACpC,oBAAY;AACZ,cAAM,KAAK,MAAM,CAAC,EAAE;AACpB,cAAM,KAAK,MAAM,IAAI,CAAC,EAAE;AACxB,cAAM,KAAKA,UAAS,CAAC;AACrB,cAAM,KAAKA,UAAS,IAAI,CAAC;AACzB,YAAI,SAAS,MAAM,QAAQ,IAAI;AAC3B,gBAAM,KAAK,QAAQ,OAAO,KAAK;AAC/B,uBAAK,KAAK,OAAO,IAAI,IAAI,CAAC;AAC1B;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI;AACrB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AACxB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AACxB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AACxB,aAAO,IAAI,IAAI,CAAC,IAAI,IAAI;AAAA,IAC5B;AAAA,EACJ;AACA,SAAO;AACX;;;ACdO,IAAM,sBAAN,MAAwE;AAAA,EAmB3E,YAAqB,eAAuC,QAA+B,UAA6B,WAAsB,QAAoC,QAAoB;AAAjL;AAAuC;AAA+B;AAA6B;AAA0D;AAC9K,SAAK,YAAY;AAAA,MACb;AAAA,MACA,SAAS,IAAI,WAAW,QAAQ,CAAC;AAAA,MACjC,OAAO,IAAI,MAAM,MAAM;AAAA,IAC3B;AAAA,EACJ;AAAA,EAxBS,iBAAiB,IAAI,oCAAkC,IAAI,CAAC;AAAA,EACrE,sBAAsB,aAAa;AAAA,EACnC,mBAAmB,aAAa;AAAA,EAChC,QAAQ;AAAA,EACR,iBAAiB;AAAA,EAEjB,wBAAwB,aAAK,OAAO;AAAA,EACpC,oBAAoB;AAAA,EACpB;AAAA;AAAA,EAEA,YAAuB,CAAC;AAAA,EACxB,UAAkB;AAAA,EAClB,8BAA8B;AAAA;AAAA,EAC9B,SAAS,CAAC,OAAO,OAAO,OAAO,OAAO,KAAK;AAAA,EAClC;AAAA,EACT,sBAAsB;AAAA,EACd,YAAY;AAAA,EAUpB,IAAI,aAAa;AACb,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EAEA,OAAO,OAA2B;AAG9B,UAAM,EAAE,eAAe,WAAW,UAAU,6BAA6B,QAAQ,oBAAoB,IAAI;AACzG,UAAM,EAAE,IAAI,cAAc,IAAI;AAC9B,UAAM,EAAE,OAAO,uBAAuB,YAAY,QAAQ,SAAS,MAAM,QAAQ,SAAS,IAAI;AAC9F,UAAM,EAAE,OAAO,IAAI,SAAS;AAE5B,QAAI,EAAE,iBAAiB,IAAI;AAC3B,UAAM,+BAA+B,CAAC,UAA4C;AAE9E,UAAK,OAAO,oBAAoB,KAAK,EAAa,KAAK,SAAO,iBAAiB,GAAG,KAAK,MAAM,GAAG,CAAC,GAAG;AAChG,aAAK,mBAAmB,mBAAmB,EAAE,GAAG,kBAAkB,GAAG,MAAM;AAAA,MAC/E;AAAA,IACJ;AAEA,SAAK,8BAA8B,IAAI,cAAc;AAErD,QAAI,OAAO,eAAe,cAAc,YAAY,YAAY;AAC5D,aAAO,cAAc,cAAc,YAAY;AAAA,IACnD;AAEA,SAAK,QAAQ,MAAM,MAAM;AAEzB,QAAI,kBAAkB;AACtB,QAAI,cAAc,gBAAgB,EAAE,OAAO,CAAC,GAAG;AAC3C,YAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,YAAM,EAAE,QAAAE,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,YAAY,KAAK,SAAS;AACjC,MAAAA,QAAO,eAAe,KAAK,YAAY;AACvC,MAAAA,QAAO,aAAa,KAAK,UAAU;AACnC,MAAAA,QAAO,kBAAkB,KAAK,mBAAmB;AACjD,MAAAA,QAAO,iBAAiB,UAAU;AAClC,MAAAA,QAAO,kBAAkB,UAAU;AACnC,MAAAA,QAAO,0BAA0B,UAAU,kBAAkB,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC;AACvF,MAAAA,QAAO,iBAAiB,cAAc,UAAU,aAAa;AAC7D,MAAAA,QAAO,uBAAuB,OAAO;AACrC,YAAM,kBAAkB,uCAAqC,UAAU,aAAa;AACpF,WAAK,eAAe,IAAI,iBAAiB,sBAAoB,CAAC;AAC9D,wBAAkB;AAAA,IACtB;AAEA,QAAI,cAAc,gBAAgB,EAAE,QAAQ,CAAC,GAAG;AAC5C,YAAM,EAAE,QAAAA,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,iBAAiB,cAAc,QAAQ,iBAAiB;AAC/D,YAAM,kBAAkB,uCAAqC,QAAQ,iBAAiB;AACtF,WAAK,eAAe,IAAI,iBAAiB,sBAAoB,CAAC;AAC9D,wBAAkB;AAAA,IACtB;AAEA,QAAI,cAAc,gBAAgB,EAAE,KAAK,CAAC,GAAG;AACzC,YAAM,EAAE,QAAAA,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,uBAAuB,KAAK;AAAA,IACvC;AAEA,QAAI,iBAAiB;AACjB,sBAAgB,IAAI,UAAU,kBAAkB,EAAE,GAAG,OAAO,qBAAqB,OAAO,KAAK,eAAe,CAAC;AAAA,IACjH;AAEA,QAAI,cAAc,gBAAgB,EAAE,MAAM,CAAC,GAAG;AAC1C,YAAM,EAAE,UAAU,IAAI;AACtB,UAAI,OAAO;AACP,cAAM,EAAE,KAAK,IAAI;AACjB,YAAI,QAAQ,WAAW,OAAO,MAAM;AAChC,cAAI,MAAM;AACN,kBAAM,EAAE,SAAAC,UAAS,WAAW,OAAO,QAAAC,SAAQ,UAAU,IAAI;AACzD,iBAAK,SAAS,CAACD,YAAW,OAAO,aAAa,OAAO,SAAS,OAAOC,WAAU,OAAO,aAAa,KAAK;AAAA,UAC5G,OAAO;AACH,iBAAK,SAAS,CAAC,MAAM,OAAO,OAAO,OAAO,KAAK;AAAA,UACnD;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,OAAO,OAAO,KAAK,KAAK;AACxB,YAAI,KAAK,KAAK;AACV,eAAK,OAAO,SAAS;AAAA,QACzB;AAGA,mBAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,mBAAS,QAAQ;AAAA,QACrB;AACA,aAAK,YAAY,CAAC;AAGlB,cAAM,MAAM,OAAO;AACnB,YAAI,OAAO,KAAK,KAAK;AACjB,gBAAM,EAAE,UAAU,IAAI;AACtB,gBAAM,aAAa,OAAO,OAAO,cAAc;AAC/C,gBAAM,WAAW,aAAa;AAC9B,cAAI,UAAU,OAAO,cAAc,UAAU;AACzC,sBAAU,MAAM,SAAS;AACzB,gBAAI,WAAW,UAAU,OAAO,YAAY;AAExC,wBAAU,OAAO,KAAK,QAAQ;AAAA,YAClC;AAEA,YAAC,UAAwC,UAAU,IAAI,WAAW,UAAU,QAAQ,GAAG,UAAU;AACjG,kCAAsB,UAAU,SAAS,MAAM,UAAU;AACzD,iBAAK;AACL,sBAAU,MAAM,OAAO;AAAA,UAC3B;AACA,eAAK,MAAM;AACX,cAAI,KAAK;AACL,kBAAM,eAAe,kBAAkB,KAAK;AAC5C,gBAAI,cAAc;AACd,8BAAgB,IAAI,UAAU,iBAAiB,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,aAAa,CAAC;AAAA,YACrK;AAAA,UACJ;AAAA,QACJ;AAGA,YAAI,OAAO;AACP,eAAK,UAAU,MAAM,OAAO;AAC5B,eAAK,YAAY,KAAK;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,EAAE,UAAU,IAAI;AAEtB,QAAI,cAAc,gBAAgB,EAAE,sBAAsB,CAAC,GAAG;AAC1D,WAAK,oBAAoB,0BAA0B,KAAK;AACxD,WAAK,wBAAwB;AAAA,IACjC;AAEA,QAAI,cAAc,gBAAgB,EAAE,WAAW,CAAC,GAAG;AAC/C,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,EAAE,UAAU,IAAI;AACtB,YAAM,EAAE,UAAU,IAAI;AACtB,YAAM,aAAa,WAAW,WAAW,UAAU,CAAC;AAEpD,mCAA6B,EAAE,WAAW,OAAO,SAAS,KAAK,WAAW,iBAAiB,OAAU,CAAC;AAEtG,YAAM,EAAE,QAAAF,QAAO,IAAI,SAAS;AAC5B,MAAAA,QAAO,wBAAwB,WAAW,iBAAiB;AAG3D,UAAI,OAAO;AACP,cAAM,IAAI,KAAK,IAAI,OAAO,QAAQ,WAAW,MAAM;AACnD,YAAI,SAAS;AACb,cAAM,oBAAoB,WAAW,WAAW;AAChD,cAAM,oBAAoB,MAAM,WAAW;AAC3C,YAAI,qBAAqB,sBAAsB,qBAAqB,YAAY,qBAAqB,WAAW;AAC5G,mBAAS;AAAA,QACb,OAAO;AACH,gBAAM,eAAe,IAAI,IAAsB,WAAW,OAAO,OAAK,EAAE,UAAU,QAAQ,EAAE,IAAI,OAAK,EAAE,SAAS,CAAC;AACjH,qBAAW,EAAE,QAAQ,WAAAG,WAAU,KAAK,QAAQ;AACxC,gBAAI,UAAU,UAAU;AACpB,kBAAI,UAAU,aAAa,OAAOA,UAAS;AAC3C,kBAAI,CAAC,SAAS;AACV,yBAAS;AACT;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AACA,cAAI,aAAa,OAAO,GAAG;AACvB,qBAAS;AAAA,UACb;AAAA,QACJ;AACA,YAAI,QAAQ;AACR,eAAK,YAAY,KAAK;AAAA,QAC1B;AAAA,MACJ;AAEA,YAAMC,cAAa,CAAC,WAAW,eAAe,GAAG,OAAO,IAAI,OAAK,EAAE,MAAM,CAAC;AAC1E,YAAM,iBAAiB,YACnB;AAAA,QACI,UAAU,WAAW;AAAA,QACrB,GAAG,UAAU,WAAW,OAAO,IAAI,OAAK,EAAE,MAAM;AAAA,MACpD,IAAI,CAAC;AACT,UAAI,CAAC,cAAcA,aAAY,cAAc,GAAG;AAE5C,cAAM,QAAQ,sBAAsB,UAAU;AAC9C,wBAAgB,IAAI,UAAU,kBAAkB,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,WAAW,MAAM,SAAS,MAAM,CAAC;AAAA,MAClJ;AAEA,YAAM,YAAY,OAAO,IAAI,OAAK,EAAE,SAAS;AAC7C,YAAM,gBAAgB,WAAW,WAAW,OAAO,IAAI,OAAK,EAAE,SAAS,KAAK,CAAC;AAC7E,YAAM,mBAAmB,CAAC,cAAc,WAAW,aAAa;AAEhE,YAAM,UAAU,OAAO,IAAI,OAAK,OAAO,EAAE,UAAU,WAAW,EAAE,SAAS,MAAS;AAClF,YAAM,cAAc,WAAW,WAAW,OAAO,IAAI,OAAK,OAAO,EAAE,UAAU,WAAW,EAAE,SAAS,MAAS,KAAK,CAAC;AAClH,YAAM,iBAAiB,WAAW,iBAAiB,WAAW,WAAW,iBAAiB,CAAC,cAAc,SAAS,WAAW;AAE7H,UAAI,oBAAoB,gBAAgB;AACpC,kBAAU,MAAM,SAAS;AACzB,8BAAsB,UAAU,SAAS,UAAU;AACnD,aAAK;AACL,kBAAU,MAAM,OAAO;AAEvB,cAAM,QAAsB,CAAC;AAC7B,mBAAW,YAAY,OAAO,OAAO,SAAS,GAAG;AAC7C,gBAAM,KAAK,GAAG,aAAa,QAAQ,CAAC;AAAA,QACxC;AACA,mBAAW,QAAQ,OAAO;AACtB,eAAK,gBAAgB,UAAU,OAAO;AAAA,QAC1C;AAAA,MACJ;AAAC;AAAA,IACL;AAEA,QAAI,cAAc,gBAAgB,EAAE,SAAS,CAAC,GAAG;AAC7C,mCAA6B,EAAE,MAAM,SAAS,QAAQ,CAAC;AAAA,IAC3D;AAEA,QAAI,cAAc,gBAAgB,EAAE,OAAO,CAAC,GAAG;AAC3C,mCAA6B,EAAE,QAAQ,OAAO,eAAe,EAAE,CAAC;AAAA,IACpE;AAEA,kBAAc,oBAAoB,UAAU,eAAe,SAAS,KAAK;AAGzE,QAAI,uBAAuB,oBAAoB,CAAC,KAAK,WAAW;AAC5D,WAAK,YAAY;AACjB,YAAM,YAAY,YAAY;AAC1B,cAAM,WAAW,MAAM,aAAa,eAAe,eAAe,UAAU,KAAK,gBAAgB;AACjG,eAAO,OAAO,UAAU,UAAU,QAAQ;AAC1C,sBAAc,UAAU;AACxB,aAAK,YAAY;AACjB,aAAK,sBAAsB;AAAA,MAC/B;AACA,gBAAU;AAAA,IACd;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACtB,YAAM,QAAsB,CAAC;AAC7B,iBAAW,YAAY,OAAO,OAAO,SAAS,GAAG;AAC7C,iBAAS,OAAO,KAAK;AAGrB,cAAM,mBAAmB,CAAC,GAAG,aAAa,QAAQ,CAAC;AACnD,mBAAW,QAAQ,kBAAkB;AACjC,cAAI,CAAC,KAAK,YAAY,8BAA8B,IAAI,GAAG;AACvD,gBAAI,KAAK,4BAA8B;AACnC,mBAAK,QAAQ;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AACA,cAAM,KAAK,GAAG,aAAa,QAAQ,CAAC;AAAA,MACxC;AAEA,YAAM,KAAK,CAAC,GAAG,MAAM,EAAE,gBAAgB,EAAE,aAAa;AAEtD,YAAM,EAAE,YAAY,IAAI,cAAc;AACtC,YAAM,EAAE,cAAc,IAAI,cAAc;AACxC,UAAI,WAAW;AACf,UAAI,aAAa;AACjB,iBAAW,QAAQ,OAAO;AACtB,YAAI,KAAK,aAAa;AAClB,sBAAY,KAAK,KAAK;AACtB,wBAAc,KAAK;AAAA,QACvB;AACA,YAAI,KAAK,oCAAsC,KAAK,8BAAgC;AAEhF,wBAAc,KAAK,KAAK;AACxB,sBAAY,KAAK,KAAK;AAAA,QAC1B;AAAA,MACJ;AAGA,iBAAW,QAAQ,OAAO;AACtB,YAAI,KAAK,YAAY,2BAA2B,GAAG;AAC/C,cAAI,KAAK,4BAA8B;AACnC,gBAAI,aAAa,KAAK,KAAK,mBAAmB,iBAAiB,WAAW,KAAK,KAAK,YAAY,aAAa;AACzG,mBAAK;AACL,4BAAc,KAAK,KAAK;AACxB,0BAAY,KAAK,KAAK;AAAA,YAC1B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,oBAAc,kBAAkB,UAAU;AAE1C,YAAM,eAAe;AACrB,UAAI,qBAAqB,eAAe,KAAK,OAAO;AACpD,iBAAW,QAAQ,OAAO;AACtB,YAAI,qBAAqB,KAAK,KAAK,kCAAoC;AACnE,eAAK,aAAa;AAClB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,8BAA8B;AAC1B,UAAM,EAAE,GAAG,IAAI,KAAK;AAEpB,OAAG,iBAAiB,kBAA6B,KAAM,GAAG,GAAG,CAAC;AAC9D,OAAG,iBAAiB,kBAA6B,YAAY,GAAG,GAAG,CAAC;AACpE,OAAG,eAAe,gBAA2B,GAAG,GAAG,GAAG,CAAC;AACvD,OAAG,eAAe,sBAAiC,GAAG,GAAG,GAAG,CAAC;AAC7D,OAAG,eAAe,oBAA+B,GAAG,GAAG,GAAG,CAAC;AAC3D,OAAG,iBAAiB,mBAA8B,GAAG,GAAG,GAAG,CAAC;AAAA,EAChE;AAAA,EAEA,eAAe,6BAAqC,UAAyD;AAEzG,UAAM,QAAsB,CAAC;AAC7B,aAAS,QAAQ,MAA2B;AACxC,UAAI,WAAW;AACf,UAAI,KAAK,4BAA+B;AACpC,YAAI,OAAO,KAAK,KAAK;AACrB,YAAI,KAAK,YAAY,2BAA2B,GAAG;AAC/C,qBAAW,SAAS,KAAK,UAAU;AAC/B,gBAAI,MAAM,aAAa;AACnB,yBAAW;AACX,kBAAI,QAAQ,KAAK,GAAG;AAChB,wBAAQ,EAAE,KAAK,MAAM,KAAK;AAAA,cAC9B;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,mBAAW;AACX,cAAM,KAAK,EAAE,MAAM,KAAK,CAAC;AAAA,MAC7B;AACA,aAAO;AAAA,IACX;AACA,QAAI,UAAU;AACV,cAAQ,QAAQ;AAChB,YAAM,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,eAAe,EAAE,KAAK,YAAY;AAAA,IAClE;AACA,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,OAA2B;AAC/B,UAAM,EAAE,WAAW,cAAc,IAAI;AACrC,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,GAAG,IAAI;AACf,eAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,YAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,OAAO,EAAE,MAAM,KAAK;AAAA,MACxB,CAAC;AACD,SAAG,cAAc,GAAG,QAAQ;AAC5B,YAAM,YAAuB,CAAC;AAC9B,iBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,aAAK,WAAW,MAAM,MAAM,sBAAyB;AAAA,MACzD;AACA,SAAG,YAAY,GAAG,YAAY,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,WAAW,eAAe,MAAM,IAAI;AAC5C,UAAM,EAAE,YAAY,eAAe,WAAW,IAAI;AAClD,UAAM,EAAE,UAAU,eAAe,gBAAgB,iBAAiB,kBAAkB,iBAAiB,IAAI;AACzG,UAAM,EAAE,IAAI,aAAa,gBAAgB,kBAAkB,iBAAiB,cAAc,IAAI;AAI9F,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,YAAQ,IAAI;AAAA,MACR,SAAS,SAAS;AAAA,MAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,eAAe,IAAI;AAAA,MACtE,MAAM,EAAE,QAAQ,KAAM;AAAA,MACtB,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,QACX,MAAM,aAAa,WAAW;AAAA,MAClC;AAAA,MACA,UAAU;AAAA,QACN,EAAE,MAAM,cAAc,SAAS,MAAM,SAAS,cAAc;AAAA;AAAA,QAC5D,EAAE,MAAM,oBAAoB,SAAS,SAAS,SAAS,eAAe;AAAA,QACtE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,QACnE,EAAE,MAAM,cAAc,SAAS,iBAAiB,SAAS,eAAe;AAAA,QACxE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,QACzE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,MAC7E;AAAA,IACJ,CAAC;AACD,SAAK,4BAA4B;AACjC,OAAG,cAAc,GAAG,QAAQ;AAE5B,eAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,YAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,YAAM,YAAuB,CAAC;AAC9B,iBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,aAAK,WAAW,MAAM,MAAM,wBAA2B;AAAA,MAC3D;AACA,UAAI,SAAS,mCAA4C,MAAM,QAAQ,cAAc;AACjF,gBAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAAA,MACjE;AAAA,IACJ;AAEA,OAAG,YAAY,GAAG,YAAY,IAAI;AAElC,QAAI,cAAc,SAAS,WAAW,MAAM,SAAS,IAAI;AAGrD,YAAM,iBAAiB,CAAC,OAAqB,OAAY,aAAa,OAAO;AACzE,cAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,cAAM,IAAI,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC,MAAM;AAC1C,sBAAc,uBAAuB,GAAG,OAAO,UAAU;AAGzD,gBAAQ,IAAI;AAAA,UACR,gBAAgB,CAAC,gBAAgB,kBAAkB,iBAAiB,IAAI;AAAA,UACxE,OAAO;AAAA,YACH,MAAM;AAAA,YACN,WAAW;AAAA,UACf;AAAA,QACJ,CAAC;AACD,cAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,KAAK,2BAAoC,CAAC;AAC3I,mBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,cAAI,KAAK,gBAAgB,CAAC,GAAG;AACzB,iBAAK,0BAA0B,MAAM,IAAI;AAAA,UAC7C;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,MAAM,SAAS,SAAS;AACxB,uBAAe,MAAM,SAAS,OAAO,MAAM,SAAS,KAAK;AAAA,MAC7D;AACA,UAAI,MAAM,SAAS,SAAS;AACxB,iBAAS,IAAI,GAAG,IAAI,MAAM,SAAS,OAAO,QAAQ,EAAE,GAAG;AACnD,gBAAM,EAAE,cAAc,QAAQ,IAAI,MAAM,SAAS,OAAO,CAAC;AACzD,cAAI,SAAS,SAAS;AAClB,2BAAe,cAAc,QAAQ,SAAS,MAAM,SAAS,OAAO,CAAC;AAAA,UACzE;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,OAAO;AACP,iBAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,cAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA,UAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,eAAe,IAAI;AAAA,UACtE,OAAO;AAAA,YACH,MAAM;AAAA,YACN,WAAW;AAAA,YACX,MAAM;AAAA,UACV;AAAA,UACA,MAAM,EAAE,QAAQ,KAAM;AAAA,UACtB,OAAO;AAAA,YACH,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,OAAO,CAAC,GAAG,GAAG,GAAG,IAAG;AAAA,UACxB;AAAA,QACJ,CAAC;AACD,mBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,eAAK,gBAAgB,IAAI;AAAA,QAC7B;AAEA,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA,UAClB,OAAO,EAAE,MAAM,OAAQ;AAAA,UACvB,OAAO;AAAA,YACH,OAAO,CAAC,GAAG,GAAG,GAAG,IAAG;AAAA,UACxB;AAAA,QACJ,CAAC;AACD,mBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,eAAK,gBAAgB,IAAI;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO;AACH,UAAM,EAAE,WAAW,cAAc,IAAI;AACrC,UAAM,EAAE,IAAI,gBAAgB,kBAAkB,iBAAiB,eAAe,YAAY,aAAa,cAAc,cAAc,IAAI;AACvI,UAAM,EAAE,UAAU,eAAe,gBAAgB,iBAAiB,kBAAkB,iBAAiB,IAAI;AACzG,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,QAAQ;AAEd,eAAW,YAAY,OAAO,OAAO,KAAK,SAAS,GAAG;AAClD,YAAM,cAAc,KAAK,eAAe,KAAK,8BAA8B,MAAM,QAAQ,QAAQ,QAAQ;AACzG,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,eAAe,IAAI;AAAA,QACtE,MAAM,EAAE,QAAQ,KAAM;AAAA,QACtB,OAAO,EAAE,MAAM,MAAM,WAAW,KAAK;AAAA,QACrC,UAAU;AAAA,UACN,EAAE,MAAM,cAAc,SAAS,MAAM,SAAS,cAAc;AAAA;AAAA,UAC5D,EAAE,MAAM,oBAAoB,SAAS,SAAS,SAAS,eAAe;AAAA,UACtE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,UACnE,EAAE,MAAM,cAAc,SAAS,iBAAiB,SAAS,eAAe;AAAA,UACxE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,UACzE,EAAE,MAAM,cAAc,SAAS,kBAAkB,SAAS,eAAe;AAAA,QAC7E;AAAA,MACJ,CAAC;AACD,WAAK,4BAA4B;AACjC,SAAG,cAAc,GAAG,QAAQ;AAC5B,YAAM,YAAuB,CAAC;AAC9B,iBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,aAAK,WAAW,MAAM,MAAM,uBAA0B;AAAA,MAC1D;AACA,SAAG,YAAY,GAAG,YAAY,IAAI;AAElC,UAAI,cAAc,SAAS,WAAW,MAAM,SAAS,IAAI;AACrD,cAAM,iBAAiB,CAAC,OAAqB,OAAY,aAAa,OAAO;AACzE,gBAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,gBAAM,IAAI,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC,MAAM;AAC1C,wBAAc,uBAAuB,GAAG,OAAO,UAAU;AACzD,kBAAQ,IAAI;AAAA,YACR,gBAAgB,CAAC,gBAAgB,kBAAkB,iBAAiB,IAAI;AAAA,YACxE,OAAO;AAAA,cACH,MAAM;AAAA,cACN,WAAW;AAAA,YACf;AAAA,UACJ,CAAC;AACD,qBAAW,EAAE,MAAM,KAAK,KAAK,aAAa;AACtC,gBAAI,KAAK,gBAAgB,CAAC,GAAG;AACzB,mBAAK,0BAA0B,MAAM,IAAI;AAAA,YAC7C;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,MAAM,SAAS,SAAS;AACxB,yBAAe,MAAM,SAAS,OAAO,MAAM,SAAS,KAAK;AAAA,QAC7D;AACA,YAAI,MAAM,SAAS,SAAS;AACxB,mBAAS,IAAI,GAAG,IAAI,MAAM,SAAS,OAAO,QAAQ,EAAE,GAAG;AACnD,kBAAM,EAAE,cAAc,QAAQ,IAAI,MAAM,SAAS,OAAO,CAAC;AACzD,gBAAI,SAAS,SAAS;AAClB,6BAAe,cAAc,QAAQ,SAAS,MAAM,SAAS,OAAO,CAAC;AAAA,YACzE;AAAA,UACJ;AAAA,QACJ;AAAA,MAGJ;AAEA,UAAI,SAAS,mCAA4C,MAAM,QAAQ,cAAc;AACjF,gBAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAAA,MACjE;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW,MAAkB,MAAc,WAAsB,MAAkB;AAC/E,UAAM,EAAE,cAAc,IAAI;AAC1B,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,UAAU,IAAI;AACtB,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,UAAU;AAChB,QAAI,KAAK,UAAU;AACf,SAAG,eAAe,GAAG,gBAAgB,cAAU,KAAK,QAAQ;AAC5D,iBAAW,QAAQ,KAAK,QAAQ;AAC5B,cAAM,EAAE,aAAa,IAAI;AACzB,cAAM,gBAAgB;AACtB,YAAI,WAAW;AACX;AACJ,WAAG,gBAAgB,UAAU,KAAK,aAAa,KAAK,GAAG;AACvD,cAAM,OAAO,KAAK,sDAA8D,KAAK,WAAW,QAAQ;AACxG,YAAI,UAAU,QAAQ,MAAM;AACxB,oBAAU,OAAO;AACjB,aAAG,WAAW,SAAS,IAAI,EAAE,IAAI,CAAC;AAAA,QACtC;AACA,cAAM,cAAc,KAAK;AACzB,YAAI,UAAU,eAAe,aAAa;AACtC,oBAAU,cAAc;AACxB,cAAI,aAAa;AACb,eAAG,QAAQ,GAAG,SAAS;AAAA,UAC3B,OAAO;AACH,eAAG,OAAO,GAAG,SAAS;AAAA,UAC1B;AAAA,QACJ;AACA,YAAI,yBAA4B,sBAAyB;AACrD,aAAG,YAAY,GAAG,YAAY,KAAK,oBAAoB,UAAU,uBAAuB;AAAA,QAC5F;AACA,YAAI,QAAQ,KAAK,WAAW;AACxB,gBAAM,QAAQ,OAAO,IAAI,KAAK,UAAU;AACxC,wBAAc,oBAAoB,KAAK;AAAA,QAC3C,OAAO;AAEH,gBAAM,kBAAkB,mBAAmB,MAAM,IAAI;AACrD,cAAI,iBAAiB;AACjB,kBAAM,QAAQ,OAAO,IAAI,eAAe;AACxC,0BAAc,oBAAoB,KAAK;AAAA,UAC3C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,0BAA0B,MAAkB,MAAc;AACtD,UAAM,EAAE,WAAW,eAAe,OAAO,IAAI;AAC7C,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,UAAU,mBAAmB,SAAS,SAAS,IAAI;AAC3D,QAAI,QAAQ,KAAK,UAAU;AACvB,SAAG,eAAe,GAAG,gBAAgB,cAAU,KAAK,QAAQ;AAC5D,iBAAW,QAAQ,KAAK,QAAQ;AAC5B,YAAI,KAAK,gBAAgB,KAAK,WAAW,QAAQ,eAAe,CAAC,KAAK,kBAAkB;AACpF,qBAAW,aAAa,KAAK,YAAY;AACrC,gBAAK,KAAK,UAAU,aAAc,MAAM;AACpC,oBAAM,QAAQ,UAAU,QAAQ;AAChC,oBAAM,QAAQ,UAAU,QAAQ;AAChC,sBAAQ,OAAO,QAAQ,KAAK,OAAO,QAAQ;AAE3C,sBAAQ,IAAI;AAAA,gBACR,SAAS,SAAS;AAAA,gBAClB,mBAAmB,KAAK;AAAA,cAC5B,CAAC;AACD,kCAAoB,IAAI,EAAE,MAAM,UAAU,mBAAmB,eAAe,CAAC,OAAQ,GAAG,OAAO,MAAM,CAAC;AAGtG,sBAAQ,IAAI;AAAA,gBACR,SAAS,SAAS;AAAA,gBAClB,mBAAmB;AAAA,cACvB,CAAC;AACD,oBAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,SAAS,OAAO,GAAG,eAAe,MAAM,CAAC;AACpG,4BAAc,oBAAoB,KAAK;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,gBAAgB,MAAkB;AAC9B,UAAM,EAAE,cAAc,IAAI;AAC1B,UAAM,EAAE,GAAG,IAAI;AAEf,QAAI,KAAK,qBAAqB,KAAK,UAAU;AACzC,SAAG,eAAe,GAAG,gBAAgB,cAAU,KAAK,YAAY,IAAI;AACpE,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,aAAa,OAAO,IAAI,GAAG,CAAC;AAC7E,oBAAc,oBAAoB,KAAK;AAAA,IAC3C;AAAA,EACJ;AAAA,EAEA,cAAc;AACV,UAAM,EAAE,QAAQ,UAAU,IAAI;AAC9B,WAAO,SAAS;AAChB,eAAW,YAAY,OAAO,OAAO,SAAS,GAAG;AAC7C,gBAAU,QAAQ;AAAA,IACtB;AAAA,EACJ;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAC3B,SAAK,YAAY,CAAC;AAAA,EACtB;AAAA,EAEA,MAAc,YAAY,OAAyB;AAC/C,SAAK,iBAAiB;AACtB,UAAM,KAAK,OAAO;AAClB,UAAM,YAAY,MAAM,qBAAqB,MAAM,MAAM,QAAQ,KAAK,cAAc,aAAa;AACjG,QAAI,WAAW;AACX,WAAK,YAAY;AAAA,IACrB;AACA,SAAK,iBAAiB;AACtB,SAAK,cAAc,UAAU;AAAA,EACjC;AACJ;AAEA,SAAS,kBAAkB,OAA2B;AAClD,QAAM,EAAE,MAAM,IAAI;AAClB,MAAI,OAAO;AACP,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,aAAa,IAAI;AACzB,QAAI,cAAc;AAGd,UAASC,UAAT,WAAkB;AAAE,eAAO,IAAI,kBAAkB,YAAY;AAAA,MAAG,GACvDC,QAAT,WAAgB;AAAE,cAAM,IAAI,IAAI,kBAAkB,YAAY;AAAG,UAAE,KAAK,GAAG;AAAG,eAAO;AAAA,MAAG;AAD/E,mBAAAD,SACA,OAAAC;AAHT,YAAM,EAAE,SAAS,QAAQ,IAAI,OAAO;AACpC,cAAQ,OAAO,gBAAgB,GAAG;AAC+B;AACwB;AACzF,YAAM,MAAM,aAAa,QAAQ,KAAK,iBAAiB,KAAKD,QAAO;AACnE,YAAM,QAAQ,aAAa,QAAQ,OAAO,iBAAiB,KAAKA,QAAO;AACvE,YAAM,OAAO,aAAa,QAAQ,MAAM,iBAAiB,KAAKA,QAAO;AACrE,YAAM,QAAQ,aAAa,SAAS,iBAAiB,KAAKC,MAAK;AAC/D,YAAM,UAAU,eAAe,KAAK,OAAO,MAAM,KAAK;AACtD,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AASA,SAAS,sBAAsB,QAAoB,WAAuC;AACtF,QAAM,EAAE,eAAe,OAAO,IAAI;AAClC,WAAS,SAAS,QAA4C,OAAe;AACzE,WAAO,UAAU,SAAS,mBAAmB,UAAU,WAAW,qBAAqB;AAAA,EAC3F;AACA,QAAM,eAAe,SAAS,eAAe,eAAiB;AAC9D,SAAO,KAAK,YAAY;AAExB,MAAI,aAAa;AACjB,aAAW,SAAS,QAAQ;AACxB,UAAM,MAAM,SAAS,MAAM,QAAQ,UAAU;AAC7C,eAAW,YAAY,MAAM,WAAW;AACpC,aAAO,QAAQ,IAAI;AAAA,IACvB;AACA;AAAA,EACJ;AACJ;AAGA,UAAU,aAAa,MAA4D;AAC/E,MAAI,MAAM;AACN,UAAM;AACN,eAAW,SAAS,KAAK,UAAU;AAC/B,aAAO,aAAa,KAAK;AAAA,IAC7B;AAAA,EACJ;AACJ;AAEA,SAAS,sBAAsB,YAAwC;AACnE,QAAM,mBAAmB;AACzB,QAAM,qBAAqB;AAC3B,QAAM,qBAAqB;AAE3B,QAAM,gBAAgB,IAAI,aAAa,mBAAmB,qBAAqB,kBAAkB;AAEjG,WAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACvC,aAAS,IAAI,GAAG,IAAI,oBAAoB,KAAK;AACzC,qBAAe,mBAAmB,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI;AAAA,IACrE;AAAA,EACJ;AAEA,WAAS,WAAWC,QAAe,eAA8B,cAAoB;AACjF,aAASC,OAAM,GAAGA,OAAM,GAAGA,QAAO;AAC9B,eAAS,MAAM,GAAG,MAAM,oBAAoB,OAAO;AAC/C,uBAAe,mBAAmBA,OAAMD,UAAS,IAAI,GAAG,IAAI,cAAcC,OAAM,MAAM,CAAC;AAAA,MAC3F;AAAA,IACJ;AACA,UAAM,MAAM,qBAAqB;AACjC,UAAM,OAAO,eAAe,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AAC9D,aAAS,MAAM,GAAG,MAAM,oBAAoB,OAAO;AAC/C,qBAAe,mBAAmB,MAAMD,UAAS,IAAI,GAAG,IAAI,KAAK,GAAG;AAAA,IACxE;AAAA,EAEJ;AAEA,QAAM,EAAE,eAAe,OAAO,IAAI;AAClC,aAAW,GAAG,iBAAiB,aAAa,CAAC;AAC7C,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,eAAW,IAAI,GAAG,iBAAiB,OAAO,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,EAAE,YAAY;AAAA,EAChF;AACA,SAAO;AACX;AAEA,SAAS,eAAe,GAAsB,GAAsB,GAAsB,GAAsB;AAC5G,QAAM,IAAI,EAAE;AACZ,UAAQ,OAAO,KAAK,EAAE,UAAU,KAAK,EAAE,UAAU,KAAK,EAAE,MAAM;AAC9D,QAAM,OAAO,IAAI,kBAAkB,MAAM,CAAC;AAC1C,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,SAAK,GAAG,IAAI,EAAE,CAAC;AACf,SAAK,GAAG,IAAI,EAAE,CAAC;AACf,SAAK,GAAG,IAAI,EAAE,CAAC;AACf,SAAK,GAAG,IAAI,EAAE,CAAC;AAAA,EACnB;AACA,SAAO;AACX;AAEA,SAAS,cAAc,GAAU,GAAU;AACvC,MAAI,EAAE,UAAU,EAAE,QAAQ;AACtB,WAAO;AAAA,EACX;AACA,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,QAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG;AACd,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;AAEA,IAAM,uBAAsC;AAAA,EACxC;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACZ;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACZ;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACZ;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAE;AAGlB,SAAS,iBAAiB,QAA2D;AACjF,SAAQ,OAAO,UAAU,YAAY,MAAM,QAAQ,MAAM,IAAK,SAAS;AAC3E;;;ACrzBO,IAAM,eAAN,MAAM,cAAqC;AAAA,EACrC,OAAO;AAAA,EACP,gBAAgB;AAAA,IACrB,uBAAuB;AAAA,IACvB,aAAa;AAAA,IACb,WAAW;AAAA,IACX,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,yBAAyB;AAAA,IACzB,sBAAsB;AAAA,IACtB,gBAAgB;AAAA,IAChB,sBAAsB;AAAA,EAC1B;AAAA,EAES,sBAAmD,EAAE,MAAM,cAAc,OAAO,iBAAe,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,KAAK;AAAA,EACtK,gBAAgB;AAAA,EAEzB,OAAgB,eAAe,CAAC,cAAc,eAAe,gBAAgB,aAAa,cAAc,WAAW;AAAA,EACnH,OAAgB,kBAAkB,cAAa,aAAa,IAAI,UAAQ,YAAY,IAAI,EAAE;AAAA,EAC1F,OAAgB,sBAAsB,CAAC,UAAU,YAAY,SAAS,MAAM;AAAA,EAC5E,OAAgB,SAAS,CAAC,eAAkB,cAAiB,WAAc;AAAA,EAC3E,OAAgB,QAAQ,CAAC,mBAAsB,gBAAmB,eAAkB;AAAA,EAEpF,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAE9D,UAAM,SAAS,IAAI,WAAW,QAAQ,QAAQ,YAAY;AAC1D,UAAM,aAAa;AACnB,UAAM,gBAAgB,aAAa;AACnC,UAAM,SAAS,IAAI,kBAAkB,aAAa;AAClD,UAAM,OAAO,KAAK,QAAQ,QAAQ,QAAQ,UAAU;AACpD,WAAO,IAAI,oBAAoB,SAAS,MAAM,UAAU,WAAW,QAAQ,MAAM;AAAA,EACrF;AAAA,EAEA,iBAAiB;AACb,WAAO;AAAA,MACH,OAAO,WAAW,KAAK,aAAa;AAAA,IACxC;AAAA,EACJ;AAAA,EAEA,MAAM,gBAAgB,SAAwB,UAAoB;AAC9D,UAAM,UAAU,QAAQ,QAAQ,QAAQ;AACxC,UAAM,MAAM,QAAQ,YAAY,WAAW;AAC3C,UAAM,gBAAgB,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,SAAS,MAAM,OAAO,CAAC;AACjG,UAAM,iBAAiB,IAAI,cAAc,EAAE,oBAAoB,WAAW,qBAAqB,WAAW,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AACpJ,UAAM,0BAA0B,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,GAAG,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC,EAAE,CAAC;AAC1L,UAAM,kBAAkB,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,KAAK,CAAC;AACpJ,UAAM,mBAAmB,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,KAAK,QAAQ,GAAG,gBAAgB,WAAW,MAAM,SAAS,OAAO,KAAK,CAAC;AAC/I,UAAM,mBAAmB,IAAI,cAAc,KAAK,mBAAmB;AAEnE,UAAM,oBAAoB,IAAI,wBAAwB;AACtD,QAAI,UAA8B;AAClC,QAAI,WAA0C;AAC9C,QAAI,QAAQ,cAAc,SAAS,SAAS;AACxC,gBAAU,IAAI,aAAa,EAAE,MAAM,gBAAgB,UAAU,KAAK,WAAW,IAAI,OAAO,cAAc,CAAC;AACvG,iBAAW,IAAI,kBAAkB;AAAA,QAC7B,YAAY;AAAA,UACR,EAAE,MAAM,cAAc,QAAQ,SAAS,YAAY,IAAI,YAAY,GAAG,eAAe,SAAS,SAAS,EAAE;AAAA;AAAA,UACzG,EAAE,MAAM,cAAc,QAAQ,SAAS,YAAY,IAAI,YAAY,IAAI,eAAe,SAAS,SAAS,EAAE;AAAA;AAAA,UAC1G,EAAE,MAAM,gBAAgB,QAAQ,SAAS,YAAY,IAAI,YAAY,IAAI,eAAe,gBAAgB,SAAS,EAAE;AAAA;AAAA,QACvH;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,UAAM,EAAE,iBAAiB,oBAAoB,IAAI;AACjD,UAAM,iBAAiB,cAAa,eAAe,SAAS,GAAG;AAC/D,UAAM;AAAA;AAAA,MAAuB;AAAA,MAAW;AAAA,MAAM;AAAA,MAAO;AAAA,IAAY,IAAI,MAAM,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA,MAInF,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,WAAW,qBAAqB,CAAC,UAAU,YAAY,WAAW,MAAM,GAAG,iBAAiB,mBAAmB,EAAE,UAAU,CAAC,iBAAiB,SAAS,WAAW,GAAG,YAAY,sBAAsB,EAAE,CAAC;AAAA,MACpP,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,MAAM,qBAAqB,CAAC,UAAU,YAAY,WAAW,MAAM,GAAG,QAAQ,EAAE,OAAO,QAAQ,cAAc,OAAO,YAAY,CAAC,WAAW,IAAI,CAAC,EAAE,EAAE,CAAC;AAAA,MACjM,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,OAAO,oBAAoB,CAAC;AAAA,MACvE;AAAA,IACJ,CAAC;AACD,UAAM,WAAqB,EAAE,GAAG,cAAc,WAAW,MAAM,MAAM;AAGrE,WAAO;AAAA,MACH;AAAA,MAAK;AAAA,MACL;AAAA,MAAmB;AAAA,MAAS;AAAA,MAC5B;AAAA,MAAe;AAAA,MAAgB;AAAA,MAAyB;AAAA,MAAiB;AAAA,MAAkB;AAAA,IAC/F;AAAA,EACJ;AAAA,EAEA,OAAgB,sBAAsB;AAAA,IAClC,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,WAAW;AAAA,EACf;AAAA,EAEA,OAAO,gBAAgB,eAA8B,MAAkB,MAAkB,eAAe,cAAa,qBAAqB;AACtI,UAAM,EAAE,MAAM,QAAQ,UAAU,IAAI;AACpC,UAAM,QAAkB,CAAC;AACzB,QAAI,QAAQ,cAAc,OAAO,qBAAqB;AAClD,YAAM,KAAK,MAAM;AAAA,IACrB;AACA,QAAI,QAAQ;AACR,YAAM,KAAK,QAAQ;AAAA,IACvB;AACA,QAAI,WAAW;AACX,YAAM,KAAK,WAAW;AAAA,IAC1B;AACA,QAAI,cAAc,OAAO,WAAW;AAChC,YAAM,KAAK,WAAW;AAAA,IAC1B;AACA,UAAM,UAAU;AAAA,MACZ,EAAE,MAAM,QAAQ,OAAO,KAAK,SAAS,EAAE;AAAA,MACvC,EAAE,MAAM,QAAQ,OAAO,KAAK,SAAS,EAAE;AAAA,IAC3C;AACA,WAAO,EAAE,SAAS,MAAM;AAAA,EAC5B;AAAA,EAEA,aAAa,eAAe,SAAwB,KAAkB,eAAe,cAAa,qBAA4C;AAC1I,UAAM,UAAU,QAAQ,QAAQ,QAAQ;AACxC,UAAM,EAAE,iBAAiB,oBAAoB,IAAI;AACjD,UAAM,WAAW,CAAC;AAClB,UAAM,WAA4B,CAAC;AACnC,eAAW,QAAQ,cAAa,QAAQ;AACpC,YAAM,QAAQ,CAAC;AACf,iBAAW,QAAQ,cAAa,OAAO;AACnC,cAAM,UAAU,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,QAAQ,qBAAqB,iBAAiB,QAAQ,cAAa,gBAAgB,QAAQ,eAAe,MAAM,MAAM,YAAY,EAAE,CAAC;AAChM,cAAM,kBAAkB,QAAQ,KAAK,aAAW;AAC5C,gBAAM,IAAI,IAAI;AAAA,QAClB,CAAC;AACD,iBAAS,KAAK,eAAe;AAAA,MACjC;AACA,eAAS,IAAI,IAAI;AAAA,IACrB;AACA,UAAM,QAAQ,IAAI,QAAQ;AAC1B,WAAO;AAAA,EACX;AAAA,EAES,WAAW,OAAO;AAAA;AAC/B;;;ACrJO,IAAM,gBAAN,MAA4C;AAAA,EACtC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,UAAU;AAAA,IACV,MAAM;AAAA,IACN,gBAAgB;AAAA,EACpB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,qBAAqB,SAAS,MAAM,UAAU,SAAS;AAAA,EACtE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,EAAE,cAAc,eAAe,IAAI,QAAQ,QAAQ,QAAQ,QAAQ;AACzE,UAAM,MAAM,QAAQ,YAAY,SAAS;AACzC,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,OAAO,WAAW,CAAC;AACvG,UAAM,UAAU,IAAI,cAAc,EAAE,oBAAoB,WAAW,qBAAqB,WAAW,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AAC7I,UAAM,eAAe,CAAC,SAAS,QAAQ,SAAS;AAChD,UAAM,kBAAkB,aAAa,IAAI,UAAQ,YAAY,IAAI,EAAE;AACnE,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,qBAAqB,CAAC,aAAa,GAAG,gBAAgB,CAAC;AAC3I,WAAO,EAAE,KAAK,UAAU,SAAS,QAAQ;AAAA,EAC7C;AACJ;AAKA,IAAM,uBAAN,MAA0D;AAAA,EAEtD,YAAqB,SAAiC,QAAgC,UAA6B,WAAsB;AAApH;AAAiC;AAAgC;AAA6B;AAAA,EAAwB;AAAA,EAE3I,OAAO,OAA2B;AAC9B,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,SAAS,IAAI,KAAK;AAC1B,UAAM,EAAE,QAAQ,YAAY,IAAI;AAEhC,QAAI,QAAQ,gBAAgB,EAAE,QAAQ,YAAY,CAAC,GAAG;AAClD,YAAM,EAAE,QAAAE,SAAQ,aAAAC,aAAY,IAAI;AAChC,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,aAAO,WAAW,KAAK,IAAI,GAAGA,aAAY,QAAQ;AAClD,aAAO,OAAOA,aAAY;AAC1B,aAAO,iBAAiBD,QAAO;AAC/B,cAAQ,oBAAoB,UAAU,KAAK,QAAQ;AAAA,IACvD;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,SAAS,SAAS,IAAI;AACvC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,SAAS,IAAI,QAAQ;AAE7B,YAAQ,QAAQ,YAAY;AAE5B,YAAQ,IAAI;AAAA,MACR;AAAA,MACA,gBAAgB,CAAC,QAAQ;AAAA,MACzB,UAAU;AAAA,QACN,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,QACvD,EAAE,MAAM,cAAc,SAAS,SAAS,MAAM,QAAQ;AAAA,QACtD,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,MAC3D;AAAA,MACA,aAAa;AAAA,MACb,aAAa,CAAC,MAAM;AAAA,MACpB,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,UAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,YAAQ,oBAAoB,KAAK;AAAA,EACrC;AAAA,EAEA,cAAc;AAAA,EACd;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;ACtFO,IAAM,aAAN,MAAyC;AAAA,EACnC,OAAO;AAAA,EACP,eAAe;AAAA,IACpB,kBAAkB;AAAA,EACtB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,kBAAkB,SAAS,MAAM,UAAU,SAAS;AAAA,EACnE;AAAA,EAEA,iBAAiB;AACb,WAAO;AAAA,MACH,MAAM,WAAW,KAAK,YAAY;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,UAAU,QAAQ,QAAQ,QAAQ;AACxC,UAAM,WAAW,eAAe,CAACE,MAAK,MAAM,QAAS,CAAC,GAAGA,MAAK,GAAG,MAAM,GAAG,GAAG,CAAE;AAC/E,UAAM,MAAM,eAAe,CAACA,SAASA,IAAI;AACzC,UAAM,UAAU,cAAc;AAC9B,UAAM,WAAW,IAAI,aAAa,QAAQ,SAAS,CAAC;AACpD,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AACxC,YAAM,CAAC,GAAG,GAAG,CAAC,IAAI,QAAQ,MAAM,GAAG,IAAI,CAAC;AACxC,YAAM,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC;AACvC,YAAM,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC;AACvC,YAAM,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC;AACvC,eAAS,IAAI,IAAI,IAAI,IAAI,CAAC;AAC1B,eAAS,IAAI,IAAI,IAAI,IAAI,CAAC;AAC1B,eAAS,IAAI,IAAI,IAAI,IAAI,CAAC;AAAA,IAC9B;AAEA,UAAM,MAAM,QAAQ,YAAY,MAAM;AACtC,UAAM,WAAW;AAAA,MACb,MAAM,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,KAAK,OAAO,WAAW,CAAC;AAAA,IACrG;AACA,UAAM,oBAAoB,IAAI,wBAAwB;AAEtD,UAAM,YAAY,IAAI,aAAa,EAAE,MAAM,gBAAgB,SAAS,SAAS,CAAC;AAC9E,UAAM,YAAY,IAAI,aAAa,EAAE,MAAM,wBAAwB,SAAS,QAAQ,CAAC;AACrF,UAAM,aAAa,IAAI,kBAAkB;AAAA,MACrC,YAAY;AAAA,QACR,EAAE,MAAM,cAAc,QAAQ,WAAW,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QACvE,EAAE,MAAM,cAAc,QAAQ,WAAW,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,QACxE,EAAE,MAAM,cAAc,QAAQ,WAAW,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,MAC5E;AAAA,MACA,SAAS;AAAA,IACb,CAAC;AACD,QAAI,YAAY,YAAY,WAAW,SAAS;AAEhD,UAAM,cAAc,IAAI,aAAa,EAAE,MAAM,gBAAgB,SAAS,SAAS,CAAC;AAChF,UAAM,eAAe,IAAI,kBAAkB;AAAA,MACvC,YAAY;AAAA,QACR,EAAE,MAAM,cAAc,QAAQ,aAAa,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,QACzE,EAAE,MAAM,cAAc,QAAQ,aAAa,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,QAC1E,EAAE,MAAM,cAAc,QAAQ,aAAa,YAAY,IAAI,YAAY,GAAG;AAAA;AAAA,MAC9E;AAAA,IACJ,CAAC;AACD,QAAI,YAAY,cAAc,WAAW;AAGzC,UAAM,UAAU,IAAI,aAAa,EAAE,MAAM,gBAAgB,UAAU,KAAK,IAAI,GAAG,OAAO,cAAc,CAAC;AACrG,UAAM,aAAa,IAAI,aAAa,EAAE,MAAM,gBAAgB,UAAU,KAAK,GAAG,OAAO,cAAc,CAAC;AACpG,UAAM,WAAW,IAAI,kBAAkB;AAAA,MACnC,YAAY;AAAA;AAAA;AAAA,QAGR,EAAE,MAAM,cAAc,QAAQ,SAAS,YAAY,GAAG,YAAY,GAAG,eAAe,cAAc,SAAS,EAAE;AAAA;AAAA,QAC7G,EAAE,MAAM,SAAS,QAAQ,YAAY,YAAY,GAAG,YAAY,GAAG,eAAe,SAAS,SAAS,EAAE;AAAA;AAAA,MAC1G;AAAA,IACJ,CAAC;AAED,UAAM,sBAAsB,CAAC,UAAU,YAAY,MAAM;AACzD,UAAM,CAAC,OAAO,MAAM,MAAM,SAAS,IAAI,MAAM,QAAQ,IAAI;AAAA,MACrD,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,QAAQ,oBAAoB,CAAC;AAAA,MACxE,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,QAAQ,qBAAqB,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AAAA,MACrG,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,MAAM,qBAAqB,CAAC,GAAG,qBAAqB,SAAS,EAAE,CAAC;AAAA,MAC3G,QAAQ,iBAAiB,KAAK,EAAE,GAAG,QAAQ,WAAW,qBAAqB,CAAC,GAAG,qBAAqB,SAAS,GAAG,mBAAmB,EAAE,UAAU,CAAC,iBAAiB,SAAS,GAAG,YAAY,mBAAmB,EAAE,CAAC;AAAA,IACnN,CAAC;AACD,UAAM,WAAW,EAAE,OAAO,MAAM,MAAM,UAAU;AAChD,WAAO,EAAE,KAAK,UAAU,mBAAmB,YAAY,cAAc,UAAU,SAAS,YAAY,SAAS;AAAA,EACjH;AACJ;AAKA,IAAM,oBAAN,MAAuD;AAAA,EACnD,YAAqB,SAAiC,QAA6B,UAA6B,WAAsB;AAAjH;AAAiC;AAA6B;AAA6B;AAAA,EAAwB;AAAA,EAExI,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,WAAW,SAAS,IAAI;AACzC,UAAM,EAAE,MAAM,sBAAsB,IAAI;AACxC,QAAI,QAAQ,gBAAgB,EAAE,MAAM,sBAAsB,CAAC,GAAG;AAC1D,YAAM,EAAE,OAAAC,QAAO,SAAS,IAAI;AAC5B,YAAM,QAAQ,aAAK,SAAS,aAAK,OAAO,GAAG,UAAU,qBAAqB;AAC1E,YAAM,IAAI;AAAA,QACNA;AAAA,QAAO;AAAA,QAAG;AAAA,QAAG;AAAA,QACb;AAAA,QAAGA;AAAA,QAAO;AAAA,QAAG;AAAA,QACb;AAAA,QAAG;AAAA,QAAGA;AAAA,QAAO;AAAA,QACb,GAAG;AAAA,QAAO;AAAA,MACd;AACA,eAAS,KAAK,OAAO,mBAAmB,aAAK,WAAW,GAAG,CAAC;AAAA,IAChE;AACA,YAAQ,oBAAoB,UAAU,SAAS,MAAM,SAAS,IAAI;AAAA,EACtE;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,UAAU,UAAU,mBAAmB,YAAY,cAAc,UAAU,SAAS,WAAW,IAAI;AAC3G,UAAM,EAAE,IAAI,gBAAgB,kBAAkB,iBAAiB,cAAc,IAAI;AAEjF,QAAI,MAAM,KAAK,SAAS;AAEpB,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,SAAS,IAAI;AAAA;AAAA,QAEhE,OAAO,EAAE,MAAM,KAAM;AAAA,QACrB,MAAM,EAAE,QAAQ,MAAM;AAAA,QACtB,mBAAmB;AAAA,MACvB,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,YAAY,MAAM,aAAa,WAAW,kBAAkB,OAAO,GAAG,CAAC;AACxG,cAAQ,oBAAoB,KAAK;AAEjC,UAAI,MAAM,SAAS,WAAW,cAAc,SAAS,SAAS;AAC1D,cAAM,aAAa,MAAM,SAAS,OAAO,UAAU,CAAC,OAAO,aAAK,YAAY,GAAG,cAAc,KAAK,CAAC;AACnG,cAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI,MAAM,SAAS;AACzC,cAAM,QAAQ,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC,MAAM;AAE9C,gBAAQ,uBAAuB,OAAO,MAAM,SAAS,OAAO,UAAU;AAEtE,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA,UAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,SAAS,MAAM,eAAe;AAAA,UACjF,mBAAmB;AAAA,QACvB,CAAC;AACD,4BAAoB,IAAI,EAAE,MAAM,UAAU,mBAAmB,eAAe,CAAC,SAAS,UAAU,GAAG,OAAO,GAAG,CAAC;AAG9G,gBAAQ,IAAI;AAAA,UACR,SAAS,SAAS;AAAA;AAAA,UAElB,OAAO;AAAA,YACH,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,QAAQ;AAAA,YACR,UAAU;AAAA,YACV,UAAU;AAAA,UACd;AAAA,UACA,OAAO,EAAE,MAAM,MAAO;AAAA,UACtB,mBAAmB;AAAA,QACvB,CAAC;AAED,cAAMC,SAAQ,OAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,SAAS,OAAO,GAAG,eAAe,GAAG,CAAC;AACjG,gBAAQ,oBAAoBA,MAAK;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,KAAK,OAA2B;AAC5B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,UAAU,UAAU,WAAW,IAAI;AAC3C,UAAM,EAAE,IAAI,gBAAgB,iBAAiB,IAAI;AAEjD,QAAI,MAAM,KAAK,SAAS;AACpB,cAAQ,IAAI;AAAA,QACR,SAAS,SAAS;AAAA,QAClB,gBAAgB,CAAC,gBAAgB,kBAAkB,SAAS,IAAI;AAAA,QAChE,OAAO,EAAE,MAAM,KAAM;AAAA,QACrB,MAAM,EAAE,QAAQ,MAAM;AAAA,QACtB,mBAAmB;AAAA,MACvB,CAAC;AACD,aAAO,IAAI,EAAE,MAAM,YAAY,MAAM,aAAa,WAAW,kBAAkB,OAAO,GAAG,CAAC;AAAA,IAE9F;AAAA,EACJ;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;AAEA,SAAS,eAAe,MAA+F;AACnH,WAAS,KAAK,GAAiB,GAAiB,OAAqB;AACjE,UAAM,SAAS,aAAK,MAAM,aAAK,OAAO,GAAG,GAAG,CAAC;AAC7C,aAAS,KAAK,IAAmB,IAAmB;AAChD,YAAM,MAAM,aAAK,MAAM,MAAM;AAC7B,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,aAAO,KAAK,KAAK,QAAQ,KAAK;AAAA,IAElC;AACA,WAAO;AAAA,MACH,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,IACxB;AAAA,EACJ;AAEA,SAAO,IAAI,aAAa;AAAA,IACpB,GAAG,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,EAC5C,CAAC;AACL;AAEA,SAAS,gBAAgB;AACrB,MAAI,YAAY;AAChB,WAAS,OAAO;AACZ,UAAM,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,OAAK,IAAI,SAAS;AACrD,iBAAa;AACb,WAAO;AAAA,EACX;AACA,SAAO,IAAI,YAAY;AAAA,IACnB,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,EACZ,CAAC;AACL;;;ACzOO,IAAM,iBAAN,MAA6C;AAAA,EACvC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,YAAY;AAAA,EAChB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,sBAAsB,SAAS,MAAM,UAAU,SAAS;AAAA,EACvE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,EAAE,cAAc,eAAe,IAAI,QAAQ,QAAQ,QAAQ,SAAS;AAC1E,UAAM,MAAM,QAAQ,YAAY,UAAU;AAC1C,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,UAAU,cAAc,OAAO,WAAW,CAAC;AACvG,UAAM,sBAAsB,CAAC,UAAU,YAAY,QAAQ;AAC3D,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,oBAAoB,CAAC;AACzG,WAAO,EAAE,KAAK,UAAU,QAAQ;AAAA,EACpC;AACJ;AAKA,IAAM,wBAAN,MAA2D;AAAA,EACvD,YAAqB,SAAiC,QAAiC,UAA6B,WAAsB;AAArH;AAAiC;AAAiC;AAA6B;AAAA,EAAwB;AAAA,EAE5I,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,IAAI;AACrB,QAAI,QAAQ,gBAAgB,EAAE,SAAS,CAAC,GAAG;AACvC,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,SAAS,KAAK,SAAS;AAC7B,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,cAAM,EAAE,MAAM,IAAI,OAAO,CAAC;AAC1B,cAAM,MAAM;AACZ,eAAO,UAAU,GAAG,EAAW,IAAI,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,MAC3D;AAAA,IACJ;AACA,YAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAAA,EACjE;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,UAAM,EAAE,IAAI,gBAAgB,iBAAiB,IAAI;AACjD,UAAM,EAAE,SAAS,IAAI;AAErB,QAAI,SAAS,MAAM;AACf,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,kBAAkB,QAAQ;AAAA,QAC3D,OAAO;AAAA,UACH,MAAM;AAAA;AAAA,QAEV;AAAA,QACA,OAAO;AAAA,UACH,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACd;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AAAA,EACJ;AAAA,EAEA,KAAK,OAA2B;AAC5B,WAAO,KAAK,OAAO,KAAK;AAAA,EAC5B;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;ACxFO,IAAM,kBAAN,MAAM,iBAAwC;AAAA,EACxC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,iBAAiB;AAAA,IACjB,OAAO;AAAA,EACX;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,uBAAuB,SAAS,MAAM,UAAU,SAAS;AAAA,EACxE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,EAAE,cAAc,eAAe,IAAI,QAAQ,QAAQ,QAAQ,UAAU;AAC3E,UAAM,MAAM,QAAQ,YAAY,WAAW;AAC3C,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAC3F,UAAM,EAAE,UAAU,QAAQ,IAAI,iBAAgB,SAAS,QAAQ,QAAQ,IAAI;AAC3E,UAAM,KAAK,IAAI,aAAa,EAAE,MAAM,gBAAgB,SAAS,SAAS,CAAC;AACvE,UAAM,KAAK,IAAI,aAAa,EAAE,MAAM,wBAAwB,SAAS,QAAQ,CAAC;AAC9E,UAAM,MAAM,IAAI,kBAAkB;AAAA,MAC9B,YAAY;AAAA,QACR,EAAE,MAAM,cAAc,QAAQ,IAAI,YAAY,IAAI,YAAY,EAAE;AAAA;AAAA,MACpE;AAAA,MACA,SAAS;AAAA,IACb,CAAC;AACD,QAAI,YAAY,KAAK,IAAI,EAAE;AAC3B,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,qBAAqB,CAAC,WAAW,EAAE,CAAC;AACxH,WAAO,EAAE,KAAK,UAAU,KAAK,QAAQ;AAAA,EACzC;AAAA;AAAA,EAGA,OAAgB,oBAAoB;AAAA,EACpC,OAAgB,mBAAmB;AAAA,EACnC,OAAgB,aAAa,KAAK,mBAAmB;AAAA;AAAA,EAGrD,OAAO,SAAS,MAAmB;AAC/B,UAAM,WAAW,IAAI,aAAa,MAAM,GAAG,iBAAgB,oBAAoB,CAAC,EAAE,MAAM;AACxF,UAAM,UAAU,IAAI,YAAY,MAAM,iBAAgB,mBAAmB,iBAAgB,UAAU,EAAE,MAAM;AAC3G,WAAO,EAAE,UAAU,QAAQ;AAAA,EAC/B;AACJ;AAKA,IAAM,yBAAN,MAA4D;AAAA,EACxD,YAAqB,SAAiC,QAAkC,UAA6B,WAAsB;AAAtH;AAAiC;AAAkC;AAA6B;AAAA,EAAwB;AAAA,EAE7I,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,OAAO,IAAI;AAAO;AAC1B,QAAI,QAAQ,gBAAgB,EAAE,OAAO,CAAC,GAAG;AACrC,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,YAAM,UAAU;AAChB,YAAM,OAAO;AACb,YAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,YAAM,IAAI,qBAAqB;AAC/B,YAAM,IAAI,wBAAwB;AAClC,YAAM,IAAI;AACV,YAAM,IAAI,KAAK,MAAM,GAAG,CAAC;AACzB,YAAM,OAAO,KAAK,MAAM,OAAO,MAAM,IAAI;AACzC,YAAM,KAAK,IAAI,OAAO,IAAI;AAC1B,YAAM,KAAK,IAAI,OAAO,IAAI;AAC1B,YAAM,KAAK,OAAO,IAAI,IAAI,MAAM;AAChC,YAAM,IAAI;AAAA,QACN;AAAA,QAAI;AAAA,QAAG;AAAA,QAAG;AAAA,QACV;AAAA,QAAG;AAAA,QAAI;AAAA,QAAG;AAAA,QACV;AAAA,QAAG;AAAA,QAAG;AAAA,QAAI;AAAA,QACV,IAAK,UAAW;AAAA,QAAI,KAAM,UAAW;AAAA,QAAI,KAAK;AAAA,QAAK;AAAA,MACvD;AACA,aAAO,kBAAkB;AACzB,aAAO,QAAQ,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AACjD,cAAQ,oBAAoB,UAAU,UAAU,KAAK,QAAQ;AAAA,IACjE;AAAA,EACJ;AAAA,EAEA,SAAS;AACL,UAAM,EAAE,SAAS,WAAW,OAAO,IAAI;AACvC,UAAM,EAAE,SAAS,UAAU,IAAK,IAAI;AACpC,UAAM,EAAE,GAAG,IAAI;AAEf,YAAQ,IAAI;AAAA,MACR;AAAA,MACA,gBAAgB,CAAC,QAAQ;AAAA,MACzB,OAAO,EAAE,WAAW,MAAO;AAAA,MAC3B,MAAM,EAAE,QAAQ,KAAK;AAAA,MACrB,mBAAmB;AAAA,MACnB,OAAO;AAAA,QACH,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,MACd;AAAA,IACJ,CAAC;AACD,UAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,YAAY,MAAM,aAAa,WAAW,kBAAkB,OAAO,gBAAgB,WAAW,CAAC;AAChI,YAAQ,oBAAoB,KAAK;AAAA,EACrC;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;AC/GO,IAAM,gBAAN,MAA4C;AAAA,EACtC,OAAO;AAAA,EACP,mBAAmB;AAAA,IACxB,WAAW;AAAA,EACf;AAAA,EAES,mBAAmB;AAAA,IACxB,iBAAiB;AAAA,EACrB;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,YAAY,MAAM,KAAK,gBAAgB,OAAO;AACpD,WAAO,IAAI,qBAAqB,SAAS,MAAM,SAAS;AAAA,EAC5D;AAAA,EAEA,MAAM,gBAAgB,SAAwB;AAC1C,UAAM,EAAE,cAAc,eAAe,IAAI,QAAQ,QAAQ,QAAQ,QAAQ;AACzE,UAAM,MAAM,QAAQ,YAAY,SAAS;AACzC,UAAM,kBAAkB;AAAA,MACpB,KAAK,IAAI,cAAc,EAAE,qBAAqB,UAAU,oBAAoB,wBAAwB,MAAM,CAAC,UAAU,QAAQ,EAAE,CAAC;AAAA,MAChI,OAAO,IAAI,cAAc,EAAE,qBAAqB,UAAU,oBAAoB,UAAU,MAAM,CAAC,UAAU,QAAQ,EAAE,CAAC;AAAA,IACxH;AACA,UAAM,iBAAiB,IAAI,cAAc,EAAE,MAAM,cAAc,OAAO,GAAG,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,IAAI,WAAW,CAAC,EAAE,CAAC;AAC9J,UAAM,sBAAsB,CAAC,UAAU,YAAY,QAAQ;AAC3D,UAAM,eAAe,CAAC,WAAW,eAAe,gBAAgB,cAAc,sBAAsB,UAAU,YAAY,WAAW;AACrI,UAAM,kBAAkB,aAAa,IAAI,UAAQ,YAAY,IAAI,EAAE;AAEnE,UAAM,CAAC,OAAO,GAAG,IAAI,MAAM,QAAQ,IAAI;AAAA,MACnC,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,qBAAqB,iBAAiB,QAAQ,EAAE,OAAO,QAAQ,cAAc,OAAO,YAAY,CAAC,WAAW,IAAI,CAAC,EAAE,EAAE,CAAC;AAAA,MACpL,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,qBAAqB,iBAAiB,QAAQ,EAAE,OAAO,QAAQ,cAAc,OAAO,YAAY,CAAC,aAAa,wBAAwB,IAAI,CAAC,wBAAwB,EAAE,EAAE,CAAC;AAAA,IAC1O,CAAC;AACD,UAAM,WAAW,EAAE,OAAO,IAAI;AAC9B,WAAO,EAAE,KAAK,iBAAiB,gBAAgB,SAAS;AAAA,EAC5D;AACJ;AAKA,IAAM,uBAAN,MAA0D;AAAA,EAStD,YAAqB,SAAiC,QAAgC,WAAsB;AAAvF;AAAiC;AAAgC;AAClF,SAAK,cAAc,QAAQ;AAAA,EAC/B;AAAA,EAVA;AAAA,EACS,UAAU,oBAAI,IAA+B;AAAA,EAC7C,aAAa,oBAAI,IAA+C;AAAA,EAChE,UAAU,oBAAI,IAA2C;AAAA,EACzD,YAAY,oBAAI,IAA+C;AAAA,EAC/D,SAAS,oBAAI,IAA2C;AAAA,EACxD,WAAW,oBAAI,IAA6C;AAAA,EAMrE,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,UAAM,EAAE,KAAK,iBAAiB,gBAAgB,SAAS,IAAI;AAC3D,UAAM,EAAE,SAAS,sBAAsB,IAAI;AAC3C,QAAI,QAAQ,gBAAgB,EAAE,QAAQ,CAAC,GAAG;AAGtC,gBAAU,YAAY,UAAsC;AACxD,cAAM,EAAE,iBAAiB,IAAI;AAC7B,YAAI;AACA,gBAAM,iBAAiB;AAC3B,YAAI,SAAS,QAAQ,OAAO;AACxB,gBAAM,EAAE,iBAAiB,0BAA0B,eAAe,iBAAiB,IAAI;AACvF,cAAI;AACA,kBAAM,gBAAgB;AAC1B,cAAI;AACA,kBAAM,yBAAyB;AACnC,cAAI;AACA,kBAAM,cAAc;AACxB,cAAI;AACA,kBAAM,iBAAiB;AAAA,QAC/B;AAAA,MACJ;AACA,YAAM,aAAa,CAAC,GAAG,IAAI,IAAqC,QAAQ,QAAQ,QAAQ,OAAK,EAAE,KAAK,UAAU,CAAC,CAAC;AAChH,YAAM,aAAa,CAAC,GAAG,IAAI,IAAgC,WAAW,IAAI,OAAK,EAAE,QAAQ,CAAC,CAAC;AAC3F,YAAM,YAAY,CAAC,GAAG,IAAI,IAAgC,WAAW,IAAI,OAAK,EAAE,QAAQ,CAAC,CAAC;AAC1F,YAAM,WAAW,CAAC,GAAG,IAAI,IAA+B,UAAU,QAAQ,OAAK,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AACpG,YAAM,SAAS,CAAC,GAAG,IAAI,IAA6B,SAAS,IAAI,OAAK,EAAE,KAAK,CAAC,CAAC;AAC/E,YAAM,WAAW,CAAC,GAAG,IAAI,IAA+B,SAAS,IAAI,OAAK,EAAE,OAAQ,EAAE,OAAO,OAAK,CAAC,CAAC,CAAC;AACrG,YAAM,UAAU,CAAC,GAAG,IAAI,IAA8B,QAAQ,QAAQ,IAAI,OAAK,CAAC,CAAC,CAAC;AAClF,YAAM,gBAAgB,IAAI,IAAkB,WAAW,QAAQ,OAAK,CAAC,GAAG,OAAO,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,MAAyC,EAAE,MAAM,EAAE,OAAO,OAAK,CAAC,CAAC,CAAC,CAAC;AAC5K,YAAM,eAAe,IAAI,IAAkB,WAAW,IAAI,OAAK,OAAO,EAAE,WAAW,WAAW,SAAY,EAAE,OAAO,EAAE,OAAO,OAAK,CAAC,CAAmB;AACrJ,YAAM,mBAAmB,cAAc;AACvC,YAAM,UAAU,CAAC,GAAG,eAAe,GAAG,YAAY;AAClD,iBAAW,KAAK,SAAS,KAAK,SAAS,CAAC,MAAM,QAAQ,IAAI,YAAY,KAAK,MAAM,mBAAmB,iBAAiB,wBAAwB,IAAI,CAAC;AAClJ,iBAAW,KAAK,QAAQ,KAAK,QAAQ,UAAQ,IAAI,aAAa,KAAK,IAAI,CAAC;AACxE,iBAAW,KAAK,UAAU,KAAK,UAAU,UAAQ,IAAI,aAAa,KAAK,IAAI,CAAC;AAC5E,iBAAW,KAAK,YAAY,KAAK,YAAY,UAAQ,IAAI,cAAc,KAAK,MAAM,KAAK,OAAO,CAAC;AAC/F,iBAAW,KAAK,SAAS,KAAK,SAAS,UAAQ,IAAI,YAAY,KAAK,SAAS,MAAM,KAAK,CAAC;AACzF,iBAAW,KAAK,WAAW,KAAK,WAAW,UAAQ,IAAI,cAAc,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,UAAU,gBAAgB,iBAAiB,SAAS,KAAK,IAAI,CAAC,CAAC;AAAA,IAC9K;AACA,QAAI,QAAQ,gBAAgB,EAAE,sBAAsB,CAAC,GAAG;AACpD,iBAAW,YAAY,KAAK,QAAQ,OAAO,GAAG;AAC1C,iBAAS,OAAO,SAAS,KAAK;AAAA,MAClC;AAAA,IACJ;AACA,QAAI,QAAQ,eAAe,KAAK,aAAa;AACzC,WAAK,cAAc,QAAQ;AAC3B,iBAAW,YAAY,KAAK,UAAU,OAAO,GAAG;AAC5C,iBAAS,OAAO,SAAS,cAAc;AAAA,MAC3C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,IAAI,eAAe,IAAI;AAE/B,YAAQ,IAAI;AAAA,MACR,gBAAgB,CAAC,cAAc;AAAA,MAC/B,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,UAAM,EAAE,SAAS,YAAY,UAAU,IAAI;AAC3C,UAAM,SAAiH,CAAC;AACxH,QAAI,gBAAgB;AACpB,UAAM,QAAQ,QAAQ,QAAS,OAAK;AAAE,uBAAiB,EAAE,KAAK,WAAW;AAAA,IAAO,CAAE;AAClF,QAAI,iBAAiB,WAAW,MAAM;AAClC;AAAA,IACJ;AACA,eAAW,OAAO,MAAM,QAAQ,SAAS;AACrC,YAAM,WAAW,QAAQ,IAAI,GAAG;AAChC,iBAAW,aAAa,IAAI,KAAK,YAAY;AACzC,cAAM,WAAW,WAAW,IAAI,UAAU,QAAQ;AAClD,cAAM,WAAW,UAAU,IAAI,UAAU,QAAQ;AACjD,eAAO,KAAK,EAAE,UAAU,UAAU,QAAQ,SAAS,CAAC;AAAA,MACxD;AAAA,IACJ;AAEA,WAAO,KAAK,CAAC,GAAG,MAAM;AAClB,UAAI,OAAO,EAAE,SAAS,QAAQ,EAAE,SAAS;AACzC,UAAI,QAAQ,GAAG;AACX,eAAO,EAAE,OAAO,QAAQ,EAAE,OAAO;AAAA,MACrC;AACA,aAAO;AAAA,IACX,CAAC;AAGD,OAAG,eAAe,GAAG,GAAG,GAAG,GAAG,CAAC;AAE/B,QAAI,kBAAiC;AACrC,QAAI,gBAA6B;AAEjC,eAAW,EAAE,UAAU,QAAQ,SAAS,KAAK,QAAQ;AAEjD,UAAI,mBAAmB,UAAU;AAC7B,0BAAkB;AAClB,WAAG,eAAe,GAAG,gBAAgB,GAAG,SAAS,cAAc;AAC/D,gBAAQ,IAAI,gBAAgB,WAAW;AAAA,MAC3C;AACA,UAAI,iBAAiB,QAAQ;AACzB,wBAAgB;AAChB,WAAG,eAAe,GAAG,gBAAgB,GAAG,OAAO,cAAc;AAAA,MACjE;AACA,SAAG,gBAAgB,SAAS,UAAU,GAAG;AAEzC,SAAG,WAAW,GAAG,cAAc,OAAO,eAAe;AACrD,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,cAAM,SAAS,IAAI;AACnB,WAAG,oBAAoB,QAAQ,GAAG,GAAG,OAAO,OAAO,IAAI,IAAI,IAAI,EAAE;AACjE,WAAG,oBAAoB,QAAQ,CAAC;AAChC,WAAG,wBAAwB,MAAM;AAAA,MACrC;AACA,SAAG,WAAW,GAAG,cAAc,IAAI;AACnC,YAAM,OAAO,GAAG,SAAS,WAAW,IAAI;AACxC,YAAM,SAAS,EAAE,GAAG,SAAS,YAAY,MAAM,eAAe,OAAO,aAAa;AAClF,YAAM,QAAQ,OAAO,IAAI,MAAM;AAC/B,SAAG,gBAAgB,IAAI;AACvB,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AAEA,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAM,SAAS,IAAI;AACnB,SAAG,yBAAyB,MAAM;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,KAAK,OAA2B;AAC5B,SAAK,OAAO,KAAK;AAAA,EACrB;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,UAAM,EAAE,WAAW,SAAS,YAAY,WAAW,QAAQ,IAAI;AAC/D,UAAM,EAAE,KAAK,UAAU,iBAAiB,eAAe,IAAI;AAC3D,SAAK,YAAY;AACjB,UAAM,SAAS,CAAC,GAAG,QAAQ,OAAO,GAAG,GAAG,WAAW,OAAO,GAAG,GAAG,UAAU,OAAO,GAAG,GAAG,QAAQ,OAAO,CAAC;AACvG,eAAW,SAAS,QAAQ;AACxB,YAAM,QAAQ,GAAG;AAAA,IACrB;AACA,QAAI,OAAO,SAAS,OAAO,SAAS,KAAK,gBAAgB,KAAK,gBAAgB,OAAO,cAAc;AACnG,YAAQ,OAAO,IAAI,QAAQ,CAAC;AAC5B,QAAI,QAAQ;AACZ,YAAQ,MAAM;AACd,eAAW,MAAM;AACjB,cAAU,MAAM;AAChB,YAAQ,MAAM;AAAA,EAClB;AACJ;AAEA,SAAS,WAA8E,KAAkB,iBAA+B,KAAkBC,SAA6C;AAEnM,QAAM,eAAe,IAAI,IAAY,GAAG;AACxC,aAAW,YAAY,iBAAiB;AACpC,iBAAa,OAAO,QAAQ;AAAA,EAChC;AACA,aAAW,CAAC,UAAU,KAAK,KAAK,cAAc;AAC1C,QAAI,OAAO,QAAQ;AACnB,UAAM,QAAQ,GAAG;AAAA,EACrB;AAGA,MAAI,MAAM;AACV,aAAW,YAAY,iBAAiB;AACpC,QAAI,QAAQ,IAAI,IAAI,QAAQ;AAC5B,QAAI,CAAC,OAAO;AACR,cAAQA,QAAO,UAAU,GAAG;AAC5B,UAAI,IAAI,UAAU,KAAK;AAAA,IAC3B;AACA,UAAM,QAAQ;AAAA,EAClB;AACJ;AAEA,IAAM,cAAN,MAAkB;AAAA,EACd,QAAQ;AAAA,EACC;AAAA,EAET,YAAY,KAAkB,MAA+C,SAAuB;AAChG,SAAK,SAAS,IAAI,aAAa,EAAE,MAAM,QAAQ,CAAC;AAAA,EACpD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,MAAM;AAAA,EAC1B;AACJ;AAeA,IAAM,gBAAN,MAAoB;AAAA,EAChB,QAAQ;AAAA,EACC;AAAA,EACA;AAAA,EAET,YAAY,KAAkB,MAAkC,SAAyC;AACrG,UAAM,iBAAiB,OAAO,KAAK,WAAW;AAC9C,UAAM,YAAY,CAAC,iBAAiB,SAAY,KAAK,mBAAmB,cAAc,iBAAiB,KAAK,mBAAmB,cAAc,mBAAmB;AAChK,UAAM,OAAO,KAAK;AAClB,UAAM,QAAQ,iBAAiB,KAAK,QAAQ,SAAS,KAAK;AAC1D,SAAK,aAAa,EAAE,MAAM,iBAAiB,aAAa,UAAU,MAAM,OAAO,UAAqB;AACpG,UAAM,EAAE,UAAU,QAAQ,SAAS,QAAQ,WAAW,UAAU,IAAI,KAAK;AACzE,aAAS,SAAS,GAAkD;AAChE,UAAI,CAAC;AACD,eAAO;AACX,YAAM,EAAE,OAAO,IAAI,QAAQ,IAAI,EAAE,MAAM;AACvC,aAAO,EAAE,GAAG,GAAG,OAAO;AAAA,IAC1B;AACA,UAAM,UAAU,OAAO,KAAK,WAAW,WAAW,SAAY,IAAI,aAAa,EAAE,MAAM,wBAAwB,SAAS,KAAK,QAAQ,CAAC;AACtI,UAAM,SAA4B;AAAA,MAC9B,YAAY;AAAA,QACR,SAAS,QAAQ;AAAA,QACjB,SAAS,MAAM;AAAA,QACf,SAAS,OAAO;AAAA,QAChB,SAAS,MAAM;AAAA,QACf,SAAS,SAAS;AAAA,QAClB,SAAS,SAAS;AAAA,MACtB;AAAA,MACA;AAAA,IACJ;AACA,UAAM,MAAM,IAAI,kBAAkB,MAAM;AACxC,QAAI,SAAS;AACT,UAAI,YAAY,KAAK,OAAO;AAAA,IAChC;AACA,SAAK,YAAY,EAAE,IAAI;AAAA,EAC3B;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,UAAU,GAAG;AAAA,EACjC;AACJ;AAEA,IAAM,cAAN,MAAM,aAAY;AAAA,EAQd,YAAY,KAAkB,SAAiC,MAAgC,OAA2B;AAA3D;AAC3D,UAAM,eAAe;AAAA,MACjB,kBAAkB;AAAA,MAClB,cAAc;AAAA,IAClB;AACA,SAAK,WAAW,WAAW,YAAY;AACvC,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,WAAO,eAAe,KAAK,gBAAgB;AAC3C,SAAK,iBAAiB,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,KAAK,SAAS,OAAO,CAAC;AAChG,UAAM,EAAE,UAAU,IAAI;AACtB,SAAK,eAAe,UAAU;AAC9B,SAAK,kBAAkB,aAAY,sBAAsB,KAAK,WAAW,MAAM,qBAAqB;AACpG,SAAK,OAAO,SAAS,KAAK;AAAA,EAC9B;AAAA,EApBA,QAAQ;AAAA,EACS;AAAA,EAER;AAAA,EACA;AAAA,EACA;AAAA,EAiBT,OAAO,sBAAsB,KAAkB,WAAkD,uBAAqC;AAClI,UAAM,UAAU,aAAY,wBAAwB,WAAW,qBAAqB;AACpF,WAAO,IAAI,aAAa,EAAE,MAAM,gBAAgB,QAAQ,CAAC;AAAA,EAC7D;AAAA,EAEA,OAAO,wBAAwB,WAAkD,uBAAqC;AAClH,UAAM,UAAU,IAAI,aAAa,UAAU,SAAS,EAAE;AACtD,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAM,EAAE,UAAU,UAAU,OAAAC,OAAM,IAAI,UAAU,CAAC;AACjD,YAAM,gBAAgB,aAAK,IAAI,aAAK,OAAO,GAAG,UAAU,qBAAqB;AAC7E,YAAM,YAAY,WAAW,aAAK,wBAAwB,aAAK,OAAO,GAAG,UAAU,aAAa,IAAI,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAa;AACrJ,YAAM,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,IAAI;AACzF,YAAM,WAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAC5E,UAAIA,UAAS,QAAW;AACpB,iBAASC,KAAI,GAAGA,KAAI,GAAGA,MAAK;AACxB,mBAASA,EAAC,KAAKD;AAAA,QACnB;AAAA,MACJ;AACA,cAAQ,IAAI,UAAU,IAAI,SAAS,MAAM;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,SAAwB,OAA2B;AACtD,UAAM,EAAE,UAAU,gBAAgB,MAAM,gBAAgB,IAAI;AAC5D,UAAM,EAAE,sBAAsB,IAAI;AAClC,UAAM,EAAE,OAAO,IAAI;AACnB,WAAO,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,MAAM,qBAAqB,CAAC;AAErH,QAAI,QAAQ,gBAAgB,EAAE,sBAAsB,CAAC,GAAG;AACpD,YAAM,UAAU,aAAY,wBAAwB,KAAK,WAAW,qBAAqB;AACzF,qBAAe,QAAQ,IAAI,EAAE,MAAM,gBAAgB,SAAS,cAAc,gBAAgB,CAAC;AAAA,IAC/F;AAEA,YAAQ,oBAAoB,gBAAgB,QAAQ;AAAA,EACxD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,cAAc;AAAA,EAClC;AACJ;AAIA,IAAM,gBAAN,MAAoB;AAAA,EAChB,QAAQ;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW,CAAC;AAAA,EACZ,WAAW,CAAC;AAAA,EAErB,YACI,KACA,SACA,MACA,UACA,UACA,gBACA,iBACA,SACF;AACE,SAAK,OAAO,KAAK;AACjB,UAAM,QAAQ;AAAA,MACV,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,UAAU;AAAA,IACd;AACA,SAAK,cAAc;AAAA,MACf;AAAA,MACA,MAAM,EAAE,QAAQ,KAAK,cAAc,QAAQ,KAAK;AAAA,MAChD,OAAQ,KAAK,aAAa,UAAU,QAAQ;AAAA;AAAA,IAEhD;AACA,UAAM,eAAe;AAAA,MACjB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,mBAAmB;AAAA,MACnB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,wBAAwB;AAAA,MACxB,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACtB;AACA,UAAM,gBAAgB,KAAK,WAAW,WAAW,YAAY;AAC7D,QAAI,MAAM,KAAK;AACf,QAAI,OAAO,KAAK;AAChB,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,iBAAiB,IAAI;AAC7B,WAAO,kBAAkB,KAAK,mBAAmB,CAAC,GAAG,GAAG,GAAG,CAAC;AAC5D,WAAO,iBAAiB,KAAK,mBAAmB,KAAK,iBAAiB,YAAY,IAAI;AACtF,WAAO,cAAc,KAAK,eAAe,KAAK,aAAa,SAAS,MAAK;AACzE,WAAO,mBAAmB,QAAQ,YAAY;AAE9C,aAAS,kBAAkB,QAAwD;AAC/E,UAAI,QAAQ;AACR,eAAO,kBAAkB,OAAO,QAAQ,KAAK,IAAI,gBAAgB,MAAM,gBAAgB;AAAA,MAC3F;AAAA,IACJ;AAEA,QAAI,kBAAkB;AAClB,UAAI,YAAY,SAAS,IAAI,iBAAiB,QAAQ,KAAK,EAAG;AAC9D,WAAK,YAAY,SAAS,IAAI,iBAAiB,QAAQ,OAAQ,GAAG,WAAW,kBAAkB,gBAAgB;AAAA,IACnH;AACA,QAAI,KAAK,QAAQ,OAAO;AACpB,YAAM,EAAE,iBAAiB,gBAAgB,gBAAgB,iBAAiB,eAAe,kBAAkB,yBAAyB,IAAI;AACxI,aAAO,kBAAkB,mBAAmB;AAC5C,aAAO,iBAAiB,kBAAkB;AAC1C,aAAO,iBAAiB,kBAAkB,CAAC,GAAG,GAAG,CAAC;AAClD,aAAO,yBAAyB,2BAA2B,yBAAyB,YAAY,IAAI;AACpG,aAAO,cAAc,gBAAgB,cAAc,YAAY,IAAI;AACnE,aAAO,cAAc,eAAe,SAAS;AAC7C,aAAO,iBAAiB,mBAAmB,iBAAiB,YAAY,IAAI;AAC5E,aAAO,oBAAoB,kBAAkB,YAAY;AACzD,aAAO,gBAAgB,kBAAkB,gBAAgB,YAAY,IAAI;AACzE,UAAI,iBAAiB;AACjB,YAAI,WAAW,SAAS,IAAI,gBAAgB,QAAQ,KAAK,EAAG;AAC5D,aAAK,WAAW,SAAS,IAAI,gBAAgB,QAAQ,OAAQ,GAAG,WAAW,kBAAkB,eAAe;AAAA,MAChH;AACA,UAAI,eAAe;AACf,YAAI,SAAS,SAAS,IAAI,cAAc,QAAQ,KAAK,EAAG;AACxD,aAAK,SAAS,SAAS,IAAI,cAAc,QAAQ,OAAQ,GAAG,WAAW,kBAAkB,aAAa;AAAA,MAC1G;AACA,UAAI,kBAAkB;AAClB,YAAI,YAAY,SAAS,IAAI,iBAAiB,QAAQ,KAAK,EAAG;AAC9D,aAAK,YAAY,SAAS,IAAI,iBAAiB,QAAQ,OAAQ,GAAG,WAAW,kBAAkB,gBAAgB;AAAA,MACnH;AACA,UAAI,0BAA0B;AAC1B,YAAI,oBAAoB,SAAS,IAAI,yBAAyB,QAAQ,KAAK,EAAG;AAC9E,aAAK,oBAAoB,SAAS,IAAI,yBAAyB,QAAQ,OAAQ,GAAG,WAAW,kBAAkB,wBAAwB;AAAA,MAC3I;AAAA,IACJ,OAAO;AACH,aAAO,kBAAkB;AACzB,aAAO,iBAAiB;AACxB,aAAO,iBAAiB,CAAC,GAAG,GAAG,CAAC;AAChC,aAAO,yBAAyB;AAChC,aAAO,cAAc;AACrB,aAAO,cAAc;AACrB,aAAO,iBAAiB;AACxB,aAAO,oBAAoB;AAC3B,aAAO,gBAAgB;AAAA,IAC3B;AACA,SAAK,iBAAiB,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAChG,SAAK,OAAO,SAAS,cAAc;AAAA,EACvC;AAAA,EAEA,OAAO,SAAwB,gBAA8B;AACzD,UAAM,EAAE,aAAa,SAAS,eAAe,WAAW,IAAI;AAC5D,UAAM,EAAE,UAAU,gBAAgB,UAAU,SAAS,IAAI;AACzD,UAAM,EAAE,SAAS,UAAU,WAAW,IAAI;AAE1C,UAAM,eAAe,KAAK;AAC1B,iBAAa,WAAW;AAAA,MACpB,EAAE,MAAM,cAAc,SAAS,SAAS,SAAS,cAAc;AAAA,MAC/D,EAAE,MAAM,oBAAoB,SAAS,SAAS,SAAS,cAAc;AAAA,MACrE,EAAE,MAAM,oBAAoB,SAAS,UAAU,SAAS,WAAW;AAAA,MACnE,EAAE,MAAM,cAAc,SAAS,SAAS,aAAa,gBAAgB,SAAS,SAAS,aAAa,KAAK;AAAA,MACzG,EAAE,MAAM,cAAc,SAAS,SAAS,qBAAqB,gBAAgB,SAAS,SAAS,qBAAqB,KAAK;AAAA,MACzH,EAAE,MAAM,cAAc,SAAS,SAAS,UAAU,gBAAgB,SAAS,SAAS,UAAU,KAAK;AAAA,MACnG,EAAE,MAAM,cAAc,SAAS,SAAS,YAAY,gBAAgB,SAAS,SAAS,YAAY,KAAK;AAAA,MACvG,EAAE,MAAM,cAAc,SAAS,SAAS,aAAa,gBAAgB,SAAS,SAAS,aAAa,KAAK;AAAA,IAC7G;AACA,aAAS,OAAO,mBAAmB;AACnC,YAAQ,oBAAoB,gBAAgB,QAAQ;AAAA,EACxD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,cAAc;AAAA,EAClC;AACJ;AAEA,IAAM,eAAN,MAAmB;AAAA,EACf,QAAQ;AAAA,EACC;AAAA,EAET,YAAY,KAAkB,OAAgC;AAC1D,SAAK,UAAU,IAAI,cAAc,MAAM,MAAM;AAAA,EACjD;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,OAAO;AAAA,EAC3B;AACJ;AAEA,IAAM,eAAN,MAAmB;AAAA,EACf,QAAQ;AAAA,EACC;AAAA,EAET,YAAY,KAAkB,SAAoC;AAC9D,SAAK,UAAU,IAAI,cAAc,OAAO;AAAA,EAC5C;AAAA,EAEA,QAAQ,KAAkB;AACtB,QAAI,OAAO,KAAK,OAAO;AAAA,EAC3B;AACJ;AAEA,SAAS,kBAAkB,OAAgC;AACvD,WAASE,YAAW,OAAe;AAC/B,YAAQ,QAAS,QAAQ,MAAO;AAAA,EACpC;AACA,QAAM,EAAE,OAAO,OAAO,IAAI,MAAM;AAChC,SAAOA,YAAW,KAAK,KAAKA,YAAW,MAAM;AACjD;;;ACvhBO,IAAM,aAAN,MAAyC;AAAA,EACnC,OAAO;AAAA,EACP,WAAW;AAAA,IAChB,OAAO;AAAA,EACX;AAAA,EAEA,MAAM,YAAY,SAAwB;AACtC,UAAM,WAAW,KAAK,eAAe;AACrC,UAAM,YAAY,MAAM,KAAK,gBAAgB,SAAS,QAAQ;AAC9D,WAAO,IAAI,kBAAkB,SAAS,MAAM,UAAU,SAAS;AAAA,EACnE;AAAA,EAEA,iBAAiB;AACb,WAAO,WAAW,KAAK,QAAQ;AAAA,EACnC;AAAA,EAEA,MAAM,gBAAgB,SAAwB,eAAyB;AACnE,UAAM,EAAE,cAAc,eAAe,IAAI,QAAQ,QAAQ,QAAQ,KAAK;AACtE,UAAM,MAAM,QAAQ,YAAY,MAAM;AACtC,UAAM,WAAW,IAAI,aAAa,EAAE,MAAM,kBAAkB,SAAS,cAAc,OAAO,CAAC;AAC3F,UAAM,UAAU,IAAI,cAAc,EAAE,oBAAoB,WAAW,qBAAqB,WAAW,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AAC7I,UAAM,eAAe,CAAC,SAAS,QAAQ,SAAS;AAChD,UAAM,kBAAkB,aAAa,IAAI,UAAQ,YAAY,IAAI,EAAE;AAEnE,UAAM,UAAU,MAAM,QAAQ,iBAAiB,KAAK,EAAE,cAAc,gBAAgB,qBAAqB,CAAC,QAAQ,GAAG,gBAAgB,CAAC;AACtI,WAAO,EAAE,KAAK,UAAU,SAAS,QAAQ;AAAA,EAC7C;AACJ;AAKA,IAAM,oBAAN,MAAuD;AAAA,EACnD,YAAqB,SAAiC,QAA6B,UAA6B,WAAsB;AAAjH;AAAiC;AAA6B;AAA6B;AAAA,EAAwB;AAAA,EAExI,MAAM,OAAO,OAA2B;AACpC,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,QAAI,QAAQ,cAAc,OAAO,WAAW;AACxC;AAAA,IACJ;AACA,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,EAAE,aAAa,sBAAsB,IAAI;AAC/C,QAAI,QAAQ,gBAAgB,EAAE,aAAa,sBAAsB,CAAC,GAAG;AACjE,YAAM,EAAE,OAAO,IAAI,KAAK;AACxB,aAAO,QAAQ,YAAY;AAC3B,cAAQ,oBAAoB,UAAU,KAAK,QAAQ;AAAA,IACvD;AACA,QAAI,QAAQ,aAAa,UAAa,CAAC,QAAQ,mBAAmB,KAAK,MAAM,YAAY,WAAW,MAAM,YAAY,IAAI;AACtH,YAAM,QAAQ,kBAAkB;AAAA,IACpC;AAAA,EACJ;AAAA,EAEA,OAAO,OAA2B;AAC9B,UAAM,EAAE,SAAS,UAAU,IAAI;AAC/B,QAAI,QAAQ,cAAc,OAAO,WAAW;AACxC;AAAA,IACJ;AACA,UAAM,EAAE,SAAS,UAAU,QAAQ,IAAI;AACvC,UAAM,EAAE,IAAI,eAAe,IAAI;AAC/B,UAAM,EAAE,SAAS,IAAI,QAAQ;AAE7B,QAAI,QAAQ,aAAa,UAAa,QAAQ,mBAAmB,KAAK,MAAM,YAAY,WAAW,MAAM,YAAY,IAAI;AACrH,cAAQ,IAAI;AAAA,QACR;AAAA,QACA,gBAAgB,CAAC,gBAAgB,QAAQ;AAAA,QACzC,UAAU;AAAA,UACN,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,UACvD,EAAE,MAAM,cAAc,SAAS,SAAS,MAAM,QAAQ;AAAA,UACtD,EAAE,MAAM,cAAc,SAAS,SAAS,OAAO,QAAQ;AAAA,QAC3D;AAAA,QACA,QAAQ;AAAA,UACJ,iBAAiB;AAAA,QACrB;AAAA,QACA,OAAO;AAAA,UACH,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,QACd;AAAA,QACA,OAAO;AAAA,UACH,MAAM;AAAA,UACN,WAAW;AAAA,QACf;AAAA,MACJ,CAAC;AACD,YAAM,QAAQ,OAAO,IAAI,EAAE,MAAM,UAAU,MAAM,kBAAkB,OAAO,EAAE,CAAC;AAC7E,cAAQ,oBAAoB,KAAK;AAAA,IACrC;AAAA,EACJ;AAAA,EAEA,cAAoB;AAAA,EACpB;AAAA,EAEA,UAAU;AACN,SAAK,YAAY;AACjB,SAAK,UAAU,IAAI,QAAQ;AAAA,EAC/B;AACJ;;;ACzFO,SAAS,uBAAuB;AACnC,SAAO;AAAA,IACH,IAAI,iBAAiB;AAAA,IACrB,IAAI,WAAW;AAAA,IACf,IAAI,aAAa;AAAA,IACjB,IAAI,cAAc;AAAA,IAClB,IAAI,WAAW;AAAA,IACf,IAAI,WAAW;AAAA,IACf,IAAI,eAAe;AAAA,IACnB,IAAI,gBAAgB;AAAA,IACpB,IAAI,cAAc;AAAA,EACtB;AACJ;;;ACSO,IAAMC,iBAAN,MAAM,eAAc;AAAA;AAAA,EAmGvB,YAEa,eAEA,QAEA,SACT,cACF;AANW;AAEA;AAEA;AAIT,UAAM,KAAK,OAAO,WAAW,UAAU,YAAY;AACnD,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,mCAAmC;AACvD,SAAK,KAAK;AACV,UAAM,aAAa,aAAa,IAAI,IAAI;AACxC,UAAM,aAAa,KAAK,qBAAqB,KAAK,YAAY,SAAS;AACvE,UAAM,SAAS,KAAK,iBAAiB,KAAK,YAAY,KAAK;AAC3D,YAAQ,OAAO,WAAW,eAAe,MAAM,WAAW,aAAa,MAAM,WAAW,oBAAoB,IAAI;AAChH,UAAM,EAAE,gBAAgB,IAAI;AAC5B,QAAI,iBAAiB;AACjB,sBAAgB,qBAAqB,gBAAgB,6BAA6B;AAAA,IACtF;AACA,SAAK,cAAc,QAAQ,QAAQ;AACnC,SAAK,OAAO,QAAQ;AAGpB,OAAG,YAAY,GAAG,oCAAoC,GAAG,IAAI;AAC7D,UAAM,YAAY,EAAE,MAAM,cAAc,gBAAgB,SAAS,MAAM,iBAAiB,OAAO,QAAQ,OAAO;AAC9G,SAAK,UAAU,WAAW,cAAc,SAAS;AACjD,SAAK,gBAAgB,WAAW,cAAc,EAAE,oBAAoB,UAAU,qBAAqB,UAAU,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AACvJ,SAAK,aAAa,WAAW,cAAc,EAAE,oBAAoB,wBAAwB,qBAAqB,UAAU,MAAM,CAAC,iBAAiB,eAAe,EAAE,CAAC;AAGlK,UAAM,MAAM,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC;AAC/C,UAAM,OAAO,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC;AAChD,UAAM,SAAS,IAAI,WAAW,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC;AAC/C,UAAM,QAAQ,CAAC,MAAM,MAAM,KAAK,QAAQ,MAAM,IAAI;AAClD,UAAM,gBAAgB,KAAK,0BAA0B,EAAE,MAAM,oBAAoB,OAAO,GAAG,QAAQ,GAAG,gBAAgB,SAAS,MAAM,iBAAiB,MAAa;AACnK,SAAK,cAAc;AAAA,MACf,SAAS,OAAO,cAAc,aAAa;AAAA,MAC3C,UAAU,OAAO,cAAc,aAAa;AAAA,MAC5C,YAAY;AAAA,MACZ,SAAS;AAAA,IACb;AAGA,SAAK,qBAAqB,WAAW;AAAA,MACjC,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,uBAAuB;AAAA,MACvB,uBAAuB;AAAA,MACvB,YAAY;AAAA,MACZ,MAAM;AAAA,IACV,CAAC;AACD,SAAK,iBAAiB,eAAe,IAAI,EAAE,MAAM,kBAAkB,UAAU,KAAK,mBAAmB,OAAO,WAAW,CAAC;AAGxH,SAAK,uBAAuB,WAAW;AAAA,MACnC,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,MAAM;AAAA,IACV,CAAC;AACD,SAAK,mBAAmB,eAAe,IAAI,EAAE,MAAM,kBAAkB,UAAU,KAAK,qBAAqB,OAAO,WAAW,CAAC;AAG5H,SAAK,uBAAuB,WAAW;AAAA,MACnC,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,OAAO;AAAA,MACP,YAAY;AAAA,IAChB,CAAC;AACD,SAAK,kBAAkB,eAAe,IAAI,EAAE,MAAM,kBAAkB,UAAU,KAAK,qBAAqB,OAAO,WAAW,CAAC;AAAA,EAC/H;AAAA;AAAA,EAhLS;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA,EAET,OAAe;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,wBAAwB,aAAK,OAAO;AAAA,EAC3B,gBAAoC,CAAC;AAAA,EACrC,eAAe,oBAAI,IAAiB;AAAA,EACpC;AAAA,EACA;AAAA,EACT,mBAAmB;AAAA,EACnB;AAAA,EACA,eAAe,oBAAI,IAAW;AAAA,EAC9B,mBAAmB;AAAA,EACnB,aAAa;AAAA,IACjB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,WAAW;AAAA,IACX,WAAW;AAAA,IACX,YAAY;AAAA,EAChB;AAAA,EACQ;AAAA;AAAA;AAAA,EAOC,aAAa;AAAA;AAAA,EAGd,UAAU;AAAA,EACV,iBAAiB,aAAK,OAAO;AAAA,EAC7B,kBAAkB,aAAK,OAAO;AAAA,EAC9B,wBAAwB,aAAK,OAAO;AAAA,EAEpC,yBAAyB,aAAK,OAAO;AAAA,EACrC,0BAA0B,aAAK,OAAO;AAAA;AAAA;AAAA,EAIrC;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA,EAEA;AAAA;AAAA;AAAA;AAAA,EAIT;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA,EAGA,UAAU;AAAA;AAAA,EAEV,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKR,UAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoGA,MAAM,KAAK,SAAmC;AAE1C,QAAI,CAAC,SAAS;AACV,qBAAc,mBAAmB,qBAAqB;AACtD,gBAAU,eAAc;AAAA,IAC5B;AACA,UAAM,iBAAiB,QAAQ,IAAI,CAAC,GAAG,MAAM;AACzC,YAAM,MAAM,EAAE,YAAY,IAAI;AAC9B,aAAO,UAAU,GAAG,IAAI,MAAM,QAAQ,QAAQ,GAAG;AAAA,IACrD,CAAC;AACD,SAAK,kBAAkB;AACvB,SAAK,UAAU,MAAM,QAAQ,IAAI,cAAc;AAAA,EACnD;AAAA,EAEQ,oBAAoB;AAExB,UAAM,EAAE,IAAI,cAAc,IAAI;AAC9B,eAAW,EAAE,QAAQ,KAAK,KAAK,eAAe;AAC1C,SAAG,YAAY,OAAO;AAAA,IAC1B;AACA,OAAG,WAAW,IAAI;AAGlB,UAAM,MAAM,aAAa,EAAE,EAAE;AAC7B,aAAS,oBAAoB;AACzB,eAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,cAAM,EAAE,SAAS,SAAS,OAAO,IAAI,cAAc,CAAC;AACpD,YAAI,KAAK;AACL,cAAI,CAAC,GAAG,oBAAoB,SAAS,IAAI,qBAAqB;AAC1D;AAAA,QACR;AACA,cAAM,CAAC,IAAI,IAAI,cAAc,OAAO,KAAK,CAAC;AAC1C,cAAM,QAAQ,eAAe,IAAI,IAAI;AACrC,YAAI,OAAO;AACP,iBAAO,KAAK;AAAA,QAChB,OAAO;AACH,kBAAQ;AAAA,QACZ;AAAA,MACJ;AACA,UAAI,cAAc,SAAS,GAAG;AAC1B,mBAAW,iBAAiB;AAAA,MAChC;AAAA,IACJ;AACA,sBAAkB;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU;AACN,UAAM,EAAE,SAAS,SAAS,cAAc,oBAAoB,eAAe,IAAI;AAC/E,SAAK,KAAK;AACV,eAAW,SAAS,cAAc;AAC9B,YAAM,QAAQ;AAAA,IAClB;AACA,iBAAa,MAAM;AACnB,QAAI,SAAS;AACT,iBAAW,UAAU,SAAS;AAC1B,gBAAQ,QAAQ;AAAA,MACpB;AACA,WAAK,UAAU;AAAA,IACnB;AACA,aAAS,QAAQ;AACjB,mBAAe,QAAQ;AACvB,uBAAmB,QAAQ;AAC3B,YAAQ,OAAO,KAAK,aAAa,QAAQ,CAAC;AAAA,EAC9C;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK,GAAG;AAAA,EACnB;AAAA;AAAA,EAGA,IAAI,SAAS;AACT,WAAO,KAAK,GAAG;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB;AACZ,WAAO,KAAK,GAAG,cAAc;AAAA,EACjC;AAAA;AAAA,EAGA,YAAY,uBAAiF;AACzF,UAAM,gBAAgB;AACtB,WAAO;AAAA,MACH,gCAAoC,sBAAsB;AAAA,MAC1D,+BAAmC,sBAAsB;AAAA,IAC7D;AAAA,EACJ;AAAA;AAAA,EAGA,oBAAoB,eAA4BC,QAAsB;AAClE,QAAI,CAACA,OAAM,WAAW,SAAS;AAC3B,YAAM,EAAE,OAAO,IAAI,IAAIA,OAAM;AAC7B,qBAAe,KAAK,IAAI,EAAE,MAAM,kBAAkB,SAASA,OAAM,QAAQ,cAAc,eAAe,kBAAkB,OAAO,eAAe,OAAO,UAAU,MAAM,MAAM,CAAC;AAC5K,MAAAA,OAAM,WAAW,MAAM;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA,EAGA,kBAAkB,QAA+H;AAC7I,UAAM,EAAE,eAAe,IAAI;AAC3B,mBAAe,UAAU;AACzB,QAAI,QAAQ;AACR,YAAM,EAAE,SAAS,SAAS,IAAI;AAC9B,WAAK,cAAc;AAAA,QACf,SAAS,eAAe,cAAc,OAAO;AAAA,QAC7C,UAAU,eAAe,cAAc,QAAQ;AAAA,QAC/C,YAAY,OAAO,SAAS,WAAW,WAAW,SAAS,UAAU,SAAS,QAAQ;AAAA,QACtF,SAAS;AAAA,MACb;AAAA,IACJ,OAAO;AACH,WAAK,cAAc;AAAA,QACf,SAAS,eAAe,cAAc,KAAK,uBAAuB;AAAA,QAClE,UAAU,eAAe,cAAc,KAAK,uBAAuB;AAAA,QACnE,YAAY;AAAA,QACZ,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,gBAAgB,OAAoC;AAChD,UAAM,EAAE,UAAU,IAAI;AACtB,QAAI,UAAU;AAEd,eAAW,QAAQ,OAAO;AACtB,YAAM,IAAI;AACV,UAAI,CAAC,aAAa,UAAU,CAAC,MAAM,MAAM,CAAC,GAAG;AACzC,kBAAU;AACV;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,YAAY,MAAc;AACtB,WAAO,IAAI,YAAY,KAAK,IAAI,MAAM,KAAK,YAAY;AAAA,EAC3D;AAAA;AAAA,EAGA,iBAAiB,aAA0B,QAA4B;AACnE,UAAM,EAAE,IAAI,YAAY,IAAI;AAC5B,UAAM,EAAE,cAAc,eAAe,IAAI;AACzC,UAAM,SAAS,EAAE,aAAa,GAAG,OAAO,OAAO;AAC/C,UAAM,eAAe,YAAY,mBAAmB,EAAE,QAAQ,cAAc,eAAe,CAAC;AAC5F,UAAM,EAAE,QAAQ,IAAI;AAGpB,UAAM,EAAE,YAAY,mBAAmB,qBAAqB,gBAAgB,IAAI;AAChF,QAAI,YAAY;AACZ,UAAI,IAAI;AACR,iBAAW,QAAQ,YAAY;AAC3B,WAAG,mBAAmB,SAAS,KAAK,IAAI;AAAA,MAC5C;AAAA,IACJ;AACA,QAAI,mBAAmB;AACnB,YAAM,EAAE,UAAU,WAAW,IAAI;AACjC,SAAG,0BAA0B,SAAS,UAAU,GAAG,UAAU,CAAC;AAAA,IAClE;AAEA,WAAO,IAAI,QAAsB,CAAC,SAAS,WAAW;AAElD,eAAS,WAAW;AAChB,WAAG,WAAW,OAAO;AAErB,YAAI,qBAAqB;AACrB,cAAI,MAAM;AACV,qBAAW,QAAQ,qBAAqB;AACpC,gBAAI,MAAM;AACN,oBAAM,aAAa,GAAG,qBAAqB,SAAS,IAAI;AACxD,kBAAI,cAAc,GAAG,eAAe;AAChC,mBAAG,oBAAoB,SAAS,YAAY,GAAG;AAAA,cACnD,OAAO;AACH,wBAAQ,KAAK,sCAAsC,IAAI,GAAG;AAAA,cAC9D;AAAA,YACJ;AACA;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,iBAAiB;AACjB,cAAI,IAAI;AACR,qBAAW,QAAQ,iBAAiB;AAChC,kBAAM,WAAW,GAAG,mBAAmB,SAAS,IAAI;AACpD,eAAG,UAAU,UAAU,GAAG;AAAA,UAC9B;AAAA,QACJ;AAEA,WAAG,WAAW,IAAI;AAClB,gBAAQ,OAAO;AAAA,MACnB;AACA,WAAK,cAAc,KAAK,EAAE,GAAG,cAAc,SAAS,UAAU,OAAO,CAAC;AAAA,IAC1E,CAAC;AAAA,EACL;AAAA,EAEQ,kBAAkB;AACtB,UAAM,EAAE,WAAW,IAAI;AACvB,eAAW,SAAS;AACpB,eAAW,QAAQ;AACnB,eAAW,YAAY;AACvB,eAAW,YAAY;AACvB,eAAW,aAAa;AAAA,EAC5B;AAAA;AAAA,EAGA,oBAAoB,OAAuB,YAAY,GAAG;AACtD,UAAM,EAAE,WAAW,IAAI;AACvB,eAAW,UAAU,MAAM;AAC3B,eAAW,SAAS,MAAM;AAC1B,eAAW,aAAa,MAAM;AAC9B,eAAW,aAAa;AAAA,EAC5B;AAAA;AAAA,EAGA,kBAAkB,eAAuB;AACrC,SAAK,WAAW,cAAc;AAAA,EAClC;AAAA;AAAA,EAGA,cAAc;AACV,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,SAAS;AACT,iBAAW,UAAU,SAAS;AAC1B,gBAAQ,YAAY;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,mBAAmB,OAA2B;AAC1C,UAAM,MAAM,aAAa,KAAK,EAAE,EAAE;AAClC,QAAI,KAAK;AACL,UAAI,SAAS,QAAQ;AACjB,YAAI,YAAY;AAAA,MACpB,OAAO;AACH,YAAI,eAAe;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGO,OAAO;AACV,SAAK,SAAS,cAAc;AAC5B,SAAK,yBAAyB,aAAK,MAAM,KAAK,cAAc;AAC5D,SAAK,0BAA0B,aAAK,MAAM,KAAK,eAAe;AAC9D,SAAK,WAAW;AAAA,EACpB;AAAA,EAEQ,aAAoB;AACxB,UAAM,QAAQ,cAAc,KAAK,IAAI,KAAK;AAC1C,SAAK,aAAa,IAAI,KAAK;AAC3B,UAAM,MAAM;AACZ,WAAO;AAAA,EACX;AAAA,EAEQ,aAAa;AACjB,UAAM,EAAE,aAAa,IAAI;AACzB,eAAW,SAAS,CAAC,GAAG,YAAY,GAAG;AACnC,UAAI,MAAM,KAAK,GAAG;AACd,qBAAa,OAAO,KAAK;AACzB,cAAM,QAAQ;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAc,UAAU,SAAqD;AACzE,WAAO,IAAI,QAAgB,CAAC,YAAY;AACpC,4BAAsB,CAAC,SAAS;AAC5B,YAAI,SAAS;AACT,gBAAM,EAAE,UAAU,IAAI;AACtB,cAAI,WAAW;AACX,sBAAU,QAAQ,OAAO,UAAU,IAAI;AACvC,oBAAQ,YAAY;AAAA,UACxB;AACA,kBAAQ,mBAAmB;AAAA,QAC/B;AACA,gBAAQ,IAAI;AAAA,MAChB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAa,OAAO,OAA+C;AAC/D,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACvD;AACA,UAAM,YAAY,YAAY,IAAI;AAClC,UAAM,EAAE,IAAI,QAAQ,UAAU,IAAI;AAClC,SAAK,UAAU;AAEf,SAAK,gBAAgB;AAErB,UAAM,YAAY,KAAK,WAAW;AAElC,UAAM,EAAE,YAAY,IAAI,SAAS,EAAE;AACnC,UAAM,uBAAuB,KAAK,IAAI,GAAG,KAAK,IAAI,aAAa,KAAK,IAAI,KAAK,cAAc,OAAO,YAAY,MAAM,OAAO,WAAW,CAAC,CAAC;AAGxI,QAAI,UAAU;AACd,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,KAAK,gBAAgB,EAAE,OAAO,CAAC,GAAG;AAClC,YAAM,EAAE,OAAAC,QAAO,QAAAC,QAAO,IAAI;AAC1B,cAAQ,OAAO,OAAO,UAAUD,MAAK,KAAK,OAAO,UAAUC,OAAM,CAAC;AAClE,aAAO,QAAQD;AACf,aAAO,SAASC;AAChB,gBAAU;AACV,WAAK,UAAU;AACf,WAAK,SAAS,QAAQ;AACtB,WAAK,UAAU,IAAI,cAAc,IAAID,QAAOC,SAAQ,sBAAsB,KAAK,YAAY,cAAc,CAAC;AAAA,IAC9G;AAGA,UAAM,eAAe;AACrB,iBAAa,uBAAuB;AACpC,QAAI,WAAW,MAAM,WAAW,WAAW,QAAQ;AAC/C,YAAM,WAAW;AACjB,YAAM,MAAM,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,OAAO,UAAU,KAAK,qBAAqB,EAAE,IAAI,OAAK,KAAK,IAAI,CAAC,CAAC;AAC3G,YAAMC,QAAO,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAEpC,UAAIA,SAAQ,UAAU;AAClB,YAASC,QAAT,SAAc,GAAW;AACrB,iBAAO,KAAK,MAAM,IAAI,QAAQ,IAAI;AAAA,QACtC;AAFS,mBAAAA;AAGT,aAAK,wBAAwB,aAAK,WAAWA,MAAK,MAAM,OAAO,SAAS,CAAC,CAAC,GAAG,GAAGA,MAAK,MAAM,OAAO,SAAS,CAAC,CAAC,CAAC;AAAA,MAClH;AAEA,mBAAa,wBAAwB,KAAK;AAC1C,mBAAa,WAAW,wBAAwB,KAAK;AACrD,mBAAa,cAAc,kBAAkB,OAAO,aAAa,QAAQ;AAAA,IAC7E;AACA,SAAK,eAAe;AACpB,SAAK,mBAAmB;AAExB,SAAK,qBAAqB,YAAY;AACtC,SAAK,uBAAuB,YAAY;AAGxC,SAAK,UAAU,aAAa,OAAO,QAAQ;AAC3C,iBAAK,KAAK,KAAK,gBAAgB,aAAa,SAAS,oCAA0C,CAAC;AAChG,iBAAK,KAAK,KAAK,iBAAiB,aAAa,SAAS,qCAA2C,CAAC;AAClG,iBAAK,KAAK,KAAK,uBAAuB,aAAa,SAAS,2CAAiD,CAAC;AAG9G,QAAI,CAAC,KAAK,OAAO;AACb,iBAAW,UAAU,KAAK,SAAS;AAC/B,gBAAQ,OAAO,YAAY;AAAA,MAC/B;AAAA,IACJ;AAGA,SAAK,kBAAkB;AAGvB,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,EAAE,QAAQ,IAAI;AACpB,YAAQ,wBAAwB;AAChC,UAAM,kBAAkB,uBAAuB,IAAI,cAAc;AACjE,UAAM,cAAc,QAAQ,aAAa,eAAe;AACxD,YAAQ,WAAW,4BAAgC;AACnD,YAAQ,IAAI,EAAE,UAAU,EAAE,OAAO,OAAO,GAAG,YAAY,CAAC;AACxD,YAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAG7D,QAAI,KAAK,YAAY;AACjB,iBAAW,UAAU,KAAK,SAAS;AAC/B,YAAI,UAAU,OAAO,SAAS;AAC1B,kBAAQ,IAAI;AAAA,YACR,UAAU,EAAE,OAAO,OAAO;AAAA,YAC1B;AAAA,YACA,aAAa,CAAC;AAAA;AAAA,UAElB,CAAC;AACD,iBAAO,QAAQ,YAAY;AAE3B,kBAAQ,IAAI,IAAI;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ;AAGA,eAAW,UAAU,KAAK,SAAS;AAC/B,UAAI,QAAQ;AACR,gBAAQ,IAAI;AAAA,UACR,UAAU,EAAE,OAAO,OAAO;AAAA,UAC1B;AAAA,UACA,aAAa,KAAK,yBAA6B;AAAA,UAC/C,QAAQ,EAAE,iBAAiB,uBAAuB,EAAE;AAAA,QACxD,CAAC;AACD,eAAO,OAAO,YAAY;AAE1B,gBAAQ,IAAI,IAAI;AAAA,MACpB;AAAA,IACJ;AAEA,cAAU,IAAI;AAGd,SAAK,QAAQ,WAAW,0CAAkD;AAC1E,SAAK,QAAQ,WAAW,sCAA8C;AACtE,SAAK,YAAY;AACjB,UAAM,UAAU,YAAY,IAAI;AAEhC,UAAM,kBAAkB,IAAI,QAAgB,CAAC,YAAY;AACrD,WAAK,YAAY,EAAE,MAAM,KAAK,kBAAkB,QAAQ;AAAA,IAC5D,CAAC;AAED,UAAM,QAAQ,EAAE,GAAG,KAAK,YAAY,aAAa,GAAG,cAAc,EAAE;AACpE,eAAW,OAAO,KAAK,cAAc;AACjC,iBAAW,EAAE,MAAM,SAAS,KAAK,IAAI,cAAc;AAC/C,YAAI,QAAQ,YAAY,QAAQ,gBAAgB;AAC5C,gBAAM,eAAe;AAAA,QACzB;AACA,YAAI,QAAQ,WAAW;AACnB,gBAAM,gBAAgB;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,CAAC,aAAa,aAAa,IAAI,MAAM,QAAQ,IAAI,CAAC,UAAU,SAAS,eAAe,CAAC;AAE3F,WAAO;AAAA,MACH,SAAS;AAAA,QACL,MAAM,UAAU;AAAA,MACpB;AAAA,MACA,SAAS;AAAA,QACL,MAAM;AAAA,MACV;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACP;AAAA,EACJ;AAAA;AAAA,EAGA,mBAAmB;AACf,YAAQ,KAAK,IAAI,EAAE,MAAM,SAAS,YAAY,GAAG,MAAM,QAAQ,OAAO,CAAC,YAAY,GAAa,GAAa,CAAW,EAAE,CAAC;AAAA,EAC/H;AAAA;AAAA,EAGA,oBAAoB;AAChB,QAAI,CAAC,KAAK,kBAAkB;AACxB,UAAI,CAAC,KAAK,SAAS;AACf,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACvD;AACA,YAAM,EAAE,IAAI,OAAO,QAAQ,SAAS,aAAa,IAAI;AACrD,UAAI,CAAC,cAAc;AACf,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC9C;AAEA,YAAM,cAA2B;AAAA,QAC7B,UAAU,EAAE,OAAO,OAAO;AAAA,QAC1B,aAAa,QAAQ,aAAa;AAAA,QAClC,aAAa,KAAK,wBAA4B;AAAA,QAC9C,OAAO,EAAE,MAAM,MAAM,WAAW,KAAK;AAAA,MACzC;AACA,cAAQ,IAAI,WAAW;AACvB,cAAQ,IAAI,EAAE,MAAM,iBAAiB,OAAO,GAAK,SAAS,EAAE,CAAC;AAE7D,WAAK,iBAAiB;AAEtB,iBAAW,UAAU,KAAK,SAAS;AAC/B,YAAI,QAAQ;AACR,kBAAQ,IAAI,WAAW;AACvB,iBAAO,OAAO,YAAY;AAE1B,kBAAQ,IAAI,IAAI;AAAA,QACpB;AAAA,MACJ;AAEA,UAAI,aAAa,YAAY,uBAA+B;AACxD,gBAAQ,IAAI,OAAO;AAEnB,cAAM,gBAAgB,KAAK,SAAS,KAAK,OAAK,EAAE,OAAO,QAAQ,SAAS;AACxE,gBAAQ,IAAI,EAAE,UAAU,EAAE,OAAO,OAAO,EAAE,CAAC;AAQ3C,uBAAe,OAAO,YAAY;AAElC,gBAAQ,IAAI,IAAI;AAAA,MACpB;AACA,WAAK,mBAAmB;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA,EAGA,CAAC,gBAAgB,MAA6C;AAC1D,UAAM,SAAS,IAAI,aAAa,KAAK,MAAM;AAC3C,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACrC,YAAM,OAAO,CAAC;AAAA,IAClB;AAAA,EACJ;AAAA;AAAA,EAGA,kBAAkB,MAAmB;AACjC,UAAM,OAAO,oBAAI,IAAY;AAC7B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACrC,YAAM,WAAW,KAAK,CAAC;AACvB,UAAI,WAAW,eAAgB,WAAY,KAAK,OAAQ,GAAG;AACvD,aAAK,IAAI,WAAW,EAAE,KAAK,GAAG;AAAA,MAClC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,gBAA4C;AAC9C,SAAK,kBAAkB;AACvB,UAAM,oBAAoB,KAAK,QAAQ,YAAY;AACnD,SAAK,eAAe,MAAM,mBAAmB;AAC7C,UAAM,EAAE,aAAa,OAAO,QAAQ,QAAQ,MAAAC,MAAK,IAAI;AACrD,QAAI,gBAAgB,UAAa,QAAQ,SAAS,KAAK,YAAY,QAAQ;AACvE,aAAO,CAAC;AAAA,IACZ;AAEA,UAAM,MAAM,IAAI,YAAY,YAAY,MAAM;AAC9C,UAAM,SAAS,IAAI,aAAa,YAAY,MAAM;AAClD,UAAM,UAA6B,CAAC;AACpC,UAAM,EAAE,SAAS,wBAAwB,wBAAwB,IAAI;AACrE,aAAS,KAAK,GAAG,KAAK,QAAQ,MAAM;AAChC,eAAS,KAAK,GAAG,KAAK,OAAO,MAAM;AAC/B,cAAM,WAAW,KAAK,KAAK;AAC3B,cAAM,WAAW,YAAY,WAAW,CAAC;AACzC,YAAI,YAAY,YAAY;AACxB,gBAAM,cAAc,IAAI,WAAW,IAAI,CAAC;AACxC,gBAAM,QAAQA,MAAK,QAAQ,WAAW;AACtC,gBAAM,YAAY,gBAAgB,IAAI,QAAQ;AAE9C,cAAI,WAAW;AACX,kBAAM,QAAQ,OAAO,WAAW,IAAI,CAAC;AAErC,kBAAM,OAAQ,KAAK,OAAO,QAAS,IAAI;AACvC,kBAAM,OAAQ,KAAK,OAAO,SAAU,IAAI;AAGxC,kBAAMC,SAAQ,UAAU,IAAI;AAC5B,kBAAM,QAAQ,aAAK,WAAY,MAAM,uBAAuB,CAAC,IAAKA,QAAQ,MAAM,uBAAuB,CAAC,IAAKA,QAAO,CAAC,KAAK;AAE1H,kBAAM,WAAW,aAAK,cAAc,aAAK,OAAO,GAAG,OAAO,uBAAuB;AAEjF,oBAAQ,KAAK,EAAE,GAAG,IAAI,GAAG,SAAS,IAAI,WAAW,SAAS,CAAC;AAAA,UAC/D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,qBAAqB,OAA2B;AACpD,UAAM,EAAE,oBAAoB,sBAAsB,IAAI;AACtD,UAAM,EAAE,QAAQ,QAAQ,SAAS,IAAI;AACrC,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,kBAAkB,SAAS,qCAA2C;AAC5E,UAAM,kBAAkB,SAAS,qCAA2C;AAC5E,UAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,aAAK,OAAO,aAAK,OAAO,GAAG,qBAAqB,CAAC;AAC9G,UAAM,mBAAmB,aAAK,gBAAgB,aAAK,OAAO,GAAG,qBAAqB;AAClF,WAAO,iBAAiB,SAAS,oCAA0C;AAC3E,WAAO,iBAAiB,SAAS,oCAA0C;AAC3E,WAAO,iBAAiB,SAAS,oCAA0C;AAC3E,WAAO,kBAAkB,aAAK,SAAS,aAAK,OAAO,GAAG,iBAAiB,gBAAgB;AACvF,WAAO,kBAAkB,aAAK,SAAS,aAAK,OAAO,GAAG,kBAAkB,eAAgB;AACxF,WAAO,wBAAwB,SAAS,2CAAiD;AACzF,WAAO,wBAAwB,SAAS,2CAAiD;AACzF,WAAO,aAAa,CAAC,OAAO,OAAO,OAAO,MAAM;AAChD,WAAO,OAAO,OAAO;AACrB,SAAK,oBAAoB,KAAK,gBAAgB,KAAK,kBAAkB;AAAA,EACzE;AAAA,EAEQ,uBAAuB,OAA2B;AACtD,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,QAAI,KAAK,gBAAgB,EAAE,UAAU,SAAS,CAAC,GAAG;AAC9C,YAAM,EAAE,kBAAkB,qBAAqB,IAAI;AACnD,YAAM,EAAE,OAAO,IAAI;AACnB,YAAM,EAAE,SAAS,MAAM,OAAO,IAAI;AAElC,YAAM,SAAS,aAAK,OAAO;AAC3B,YAAM,WAAW,aAAK,OAAO;AAC7B,YAAM,SAAS,SAAS,qCAA2C;AACnE,YAAM,eAAe,SAAS,2CAAiD;AAC/E,mBAAK,eAAe,UAAU,MAAM;AACpC,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,cAAM,EAAE,aAAa,IAAI,OAAO,CAAC;AACjC,cAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,qBAAK,IAAI,QAAQ,GAAG,GAAG,CAAC;AACxB,qBAAK,cAAc,QAAQ,QAAQ,YAAY;AAC/C,cAAMC,YAAW,SAAS,aAAK,IAAI,UAAU,MAAM;AACnD,cAAM,QAAQ,aAAK,WAAW,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAACA,SAAQ;AACxE,cAAM,MAAM;AACZ,eAAO,UAAU,GAAG,EAAW,IAAI;AAAA,MACvC;AACA,aAAO,WAAW,IAAI,UAAU,OAAO,SAAS;AAChD,aAAO,MAAM,IAAI;AACjB,WAAK,oBAAoB,kBAAkB,oBAAoB;AAAA,IACnE;AAAA,EACJ;AAAA;AAAA,EAGA,uBAAuB,OAAqB,OAAY,YAAoB;AACxE,UAAM,EAAE,iBAAiB,qBAAqB,IAAI;AAElD,UAAM,CAAC,GAAG,GAAG,GAAG,MAAM,IAAI;AAC1B,UAAM,SAAS,aAAK,WAAW,GAAG,GAAG,CAAC;AACtC,UAAMA,YAAW,CAAC,SAAS,aAAK,IAAI,KAAK,uBAAuB,MAAM;AAEtE,UAAM,UAAU,aAAK,WAAW,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,CAACA,SAAQ;AAI1E,UAAM,mBAAmB,gCAAgC,OAAO;AAChE,UAAM,mBAAmB,aAAK,OAAO,aAAK,OAAO,GAAG,gBAAgB;AAEpE,UAAM,EAAE,OAAO,IAAI;AACnB,WAAO,mBAAmB;AAC1B,WAAO,mBAAmB;AAC1B,WAAO,QAAQ;AACf,WAAO,aAAa;AACpB,SAAK,oBAAoB,iBAAiB,oBAAoB;AAAA,EAClE;AAAA,EAEQ,YAAY,YAAyB,GAAW,GAAW,kBAA0B,iBAA0B;AACnH,UAAM,EAAE,QAAQ,MAAAF,OAAM,OAAO,OAAO,IAAI;AACxC,UAAM,OAAO,OAAO,sBAAsB;AAC1C,UAAM,WAAW,KAAK;AACtB,UAAM,YAAY,KAAK;AAEvB,UAAM,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,WAAW,KAAK,CAAC,GAAG,KAAK;AACxE,UAAM,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,OAAO,KAAK,IAAI,OAAO,aAAa,MAAM,CAAC,GAAG,MAAM;AAEzF,UAAM,SAAS,IAAI,aAAa,WAAW,MAAM;AAGjD,UAAM,IAAI,KAAK,KAAK,gBAAgB;AACpC,UAAM,KAAK,mBAAmB;AAC9B,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,KAAK,IAAI;AAClB,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,KAAK,IAAI;AAClB,QAAI,KAAK;AAAG,WAAK;AACjB,QAAI,KAAK;AAAO,WAAK;AACrB,QAAI,KAAK;AAAG,WAAK;AACjB,QAAI,KAAK;AAAQ,WAAK;AACtB,UAAM,UAAwB,CAAC;AAC/B,UAAM,EAAE,SAAS,wBAAwB,wBAAwB,IAAI;AACrE,UAAM,SAAS;AAEf,aAAS,KAAK,IAAI,KAAK,IAAI,MAAM;AAC7B,YAAM,KAAK,KAAK;AAChB,eAAS,KAAK,IAAI,KAAK,IAAI,MAAM;AAC7B,cAAM,KAAK,KAAK;AAChB,YAAI,KAAK,KAAK,KAAK,KAAK;AACpB;AACJ,cAAM,WAAW,KAAK,KAAK;AAC3B,YAAI,WAAW,WAAW,WAAW,CAAC;AACtC,YAAI,YAAY,YAAY;AACxB,gBAAM,eAAe,YAAY;AACjC,gBAAM,QAAQ,kBAAkB,IAAI,OAAO,WAAW,IAAI,CAAC;AAC3D,gBAAM,CAAC,MAAM,MAAM,MAAM,WAAW,IAAI,IAAI,YAAY,WAAW,QAAQ,WAAW,KAAK,GAAG,CAAC;AAC/F,gBAAM,KAAKA,MAAK,QAAQ,IAAI;AAC5B,gBAAM,KAAKA,MAAK,QAAQ,IAAI;AAC5B,gBAAM,KAAKA,MAAK,QAAQ,IAAI;AAC5B,gBAAM,QAAQA,MAAK,QAAQ,WAAW;AACtC,gBAAM,YAAY,gBAAgB,IAAI,QAAQ;AAI9C,gBAAM,OAAQ,KAAK,OAAO,QAAS,IAAI;AACvC,gBAAM,OAAQ,KAAK,OAAO,SAAU,IAAI;AAGxC,gBAAMC,SAAQ,UAAU,IAAI;AAE5B,gBAAM,QAAQ,aAAK,WAAY,MAAM,uBAAuB,CAAC,IAAKA,QAAQ,MAAM,uBAAuB,CAAC,IAAKA,QAAO,CAAC,KAAK;AAG1H,gBAAM,WAAW,aAAK,cAAc,aAAK,OAAO,GAAG,OAAO,uBAAuB;AACjF,gBAAM,SAAS,aAAK,WAAW,IAAI,IAAI,EAAE;AACzC,uBAAK,UAAU,QAAQ,MAAM;AAC7B,gBAAM,kBAAkB,eAAe,SAAS,WAAY,KAAK,OAAQ;AACzE,qBAAW,eAAe,WAAW,WAAW,EAAE,KAAK;AAEvD,gBAAM,SAAS,EAAE,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,UAAU,QAAQ,UAAU,WAAW,OAAO,gBAAgB;AACvG,kBAAQ,KAAK,MAAM;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,KAAK,GAAW,GAAW,SAA8C;AAC3E,UAAM,mBAAmB,SAAS,oBAAoB;AACtD,UAAM,YAAY,SAAS,SAAS;AACpC,UAAM,kBAAkB,SAAS,mBAAmB;AACpD,QAAI,mBAAmB;AACnB,aAAO,CAAC;AACZ,SAAK,kBAAkB;AACvB,UAAM,oBAAoB,KAAK,QAAQ,YAAY;AACnD,QAAI,WAAW;AACX,WAAK,eAAe,MAAM,mBAAmB;AAAA,IACjD,OAAO;AACH,wBAAkB,KAAK,CAAC,EAAE,KAAK,MAAM;AAAE,aAAK,cAAc;AAAA,MAAK,CAAC;AAAA,IACpE;AACA,UAAM,EAAE,aAAa,OAAO,OAAO,IAAI;AACvC,QAAI,gBAAgB,UAAa,QAAQ,SAAS,KAAK,YAAY,QAAQ;AACvE,aAAO,CAAC;AAAA,IACZ;AACA,WAAO,KAAK,YAAY,aAAa,GAAG,GAAG,kBAAkB,eAAe;AAAA,EAChF;AAGJ;AAEA,SAAS,UAAa,SAAgD;AAClE,SAAO,CAAC,CAAC,WAAW,OAAO,QAAQ,IAAI,SAAS,MAAM,MAAM;AAChE;;;ACz8BO,SAAS,WAAW,eAA8B,QAA2B,SAAwB,kBAAoD;AAC5J,QAAM,UAAkC;AAAA,IACpC,OAAO;AAAA,IACP,WAAW;AAAA,IACX,OAAO;AAAA,IACP,gBAAgB;AAAA,IAChB,8BAA8B;AAAA,IAC9B,iBAAiB;AAAA,IACjB,oBAAoB;AAAA,IACpB,uBAAuB;AAAA,IACvB,SAAS;AAAA,EACb;AAEA,MAAI;AACJ,MAAI,UAAU,EAAE,eAAe,OAAuC;AAEtE,MAAI;AACJ,SAAO,iBAAiB,oBAAoB,SAAU,OAA0B;AAC5E,UAAM,eAAe;AACrB,YAAQ,KAAK,qBAAqB;AAClC,QAAI,eAAe;AACf,oBAAc,YAAY;AAC1B,cAAQ,gBAAgB;AAAA,IAC5B;AAEA,WAAO,QAAQ;AACf,WAAO,SAAS;AAChB,QAAI,WAAW;AACX,2BAAqB,MAAM;AAC/B,aAAS;AAAA,EACb,GAA6B,KAAK;AAElC,SAAO,iBAAiB,wBAAwB,SAAU,OAA0B;AAChF,YAAQ,KAAK,yBAAyB;AACtC,kBAAc;AAAA,EAClB,GAA6B,KAAK;AAElC,iBAAe,gBAAgB;AAC3B,oBAAgB,IAAIE,eAAc,eAAe,QAAQ,SAAS,OAAO;AACzE,UAAM,cAAc,KAAK;AACzB,qBAAiB,aAAa;AAAA,EAClC;AACA,gBAAc;AAGd,SAAO,OAAO,UAAyB;AACnC,oBAAgB;AAChB,UAAM,cAAc;AAAA,EACxB;AACJ;;;AC8BA,eAAsB,sBAAsB,KAA8C;AACtF,QAAM,EAAE,QAAQ,IAAI;AACpB,QAAM,eAAe,UAAU,IAAI,gBAAgB,qBAAqB,OAAO;AAC/E,QAAM,gBAAgB,UAAU,IAAI,UAAU,iBAAiB,OAAO;AACtE,QAAM,sBAAsB,YAAY,IAAI,gBAAgB,eAAe,OAAO;AAClF,QAAM,oBAAoB,eAAe,IAAI,cAAc,iBAAiB,OAAO;AACnF,QAAM,iBAAiB,WAAW,IAAI,WAAW,gBAAgB,OAAO;AACxE,QAAM,cAAc,QAAQ,IAAI,QAAQ,cAAc,OAAO;AAC7D,QAAM,CAAC,QAAQ,cAAc,YAAY,SAAS,IAAI,IAClD,MAAM,QAAQ,IAAI,CAAC,eAAe,qBAAqB,mBAAmB,gBAAgB,WAAW,CAAC;AAC1G,SAAO,EAAE,QAAQ,cAAc,YAAY,cAAc,SAAS,KAAK;AAC3E;AAEA,eAAeC,UAA0E,KAAU,MAAS;AACxG,QAAM,WAAW,MAAM,MAAM,KAAK,EAAE,MAAM,OAAO,CAAC;AAClD,MAAI,CAAC,SAAS;AACV,UAAM,IAAI,MAAM,cAAc,SAAS,MAAM,KAAK,SAAS,UAAU,GAAG;AAC5E,SAAO,MAAO,SAAS,IAAI,EAAE;AACjC;AAEA,SAAS,MAAM,KAAmC;AAC9C,SAAO,OAAO,OAAO,YAAY,eAAe;AACpD;AAEA,eAAe,UAAU,KAAwC,SAAwB;AACrF,MAAI;AACJ,MAAI,MAAM,GAAG,GAAG;AACZ,UAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,WAAO,MAAMA,UAAS,KAAK,MAAM;AAAA,EACrC,WAAW,eAAe,MAAM;AAC5B,WAAO;AAAA,EACX,OAAO;AACH,WAAO;AAAA,EACX;AACA,SAAO,MAAM,kBAAkB,IAAI;AACvC;AAEA,eAAe,YAAY,KAAkC,SAAwB;AACjF,MAAI,CAAC,MAAM,GAAG,GAAG;AACb,WAAO;AAAA,EACX;AACA,QAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,QAAM,WAAW,MAAM,MAAM,KAAK,EAAE,MAAM,OAAO,CAAC;AAClD,QAAM,EAAE,SAAS,IAAI,MAAM,YAAY,qBAAqB,QAAQ;AACpE,SAAO,SAAS;AACpB;AAEA,eAAe,eAAe,KAAiC,SAAwB;AACnF,MAAI,CAAC,MAAM,GAAG,GAAG;AACb,WAAO;AAAA,EACX;AACA,QAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,QAAM,WAAW,MAAM,MAAM,KAAK,EAAE,MAAM,OAAO,CAAC;AAClD,MAAI,CAAC,SAAS,IAAI;AACd,UAAM,IAAI,MAAM,0CAA0C,GAAG,EAAE;AAAA,EACnE;AACA,SAAO,MAAM,SAAS,YAAY;AAGtC;AAEA,SAAS,UAAU,KAA4B,SAAwB;AACnE,MAAI,CAAC,MAAM,GAAG,GAAG;AACb,WAAO;AAAA,EACX;AACA,QAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,SAAO,IAAI,OAAO,KAAK,EAAE,MAAM,UAAU,MAAM,SAAS,CAAC;AAC7D;AAEA,eAAe,QAAQ,KAAiC,SAAwB;AAC5E,MAAI,CAAC,MAAM,GAAG,GAAG;AACb,WAAO;AAAA,EACX;AACA,QAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,SAAO,MAAMA,UAAS,KAAK,aAAa;AAC5C;AAEA,eAAe,WAAW,KAAmC,SAAwB;AACjF,MAAI,CAAC,MAAM,GAAG,GAAG;AACb,WAAO;AAAA,EACX;AACA,QAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,QAAM,EAAE,QAAQ,IAAI,MAAM;AAAA;AAAA,IAAkC,IAAI,SAAS;AAAA;AACzE,SAAO;AACX;;;ACnLO,IAAM,YAAN,MAAM,WAAU;AAAA,EACV;AAAA,EACA;AAAA,EACT,OAAgB,OAAO;AAAA,EACvB,OAAgB,YAAY,WAAU,OAAO,WAAU;AAAA,EAEvD,cAAc;AACV,UAAM,UAAkC;AAAA,MACpC,OAAO;AAAA,MACP,WAAW;AAAA,MACX,OAAO;AAAA,MACP,gBAAgB;AAAA,MAChB,8BAA8B;AAAA,MAC9B,iBAAiB;AAAA,MACjB,oBAAoB;AAAA,MACpB,uBAAuB;AAAA,MACvB,SAAS;AAAA,IACb;AAEA,UAAM,EAAE,KAAK,IAAI;AAEjB,UAAM,SAAS,KAAK,SAAS,SAAS,cAAc,QAAQ;AAC5D,WAAO,QAAQ;AACf,WAAO,SAAS;AAChB,WAAO,MAAM,kBAAkB;AAC/B,WAAO,MAAM,WAAW;AACxB,WAAO,MAAM,MAAM;AACnB,WAAO,MAAM,OAAO;AACpB,WAAO,MAAM,QAAQ;AACrB,WAAO,MAAM,SAAS;AACtB,WAAO,MAAM,SAAS;AACtB,aAAS,KAAK,YAAY,MAAM;AAChC,UAAM,KAAK,OAAO,WAAW,UAAU,OAAO;AAC9C,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,mCAAmC;AACvD,SAAK,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,UAAU;AACN,UAAM,EAAE,IAAI,OAAO,IAAI;AACvB,aAAS,KAAK,YAAY,MAAM;AAChC,UAAM,MAAM,GAAG,aAAa,oBAAoB;AAChD,SAAK,YAAY;AAAA,EACrB;AACJ;;;AC/CO,SAAS,YAAY;AACxB,SAAO,IAAI,QAAgB,CAAC,YAAY;AACpC,aAAS,QAAQ,MAAc;AAC3B,cAAQ,IAAI;AAAA,IAChB;AACA,0BAAsB,OAAO;AAAA,EACjC,CAAC;AACL;AAGA,eAAsB,QAAQ,QAAqC;AAC/D,QAAM,UAAoB,CAAC;AAC3B,MAAI;AAEJ,iBAAe,OAAO;AAClB,UAAM,OAAO,MAAM,UAAU;AAC7B,QAAI,YAAY,QAAW;AACvB,cAAQ,KAAK,OAAO,QAAQ;AAAA,IAChC;AACA,eAAW;AAAA,EACf;AAGA,QAAM,SAAS;AACf,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,UAAM,KAAK;AAAA,EACf;AACA,UAAQ,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC5B,QAAM,iBAAiB,QAAQ,KAAK,MAAM,QAAQ,SAAS,CAAC,CAAC;AAC7D,QAAM,MAAM,KAAK,MAAM,MAAO,cAAc;AAC5C,UAAQ,IAAI,EAAE,IAAI,CAAC;AAEnB,MAAI,aAAa;AACjB,aAAU;AACN,eAAW;AACX,YAAQ,SAAS;AACjB,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,YAAM,KAAK;AACX,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,eAAO,CAAC;AAAA,MACZ;AAAA,IACJ;AACA,YAAQ,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC5B,UAAM,uBAAuB,QAAQ,MAAM,GAAG,QAAQ,SAAS,CAAC,EAAE,OAAO,CAAC,GAAG,MAAO,IAAI,CAAE,KAAK,QAAQ,SAAS;AAChH,QAAI,uBAAuB,KAAK;AAC5B,aAAO,uBAAuB;AAAA,IAClC;AACA,iBAAa,KAAK,IAAI,aAAa,GAAG,KAAK,MAAM,aAAa,IAAI,CAAC;AACnE,YAAQ,IAAI,UAAU;AAAA,EAC1B;AACJ;;;AC3CO,IAAM,mBAAN,MAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ1B,YAEa,WACT,SACF;AAFW;AAGT,UAAM,EAAE,GAAG,IAAI,KAAK;AACpB,SAAK,UAAU,gBAAgB,IAAI,QAAQ,QAAQ;AACnD,SAAK,WAAW,mBAAmB,IAAI,KAAK,SAAS,CAAC,MAAM,CAAC;AAAA,EACjE;AAAA,EAfS;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBT,MAAM,UAAU;AACZ,UAAM,EAAE,WAAW,SAAS,SAAS,IAAI;AACzC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,OAAG,SAAS;AACZ,UAAM,WAAW;AAEjB,YAAQ,IAAI;AAAA,MACR,UAAU,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,MACtC;AAAA,MACA,OAAO;AAAA,QACH,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,MACd;AAAA,MACA,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,aAAS,OAAO,WAAmB;AAC/B,SAAG,UAAU,SAAS,MAAM,KAAK,OAAO,CAAC;AAEzC,aAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,kBAAkB,OAAO,GAAG,eAAe,SAAS,CAAC;AAClG,SAAG,MAAM;AAAA,IACb;AAEA,YAAQ,IAAI,EAAE,MAAM,eAAe,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;AACxD,UAAM,OAAO,MAAM,QAAQ,MAAM;AACjC,UAAM,OAAO,YAAY,WAAW,MAAO;AAC3C,WAAO;AAAA,EACX;AACJ;;;AC5DO,IAAM,oBAAN,MAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ3B,YAEa,WACT,SACF;AAFW;AAGT,UAAM,EAAE,GAAG,IAAI,KAAK;AACpB,SAAK,UAAU,gBAAgB,IAAI,QAAQ,SAAS;AACpD,SAAK,WAAW,mBAAmB,IAAI,KAAK,SAAS,CAAC,OAAO,CAAC;AAAA,EAClE;AAAA,EAfS;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBT,MAAM,UAAU;AACZ,UAAM,EAAE,WAAW,SAAS,SAAS,IAAI;AACzC,UAAM,EAAE,GAAG,IAAI;AACf,UAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,OAAG,SAAS;AACZ,UAAM,eAAe;AACrB,YAAQ,IAAI;AAAA,MACR,UAAU,EAAE,OAAO,MAAM,QAAQ,KAAK;AAAA,MACtC;AAAA,MACA,OAAO;AAAA,QACH,QAAQ;AAAA,MACZ;AAAA,MACA,OAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW;AAAA,MACf;AAAA,IACJ,CAAC;AAED,aAAS,OAAO,WAAmB;AAC/B,SAAG,UAAU,SAAS,OAAO,KAAK,OAAO,GAAG,KAAK,OAAO,GAAG,KAAK,OAAO,GAAG,CAAC;AAC3E,aAAO,IAAI,EAAE,MAAM,oBAAoB,MAAM,UAAU,OAAO,WAAW,eAAe,aAAa,CAAC;AAAA,IAC1G;AAEA,YAAQ,IAAI,EAAE,MAAM,eAAe,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;AACxD,UAAM,OAAO,MAAM,QAAQ,MAAM;AACjC,UAAM,OAAO,YAAY,eAAe,MAAO;AAC/C,WAAO;AAAA,EACX;AACJ;;;AC5DA,eAAe,QAAQ,KAAU,iBAAmC;AAChE,QAAM,SAAS,iBAAiB;AAChC,QAAM,WAAW,MAAM,MAAM,IAAI,SAAS,GAAG,EAAE,MAAM,QAAQ,OAAO,CAAC;AACrE,MAAI,CAAC,SAAS,IAAI;AACd,UAAM,IAAI,MAAM,eAAe,SAAS,MAAM,KAAK,SAAS,UAAU,KAAK,GAAG,GAAG;AAAA,EACrF;AACA,SAAO;AACX;AAEA,eAAe,aAAa,KAAU,iBAAmC;AACrE,QAAM,WAAW,MAAM,QAAQ,KAAK,eAAe;AACnD,SAAO,MAAM,SAAS,KAAK;AAC/B;AAEA,eAAe,oBAAoB,KAAU,iBAAmC;AAC5E,QAAM,WAAW,MAAM,QAAQ,KAAK,eAAe;AACnD,SAAO,MAAM,SAAS,YAAY;AACtC;AAEA,eAAe,aAAa,KAAU,iBAAmC;AACrE,QAAM,WAAW,MAAM,QAAQ,KAAK,eAAe;AACnD,SAAO,MAAM,SAAS,KAAK;AAC/B;AAEA,IAAM,sBAAsB;AAC5B,IAAM,uBAAuB;AAC7B,IAAM,qBAAqB,EAAE,MAAM,YAAY,KAAK,QAAW;AAGxD,SAAS,SAAS,MAAmB;AACxC,QAAM,aAAa,IAAI,SAAS,MAAM,GAAG,oBAAoB;AAC7D,QAAM,UAAU,IAAI,YAAY;AAEhC,QAAM,SAAS;AAAA,IACX,OAAO,QAAQ,OAAO,IAAI,WAAW,MAAM,GAAG,CAAC,CAAC;AAAA,IAChD,SAAS,WAAW,UAAU,GAAG,IAAI;AAAA,IACrC,QAAQ,WAAW,UAAU,GAAG,IAAI;AAAA,EACxC;AAEA,MAAI,OAAO,UAAU,qBAAqB;AACtC,UAAM,IAAI,MAAM,iCAAiC;AAAA,EACrD,WAAW,OAAO,UAAU,GAAK;AAC7B,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC5D;AAEA,MAAI;AACJ,MAAI;AACJ,QAAM,YAAY,IAAI,SAAS,MAAM,oBAAoB;AACzD,MAAI,aAAa;AACjB,SAAO,aAAa,UAAU,YAAY;AACtC,UAAM,cAAc,UAAU,UAAU,YAAY,IAAI;AAAG,kBAAc;AACzE,UAAM,YAAY,UAAU,UAAU,YAAY,IAAI;AAAG,kBAAc;AACvE,QAAI,cAAc,mBAAmB,MAAM;AACvC,YAAM,eAAe,IAAI,WAAW,MAAM,uBAAuB,YAAY,WAAW;AACxF,aAAO,QAAQ,OAAO,YAAY;AAClC,aAAO,KAAK,UAAU,GAAG,KAAK,YAAY,GAAG,IAAI,CAAC;AAAA,IACtD,WAAW,cAAc,mBAAmB,KAAK;AAC7C,YAAM,eAAe,IAAI,WAAW,MAAM,uBAAuB,YAAY,WAAW;AACxF,YAAM,cAAc,IAAI,WAAW,WAAW;AAC9C,kBAAY,IAAI,YAAY;AAC5B,eAAS,YAAY;AAAA,IACzB;AACA,kBAAc;AAAA,EAClB;AAEA,MAAI,CAAC,MAAM;AACP,UAAM,IAAI,MAAM,sCAAsC;AAAA,EAC1D;AACA,MAAI,CAAC,QAAQ;AACT,UAAM,IAAI,MAAM,sCAAsC;AAAA,EAC1D;AACA,SAAO,EAAE,MAAM,OAAO;AAC1B;AAGA,eAAsB,SAAS,KAAU,iBAAmC;AACxE,QAAM,OAAO,IAAI,SAAS,YAAY;AACtC,MAAI;AACJ,MAAI;AACJ,MAAI,KAAK,SAAS,OAAO,GAAG;AACxB,WAAO,MAAM,aAAa,GAAG;AAE7B,UAAM,kBAAkB,KAAK,WAAW,CAAC,GAAG,IAAI,OAAM,QAAO;AACzD,YAAM,YAAY,IAAI,IAAI,IAAI,KAAM,GAAG;AACvC,UAAI,CAAC,UAAU;AACX,kBAAU,SAAS,IAAI,UAAU;AACrC,aAAO,oBAAoB,WAAW,eAAe;AAAA,IACzD,CAAC;AACD,cAAU,MAAM,QAAQ,IAAI,cAAc;AAAA,EAC9C,WAAW,KAAK,SAAS,MAAM,GAAG;AAC9B,UAAM,MAAM,MAAM,oBAAoB,KAAK,eAAe;AAC1D,UAAM,EAAE,MAAM,OAAO,IAAI,SAAS,GAAG;AACrC,WAAO,KAAK,MAAM,IAAI;AACtB,cAAU,CAAC,MAAM;AAAA,EACrB,OAAO;AACH,UAAM,IAAI,MAAM,iCAAiC,GAAG,IAAI;AAAA,EAC5D;AACA,QAAM,oBAAoB,KAAK,QAAQ,IAAI,SAAO;AAC9C,QAAI,IAAI,KAAK;AACT,YAAM,WAAW,IAAI,IAAI,IAAI,KAAK,GAAG;AACrC,aAAO,aAAa,UAAU,eAAe;AAAA,IACjD;AAAA,EACJ,CAAC,KAAK,CAAC;AACP,QAAM,qBAAqB,MAAM,QAAQ,IAAI,iBAAiB;AAC9D,SAAO,EAAE,MAAM,SAAS,mBAAmB;AAC/C;;;ACpGA,SAAS,gBAAgB,WAAiB;AACtC,QAAM,CAAC,IAAI,IAAI,EAAE,IAAI,aAAK,WAAW,aAAK,OAAO,GAAG,SAAS;AAC7D,MAAIC,UAA6B,KAAK,KAAK,MAAM;AACjD,QAAM,UAAU;AAChB,MAAIA,SAAQ,IAAI,WAAWA,SAAQ,IAAI,SAAS;AAC5C,IAAAA,SAAQ;AAAA,EACZ;AACA,QAAM,WAAW,aAAK,SAAS,aAAK,OAAO,GAAG,aAAK,SAAS,aAAK,OAAO,GAAG,SAAS,CAAC;AACrF,QAAM,WAAW,aAAK,WAAW,UAAU,EAAE,GAAG,UAAU,EAAE,GAAG,UAAU,EAAE,CAAC;AAC5E,SAAO,EAAE,UAAU,UAAU,OAAAA,OAAM;AACvC;AAGA,SAAS,aAAa,MAAiB;AACnC,QAAM,EAAE,QAAQ,aAAa,UAAU,OAAAA,OAAM,IAAI;AACjD,QAAM,YAAkB,aAAK,OAAO;AACpC,MAAI,QAAQ;AACR,iBAAK,IAAI,WAAW,GAAI,MAA6C;AAAA,EACzE,WAAW,eAAe,UAAU;AAChC,UAAM,IAAI,cAAc,aAAK,WAAW,GAAI,WAAkD,IAAI,aAAK,OAAO;AAC9G,UAAM,IAAI,WAAW,aAAK,WAAW,GAAI,QAA+C,IAAI,aAAK,OAAO;AACxG,UAAM,IAAIA,SAAQ,aAAK,WAAW,GAAI,QAA+C,IAAI,aAAK,WAAW,GAAG,GAAG,CAAC;AAChH,iBAAK,6BAA6B,WAAW,GAAG,GAAG,CAAC;AAAA,EACxD;AACA,SAAO;AACX;AAGA,eAAsB,UAAU,SAAwB,MAAiB,oBAA0C,cAAqE;AACpL,QAAM,EAAE,oBAAoB,eAAe,IAAI;AAC/C,MAAI,kBAAkB,eAAe,UAAU,KAAK,eAAe,CAAC,KAAK,uBAAuB;AAC5F,YAAQ,KAAK,mEAAmE,eAAe,KAAK,IAAI,CAAC,GAAG;AAAA,EAChH;AACA,MAAI,sBAAsB,mBAAmB,UAAU,KAAK,mBAAmB,CAAC,KAAK,uBAAuB;AACxG,UAAM,IAAI,MAAM,uEAAuE,mBAAmB,KAAK,IAAI,CAAC,GAAG;AAAA,EAC3H;AACA,QAAM,UAAU;AAAA,IACZ,mBAAW,GAAG;AAAA,IACd,kBAAU,GAAG;AAAA,IACb,kCAA0B,GAAG;AAAA,IAC7B,iCAAyB,GAAG;AAAA,IAC5B,iCAAyB,GAAG;AAAA,IAC5B,gCAAwB,GAAG;AAAA,EAC/B;AAEA,QAAM,YAAY;AAAA,IACd,0BAAiB,GAAG;AAAA,IACpB,4BAAmB,GAAG;AAAA,IACtB,mBAAU,GAAG;AAAA,EACjB;AAEA,QAAM,iBAAiB;AAAA,IACnB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,SAAS;AAAA,EACb;AAEA,QAAM,2BAA2B;AAAA,IAC7B,iBAAS,GAAG;AAAA,IACZ,gBAAQ,GAAG;AAAA,IACX,iBAAS,GAAG;AAAA,IACZ,eAAO,GAAG;AAAA,IACV,yBAAiB,GAAG;AAAA,IACpB,0BAAkB,GAAG;AAAA,IACrB,wBAAgB,GAAG;AAAA,EACvB;AAGA,QAAM,2BAA2B;AAAA,IAC7B,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACV;AAEA,QAAM,kCAAkC;AAAA,IACpC,iBAAS,GAAG;AAAA,IACZ,gBAAQ,GAAG;AAAA,IACX,iBAAS,GAAG;AAAA,IACZ,eAAO,GAAG;AAAA,IACV,yBAAiB,GAAG;AAAA,IACpB,0BAAkB,GAAG;AAAA,IACrB,wBAAgB,GAAG;AAAA,EACvB;AAEA,QAAM,aAAa;AAAA,IACf,eAAU,GAAG;AAAA,IACb,cAAS,GAAG;AAAA,IACZ,kBAAa,GAAG;AAAA,IAChB,mBAAc,GAAG;AAAA,IACjB,kBAAa,GAAG;AAAA,IAChB,uBAAkB,GAAG;AAAA,IACrB,qBAAgB,GAAG;AAAA,EACvB;AAGA,QAAM,cAAc;AAAA,IAChB,yBAAiB,GAAG;AAAA,IACpB,0BAAkB,GAAG;AAAA,IACrB,wBAAgB,GAAG;AAAA,IACnB,gBAAQ,GAAG;AAAA,IACX,iBAAS,GAAG;AAAA,IACZ,eAAO,GAAG;AAAA,IACV,iBAAS,GAAG;AAAA,EAChB;AAEA,QAAM,cAAc,KAAK,YAAa,IAAI,OAAK;AAC3C,WAAO,IAAI,WAAW,QAAQ,EAAE,MAAM,GAAG,EAAE,YAAY,EAAE,UAAU;AAAA,EACvE,CAAC;AAED,WAAS,aAAa,OAAmB;AACrC,UAAM,aAAa,KAAK,YAAa,MAAM,UAAW;AACtD,UAAM,QAAQ,WAAW,cAAc;AACvC,UAAM,MAAM,WAAW,aAAa,QAAQ,WAAW,aAAa;AACpE,UAAM,SAAS,QAAQ,WAAW,MAAM,EAAE,MAAM,OAAO,GAAG;AAC1D,WAAO,IAAI,KAAK,CAAC,MAAM,CAAC;AAAA,EAC5B;AAEA,QAAM,gBAAgB,KAAK,QAAQ,IAAI,OAAO,KAAK,QAAQ;AAEvD,QAAI,OAAO,mBAAmB,GAAG,KAAK,aAAa,GAAG;AACtD,QAAI,IAAI,UAAU;AACd,aAAO,IAAI,KAAK,CAAC,IAAI,GAAG,EAAE,MAAM,IAAI,SAAS,CAAC;AAAA,IAClD;AACA,UAAM,QAAQ,MAAM,kBAAkB,MAAM,EAAE,sBAAsB,OAAO,CAAC;AAC5E,UAAM,EAAE,OAAO,OAAO,IAAI;AAC1B,UAAM,SAAsC,EAAE,MAAM,cAAc,OAAO,QAAQ,iBAAiB,MAAM,gBAAgB,SAAS,MAAM,iBAAiB,MAAM;AAC9J,WAAO,EAAE,OAAO;AAAA,EACpB,CAAC,KAAK,CAAC;AACP,QAAM,SAAS,MAAM,QAAQ,IAAI,aAAa;AAE9C,QAAM,WAAW,KAAK,UAAU,IAAI,OAAK;AAErC,UAAM,EAAE,WAAW,WAAW,OAAO,MAAM,IAAI;AAC/C,UAAM,qBAAqB,QAAQ,4CAAoC;AACvE,UAAM,sBAAsB,QAAQ,8BAAsB;AAC1D,UAAMC,QAAO,SAAS,QAAQ,CAAC,UAAU,KAAK,GAAiB,UAAU,KAAK,CAAe,IAAa,CAAC,UAAU,QAAQ;AAC7H,WAAO,EAAE,oBAAoB,qBAAqB,MAAAA,MAAK;AAAA,EAC3D,CAAC,KAAK,CAAC;AAEP,QAAM,WAAW,KAAK,UAAU,IAAI,OAAK;AAErC,UAAM,QAAQ,OAAO,EAAE,MAAO;AAC9B,UAAM,UAAU,SAAS,EAAE,OAAQ;AACnC,WAAO,EAAE,OAAO,QAAQ;AAAA,EAC5B,CAAC,KAAK,CAAC;AAEP,QAAM,qBAAoD,EAAE,MAAM,MAAM;AACxE,QAAM,uBAAwD,EAAE,MAAM,QAAQ;AAC9E,QAAM,YAAY,KAAK,WAAW,IAAI,CAAC,GAAG,MAAM;AAC5C,UAAM,UAAU,EAAE,cAAc,yBAAyB,EAAE;AAC3D,UAAM,EAAE,sBAAsB,eAAe,kBAAkB,iBAAiB,gBAAgB,WAAW,aAAa,YAAY,IAAI;AACxI,aAAS,WAAW,SAAiG;AACjH,UAAI,SAAS;AACT,cAAM,YAAY;AAClB,YAAI,WAAW,SAAS;AACpB,iBAAO;AAAA,YACH,SAAS,SAAS,QAAQ,KAAK,KAAK;AAAA,YACpC,UAAU,QAAQ;AAAA,YAClB,OAAO,QAAQ;AAAA,YACf;AAAA,UACJ;AAAA,QACJ,WAAW,cAAc,SAAS;AAC9B,iBAAO;AAAA,YACH,SAAS,SAAS,QAAQ,KAAK,KAAK;AAAA,YACpC,UAAU,QAAQ;AAAA,YAClB,UAAU,QAAQ;AAAA,YAClB;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,UACH,SAAS,SAAS,QAAQ,KAAK,KAAK;AAAA,UACpC,UAAU,QAAQ;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,SAAS;AACT,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB,sBAAsB;AAAA,QACvC,kBAAkB,WAAW,sBAAsB,gBAAgB;AAAA,MACvE;AAAA,IACJ,OAAO;AACH,aAAO;AAAA,QACH,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA,iBAAiB,sBAAsB;AAAA,QACvC,gBAAgB,sBAAsB;AAAA,QACtC,iBAAiB,sBAAsB;AAAA,QACvC;AAAA,QACA,kBAAkB,WAAW,sBAAsB,gBAAgB;AAAA,QACnE,0BAA0B,WAAW,sBAAsB,wBAAwB;AAAA,QACnF,eAAe,WAAW,aAAa;AAAA,QACvC,kBAAkB,WAAW,gBAAgB;AAAA,QAC7C,iBAAiB,WAAW,eAAe;AAAA,MAC/C;AAAA,IACJ;AAAA,EACJ,CAAC,KAAK,CAAC;AAEP,QAAM,SAAS,KAAK,QAAQ,IAAI,OAAK;AACjC,UAAM,aAAa,EAAE,WAAW,IAAI,OAAK;AACrC,YAAM,aAAa,CAAC;AACpB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,EAAE,UAAU,GAAG;AACrD,cAAM,OAAO,eAAe,GAAkC;AAG9D,cAAM,WAAW,KAAK,UAAW,KAAK;AACtC,gBAAQ,OAAO,CAAC,SAAS,MAAM;AAC/B,cAAM,aAAa,KAAK,YAAa,SAAS,UAAW;AACzD,cAAM,SAAS,YAAY,SAAS,UAAW;AAC/C,cAAM,gBAAgB,SAAS;AAC/B,cAAM,SAAS,gCAAgC,aAAa;AAC5D,cAAM,OAAO,SAAS;AACtB,cAAM,OAAO,SAAS,QAAQ,WAAW,SAAS,GAAG,MAAM,IAAI,IAAsC;AAErG,cAAM,SAAS;AAAA,UACX;AAAA,UACA;AAAA,UACA,eAAe,yBAAyB,aAAa;AAAA,UACrD,gBAAgB,yBAAyB,IAAI;AAAA,UAC7C,YAAY,SAAS,cAAc;AAAA,UACnC,YAAY,WAAW,cAAc;AAAA,UACrC,YAAY,SAAS,cAAc;AAAA,QACvC;AACA,gBAAQ,IAAI,YAAY,MAAM,MAAM;AAAA,MACxC;AAAC;AAED,YAAM,kBAAkB,EAAE,WAAW,SAAY,KAAK,UAAW,EAAE,OAAO,IAAI;AAC9E,YAAM,QAAQ,kBAAkB,gBAAgB,QAAQ,KAAK,UAAW,EAAE,WAAW,UAAU,CAAE,EAAE;AACnG,YAAM,KAAK,YAAY,iBAAiB,cAAc,EAAE;AACxD,YAAM,kBAAkB,kBAAkB,YAAY,gBAAgB,aAAuE,IAAI;AACjJ,YAAM,UAAU,kBAAkB,IAAI,gBAAgB,GAAG,QAAQ,GAAG,cAAc,gBAAiB,cAAc,IAAI,gBAAiB,KAAK,IAAI;AAC/I,YAAM,OAAO,WAAW,EAAE,IAA+B,KAAK;AAE9D,YAAM,WAAuC;AAAA,QACzC,eAAe;AAAA,QACf;AAAA,QACA;AAAA,MACJ;AACA,YAAMC,oBAAoB,EAAE,QAAQ,KAAK,IAAK,uBAAuB;AACrE,YAAM,WAAW,UAAU,EAAE,YAAY,EAAE,KAAKA;AAChD,aAAO,EAAE,UAAU,SAAS;AAAA,IAChC,CAAC;AACD,WAAO,EAAE,WAAW;AAAA,EACxB,CAAC,KAAK,CAAC;AAEP,QAAM,UAAsC,CAAC;AAC7C,MAAI,KAAK,UAAU,KAAK,OAAO;AAC3B,UAAM,YAAY,KAAK,OAAO,KAAK,SAAS,CAAC,EAAE;AAC/C,QAAI,WAAW;AACX,UAASC,oBAAT,SAA0B,WAAmB,iBAAgC;AACzE,cAAM,OAAO,KAAK,MAAO,SAAS;AAClC,cAAM,YAAY,aAAa,IAAI;AACnC,YAAI,iBAAiB;AACjB,uBAAK,SAAS,WAAW,iBAAiB,SAAS;AAAA,QACvD;AACA,YAAI,KAAK,QAAQ,QAAW;AACxB,uBAAK,QAAQ,WAAW,WAAW,eAAS,SAAS,EAAE,CAAC;AACxD,gBAAM,WAAuC,gBAAgB,SAAS;AACtE,gBAAM,OAAO,OAAO,KAAK,IAAI;AAC7B,gBAAM,MAAgC,EAAE,WAAW,CAAC,QAAQ,GAAG,MAAM,aAAa;AAClF,kBAAQ,KAAK,GAAG;AAAA,QACpB;AACA,YAAI,KAAK,UAAU;AACf,qBAAW,SAAS,KAAK,UAAU;AAC/B,YAAAA,kBAAiB,OAAO,SAAS;AAAA,UACrC;AAAA,QACJ;AAAA,MACJ;AAlBS,6BAAAA;AAmBT,iBAAW,iBAAiB,WAAW;AACnC,QAAAA,kBAAiB,aAAa;AAAA,MAClC;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;;;AC1QA,eAAsB,aAAa,KAAU,cAAuB,iBAAmC;AACnG,QAAM,EAAE,MAAM,SAAS,mBAAmB,IAAI,MAAM,SAAS,KAAK,eAAe;AACjF,SAAO,UAAU,SAAS,MAAM,oBAAoB,YAAY;AACpE;;;AC6FO,IAAM,mBAAN,MAAuB;AAAA,EAC1B,YAEa,SAEQ,QAEA,WAER,MAAoB;AANpB;AAEQ;AAEA;AAER;AAAA,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUnC,QAAQ,KAAa,MAAc,OAAgB,QAA+B;AAC9E,UAAM,EAAE,SAAS,WAAW,KAAK,IAAI;AACrC,UAAM,MAAM,IAAI,IAAI,UAAU,KAAK,IAAI,GAAG,OAAO;AACjD,QAAI;AACA,UAAI,SAAS;AACjB,WAAO,IAAI,QAAQ,KAAK,EAAE,MAAM,OAAO,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAUC,UAAkB;AACxB,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,SAAS,IAAI,IAAI,IAAIA,SAAQ,GAAG;AACxC,WAAO,OAAO,QAAQ;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAOA,UAAkB;AACrB,UAAM,SAAS,KAAK,UAAUA,QAAO;AACrC,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,uCAAuC;AAC3D,WAAO;AAAA,EACX;AACJ;;;ACjKA,eAAsB,mBAAmBC,UAAiB,kBAA6D;AACnH,QAAM,UAAU,IAAI,oBAAoBA,UAAS,gBAAgB;AACjE,QAAM,QAAQ,KAAK;AACnB,SAAO;AACX;AAEA,IAAM,oBAAuC;AAAA,EACzC,cAAc;AAAA;AAClB;AAGA,IAAM,sBAAN,MAAoD;AAAA,EAGhD,YAAqBA,UAA0B,kBAAoC;AAA9D,mBAAAA;AAA0B;AAAA,EAC/C;AAAA,EAHS,OAAO,oBAAI,IAAmC;AAAA,EAKvD,IAAY,SAAS;AACjB,WAAO,GAAG,KAAK,OAAO;AAAA,EAC1B;AAAA,EAEQ,UAAU,SAAiB;AAC/B,WAAO,GAAG,KAAK,MAAM,GAAG,OAAO;AAAA,EACnC;AAAA;AAAA,EAGA,MAAM,OAAsB;AACxB,UAAM,EAAE,QAAQ,KAAK,IAAI;AACzB,QAAI,OAAO,MAAM,OAAO,KAAK;AAC7B,eAAW,OAAO,MAAM;AACpB,UAAI,IAAI,WAAW,MAAM,GAAG;AACxB,cAAM,OAAO,IAAI,MAAM,OAAO,MAAM;AACpC,cAAM,QAAQ,MAAM,OAAO,KAAK,GAAG;AACnC,cAAM,MAAM,IAAI,sBAAsB,MAAM,OAAO,IAAI;AACvD,aAAK,IAAI,MAAM,GAAG;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,QAAQC,UAA2B;AAC/B,WAAO,KAAK,iBAAiB,UAAUA,QAAO,KAAK;AAAA,EACvD;AAAA,EAEA,MAAM,MAAMA,UAAiD;AACzD,WAAO,MAAM,OAAO,MAAMA,UAAS,iBAAiB;AAAA,EACxD;AAAA,EAEA,IAAI,sBAAsB;AACtB,WAAO,KAAK,KAAK,OAAO;AAAA,EAC5B;AAAA,EAEA,aAAa,MAAuB;AAChC,WAAO,KAAK,KAAK,IAAI,IAAI;AAAA,EAC7B;AAAA,EAEA,MAAM,UAAU,MAAyC;AACrD,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,MAAM,KAAK,IAAI,IAAI;AACvB,QAAI,CAAC,KAAK;AACN,YAAM,MAAM,KAAK,aAAa,IAAI;AAClC,WAAK,IAAI,MAAM,GAAG;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,aAAa,MAAc;AAC7B,UAAM,YAAY,KAAK,UAAU,IAAI;AACrC,UAAM,QAAQ,MAAM,OAAO,KAAK,SAAS;AACzC,UAAM,MAAM,IAAI,sBAAsB,MAAM,OAAO,IAAI;AACvD,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,YAAY;AACd,eAAW,OAAO,MAAM,OAAO,KAAK,GAAG;AACnC,YAAM,OAAO,OAAO,GAAG;AAAA,IAC3B;AACA,SAAK,KAAK,MAAM;AAAA,EACpB;AACJ;AAEA,IAAM,wBAAN,MAAwD;AAAA,EACpD,YAAqB,SAAuC,OAAuB,MAAc;AAA5E;AAAuC;AAAuB;AAAA,EAAgB;AAAA,EAEnG,QAAQ,MAAuB;AAC3B,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,iBAAiB,IAAI;AAC7B,WAAO,iBAAiB,QAAQ,KAAK,MAAM,IAAI;AAAA,EACnD;AAAA,EAEA,OAAO,QAAuC;AAC1C,UAAM,EAAE,SAAS,MAAM,IAAI;AAC3B,UAAM,EAAE,iBAAiB,IAAI;AAC7B,UAAM,WAAW,MAAM,MAAM,KAAK,QAAW,iBAAiB;AAC9D,qBAAiBA,YAAW,UAAU;AAClC,YAAM,EAAE,KAAK,IAAI,iBAAiB,OAAOA,QAAO;AAChD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAc,IAAI,MAA6C;AAC3D,UAAM,EAAE,MAAM,IAAI;AAClB,UAAMA,WAAU,KAAK,QAAQ,IAAI;AACjC,UAAM,WAAW,MAAM,MAAM,MAAMA,UAAS,iBAAiB;AAC7D,QAAI,UAAU,IAAI;AACd,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAAgD;AACvD,UAAM,WAAW,MAAM,KAAK,IAAI,IAAI;AACpC,WAAO,UAAU,YAAY;AAAA,EACjC;AAAA,EAEA,MAAM,MAAM,MAAc,QAAoC;AAC1D,UAAM,EAAE,MAAM,IAAI;AAClB,UAAMA,WAAU,KAAK,QAAQ,IAAI;AACjC,UAAMC,QAAqB;AAAA,MACvB,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,kBAAkB,OAAO,WAAW,SAAS;AAAA,MACjD;AAAA,IACJ;AACA,UAAM,WAAW,IAAI,SAAS,QAAQA,KAAI;AAC1C,UAAM,MAAM,IAAID,UAAS,QAAQ;AAAA,EACrC;AAAA,EAEA,MAAM,YAAY,OAAwC;AACtD,UAAM,EAAE,MAAM,IAAI;AAClB,eAAW,QAAQ,OAAO;AACtB,YAAMA,WAAU,KAAK,QAAQ,IAAI;AACjC,YAAM,UAAU,MAAM,MAAM,OAAOA,UAAS,iBAAiB;AAC7D,UAAI,CAAC,SAAS;AACV,gBAAQ,KAAK,oBAAoB,IAAI,cAAc;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,SAAwB;AAC1B,UAAM,EAAE,SAAS,KAAK,IAAI;AAC1B,UAAM,EAAE,SAAAD,SAAQ,IAAI;AACpB,UAAM,MAAM,GAAG,IAAI,IAAIA,QAAO;AAC9B,UAAM,SAAS,MAAM,OAAO,OAAO,GAAG;AACtC,YAAQ,OAAO,MAAM;AAAA,EACzB;AACJ;;;AC7KO,IAAM,aAAN,MAAiB;AAAA,EACH,WAAW,oBAAI,IAA4B;AAAA,EACpD,YAAY;AAAA,EAEpB,QAAgB;AACZ,UAAM,KAAK,KAAK;AAChB,SAAK,aAAa;AAClB,WAAO;AAAA,EACX;AAAA,EAEA,OAAiB,IAAwB;AACrC,WAAO,IAAI,QAAW,CAAC,YAAY;AAC/B,WAAK,SAAS,IAAI,IAAI,EAAE,QAAQ,CAAC;AAAA,IACrC,CAAC;AAAA,EACL;AAAA,EAEA,QAAQ,IAAY,QAAa;AAC7B,UAAM,EAAE,SAAS,IAAI;AACrB,UAAM,iBAAiB,SAAS,IAAI,EAAE;AACtC,QAAI,gBAAgB;AAChB,eAAS,OAAO,EAAE;AAClB,YAAM,EAAE,QAAQ,IAAI;AACpB,cAAQ,MAAM;AAAA,IAClB;AAAA,EACJ;AACJ;;;ACbA,eAAsB,kBAAkBG,UAAiB,kBAAoC,QAAuD;AAChJ,QAAM,UAAU,IAAI,mBAAmBA,UAAS,kBAAkB,MAAM;AACxE,QAAM,QAAQ,KAAK;AACnB,SAAO;AACX;AAEA,IAAM,qBAAN,MAAmD;AAAA,EAI/C,YAAqBA,UAA0B,kBAA6C,QAA8B;AAArG,mBAAAA;AAA0B;AAA6C;AACxF,WAAO,YAAY,CAAC,YAAsC;AACtD,YAAM,EAAE,KAAK,IAAI;AACjB,WAAK,SAAS,QAAQ,KAAK,IAAI,IAAI;AAAA,IACvC;AAAA,EACJ;AAAA,EARS,WAAW,IAAI,WAAW;AAAA,EAC1B,OAAO,oBAAI,IAAkC;AAAA;AAAA,EAUtD,MAAM,OAAsB;AACxB,UAAM,EAAE,QAAQ,UAAU,KAAK,IAAI;AACnC,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAmB,EAAE,MAAM,QAAQ,GAAG;AAC5C,WAAO,YAAY,GAAG;AACtB,UAAM,WAAW,MAAM,SAAS,OAAqB,EAAE;AACvD,QAAI,SAAS,OAAO;AAChB,YAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IAClC;AACA,eAAW,QAAQ,SAAS,MAAM;AAC9B,YAAM,MAAM,IAAI,qBAAqB,MAAM,IAAI;AAC/C,WAAK,IAAI,MAAM,GAAG;AAAA,IACtB;AAAA,EACJ;AAAA,EAEA,QAAQC,UAA2B;AAC/B,WAAO,KAAK,iBAAiB,UAAUA,QAAO,KAAK;AAAA,EACvD;AAAA,EAEA,MAAM,MAAMA,UAAiD;AACzD,UAAM,EAAE,QAAQ,kBAAkB,SAAS,IAAI;AAC/C,UAAM,EAAE,KAAK,KAAK,IAAI,iBAAiB,OAAOA,QAAO;AACrD,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAmB,EAAE,MAAM,QAAQ,IAAI,KAAK,KAAK;AACvD,WAAO,YAAY,GAAG;AACtB,UAAM,WAAW,MAAM,SAAS,OAAqB,EAAE;AACvD,QAAI,CAAC,SAAS,SAAS,SAAS,QAAQ;AACpC,aAAO,IAAI,SAAS,SAAS,QAAQ,EAAE,QAAQ,KAAK,SAAS,EAAE,gBAAgB,4BAA4B,kBAAkB,GAAG,SAAS,OAAQ,UAAU,GAAG,EAAE,CAAC;AAAA,IACrK;AAAA,EACJ;AAAA,EAEA,IAAI,sBAAsB;AACtB,WAAO,KAAK,KAAK,OAAO;AAAA,EAC5B;AAAA,EAEA,aAAa,MAAuB;AAChC,WAAO,KAAK,KAAK,IAAI,IAAI;AAAA,EAC7B;AAAA,EAEA,MAAM,UAAU,MAAyC;AACrD,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,MAAM,KAAK,IAAI,IAAI;AACvB,QAAI,CAAC,KAAK;AACN,YAAM,MAAM,KAAK,aAAa,IAAI;AAClC,WAAK,IAAI,MAAM,GAAG;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,aAAa,MAAc;AAC7B,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAwB,EAAE,MAAM,cAAc,IAAI,KAAK,KAAK;AAClE,WAAO,YAAY,GAAG;AACtB,UAAM,WAAW,MAAM,SAAS,OAA0B,EAAE;AAC5D,QAAI,SAAS,OAAO;AAChB,YAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IAClC;AACA,WAAO,IAAI,qBAAqB,MAAM,IAAI;AAAA,EAC9C;AAAA,EAEA,MAAM,YAAY;AACd,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAwB,EAAE,MAAM,cAAc,GAAG;AACvD,WAAO,YAAY,GAAG;AACtB,UAAM,WAAW,MAAM,SAAS,OAA0B,EAAE;AAC5D,QAAI,SAAS,OAAO;AAChB,YAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IAClC;AACA,SAAK,KAAK,MAAM;AAAA,EACpB;AACJ;AAEA,IAAM,uBAAN,MAAuD;AAAA,EACnD,YAAqB,SAAsC,MAAc;AAApD;AAAsC;AAAA,EAAgB;AAAA,EAE3E,QAAQ,MAAuB;AAC3B,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,iBAAiB,IAAI;AAC7B,WAAO,iBAAiB,QAAQ,KAAK,MAAM,IAAI;AAAA,EACnD;AAAA,EAEA,OAAO,QAAuC;AAC1C,UAAM,EAAE,SAAS,KAAK,IAAI;AAC1B,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAoB,EAAE,MAAM,SAAS,IAAI,KAAK,KAAK;AACzD,WAAO,YAAY,GAAG;AACtB,UAAM,WAAW,MAAM,SAAS,OAAsB,EAAE;AACxD,QAAI,SAAS,OAAO;AAChB,YAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IAClC;AACA,eAAW,QAAQ,SAAS,OAAO;AAC/B,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EAEA,MAAM,KAAK,MAAgD;AACvD,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAmB,EAAE,MAAM,QAAQ,IAAI,KAAK,KAAK,MAAM,MAAM,KAAK;AACxE,WAAO,YAAY,GAAG;AACtB,UAAM,WAAW,MAAM,SAAS,OAAqB,EAAE;AACvD,QAAI,SAAS,OAAO;AAChB,cAAQ,KAAK,SAAS,KAAK;AAAA,IAC/B;AACA,WAAO,SAAS;AAAA,EACpB;AAAA,EAEA,MAAM,MAAM,MAAc,QAAoC;AAC1D,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAoB,EAAE,MAAM,SAAS,IAAI,KAAK,KAAK,MAAM,MAAM,MAAM,OAAO;AAClF,WAAO,YAAY,KAAK,CAAC,MAAM,CAAC;AAChC,UAAM,WAAW,MAAM,SAAS,OAAsB,EAAE;AACxD,QAAI,SAAS,OAAO;AAChB,YAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IAClC;AAAA,EACJ;AAAA,EAEA,MAAM,YAAY,OAAwC;AACtD,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAA0B,EAAE,MAAM,gBAAgB,IAAI,KAAK,KAAK,MAAM,OAAO,CAAC,GAAG,KAAK,EAAE;AAC9F,WAAO,YAAY,GAAG;AACtB,UAAM,WAAW,MAAM,SAAS,OAA4B,EAAE;AAC9D,QAAI,SAAS,OAAO;AAChB,YAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IAClC;AAAA,EACJ;AAAA,EAEA,MAAM,SAAwB;AAC1B,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,EAAE,QAAQ,SAAS,IAAI;AAC7B,UAAM,KAAK,SAAS,MAAM;AAC1B,UAAM,MAAwB,EAAE,MAAM,cAAc,IAAI,KAAK,KAAK,KAAK;AACvE,WAAO,YAAY,GAAG;AACtB,YAAQ,KAAK,OAAO,KAAK,IAAI;AAC7B,UAAM,WAAW,MAAM,SAAS,OAA0B,EAAE;AAC5D,QAAI,SAAS,OAAO;AAChB,YAAM,IAAI,MAAM,SAAS,KAAK;AAAA,IAClC;AAAA,EACJ;AACJ;;;ACrKO,IAAM,gBAAN,MAAoB;AAAA;AAAA,EAEN,SAAS,oBAAI;AAAA;AAAA,EAG9B,IAAI,QAA8C;AAC9C,WAAO,KAAK,OAAO,QAAQ;AAAA,EAC/B;AAAA;AAAA,EAGS;AAAA;AAAA,EAGA;AAAA;AAAA;AAAA;AAAA,EAKT,YAAY,MAAyB;AACjC,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,gBAAgB;AACpB,QAAI,WAAW;AACf,eAAW,CAAC,MAAM,IAAI,KAAK,MAAM;AAC7B,aAAO,IAAI,MAAM,IAAI;AACrB,uBAAiB;AACjB;AAAA,IACJ;AACA,SAAK,gBAAgB;AACrB,SAAK,WAAW;AAAA,EACpB;AAGJ;AAUA,eAAsB,aAAa,KAA+C;AAC9E,MAAI,OAA0B,CAAC;AAC/B,QAAM,SAAS,MAAM,IAAI,KAAK,eAAe;AAC7C,MAAI,QAAQ;AACR,UAAM,OAAO,IAAI,YAAY,EAAE,OAAO,MAAM;AAC5C,WAAO,KAAK,MAAM,IAAI;AAAA,EAC1B;AACA,SAAO,IAAI,cAAc,IAAI;AACjC;;;AC1DO,SAAS,0BAA0B;AACtC,QAAM,KAAK;AACX,QAAM,SAAyB,CAACC,SAASA,KAAI,MAAM,EAAE,GAAG;AACxD,QAAM,YAA+B,CAAC,KAAK,SAAU,IAAI,GAAG,eAAe,IAAI;AAC/E,QAAM,UAAU,IAAI,IAAI,+BAA+B;AACvD,SAAO,IAAI,iBAAiB,SAAS,QAAQ,WAAW,MAAM;AAClE;AAOO,SAAS,aAAa,OAAwB;AACjD,WAAS,QAAQC,QAA4B;AACzC,WAAOA,UAAS,aAAaA;AAAA,EACjC;AACA,SAAO,QAAQ,KAAK,IAAI,MAAM,UAAU,OAAQ,SAAU,WAAW,QAAS,MAAc,SAAS;AACzG;;;ACVO,IAAM,eAAN,MAAmB;AAAA,EAItB,YAEa,SAEA,KAMF,UACT;AATW;AAEA;AAMF;AAAA,EACP;AAAA;AAAA,EAbJ;AAAA;AAAA,EAgBA,IAAI,KAAK;AACL,WAAO,KAAK,IAAI;AAAA,EACpB;AAAA;AAAA,EAGA,MAAM,SAAS;AACX,UAAM,EAAE,KAAK,SAAS,OAAO,IAAI;AACjC,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,KAAK,IAAI;AACjB,YAAQ,OAAO,UAAU;AACzB,UAAM,IAAI,OAAO;AACjB,WAAO,OAAO,IAAI;AAClB,YAAQ,QAAQ,OAAO,eAAe;AACtC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,KAAK,aAA0B,QAAkC;AACnE,UAAM,EAAE,KAAK,UAAU,QAAQ,QAAQ,IAAI;AAC3C,UAAM,EAAE,iBAAiB,IAAI,QAAQ;AACrC,QAAI,CAAC,UAAU,QAAQ;AACnB,cAAQ,OAAO,SAAS;AACxB,cAAQ,MAAM,0CAA0C;AACxD,aAAO;AAAA,IACX;AAEA,UAAM,gBAAgB,IAAI,IAAoB,SAAS,KAAK;AAC5D,mBAAe,YAAY;AAEvB,YAAM,QAAQ,IAAI,MAAM;AACxB,uBAAiB,YAAY,OAAO;AAChC,YAAI,CAAC,SAAS,SAAS,OAAO,GAAG;AAC7B,wBAAc,IAAI,UAAU,CAAC;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAAC;AACD,UAAM,mBAAmB,UAAU;AACnC,UAAM;AAGN,QAAI;AACA,cAAQ,OAAO,eAAe;AAC9B,cAAQ,OAAO,mBAAmB;AAElC,YAAM,kBAAkB,iBAAiB,QAAQ,IAAI,MAAM,iBAAiB,QAAQ,WAAW;AAC/F,YAAM,mBAAmB,MAAM,MAAM,eAAe;AACpD,UAAI,CAAC,iBAAiB,IAAI;AACtB,cAAM,IAAI,MAAM,iBAAiB,UAAU;AAAA,MAC/C;AACA,YAAM,eAAe,MAAM,iBAAiB,KAAK;AACjD,UAAI,YAAY,SAAS;AACrB,gBAAQ,OAAO,SAAS;AACxB,eAAO;AAAA,MACX;AACA,YAAM,iBAAiB,IAAI,cAAc,YAAY;AACrD,YAAM,EAAE,cAAc,IAAI;AAE1B,YAAM,WAAW,UAAU;AAG3B,cAAQ,OAAO,oBAAoB;AACnC,UAAI,gBAAgB;AACpB,cAAQ,WAAW,eAAe,aAAa;AAC/C,YAAM,4BAA4B;AAClC,YAAM,gBAAgB,IAAI,MAAiC,yBAAyB;AACpF,iBAAW,CAAC,MAAM,IAAI,KAAK,eAAe,OAAO;AAC7C,YAAI,CAAC,cAAc,IAAI,IAAI,GAAG;AAC1B,gBAAM,cAAc,iBAAiB,QAAQ,IAAI,MAAM,MAAM,QAAQ,WAAW;AAChF,cAAI,MAAM,cAAc,UAAU,OAAK,CAAC,CAAC;AACzC,cAAI,MAAM,GAAG;AAET,kBAAM,QAAQ,KAAK,aAAa;AAChC,kBAAM,cAAc,UAAU,OAAK,CAAC,CAAC;AACrC,oBAAQ,OAAO,OAAO,CAAC;AAAA,UAC3B;AACA,gBAAM,kBAAkBC,UAAS;AACjC,wBAAc,GAAG,IAAI;AACrB,0BAAgB,QAAQ,MAAM;AAC1B,0BAAc,GAAG,IAAI;AAAA,UACzB,CAAC;AAED,yBAAeA,YAAW;AACtB,gBAAI,eAAe,MAAM,MAAM,WAAW;AAC1C,gBAAI,aAAa,IAAI;AACjB,oBAAM,SAAS,MAAM,aAAa,YAAY;AAC9C,oBAAM,IAAI,MAAM,MAAM,MAAM;AAC5B,+BAAiB;AAAA,YACrB,OAAO;AACH,oBAAM,IAAI,MAAM,mBAAmB,IAAI,GAAG;AAAA,YAC9C;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,2BAAiB;AAAA,QACrB;AACA,YAAI,SAAS,GAAG,GAAG;AACf,kBAAQ,WAAW,eAAe,aAAa;AAAA,QACnD;AAAA,MACJ;AACA,YAAM,QAAQ,IAAI,aAAa;AAC/B,cAAQ,WAAW,QAAW,MAAS;AAGvC,YAAM,iBAAiB,IAAI,YAAY,EAAE,OAAO,KAAK,UAAU,YAAY,CAAC,EAAE;AAC9E,YAAM,IAAI,MAAM,iBAAiB,cAAc;AAC/C,WAAK,WAAW;AAGhB,cAAQ,OAAO,SAAS;AACxB,iBAAW,CAAC,IAAI,KAAK,eAAe,OAAO;AACvC,sBAAc,OAAO,IAAI;AAAA,MAC7B;AACA,YAAM,IAAI,YAAY,cAAc,KAAK,CAAC;AAE1C,cAAQ,OAAO,cAAc;AAC7B,aAAO;AAAA,IACX,SAAS,OAAgB;AACrB,UAAI,OAAO,SAAS,YAAY,iBAAiB,gBAAgB,MAAM,QAAQ,aAAa,WAAW;AACnG,gBAAQ,OAAO,SAAS;AAAA,MAC5B,OAAO;AACH,gBAAQ,OAAO,OAAO;AACtB,gBAAQ,MAAM,aAAa,KAAK,CAAC;AAAA,MACrC;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAEA,SAAS,YAAY;AACjB,MAAI,WAAW,YAAY,IAAI;AAC/B,SAAO,SAAU,aAAqB;AAClC,UAAM,MAAM,YAAY,IAAI;AAC5B,QAAI,MAAM,WAAW,aAAa;AAC9B,iBAAW;AACX,aAAO;AAAA,IACX,OAAO;AACH,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;ACvKA,eAAsB,uBAAuB,SAAyB;AAClE,QAAM,kBAAkB,cAAc,UAAU,UAAU,MAAM,UAAU,QAAQ,SAAS,IAAI;AAC/F,QAAM,UAAU,IAAI,iBAAiB,SAAS,eAAe;AAC7D,QAAM,EAAE,OAAO,IAAI;AACnB,aAAW,OAAO,QAAQ,qBAAqB;AAC3C,UAAM,WAAW,MAAM,aAAa,GAAG;AACvC,UAAM,QAAQ,IAAI,aAAa,SAAS,KAAK,QAAQ;AACrD,WAAO,IAAI,IAAI,MAAM,KAAK;AAAA,EAC9B;AACA,SAAO;AACX;AAWO,IAAM,mBAAN,MAAuB;AAAA,EAO1B,YAEa,SAEA,wBACX;AAHW;AAEA;AAAA,EAEb;AAAA;AAAA,EAXS,SAAS,oBAAI,IAA0B;AAAA;AAAA,EAGhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,MAAM,SAAS,IAA+C;AAC1D,UAAM,EAAE,SAAS,QAAQ,OAAO,IAAI;AACpC,QAAI,OAAO,IAAI,EAAE,GAAG;AAChB,cAAQ,MAAM,qBAAqB;AAAA,IACvC;AACA,QAAI;AAGA,cAAQ,OAAO,cAAc;AAC7B,YAAM,WAAW,IAAI,cAAc,CAAC,CAAC;AACrC,YAAM,MAAM,MAAM,QAAQ,UAAU,EAAE;AACtC,UAAI;AACA,cAAM,QAAQ,IAAI,aAAa,MAAM,KAAK,QAAQ;AAGlD,eAAO,IAAI,IAAI,KAAK;AACpB,gBAAQ,OAAO,aAAa;AAC5B,eAAO;AAAA,MACX,SAAS,OAAgB;AACrB,YAAI,OAAO;AACX,cAAM;AAAA,MACV;AAAA,IACJ,SAAS,OAAgB;AACrB,cAAQ,MAAM,aAAa,KAAK,CAAC;AAAA,IACrC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,YAAY;AACd,UAAM,EAAE,QAAQ,SAAS,OAAO,IAAI;AACpC,QAAI;AACA,cAAQ,OAAO,gBAAgB;AAC/B,cAAQ,UAAU;AAIlB,aAAO,MAAM;AACb,cAAQ,OAAO,eAAe;AAC9B,aAAO;AAAA,IACX,SAAS,OAAY;AACjB,cAAQ,MAAM,aAAa,KAAK,CAAC;AACjC,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;AC9FA,eAAsB,2BAA2B,OAAsC;AACnF,QAAM,EAAE,QAAQ,KAAK,IAAI;AACzB,UAAQ,KAAK,MAAM;AAAA,IACf,KAAK,WAAW;AACZ,YAAM,EAAE,KAAK,IAAI;AACjB,YAAM,UAAU,OAAO,MAAM,yBAAyB,IAAI,IAAI,MAAM,0BAA0B;AAC9F,UAAI,UAAU,kBAAkB,QAAQ;AACpC,gBAAQ,IAAI,UAAU,OAAO,EAAE,+BAA+B;AAC9D,cAAM,WAAW,OAAO;AACxB,uBAAe,IAAI,UAAU,OAAO;AACpC,kBAAU,MAAM,QAAQ,UAAU,CAAC,GAAG,CAAC,SAAS;AAE5C,kBAAQ,IAAI,UAAU,QAAQ,oCAAoC;AAClE,yBAAe,IAAI,UAAU,IAAI;AAAA,QACrC,CAAC;AACD,cAAM,SAAS,MAAM,QAAQ,IAAI,QAAQ;AACzC,gBAAQ,YAAY,EAAE,MAAM,YAAY,CAAuC;AAAA,MACnF;AACA;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,eAAsB,mBAAmBC,UAAkB,UAAkB,WAAsC;AAE/G,QAAM,UAAU,WAAW,QAAQ;AACnC,MAAI;AACJ,MAAI,SAAS;AACT,eAAW,MAAM,iBAAiBA,UAAS,OAAO;AAAA,EACtD;AACA,MAAI,CAAC,UAAU;AACX,eAAW,MAAM,eAAeA,UAAS,SAAS;AAAA,EACtD;AACA,MAAI,CAAC,SAAS,IAAI;AACd,YAAQ,KAAK,eAAe,SAAS,MAAM,KAAK,SAAS,UAAU,EAAE;AAAA,EACzE;AACA,SAAO;AACX;AAGA,IAAM,iBAAiB,oBAAI,IAAmC;AAE9D,eAAe,gBAAgB,UAAkB;AAC7C,QAAM,SAAS,MAAM,QAAQ,IAAI,QAAQ;AACzC,MAAI,QAAQ;AACR,WAAO,YAAY,EAAE,MAAM,WAAW,SAAS,CAAmC;AAAA,EAEtF;AACJ;AAEA,SAAS,WAAW,UAAqD;AACrE,MAAI,UAAU,eAAe,IAAI,QAAQ;AACzC,MAAI,YAAY,QAAW;AACvB,cAAU;AACV,mBAAe,IAAI,UAAU,OAAO;AACpC,oBAAgB,QAAQ;AAAA,EAC5B;AACA,SAAO;AACX;AAEA,eAAe,iBAAiBA,UAAkB,SAAwD;AACtG,MAAI;AACJ,QAAM,QAAQ,QAAQ,iBAAiB,UAAUA,QAAO;AAExD,MAAI,OAAO;AAGP,QAAI,QAAQ,aAAa,MAAM,GAAG,GAAG;AAEjC,iBAAW,MAAM,QAAQ,MAAMA,QAAO,KAAK,SAAS,MAAM;AAC1D,UAAI,CAAC,SAAS,IAAI;AACd,YAAI,UAAU,QAAQ;AAGlB,qBAAW,MAAM,MAAMA,QAAO;AAC9B,cAAI,SAAS,IAAI;AAEb,kBAAM,SAAS,MAAM,SAAS,MAAM,EAAE,YAAY;AAClD,gBAAI,OAAO;AACP,oBAAM,EAAE,KAAK,KAAK,IAAI;AACtB,eAAC,MAAM,QAAQ,UAAU,GAAG,GAAG,MAAM,MAAM,MAAM;AAAA,YACrD;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,kBAAQ,KAAK,iBAAiB,IAAI,IAAIA,SAAQ,GAAG,EAAE,QAAQ,EAAE;AAAA,QACjE;AAAA,MACJ;AAAA,IACJ,OAAO;AAEH,iBAAW,MAAM,MAAMA,QAAO;AAAA,IAClC;AAAA,EACJ;AACA,SAAO;AACX;AAEA,eAAe,eAAeA,UAAkB,WAAsC;AAClF,MAAI;AAEJ,MAAI,UAAU,QAAQ;AAElB,eAAW,MAAM,MAAMA,QAAO;AAC9B,UAAM,WAAW,IAAI,IAAIA,SAAQ,GAAG,EAAE,OAAO,SAAS;AACtD,QAAI,SAAS,MAAM,CAAC,UAAU;AAE1B,YAAM,QAAQ,MAAM,OAAO,KAAK,SAAS;AAEzC,YAAM,MAAM,IAAIA,UAAS,SAAS,MAAM,CAAC;AAAA,IAC7C;AAAA,EACJ,OAAO;AAEH,UAAM,QAAQ,MAAM,OAAO,KAAK,SAAS;AACzC,eAAW,MAAM,MAAM,MAAMA,QAAO,KAAK,SAAS,MAAM;AAAA,EAC5D;AACA,SAAO;AACX;;;AC/GO,IAAM,gBAAgB;AA2B7B,eAAsB,cAAc,kBAAmC,aAA8B,QAAsD;AACvJ,QAAM,WAAW,cAAc,IAAI,OAAO,aAAa,EAAE,MAAM,UAAU,MAAM,KAAK,CAAC,IAAI;AACzF,QAAM,UAAU,MAAM,oBAAoB,kBAAkB,UAAU,MAAM;AAC5E,SAAO,EAAE,UAAU,QAAQ;AAC/B;AAEA,eAAe,oBAAoB,kBAAmC,UAA8B,QAAiB;AACjH,MAAI,UAAU,MAAM;AAAA,EAAE;AACtB,MAAI,kBAAkB;AAClB,QAAI,mBAAmB,WAAW;AAC9B,YAAM,EAAE,cAAc,IAAI;AAC1B,YAAM,EAAE,WAAW,IAAI;AACvB,UAAI,YAAY,YAAY;AACxB,YAAI,iBAA4C;AAChD,YAAI,mBAA+B;AACnC,YAAI,iBAAiB,IAAI,QAAoB,aAAW;AACpD,2BAAiB;AAAA,QACrB,CAAC;AACD,YAAI,mBAAmB,IAAI,QAAc,aAAW;AAChD,6BAAmB;AAAA,QACvB,CAAC;AAED,sBAAc,YAAY,OAAO,UAA6D;AAC1F,gBAAM,EAAE,KAAK,IAAI;AACjB,kBAAQ,KAAK,MAAM;AAAA,YACf,KAAK,WAAW;AACZ,oBAAM,EAAE,SAAS,IAAI;AACrB,wBAAU,MAAM,QAAQ,UAAU,EAAE,aAAa,KAAK,GAAG,UAAQ;AAC7D,oBAAI,MAAM;AACN,wBAAM,UAAU,IAAI,QAAc,CAAC,YAAY;AAC3C,mCAAe,OAAO;AAAA,kBAC1B,CAAC;AACD,yBAAO;AAAA,gBACX,OAAO;AACH,0BAAQ,KAAK,+CAA+C,QAAQ,GAAG;AAAA,gBAC3E;AAAA,cACJ,CAAC;AAED,oBAAM,UAAU,IAAI,eAAe;AACnC,oBAAM,EAAE,OAAO,MAAM,IAAI;AACzB,uBAAS,YAAY,EAAE,MAAM,WAAW,MAAM,MAAM,GAAsC,CAAC,KAAK,CAAC;AACjG,yBAAW,YAAY,EAAE,MAAM,WAAW,MAAM,MAAM,GAAsC,CAAC,KAAK,CAAC;AACnG;AAAA,YACJ;AAAA,YACA,KAAK,aAAa;AACd,+BAAiB;AACjB;AAAA,YACJ;AAAA,UAEJ;AAAA,QACJ;AAEA,kBAAU,MAAM;AAEhB,cAAM;AACN,gBAAQ,IAAI,2BAA2B;AAAA,MAC3C;AAGA,UAAI,UAAU,QAAQ;AAClB,YAAI;AACA,gBAAM,sBAAsB,gBAAgB;AAAA,QAChD,SAAS,OAAgB;AACrB,kBAAQ,KAAK,uCAAuC,KAAK,EAAE;AAAA,QAC/D;AAAA,MACJ;AAAA,IAGJ,OAAO;AACH,cAAQ,KAAK,kCAAkC;AAAA,IACnD;AAAA,EACJ;AACA,SAAO;AACX;AAQA,eAAsB,qBAAqB,UAA8B;AACrE,QAAM,UAAU,WACZ,MAAM,kBAAkB,eAAe,wBAAwB,GAAG,QAAQ,IAC1E,MAAM,mBAAmB,eAAe,wBAAwB,CAAC;AAErE,QAAM,UAAU,MAAM,uBAAuB,OAAO;AACpD,SAAO;AACX;AAOA,eAAsB,4BAAqD;AACvE,QAAM,UAAU,MAAM,mBAAmB,eAAe,wBAAwB,CAAC;AACjF,SAAO;AACX;AAQA,eAAsB,yBAAyB,QAAuD;AAClG,QAAM,UAAU,MAAM,kBAAkB,eAAe,wBAAwB,GAAG,MAAM;AACxF,SAAO;AACX;AAEA,eAAe,sBAAsB,KAAU;AAC3C,MAAI;AACA,UAAM,eAAe,MAAM,UAAU,cAAc,SAAS,KAAK,EAAE,MAAM,UAAU,gBAAgB,OAAO,CAAC;AAC3G,QAAI,aAAa,YAAY;AAAA,IAQ7B,WAAW,aAAa,SAAS;AAAA,IAEjC;AAEA,WAAO;AAAA,EACX,SAAS,OAAO;AACZ,YAAQ,MAAM,4BAA4B,KAAK,EAAE;AAAA,EACrD;AACJ;;;ICzJa,cAAc,OAAO,eAAe;IACpC,iBAAiB,OAAO,kBAAkB;IAC1C,eAAe,OAAO,sBAAsB;IAC5C,YAAY,OAAO,mBAAmB;AAEnD,IAAM,cAAc,OAAO,gBAAgB;AAuJ3C,IAAM,WAAW,CAAC,QACf,OAAO,QAAQ,YAAY,QAAQ,QAAS,OAAO,QAAQ;AAkC9D,IAAM,uBAA6D;EACjE,WAAW,CAAC,QACV,SAAS,GAAG,KAAM,IAAoB,WAAW;EACnD,UAAU,KAAG;AACX,UAAM,EAAE,OAAO,MAAK,IAAK,IAAI,eAAc;AAC3C,WAAO,KAAK,KAAK;AACjB,WAAO,CAAC,OAAO,CAAC,KAAK,CAAC;;EAExB,YAAY,MAAI;AACd,SAAK,MAAK;AACV,WAAO,KAAK,IAAI;;;AAepB,IAAM,uBAGF;EACF,WAAW,CAAC,UACV,SAAS,KAAK,KAAK,eAAe;EACpC,UAAU,EAAE,MAAK,GAAE;AACjB,QAAI;AACJ,QAAI,iBAAiB,OAAO;AAC1B,mBAAa;QACX,SAAS;QACT,OAAO;UACL,SAAS,MAAM;UACf,MAAM,MAAM;UACZ,OAAO,MAAM;QACd;;IAEJ,OAAM;AACL,mBAAa,EAAE,SAAS,OAAO,MAAK;IACrC;AACD,WAAO,CAAC,YAAY,CAAA,CAAE;;EAExB,YAAY,YAAU;AACpB,QAAI,WAAW,SAAS;AACtB,YAAM,OAAO,OACX,IAAI,MAAM,WAAW,MAAM,OAAO,GAClC,WAAW,KAAK;IAEnB;AACD,UAAM,WAAW;;;AAOR,IAAA,mBAAmB,oBAAI,IAGlC;EACA,CAAC,SAAS,oBAAoB;EAC9B,CAAC,SAAS,oBAAoB;AAC/B,CAAA;AAED,SAAS,gBACP,gBACA,QAAc;AAEd,aAAW,iBAAiB,gBAAgB;AAC1C,QAAI,WAAW,iBAAiB,kBAAkB,KAAK;AACrD,aAAO;IACR;AACD,QAAI,yBAAyB,UAAU,cAAc,KAAK,MAAM,GAAG;AACjE,aAAO;IACR;EACF;AACD,SAAO;AACT;AAEM,SAAU,OACd,KACA,KAAe,YACf,iBAAsC,CAAC,GAAG,GAAC;AAE3C,KAAG,iBAAiB,WAAW,SAAS,SAAS,IAAgB;AAC/D,QAAI,CAAC,MAAM,CAAC,GAAG,MAAM;AACnB;IACD;AACD,QAAI,CAAC,gBAAgB,gBAAgB,GAAG,MAAM,GAAG;AAC/C,cAAQ,KAAK,mBAAmB,GAAG,MAAM,qBAAqB;AAC9D;IACD;AACD,UAAM,EAAE,IAAI,MAAM,KAAI,IAAE,OAAA,OAAA,EACtB,MAAM,CAAA,EAAc,GAChB,GAAG,IAAgB;AAEzB,UAAM,gBAAgB,GAAG,KAAK,gBAAgB,CAAA,GAAI,IAAI,aAAa;AACnE,QAAI;AACJ,QAAI;AACF,YAAM,SAAS,KAAK,MAAM,GAAG,EAAE,EAAE,OAAO,CAACC,MAAK,SAASA,KAAI,IAAI,GAAG,GAAG;AACrE,YAAM,WAAW,KAAK,OAAO,CAACA,MAAK,SAASA,KAAI,IAAI,GAAG,GAAG;AAC1D,cAAQ,MAAI;QACV,KAAA;AACE;AACE,0BAAc;UACf;AACD;QACF,KAAA;AACE;AACE,mBAAO,KAAK,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,cAAc,GAAG,KAAK,KAAK;AACvD,0BAAc;UACf;AACD;QACF,KAAA;AACE;AACE,0BAAc,SAAS,MAAM,QAAQ,YAAY;UAClD;AACD;QACF,KAAA;AACE;AACE,kBAAM,QAAQ,IAAI,SAAS,GAAG,YAAY;AAC1C,0BAAc,MAAM,KAAK;UAC1B;AACD;QACF,KAAA;AACE;AACE,kBAAM,EAAE,OAAO,MAAK,IAAK,IAAI,eAAc;AAC3C,mBAAO,KAAK,KAAK;AACjB,0BAAc,SAAS,OAAO,CAAC,KAAK,CAAC;UACtC;AACD;QACF,KAAA;AACE;AACE,0BAAc;UACf;AACD;QACF;AACE;MACH;IACF,SAAQ,OAAO;AACd,oBAAc,EAAE,OAAO,CAAC,WAAW,GAAG,EAAC;IACxC;AACD,YAAQ,QAAQ,WAAW,EACxB,MAAM,CAAC,UAAS;AACf,aAAO,EAAE,OAAO,CAAC,WAAW,GAAG,EAAC;IAClC,CAAC,EACA,KAAK,CAACC,iBAAe;AACpB,YAAM,CAAC,WAAW,aAAa,IAAI,YAAYA,YAAW;AAC1D,SAAG,YAAiB,OAAA,OAAA,OAAA,OAAA,CAAA,GAAA,SAAS,GAAA,EAAE,GAAE,CAAA,GAAI,aAAa;AAClD,UAAI,SAAI,WAA0B;AAEhC,WAAG,oBAAoB,WAAW,QAAe;AACjD,sBAAc,EAAE;AAChB,YAAI,aAAa,OAAO,OAAO,IAAI,SAAS,MAAM,YAAY;AAC5D,cAAI,SAAS,EAAC;QACf;MACF;IACH,CAAC,EACA,MAAM,CAAC,UAAS;AAEf,YAAM,CAAC,WAAW,aAAa,IAAI,YAAY;QAC7C,OAAO,IAAI,UAAU,6BAA6B;QAClD,CAAC,WAAW,GAAG;MAChB,CAAA;AACD,SAAG,YAAiB,OAAA,OAAA,OAAA,OAAA,CAAA,GAAA,SAAS,GAAA,EAAE,GAAE,CAAA,GAAI,aAAa;IACpD,CAAC;EACL,CAAQ;AACR,MAAI,GAAG,OAAO;AACZ,OAAG,MAAK;EACT;AACH;AAEA,SAAS,cAAc,UAAkB;AACvC,SAAO,SAAS,YAAY,SAAS;AACvC;AAEA,SAAS,cAAc,UAAkB;AACvC,MAAI,cAAc,QAAQ;AAAG,aAAS,MAAK;AAC7C;AAEgB,SAAA,KAAQ,IAAc,QAAY;AAChD,SAAO,YAAe,IAAI,CAAA,GAAI,MAAM;AACtC;AAEA,SAAS,qBAAqB,YAAmB;AAC/C,MAAI,YAAY;AACd,UAAM,IAAI,MAAM,4CAA4C;EAC7D;AACH;AAEA,SAAS,gBAAgB,IAAY;AACnC,SAAO,uBAAuB,IAAI;IAChC,MAAyB;EAC1B,CAAA,EAAE,KAAK,MAAK;AACX,kBAAc,EAAE;EAClB,CAAC;AACH;AAaA,IAAM,eAAe,oBAAI,QAAO;AAChC,IAAM,kBACJ,0BAA0B,cAC1B,IAAI,qBAAqB,CAAC,OAAgB;AACxC,QAAM,YAAY,aAAa,IAAI,EAAE,KAAK,KAAK;AAC/C,eAAa,IAAI,IAAI,QAAQ;AAC7B,MAAI,aAAa,GAAG;AAClB,oBAAgB,EAAE;EACnB;AACH,CAAC;AAEH,SAAS,cAAcC,QAAe,IAAY;AAChD,QAAM,YAAY,aAAa,IAAI,EAAE,KAAK,KAAK;AAC/C,eAAa,IAAI,IAAI,QAAQ;AAC7B,MAAI,iBAAiB;AACnB,oBAAgB,SAASA,QAAO,IAAIA,MAAK;EAC1C;AACH;AAEA,SAAS,gBAAgBA,QAAa;AACpC,MAAI,iBAAiB;AACnB,oBAAgB,WAAWA,MAAK;EACjC;AACH;AAEA,SAAS,YACP,IACA,OAAqC,CAAA,GACrC,SAAiB,WAAA;AAAA,GAAc;AAE/B,MAAI,kBAAkB;AACtB,QAAMA,SAAQ,IAAI,MAAM,QAAQ;IAC9B,IAAI,SAAS,MAAI;AACf,2BAAqB,eAAe;AACpC,UAAI,SAAS,cAAc;AACzB,eAAO,MAAK;AACV,0BAAgBA,MAAK;AACrB,0BAAgB,EAAE;AAClB,4BAAkB;QACpB;MACD;AACD,UAAI,SAAS,QAAQ;AACnB,YAAI,KAAK,WAAW,GAAG;AACrB,iBAAO,EAAE,MAAM,MAAMA,OAAK;QAC3B;AACD,cAAM,IAAI,uBAAuB,IAAI;UACnC,MAAqB;UACrB,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;QACnC,CAAA,EAAE,KAAK,aAAa;AACrB,eAAO,EAAE,KAAK,KAAK,CAAC;MACrB;AACD,aAAO,YAAY,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC;;IAExC,IAAI,SAAS,MAAM,UAAQ;AACzB,2BAAqB,eAAe;AAGpC,YAAM,CAAC,OAAO,aAAa,IAAI,YAAY,QAAQ;AACnD,aAAO,uBACL,IACA;QACE,MAAqB;QACrB,MAAM,CAAC,GAAG,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;QAC7C;MACD,GACD,aAAa,EACb,KAAK,aAAa;;IAEtB,MAAM,SAAS,UAAU,iBAAe;AACtC,2BAAqB,eAAe;AACpC,YAAM,OAAO,KAAK,KAAK,SAAS,CAAC;AACjC,UAAK,SAAiB,gBAAgB;AACpC,eAAO,uBAAuB,IAAI;UAChC,MAA0B;QAC3B,CAAA,EAAE,KAAK,aAAa;MACtB;AAED,UAAI,SAAS,QAAQ;AACnB,eAAO,YAAY,IAAI,KAAK,MAAM,GAAG,EAAE,CAAC;MACzC;AACD,YAAM,CAAC,cAAc,aAAa,IAAI,iBAAiB,eAAe;AACtE,aAAO,uBACL,IACA;QACE,MAAuB;QACvB,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;QAClC;MACD,GACD,aAAa,EACb,KAAK,aAAa;;IAEtB,UAAU,SAAS,iBAAe;AAChC,2BAAqB,eAAe;AACpC,YAAM,CAAC,cAAc,aAAa,IAAI,iBAAiB,eAAe;AACtE,aAAO,uBACL,IACA;QACE,MAA2B;QAC3B,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;QAClC;MACD,GACD,aAAa,EACb,KAAK,aAAa;;EAEvB,CAAA;AACD,gBAAcA,QAAO,EAAE;AACvB,SAAOA;AACT;AAEA,SAAS,OAAU,KAAgB;AACjC,SAAO,MAAM,UAAU,OAAO,MAAM,CAAA,GAAI,GAAG;AAC7C;AAEA,SAAS,iBAAiB,cAAmB;AAC3C,QAAM,YAAY,aAAa,IAAI,WAAW;AAC9C,SAAO,CAAC,UAAU,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,OAAO,UAAU,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;AACxE;AAEA,IAAM,gBAAgB,oBAAI,QAAO;AACjB,SAAA,SAAY,KAAQ,WAAyB;AAC3D,gBAAc,IAAI,KAAK,SAAS;AAChC,SAAO;AACT;AAEM,SAAU,MAAoB,KAAM;AACxC,SAAO,OAAO,OAAO,KAAK,EAAE,CAAC,WAAW,GAAG,KAAI,CAAE;AACnD;AAeA,SAAS,YAAY,OAAU;AAC7B,aAAW,CAAC,MAAMC,QAAO,KAAK,kBAAkB;AAC9C,QAAIA,SAAQ,UAAU,KAAK,GAAG;AAC5B,YAAM,CAAC,iBAAiB,aAAa,IAAIA,SAAQ,UAAU,KAAK;AAChE,aAAO;QACL;UACE,MAA2B;UAC3B;UACA,OAAO;QACR;QACD;;IAEH;EACF;AACD,SAAO;IACL;MACE,MAAuB;MACvB;IACD;IACD,cAAc,IAAI,KAAK,KAAK,CAAA;;AAEhC;AAEA,SAAS,cAAc,OAAgB;AACrC,UAAQ,MAAM,MAAI;IAChB,KAAA;AACE,aAAO,iBAAiB,IAAI,MAAM,IAAI,EAAG,YAAY,MAAM,KAAK;IAClE,KAAA;AACE,aAAO,MAAM;EAChB;AACH;AAEA,SAAS,uBACP,IACA,KACA,WAA0B;AAE1B,SAAO,IAAI,QAAQ,CAAC,YAAW;AAC7B,UAAM,KAAK,aAAY;AACvB,OAAG,iBAAiB,WAAW,SAAS,EAAE,IAAgB;AACxD,UAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,KAAK,MAAM,GAAG,KAAK,OAAO,IAAI;AAChD;MACD;AACD,SAAG,oBAAoB,WAAW,CAAQ;AAC1C,cAAQ,GAAG,IAAI;IACjB,CAAQ;AACR,QAAI,GAAG,OAAO;AACZ,SAAG,MAAK;IACT;AACD,OAAG,YAAc,OAAA,OAAA,EAAA,GAAE,GAAK,GAAG,GAAI,SAAS;EAC1C,CAAC;AACH;AAEA,SAAS,eAAY;AACnB,SAAO,IAAI,MAAM,CAAC,EACf,KAAK,CAAC,EACN,IAAI,MAAM,KAAK,MAAM,KAAK,OAAM,IAAK,OAAO,gBAAgB,EAAE,SAAS,EAAE,CAAC,EAC1E,KAAK,GAAG;AACb;;;AC3mBO,IAAM,aAAN,MAAiB;AAAA,EACpB,YAAqB,QAAgC,QAAqB;AAArD;AAAgC;AAAA,EAAuB;AAChF;;;ACIO,IAAM,kBAAN,MAAsB;AAAA,EACzB,YAAqB,QAAgC,QAAqB;AAArD;AAAgC;AAAA,EAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5E,MAAM,UACF,GACA,GACA,SACoC;AACpC,QAAI,EAAE,YAAY,UAAU,EAAE,YAAY,QAAQ;AAC9C,YAAM,cAAc,MAAM,KAAK;AAC/B,aAAO,MAAM,YAAY;AAAA,QAAoB,EAAE;AAAA,QAC3C,EAAE;AAAA,QACF,EAAE;AAAA,QACF,EAAE;AAAA,QACF,EAAE;AAAA,QACF,EAAE;AAAA,QACF;AAAA,MAAO;AAAA,IACf;AACA,WAAO;AAAA,EACX;AAEJ;;;ACrBO,SAAS,wBAAwB,OAAmD,OAA+E;AACtK,QAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,KAAK,MAAM,KAAK;AAC3D,QAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,KAAK,MAAM,KAAK;AAE3D,QAAM,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC;AAChD,QAAM,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,OAAO,MAAM,KAAK;AAEjE,MAAI,OAAO,GAAG;AACV,WAAO;AAAA,EACX;AAEA,QAAM,KAAK,SAAS,CAAC,IAAI,KAAK,CAAC,IAAI,SAAS,CAAC,IAAI,KAAK,CAAC,KAAK;AAC5D,QAAM,KAAK,SAAS,CAAC,IAAI,KAAK,CAAC,IAAI,SAAS,CAAC,IAAI,KAAK,CAAC,KAAK;AAE5D,MAAK,KAAK,KAAK,KAAK,MAAO,KAAK,KAAK,KAAK,IAAI;AAC1C,WAAO;AAAA,MACH,GAAG,aAAK,YAAY,aAAK,OAAO,GAAG,MAAM,OAAO,MAAM,CAAC;AAAA,MAAG;AAAA,MAAG;AAAA,IACjE;AAAA,EACJ;AAEA,SAAO;AACX;;;ACvBA,IAAM,uBAAuB;AAOtB,IAAM,aAAN,cAAyB,WAAW;AAAA,EAEvC,YAAqB,QAAgC,QAA8B,aAA0B;AACzG,UAAM,QAAQ,MAAM;AADH;AAAgC;AAA8B;AAAA,EAEnF;AAAA;AAAA,EAGA,MAAM,kBACF,QACA,SAC+B;AAC/B,UAAM,cAAc,MAAM,KAAK;AAE/B,YAAQ,OAAO,UAAU;AAAA,MACrB,KAAK,QAAQ;AACT,cAAM,aAAa,MAAM,YAAY;AAAA,UACjC,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA,eAAO;AAAA,UACH,MAAM;AAAA,UAAQ,OAAO,CAAC,EAAE,YAAY,YAAY,UAAU,QAAQ,CAAC;AAAA,QACvE;AAAA,MACJ;AAAA,MACA,KAAK,QAAQ;AACT,cAAM,cAAc,MAAM,YAAY;AAAA,UAClC,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,MACA,KAAK,UAAU;AACX,eAAO;AAAA,UACH,MAAM;AAAA,UACN,OAAO,CAAC,EAAE,YAAY,CAAC,OAAO,SAAiB,GAAG,UAAU,SAAS,CAAC;AAAA,QAC1E;AAAA,MACJ;AAAA,MACA,KAAK,gBAAgB;AACjB,cAAM,aAAa,MAAM,YAAY;AAAA,UACjC,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AACA,eAAO;AAAA,UACH,MAAM;AAAA,UACN,OAAO,CAAC,EAAE,YAAY,YAAY,UAAU,QAAQ,CAAC;AAAA,QACzD;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,aAA0B;AACnC,mBAAe,KAAK,aAAa,YAAY,OAAO;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,QAA0H;AACpI,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,EAAE,OAAO,QAAQ,OAAO,IAAI;AAClC,UAAM,EAAE,QAAQ,QAAQ,IAAI,gBAAgB,OAAO,QAAQ,MAAM;AAEjE,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MAAO;AAAA,MACP,OAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,QAAsD;AACjE,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,EAAE,OAAO,QAAQ,OAAO,IAAI;AAClC,UAAM,EAAE,QAAQ,QAAQ,IAAI,gBAAgB,OAAO,QAAQ,MAAM;AACjE,WAAO,OACF,IAAI,CAAC,MAAM,aAAK,cAAc,aAAK,OAAO,GAAG,GAAG,MAAM,CAAC,EACvD,IAAI,CAAC,GAAG,GAAG,QAAQ;AAChB,UAAI,OAAO,SAAS,gBAAgB;AAChC,YAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,KAAK;AACxB,YAAE,CAAC,IAAI;AAAA,QACX;AAAA,MACJ;AAEA,UAAI,EAAE,CAAC,IAAI,sBAAsB;AAC7B,eAAO;AAAA,MACX;AAEA,aAAO,SAAS,SAAS,OAAO,QAAQ,CAAC;AAAA,IAC7C,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,cACF,QACA,SACoB;AACpB,QAAI,cAA4B,CAAC;AACjC,QAAI,OAA0D;AAC9D,QAAI,OAAO,YAAY,WAAW;AAC9B,oBAAc,MAAM,KAAK,OAAO,QAAQ,qBAAqB,MAA8B;AAC3F,aAAO;AAAA,IACX,WACS,OAAO,YAAY,iBAAiB;AACzC,oBAAc,CAAC,oBAAoB,MAA8B,CAAC;AAClE,aAAO;AAAA,IACX,OACK;AACD,YAAM,aAAa,MAAM,KAAK,kBAAkB,QAAyB,OAAO;AAChF,UAAI,YAAY;AACZ,sBAAc,CAAC,UAAU;AAAA,MAC7B;AACA,aAAO;AAAA,IACX;AAEA,QAAI,aAAa;AACb,qBAAe,KAAK,aAAa,WAAW;AAAA,IAChD;AACA,WAAO;AAAA,MACH;AAAA,MAAM,SAAS;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBAAwB,QAAwB,SAAS,MAAM,SAAS,MAAM,qBAAqB,OAAgC;AAC/H,QAAI,OAAO,WAAW,GAAG;AACrB,aAAO;AAAA,IACX;AAEA,UAAM,QAAoB,CAAC;AAC3B,QAAI,OAAO,WAAW,GAAG;AACrB,YAAM,KAAK,EAAE,UAAU,UAAU,YAAY,OAAO,CAAC;AAAA,IACzD,OAAO;AACH,UAAI,OAA+B;AACnC,UAAI,oBAAoB;AACpB,cAAM,SAAmB,CAAC;AAC1B,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACpC,iBAAO,KAAK,aAAK,KAAK,OAAO,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AAAA,QAC9D;AACA,eAAO,CAAC,MAAM;AAAA,MAClB;AACA,YAAM,KAAK,EAAE,UAAU,SAAS,WAAW,SAAS,YAAY,QAAQ,KAAK,CAAC;AAAA,IAClF;AAEA,UAAM,cAA4B,CAAC;AACnC,gBAAY,KAAK,EAAE,MAAM,WAAW,MAAM,CAAC;AAC3C,QAAI,QAAQ;AACR,YAAM,SAAS,SAAS,OAAO,SAAS,OAAO,SAAS;AACxD,eAAS,IAAI,SAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC1C,cAAM,UAAU,OAAO,CAAC;AACxB,cAAM,WAAW,MAAM,IAAI,OAAO,SAAS,IAAI,IAAI;AACnD,cAAM,SAAS,MAAM,OAAO,SAAS,IAAI,IAAI,IAAI;AACjD,cAAM,QAAQ,OAAO,QAAQ;AAC7B,cAAM,MAAM,OAAO,MAAM;AACzB,cAAM,QAAQ,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,QAAQ,GAAG,OAAO;AAC/D,cAAM,QAAQ,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,MAAM,GAAG,OAAO;AAC7D,cAAMC,SAAQ,aAAK,MAAM,OAAO,KAAK,KAAK,MAAM,KAAK;AACrD,YAAIA,SAAQ,KAAK;AACb,gBAAM,KAAK,EAAE,MAAMA,OAAM,QAAQ,CAAC,IAAI,QAAK,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,OAAO,GAAG,aAAK,MAAM,KAAK,GAAG,aAAK,MAAM,GAAG,CAAC,EAAE,CAAC;AAAA,QACzI;AAAA,MACJ;AAAA,IACJ;AAEA,mBAAe,KAAK,aAAa,WAAW;AAC5C,WAAO,EAAE,MAAM,SAAS,SAAS,YAAY;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,QAAwB,MAAuC;AACvE,QAAI,OAAO,WAAW,GAAG;AACrB,aAAO;AAAA,IACX;AACA,UAAM,QAAoB,CAAC;AAC3B,UAAM,KAAK,EAAE,UAAU,QAAQ,YAAY,QAAQ,KAAK,CAAC;AAEzD,UAAM,cAA4B,CAAC;AACnC,gBAAY,KAAK,EAAE,MAAM,WAAW,MAAM,CAAC;AAE3C,mBAAe,KAAK,aAAa,WAAW;AAC5C,WAAO,EAAE,MAAM,SAAS,SAAS,YAAY;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,SAAwB,MAA+D;AACrG,QAAI,QAAQ,SAAS,GAAG;AACpB,YAAM,gBAEA,CAAC;AACP,YAAM,cAAc,aAAK,OAAO;AAChC,cAAQ,QAAQ,SAAO;AACnB,YAAI,IAAI,QAAQ,SAAS;AACrB,cAAI,QAAQ,QAAQ,aAAW;AAC3B,gBAAI,QAAQ,QAAQ,aAAa,QAAQ,QAAQ,kBAAkB,QAAQ,QAAQ,QAAQ;AACvF,sBAAQ,MAAM,QAAQ,UAAQ;AAC1B,oBAAI,KAAK,eAAe,KAAK,YAAY,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,WAAW;AAC/G,2BAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,EAAE,GAAG;AAC7C,wBAAI,aAAK,OAAO,KAAK,WAAW,IAAI,CAAC,GAAG,WAAW,KAAK,aAAK,OAAO,KAAK,WAAW,CAAC,GAAG,WAAW,GAAG;AAClG;AAAA,oBACJ;AACA,0BAAM,QAAQ,EAAE,OAAO,KAAK,WAAW,IAAI,CAAC,GAAG,KAAK,KAAK,WAAW,CAAC,EAAE;AACvE,0BAAM,eAAe,wBAAwB,MAAM,KAAK;AACxD,wBAAI,cAAc;AACd,4BAAM,MAAM,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,WAAW,CAAC,GAAG,KAAK,WAAW,IAAI,CAAC,CAAC;AAC9E,oCAAc,KAAK,EAAE,cAAc,SAAS,aAAK,YAAY,aAAK,OAAO,GAAG,KAAK,WAAW,IAAI,CAAC,GAAG,KAAK,aAAa,CAAC,EAAE,CAAC;AAAA,oBAC9H;AAAA,kBACJ;AAAA,gBACJ;AAAA,cACJ,CAAC;AAAA,YACL;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AACD,UAAI,cAAc,SAAS,GAAG;AAC1B,sBAAc,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,IAAI,EAAE,aAAa,CAAC;AAChE,cAAM,aAA6B,CAAC,aAAK,OAAO,CAAC;AACjD,cAAM,aAA6B,CAAC,KAAK,KAAK;AAC9C,cAAM,SAAmB,CAAC,EAAE;AAC5B,sBAAc,QAAQ,kBAAgB;AAClC,qBAAW,KAAK,aAAa,aAAa,CAAC;AAAA,QAC/C,CAAC;AACD,mBAAW,KAAK,KAAK,GAAG;AACxB,iBAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,EAAE,GAAG;AAC3C,cAAI,KAAK,GAAG;AACR,mBAAO,KAAK,aAAK,KAAK,cAAc,CAAC,EAAE,SAAS,cAAc,IAAI,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;AAAA,UAC5F;AACA,qBAAW,KAAK,cAAc,CAAC,EAAE,OAAO;AAAA,QAC5C;AACA,mBAAW,KAAK,aAAK,OAAO,CAAC;AAC7B,eAAO,KAAK,EAAE;AAEd,cAAMC,SAAoB,CAAC;AAC3B,QAAAA,OAAM,KAAK,EAAE,UAAU,SAAS,YAAY,YAAY,MAAM,CAAC,MAAM,EAAE,CAAC;AAExE,cAAMC,eAA4B,CAAC;AACnC,QAAAA,aAAY,KAAK,EAAE,MAAM,WAAW,OAAAD,OAAM,CAAC;AAC3C,eAAO,EAAE,MAAM,SAAS,SAASC,aAAY;AAAA,MACjD;AAAA,IAEJ;AACA,UAAM,QAAoB,CAAC;AAC3B,UAAM,KAAK,EAAE,UAAU,SAAS,YAAY,CAAC,GAAG,YAAY,CAAC,KAAK,OAAO,KAAK,GAAG,EAAE,CAAC;AAEpF,UAAM,cAA4B,CAAC;AACnC,gBAAY,KAAK,EAAE,MAAM,WAAW,MAAM,CAAC;AAC3C,WAAO,EAAE,MAAM,SAAS,SAAS,YAAY;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,QAAqB,MAAgH;AAC7I,QAAI,OAAO,QAAQ,SAAS;AACxB,aAAO;AAAA,IACX;AACA,UAAM,gBAEA,CAAC;AACP,UAAM,cAAc,aAAK,OAAO;AAChC,WAAO,QAAQ,QAAQ,aAAW;AAC9B,UAAI,QAAQ,QAAQ,aAAa,QAAQ,QAAQ,kBAAkB,QAAQ,QAAQ,QAAQ;AACvF,gBAAQ,MAAM,QAAQ,UAAQ;AAC1B,cAAI,KAAK,eAAe,KAAK,YAAY,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,WAAW;AAC/G,qBAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,EAAE,GAAG;AAC7C,kBAAI,aAAK,OAAO,KAAK,WAAW,IAAI,CAAC,GAAG,WAAW,KAAK,aAAK,OAAO,KAAK,WAAW,CAAC,GAAG,WAAW,GAAG;AAClG;AAAA,cACJ;AACA,oBAAM,QAAQ,EAAE,OAAO,KAAK,WAAW,IAAI,CAAC,GAAG,KAAK,KAAK,WAAW,CAAC,EAAE;AACvE,oBAAM,eAAe,wBAAwB,MAAM,KAAK;AACxD,kBAAI,cAAc;AACd,8BAAc,KAAK,EAAE,cAAc,MAAM,MAAM,CAAC;AAAA,cACpD;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AACD,QAAI,cAAc,SAAS,GAAG;AAC1B,oBAAc,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,IAAI,EAAE,aAAa,CAAC;AAChE,YAAMC,QAAO,cAAc,CAAC,EAAE;AAC9B,YAAM,KAAKA,MAAK,IAAI,CAAC,IAAIA,MAAK,MAAM,CAAC;AACrC,YAAM,KAAKA,MAAK,IAAI,CAAC,IAAIA,MAAK,MAAM,CAAC;AACrC,YAAM,SAAS,aAAK,WAAW,CAAC,IAAI,EAAE;AACtC,mBAAK,UAAU,QAAQ,MAAM;AAC7B,aAAO;AAAA,QACH;AAAA,QAAQ,UAAU,cAAc,CAAC,EAAE,aAAa;AAAA,MACpD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAEJ;AAIA,SAAS,gBAAgB,OAAe,QAAgB,QAAiD;AACrG,QAAM,SAAS,aAAK;AAAA,IAChB,aAAK,OAAO;AAAA,IACZ,OAAO;AAAA,IACP,OAAO;AAAA,EACX;AACA,eAAK,OAAO,QAAQ,MAAM;AAC1B,MAAI,OAAO,QAAQ,WAAW;AAC1B,UAAM,UAAU,aAAK;AAAA,MACjB,aAAK,OAAO;AAAA,MACZ,eAAS,SAAS,OAAO,GAAG;AAAA,MAC5B,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AACA,WAAO,EAAE,QAAQ,QAAQ;AAAA,EAC7B,OAAO;AACH,UAAM,SAAS,QAAQ;AACvB,UAAM,aAAa,OAAO,MAAM;AAChC,UAAM,YAAY,aAAa;AAC/B,UAAM,UAAU,aAAK;AAAA,MACjB,aAAK,OAAO;AAAA,MACZ,CAAC;AAAA,MACD;AAAA,MACA,CAAC;AAAA,MACD;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AACA,WAAO,EAAE,QAAQ,QAAQ;AAAA,EAC7B;AACJ;AAEA,SAAS,yBACL,QACA,QACA,SACA,MACA,OACA,QACAC,QACwH;AACxH,QAAM,OAAO,CAAC,GAAS,OAAa;AAChC,UAAM,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,IAAI,CAAC;AACvC,iBAAK,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;AACtC,WAAO,aAAK,IAAI,GAAG,GAAG,CAAC;AAAA,EAC3B;AAEA,QAAM,WAA2B,CAAC;AAClC,QAAM,iBAA2B,CAAC;AAClC,QAAM,eAAyB,CAAC;AAChC,QAAM,KAAK,OAAO,IAAI,CAAC,MAAM,aAAK,cAAc,aAAK,OAAO,GAAG,GAAG,MAAM,CAAC;AACzE,MAAIA,QAAO;AACP,eAAW,KAAK,IAAI;AAChB,UAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,KAAK;AACxB,UAAE,CAAC,IAAI;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACA,QAAM,eAAe,GAAG,OAAO,CAAC,MAAM,MAAM,MAAM;AAC9C,QAAI,KAAK,CAAC,IAAI,sBAAsB;AAChC,UAAI,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG;AAC7B,uBAAe,KAAK,CAAC;AACrB,eAAO;AAAA,MACX;AACA,YAAM,KAAK,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI;AAC/B,YAAMC,MAAK,SAAS,SAAS,OAAO,QAAQ,EAAE;AAC9C,eAAS,KAAKA,GAAE;AAChB,aAAO,KAAK,OAAO,CAACA,GAAE,CAAC;AAAA,IAC3B;AACA,UAAM,KAAK,SAAS,SAAS,OAAO,QAAQ,IAAI;AAChD,aAAS,KAAK,EAAE;AAChB,QAAI,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,sBAAsB;AAChD,YAAM,KAAK,KAAK,MAAM,GAAG,IAAI,CAAC,CAAC;AAC/B,YAAM,MAAM,SAAS,SAAS,OAAO,QAAQ,EAAE;AAC/C,mBAAa,KAAK,CAAC;AACnB,aAAO,KAAK,OAAO,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC;AAAA,IAClC;AACA,WAAO,KAAK,OAAO,CAAC,EAAE,CAAC;AAAA,EAC3B,GAAG,CAAC,CAAmB;AACvB,MAAI,aAAa,QAAQ;AACrB,WAAO,EAAE,cAAc,UAAU,gBAAgB,aAAa;AAAA,EAClE;AACA,SAAO;AACX;AAEA,SAAS,SAAS,SAAe,OAAe,QAAgB,GAA+B;AAC3F,QAAM,KAAK,aAAK;AAAA,IACZ,aAAK,OAAO;AAAA,IACZ,aAAK,WAAW,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;AAAA,IACnC;AAAA,EACJ;AAEA,QAAM,KAAK,aAAK;AAAA,IACZ,KAAK,OAAQ,GAAG,CAAC,IAAI,MAAO,GAAG,CAAC,IAAI,OAAO,KAAK;AAAA,IAChD,KAAK,OAAO,MAAO,GAAG,CAAC,IAAI,MAAO,GAAG,CAAC,KAAK,MAAM;AAAA,EACrD;AAEA,SAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,MAAM,GAAG,KAAK,OAAO,SAAS,GAAG,CAAC,IAAI,KAAK,aAAK,WAAW,MAAM,IAAI;AAC1G;AAEA,SAAS,eAAe,SAAsB,aAA2B;AACrE,QAAM,EAAE,OAAO,QAAQ,OAAO,IAAI;AAClC,QAAM,EAAE,QAAQ,QAAQ,IAAI,gBAAgB,OAAO,QAAQ,MAAM;AAEjE,aAAW,cAAc,aAAa;AAClC,eAAW,YAAY,WAAW,OAAO;AACrC,YAAM,SAAS;AAAA,QACX,SAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA,OAAO,QAAQ;AAAA,MACnB;AACA,UAAI,QAAQ;AACR,cAAM,EAAE,cAAc,gBAAgB,aAAa,IAAI;AACvD,iBAAS,aAAa;AACtB,YAAK,eAAe,SAAS,KAAK,aAAa,SAAS,GAAI;AACxD,cAAI,SAAS,QAAQ,MAAM,QAAQ,SAAS,IAAI,GAAG;AAC/C,qBAAS,KAAK,CAAC,IAAI,SAAS,KAAK,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,MAAM;AAC1D,kBAAI,aAAa,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AACtG,uBAAO,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC;AAAA,cACjC;AACA,kBAAI,eAAe,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AACxG,uBAAO;AAAA,cACX,OAAO;AACH,uBAAO,KAAK,OAAO,IAAI;AAAA,cAC3B;AAAA,YACJ,GAAG,CAAC,CAAa;AAAA,UACrB;AACA,gBAAM,YAA4B,CAAC;AACnC,mBAAS,WAAW,QAAQ,CAAC,GAAG,MAAM;AAClC,gBAAI,aAAa,KAAK,CAACC,OAAMA,MAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAACA,OAAMA,MAAK,IAAI,CAAC,KAAK,QAAW;AACtG,wBAAU,OAAO,CAAC,aAAK,OAAO,GAAG,CAAC,CAAC;AAAA,YACvC,WACS,eAAe,KAAK,CAACA,OAAMA,MAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAACA,OAAMA,MAAK,IAAI,CAAC,KAAK,QAAW;AAC7G,qBAAO,UAAU,KAAK,CAAC;AAAA,YAC3B;AACA,qBAAS,aAAa;AAAA,UAC1B,CAAC;AAAA,QACL;AAAA,MACJ;AACA,UAAI,SAAS,OAAO;AAChB,iBAAS,MAAM,QAAQ,CAAC,UAAU,MAAM;AACpC,gBAAM,aAAa;AAAA,YACf,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA,OAAO,QAAQ;AAAA,UACnB;AACA,cAAI,YAAY;AACZ,kBAAM,EAAE,cAAc,gBAAgB,aAAa,IAAI;AACvD,qBAAS,aAAa;AACtB,iBAAK,eAAe,SAAS,KAAK,aAAa,SAAS,MAAM,SAAS,QAAQ,MAAM,QAAQ,SAAS,IAAI,GAAG;AACzG,uBAAS,KAAK,IAAI,CAAC,IAAI,SAAS,KAAK,IAAI,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,MAAM;AAClE,oBAAI,aAAa,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AACtG,yBAAO,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC;AAAA,gBACjC;AACA,oBAAI,eAAe,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AACxG,yBAAO;AAAA,gBACX,OAAO;AACH,yBAAO,KAAK,OAAO,IAAI;AAAA,gBAC3B;AAAA,cACJ,GAAG,CAAC,CAAa;AAAA,YACrB;AAAA,UAEJ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AACJ;AAGA,SAAS,oBAAoB,QAA0C;AACnE,QAAM,QAAoB,CAAC;AAC3B,MAAI,OAAO,cAAc,SAAS,OAAO,cAAc,OAAO;AAC1D,UAAM,gBAAgB,CAAC,OAAO,cAAc,OAAO,OAAO,cAAc,KAAK;AAC7E,UAAM,OAAO,cAAc,CAAC,EAAE,CAAC,IAAI,cAAc,CAAC,EAAE,CAAC;AACrD,QAAI,MAAM,OAAO,CAAC,cAAc,CAAC,GAAG,cAAc,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,cAAc,CAAC,CAAC;AAC3F,UAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACnD,UAAM,aAAa,aAAK,IAAI,IAAI;AAChC,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,WAAW,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,cAAc,CAAC,CAAC,GAAG,aAAK,MAAM,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;AAEvJ,UAAM;AAAA,MACF,IAAI,CAAC;AAAA,MACL,aAAK,WAAW,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;AAAA,MAC/C,aAAK,WAAW,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;AAAA,MAC/C,IAAI,CAAC;AAAA,IACT;AAEA,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,KAAK,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,CAAC,CAAC,GAAG,aAAK,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;AAC1I,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,KAAK,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,CAAC,CAAC,GAAG,aAAK,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;AAC1I,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,KAAK,IAAI,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,CAAC,CAAC,GAAG,aAAK,MAAM,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;AAG1I,UAAM,aAAa,aAAK,IAAI,aAAK,WAAW,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;AAC7D,UAAM,QAAQ,aAAK,WAAW,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;AAClF,UAAM,QAAQ,aAAK,WAAW,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;AAClF,UAAM,KAAK,EAAE,MAAM,YAAY,MAAM,WAAW,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,OAAO,KAAK,EAAE,CAAC;AAG3G,UAAM,QAAQ,aAAK,IAAI,aAAK,OAAO,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AACpD,UAAMC,SAAQ,aAAK,MAAM,MAAM,KAAK,KAAK,MAAM,KAAK;AACpD,QAAIA,SAAQ,KAAK;AACb,YAAM,QAAQ,OAAO,aAAK,MAAM,cAAc,CAAC,CAAC,IAAI,aAAK,MAAM,cAAc,CAAC,CAAC;AAC/E,YAAM,MAAM,aAAK,MAAM,IAAI,CAAC,CAAC;AAC7B,YAAM,KAAK,EAAE,MAAM,WAAW,MAAMA,OAAM,QAAQ,CAAC,IAAI,QAAK,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,CAAC,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC;AAAA,IACjI;AAEA,UAAM,SAAS,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,KAAK;AACnD,UAAM,UAAU,aAAK,MAAM,MAAM,MAAM,KAAK,MAAM,KAAK;AACvD,QAAI,UAAU,KAAK;AACf,YAAM,QAAQ,OAAO,aAAK,MAAM,cAAc,CAAC,CAAC,IAAI,aAAK,MAAM,cAAc,CAAC,CAAC;AAC/E,YAAM,KAAK,EAAE,MAAM,YAAY,MAAM,QAAQ,QAAQ,CAAC,IAAI,QAAK,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,KAAK,GAAG,OAAO,aAAK,MAAM,KAAK,CAAC,EAAE,CAAC;AAAA,IACjJ;AAAA,EACJ;AAEA,MAAI,OAAO,OAAO;AACd,UAAM,KAAK;AAAA,MACP,MAAM;AAAA,MAAkB,OAAO,OAAO,MAAM,WAAW,MAAM,KAAK,KAAK,QAAQ,CAAC,IAAI;AAAA,MAAK,UAAU;AAAA,MACnG,YAAY,CAAC,aAAK,MAAM,OAAO,MAAM,cAAc,CAAC,CAAC,GAAG,aAAK,MAAM,OAAO,MAAM,cAAc,CAAC,CAAC,GAAG,aAAK,MAAM,OAAO,MAAM,cAAc,CAAC,CAAC,CAAC;AAAA,IAChJ,CAAC;AACD,QAAI,OAAO,MAAM,gBAAgB;AAC7B,YAAM,KAAK,EAAE,MAAM,uBAAuB,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,OAAO,MAAM,eAAe,CAAC,CAAC,GAAG,aAAK,MAAM,OAAO,MAAM,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC;AAAA,IACvK;AAAA,EACJ;AAEA,MAAI,OAAO,cAAc;AACrB,UAAMC,QAAO,aAAK,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,aAAa,CAAC,GAAG,OAAO,aAAa,CAAC,CAAC,CAAC;AAC7F,UAAM,KAAK,EAAE,MAAM,UAAU,MAAMA,MAAK,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,OAAO,aAAa,CAAC,CAAC,GAAG,aAAK,MAAM,OAAO,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;AAAA,EACjK;AACA,SAAO,EAAE,OAAO,MAAM,UAAU;AACpC;;;ACnkBO,IAAM,eAAN,cAA2B,WAAW;AAAA;AAAA;AAAA;AAAA,EAIzC,MAAc,uBACV,IACA,QACA,SACF;AACE,UAAM,cAAc,MAAM,KAAK;AAC/B,QAAI,kBAA+C;AACnD,QAAI,gBACA;AACJ,QAAI,OAAkD;AACtD,YAAQ,OAAO,UAAU;AAAA,MACrB,KAAK,QAAQ;AACT,eAAO;AACP,0BAAkB,MAAM,YAAY;AAAA,UAChC;AAAA,UACA,OAAO;AAAA,UACP;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MACA,KAAK,QAAQ;AACT,cAAM,eAAe,MAAM,YAAY;AAAA,UACnC;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,QACJ;AACA,YAAI,cAAc;AACd,iBAAO;AACP,4BAAkB,aAAa,CAAC;AAChC,0BAAgB;AAAA,YACZ,OAAO,aAAa,CAAC,EAAE,CAAC;AAAA,YACxB,KAAK,aAAK;AAAA,cACN,aAAK,OAAO;AAAA,cACZ,aAAK;AAAA,gBACD,aAAK,OAAO;AAAA,gBACZ,aAAa,CAAC,EAAE,CAAC;AAAA,gBACjB,aAAa,CAAC,EAAE,CAAC;AAAA,cACrB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,MACA,KAAK,gBAAgB;AACjB,eAAO;AACP,0BAAkB,MAAM,YAAY;AAAA,UAChC;AAAA,UACA,OAAO;AAAA,UACP;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,mBAAmB,MAAM;AACzB,qBAAe,gBACX,GACiC;AACjC,YAAI,eAAe;AACf,gBAAM,QACF,IAAI,IAAI,IAAI,IAAI,gBAAiB,MAAM,gBAAiB,MAAM;AAClE,iBAAO;AAAA,YACH,UAAU,aAAK;AAAA,cACX,aAAK,OAAO;AAAA,cACZ,cAAc;AAAA,cACd,cAAc;AAAA,cACd;AAAA,YACJ;AAAA,YACA,QAAQ,aAAK,OAAO,aAAK,OAAO,GAAG,cAAc,GAAG;AAAA,UACxD;AAAA,QACJ;AACA,cAAM,aAAa,MAAM,YAAY;AAAA,UACjC;AAAA,UACA,OAAQ;AAAA,UACR,OAAQ;AAAA,UACR;AAAA,UACA,OAAQ,YAAY,SAAS,SAAS;AAAA,QAC1C;AACA,YAAI,YAAY;AACZ,iBAAO,EAAE,UAAU,WAAW,CAAC,GAAG,QAAQ,WAAW,CAAC,EAAE;AAAA,QAC5D;AAAA,MACJ;AACA,YAAM,iBAAgC;AAAA,QAClC,GAAG;AAAA,QACH,UAAU;AAAA,QACV,UAAU,OAAO;AAAA,MACrB;AACA,aAAO;AAAA,QACH;AAAA,QACA,KAAK,CAAC,EAAE;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,mCACF,IACA,mBACA,SAC2C;AAC3C,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,iBAAiB;AACtD,UAAM,eAAe,MAAM,YAAY,WAAW,IAAI,GAAG;AACzD,QAAI,aAAa,UAAU,aAAa,OAAO,YAAY,UAAU;AACjE,aAAO,KAAK,uBAAuB,IAAI,aAAa,QAAQ,OAAO;AAAA,IACvE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,wBACF,KACA,SAC2C;AAC3C,UAAM,cAAc,MAAM,KAAK;AAC/B,QAAI,IAAI,UAAU,GAAG;AACjB,YAAM,SAAS,MAAM,YAAY,uBAAuB,IAAI,CAAC,CAAC;AAC9D,UAAI,UAAU,UAAa,OAAO,YAAY,UAAU;AACpD,eAAO,KAAK,uBAAuB,IAAI,CAAC,GAAG,MAAM;AAAA,MACrD;AAAA,IACJ;AAEA,UAAM,YAAY,MAAM,YAAY,0BAA0B,KAAK,OAAO;AAC1E,QAAI,UAAU,SAAS,GAAG;AACtB,UAAIC,OAAM;AACV,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AACvC,QAAAA,QAAO,aAAK,KAAK,UAAU,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;AAAA,MACnD;AAEA,YAAM,kBAAkB,EAAE,OAAO,GAAG,KAAKA,KAAI;AAC7C,qBAAe,gBACX,GACiC;AACjC,cAAM,QACF,IAAI,IAAI,IAAI,IAAI,gBAAiB,MAAM,gBAAiB,MAAM;AAClE,YAAI,IAAI;AACR,YAAIC,UAAS;AACb,YAAI,aAAa;AACjB,YAAI,aAAa;AACjB,eAAO,IAAI,UAAU,QAAQ,EAAE,GAAG;AAC9B,uBAAa,aAAK,KAAK,UAAU,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;AACrD,UAAAA,WAAU;AACV,cAAIA,UAAS,OAAO;AAChB;AAAA,UACJ;AACA,uBAAaA;AAAA,QACjB;AACA,YAAI,KAAK,UAAU,QAAQ;AACvB,gBAAMC,OAAM,aAAK;AAAA,YACb,aAAK,OAAO;AAAA,YACZ,UAAU,IAAI,CAAC;AAAA,YACf,UAAU,IAAI,CAAC;AAAA,UACnB;AACA,iBAAO;AAAA,YACH,UAAU,UAAU,IAAI,CAAC;AAAA,YACzB,QAAQ,aAAK,UAAUA,MAAKA,IAAG;AAAA,UACnC;AAAA,QACJ;AAEA,cAAM,MAAM,aAAK;AAAA,UACb,aAAK,OAAO;AAAA,UACZ,UAAU,IAAI,CAAC;AAAA,UACf,UAAU,CAAC;AAAA,QACf;AAEA,eAAO;AAAA,UACH,UAAU,aAAK;AAAA,YACX,aAAK,OAAO;AAAA,YACZ,UAAU,IAAI,CAAC;AAAA,YACf,UAAU,CAAC;AAAA,aACV,QAAQ,cAAc;AAAA,UAC3B;AAAA,UACA,QAAQ,aAAK,UAAU,KAAK,GAAG;AAAA,QACnC;AAAA,MACJ;AAEA,aAAO;AAAA,QACH,MAAM,UAAU,UAAU,IAAI,aAAa;AAAA,QAC3C;AAAA,QACA,gBAAgB;AAAA,QAChB;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AACJ;;;AC/MO,IAAM,gBAAN,cAA4B,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ1C,MAAM,QAAQ,UAA6D;AACvE,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,iBAAiB,QAAQ;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,qBAAqB,QAAqD;AAC5E,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,qBAAqB,MAAM;AAAA,EAClD;AACJ;;;AChBO,IAAM,aAAN,cAAyB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWvC,MAAM,QACF,GACA,GACA,UACA,UACsC;AACtC,WAAO,IACD,MAAM,KAAK,YAAY,GAAG,GAAG,UAAU,QAAQ,IAC/C,MAAM,KAAK,cAAc,GAAG,QAAQ;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,kBACF,IACA,mBACA,WAC8E;AAC9E,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,iBAAiB;AACtD,WAAO,MAAM,YAAY,WAAW,IAAI,KAAK,SAAS;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,iCACF,IACA,mBACA,WAC0F;AAC1F,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,iBAAiB;AACtD,WAAO,MAAM,YAAY,0BAA0B,IAAI,KAAK,SAAS;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,qBACF,WACsC;AACtC,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,MAAM,YAAY,iBAAiB,SAAS;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBACF,GACA,WACiC;AACjC,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY;AAAA,MACf,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,MACF;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,aACF,QACA,IACkC;AAClC,QAAI,OAAO,YAAY,QAAQ;AAC3B,YAAM,cAAc,MAAM,KAAK;AAC/B,YAAM,UAAU,MAAM,YAAY;AAAA,QAC9B,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,MACJ;AACA,UAAI,WAAW,QAAW;AACtB,eAAO;AAAA,UACH,GAAG;AAAA,UACH,WAAW;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBACI,UACA,SACqD;AACrD,QAAI,SAAS,UAAU,GAAG;AACtB,aAAO,EAAE,MAAM,QAAW,SAAS,CAAC,EAAE;AAAA,IAC1C;AACA,QAAI,SAAS,UAAU,QAAQ,QAAQ;AACnC,YAAM,IAAI;AAAA,QACN;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,aAAa;AACjB,UAAM,UAAU;AAChB,UAAM,SAAS,QAAQ,CAAC;AACxB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACrC,UAAI,IAAI,KAAK,IAAI,aAAK,IAAI,QAAQ,QAAQ,CAAC,CAAC,CAAC,IAAI,SAAS;AACtD,qBAAa;AACb;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,YAAY;AACZ,UAAIC,SAAQ;AACZ,YAAMC,WAA0B,CAAC;AACjC,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAI,OAAO,SAAS,CAAC,EAAE,CAAC;AACxB,YAAI,OAAO,SAAS,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;AAC3D,YAAI,OAAO,SAAS,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;AAC3D,YAAI,OAAO,SAAS,CAAC,EAAE,CAAC;AAExB,QAAAD,UAAS,OAAO,OAAO;AACvB,QAAAA,UAAS,OAAO,OAAO;AACvB,QAAAC,SAAQ;AAAA,UACJ,aAAK,WAAW,SAAS,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;AAAA,QAClE;AAAA,MACJ;AACA,aAAO,EAAE,MAAM,KAAK,IAAID,MAAK,GAAG,SAAAC,SAAQ;AAAA,IAC5C;AAEA,UAAM,UAA0B,CAAC;AACjC,YAAQ,KAAK,SAAS,CAAC,CAAC;AACxB,UAAM,SAAS,SAAS,CAAC;AACzB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,YAAM,IAAI,SAAS,CAAC;AACpB,YAAM,KAAK,aAAK,SAAS,aAAK,OAAO,GAAG,GAAG,MAAM;AACjD,YAAMC,QAAO,aAAK,IAAI,IAAI,MAAM,IAAI;AACpC,cAAQ,KAAK,aAAK,YAAY,aAAK,OAAO,GAAG,GAAG,QAAQA,KAAI,CAAC;AAAA,IACjE;AAEA,QAAI,QAAQ,UAAU,GAAG;AACrB,aAAO,EAAE,MAAM,GAAG,QAAQ;AAAA,IAC9B;AACA,UAAM,OAAO,aAAK,SAAS,aAAK,OAAO,GAAG,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;AAChE,iBAAK,UAAU,MAAM,IAAI;AACzB,UAAM,OAAO,aAAK,MAAM,aAAK,OAAO,GAAG,QAAQ,IAAI;AACnD,iBAAK,UAAU,MAAM,IAAI;AAEzB,UAAM,YAA4B,CAAC;AACnC,cAAU,KAAK,aAAK,WAAW,GAAG,CAAC,CAAC;AACpC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,YAAM,IAAI,QAAQ,CAAC;AACnB,YAAM,KAAK,aAAK,SAAS,aAAK,OAAO,GAAG,GAAG,MAAM;AACjD,gBAAU,KAAK,aAAK,WAAW,aAAK,IAAI,IAAI,IAAI,GAAG,aAAK,IAAI,IAAI,IAAI,CAAC,CAAC;AAAA,IAC1E;AAEA,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,UAAI,OAAO,UAAU,CAAC,EAAE,CAAC;AACzB,UAAI,OAAO,UAAU,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;AAC5D,UAAI,OAAO,UAAU,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;AAC5D,UAAI,OAAO,UAAU,CAAC,EAAE,CAAC;AAEzB,eAAS,OAAO,OAAO;AACvB,eAAS,OAAO,OAAO;AAAA,IAC3B;AACA,WAAO,EAAE,MAAM,KAAK,IAAI,KAAK,GAAG,QAAQ;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,UAAkD;AAC/D,QAAI,cAAc;AAClB,QAAI,gBAA0B,CAAC;AAC/B,QAAI,SAAmB,CAAC;AACxB,QAAI,UAAoC;AACxC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACtC,YAAM,IAAI,aAAK,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;AAChD,qBAAe;AACf,oBAAc,KAAK,CAAC;AACpB,YAAM,MAAM,aAAK,IAAI,aAAK,OAAO,GAAG,SAAS,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC;AAChE,mBAAK,UAAU,KAAK,GAAG;AACvB,UAAI,WAAW,QAAW;AACtB,YAAIC,SAAQ,aAAK,MAAM,SAAS,GAAG;AACnC,YAAIA,SAAQ,KAAK,IAAI;AACjB,UAAAA,SAAQ,KAAK,KAAK,IAAIA;AAAA,QAC1B;AACA,eAAO,KAAKA,MAAK;AAAA,MACrB;AACA,mBAAK,OAAO,KAAK,GAAG;AACpB,gBAAU;AAAA,IACd;AAEA,WAAO,EAAE,aAAa,WAAW,UAAU,eAAe,OAAO;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,YACV,GACA,GACA,UACA,UACF;AACE,QAAI,EAAE,YAAY,UAAU;AACxB,UAAI,EAAE,YAAY,UAAU;AACxB,eAAO,KAAK,aAAa,EAAE,WAAmB,EAAE,SAAiB;AAAA,MACrE;AACA,aAAO,KAAK,eAAe,GAAG,EAAE,WAAmB,QAAQ;AAAA,IAC/D;AACA,QAAI,EAAE,YAAY,UAAU;AACxB,aAAO,KAAK,eAAe,GAAG,EAAE,WAAmB,QAAQ;AAAA,IAC/D;AAEA,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,WAAW;AAAA,MACb,EAAE,QAAQ,GAAG,UAAU,SAAS;AAAA,MAChC,EAAE,QAAQ,GAAG,UAAU,SAAS;AAAA,IACpC;AACA,aAAS,KAAK,CAACC,IAAGC,OAAMD,GAAE,OAAO,SAAS,cAAcC,GAAE,OAAO,QAAQ,CAAC;AAC1E,UAAM,CAAC,GAAG,CAAC,IAAI;AACf,UAAM,YAAY,GAAG,EAAE,OAAO,QAAQ,IAAI,EAAE,OAAO,QAAQ;AAC3D,YAAQ,WAAW;AAAA,MACf,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,QACb;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,QACb;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE;AAAA,QACN;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,QACN;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE;AAAA,QACN;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,QACN;AAAA,IACR;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,cAAc,GAAkB,SAA2B;AACrE,UAAM,cAAc,MAAM,KAAK;AAC/B,YAAQ,EAAE,UAAU;AAAA,MAChB,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACJ;AAAA,IACR;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,eACF,GACA,GACA,SACyC;AACzC,UAAM,QAAQ,aAAK,KAAK,aAAK,OAAO,GAAG,CAAC;AACxC,QAAI,EAAE,YAAY,UAAU;AACxB,aAAO,KAAK,aAAa,EAAE,WAAmB,KAAK;AAAA,IACvD;AACA,UAAM,cAAc,MAAM,KAAK;AAC/B,YAAQ,EAAE,UAAU;AAAA,MAChB,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO,MAAM,YAAY;AAAA,UACrB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,UACA;AAAA,QACJ;AAAA,IACR;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,GAAiB,GAAuC;AACjE,UAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,GAAG,CAAC;AACzC,WAAO;AAAA,MACH,UAAU;AAAA,MACV,UAAU,aAAK,IAAI,IAAI;AAAA,MACvB,WAAW,KAAK,IAAI,KAAK,CAAC,CAAC;AAAA,MAC3B,WAAW,KAAK,IAAI,KAAK,CAAC,CAAC;AAAA,MAC3B,WAAW,KAAK,IAAI,KAAK,CAAC,CAAC;AAAA,MAC3B,cAAc,EAAE,OAAO,aAAK,KAAK,aAAK,OAAO,GAAG,CAAC,EAAE;AAAA,MACnD,cAAc,EAAE,OAAO,aAAK,KAAK,aAAK,OAAO,GAAG,CAAC,EAAE;AAAA,IACvD;AAAA,EACJ;AACJ;;;ACxZO,IAAM,gBAAN,cAA4B,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU1C,MAAM,eACF,QACA,SAC4B;AAC5B,UAAM,cAAc,MAAM,KAAK;AAC/B,YAAQ,OAAO,UAAU;AAAA,MACrB,KAAK,gBAAgB;AACjB,eAAO,MAAM,YAAY;AAAA,UACrB,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,MACA,KAAK,QAAQ;AACT,eAAO,MAAM,YAAY;AAAA,UACrB,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,oBACF,UACA,SAC4B;AAC5B,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,UAAU,MAAM,YAAY,mBAAmB,UAAU,OAAO;AACtE,QAAI,OAAO,YAAY,UAAU;AAC7B,YAAM,IAAI,aAAa,iBAAiB,OAAO;AAAA,IACnD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,WAA6B;AACjC,UAAM,WACF,UAAU,cAAc,UAAU,cAAc,SAAS,CAAC,EAAE,CAAC;AACjE,UAAM,WAA2B,CAAC;AAClC,aAAS,IAAI,UAAU,cAAc,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC1D,YAAM,IAAI,UAAU,cAAc,CAAC;AACnC,eAAS,KAAK,aAAK,YAAY,EAAE,CAAC,IAAI,YAAY,IAAI,EAAE,CAAC,CAAC,CAAC;AAAA,IAC/D;AACA,WAAO;AAAA,MACH,eAAe;AAAA,MACf,QAAQ,UAAU,OAAO,QAAQ;AAAA,MACjC,gBAAgB,UAAU;AAAA,MAC1B,cAAc,UAAU;AAAA,MACxB,KAAK,UAAU;AAAA,MACf,QAAQ,UAAU;AAAA,IACtB;AAAA,EACJ;AACJ;;;AC3EO,IAAM,aAAN,cAAyB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKvC,MAAM,WAAW,QAAmD;AAChE,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,eAAe,MAAM;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,cAAc,QAAiD;AACjE,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,kBAAkB,MAAM;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,iBAAiB,SAAmB,eAAoD;AAC1F,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,WAAW,MAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,QAAQ,YAAY,gBAAgB,KAAK,aAAa,CAAC,CAAC;AACxG,UAAM,IAAI,SAAS,OAAO,CAAAC,OAAKA,MAAK,MAAS;AAC7C,WAAO;AAAA,EACX;AAEJ;;;ACrBO,IAAMC,eAAN,MAAkB;AAAA;AAAA,EAoCrB,YAAqB,QAAuB,SAAoD,aAA0B;AAArG;AAA2E;AAC5F,SAAK,UAAU;AACf,SAAK,YAAY,IAAI,gBAAgB,QAAQ,IAAI;AACjD,SAAK,OAAO,IAAI,WAAW,QAAQ,MAAM,WAAW;AACpD,SAAK,aAAa,IAAI,aAAa,QAAQ,IAAI;AAC/C,SAAK,UAAU,IAAI,cAAc,QAAQ,IAAI;AAC7C,SAAK,OAAO,IAAI,WAAW,QAAQ,IAAI;AACvC,SAAK,UAAU,IAAI,cAAc,QAAQ,IAAI;AAC7C,SAAK,OAAO,IAAI,WAAW,QAAQ,IAAI;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAxCA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA;AAAA;AAAA,EAIA;AAAA;AAAA,EAIQ;AAAA,EAcR,MAAM,UAAU,UAAe;AAC3B,UAAM,cAAc,MAAM,KAAK;AAC/B,gBAAY,UAAU,SAAS,SAAS,CAAC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAyB;AAC3B,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,SAAS;AACT,YAAM,EAAE,SAAAC,SAAQ,IAAI;AACpB,YAAMA,SAAQ,QAAQ,UAAU;AAChC,MAAAA,SAAQ,QAAgB,YAAY,EAAE;AAAA,IAC1C;AAAA,EACJ;AACJ;AAGA,SAAS,cAAc,KAAa;AAChC,QAAM,gBAAgB,IAAI,OAAO,KAAK,EAAE,MAAM,UAAU,MAAM,UAAU,CAAC;AACzE,QAAM,iBAAyB,KAAc,aAAa;AAC1D,QAAM,UAAU;AAAA,IACZ,SAAS;AAAA,MACL,QAAQ;AAAA,MACR,SAAS;AAAA,IACb;AAAA,EACJ;AACA,iBAAe,WAAW,GAAG;AAC7B,SAAO;AACX;AAKA,eAAsB,kBAAkB,aAA0B,SAAyB;AACvF,QAAM,UAAU,cAAc,QAAQ,cAAc,SAAS,CAAC;AAC9D,QAAM,OAAO,MAAM,QAAQ,QAAQ,QAAQ,kBAAkB;AAC7D,QAAM,cAAc,IAAID,aAAY,MAAM,SAAS,WAAW;AAC9D,QAAM,KAAK,KAAK,QAAQ,SAAS;AACjC,SAAO;AACX;AAKO,IAAM,eAAN,cAA2B,MAAM;AAAA,EACpC,YAAqB,MAAc,SAAiB;AAChD,UAAM,OAAO;AADI;AAAA,EAErB;AACJ;;;AChEA,eAAsB,uBAAuB,KAAgD;AACzF,QAAM,EAAE,QAAQ,IAAI;AACpB,QAAM,gBAAgB,aAAa,IAAI,iBAAiB,sBAAsB,OAAO;AACrF,QAAM,sBAAsBE,aAAY,IAAI,aAAa,gBAAgB,OAAO;AAChF,QAAM,YAAY,MAAM;AACxB,SAAO,EAAE,WAAW,cAAc;AACtC;AAEA,SAASC,OAAM,KAAmC;AAC9C,SAAO,OAAO,OAAO,YAAY,eAAe;AACpD;AAEA,eAAeD,aAAY,KAAiC,SAAwB;AAChF,MAAI,CAACC,OAAM,GAAG,GAAG;AACb,WAAO;AAAA,EACX;AACA,QAAM,MAAM,IAAI,IAAI,KAAK,OAAO;AAChC,QAAM,WAAW,MAAM,MAAM,KAAK,EAAE,MAAM,OAAO,CAAC;AAClD,MAAI,CAAC,SAAS,IAAI;AACd,UAAM,IAAI,MAAM,0CAA0C,GAAG,EAAE;AAAA,EACnE;AACA,SAAO,MAAM,SAAS,YAAY;AAGtC;AAEA,SAAS,aAAa,KAAmB,SAAwB;AAC7D,SAAO,IAAI,IAAI,KAAK,OAAO;AAC/B;;;ACnDO,SAAS,iBAAiB,MAAe,mBAA2C;AACvF,QAAM,UAAU,QAAQ;AACxB,MAAI,cAAc,CAAC,KAAa,MAAa,KAAe,GAAa,EAAE,IAAI;AAC/E,QAAM,gBAAiB,CAAC,KAAW,MAAY,KAAY,GAAU,EAAY,IAAI;AACrF,QAAM,aAAc,CAAC,GAAG,GAAG,GAAG,EAAE,EAAY,IAAI;AAChD,QAAM,aAAc,CAAC,KAAK,MAAM,MAAM,CAAC,EAAY,IAAI;AACvD,MAAI,mBAAoB,CAAC,KAAK,MAAM,GAAG,CAAC,EAAY,IAAI;AACxD,MAAI,mBAAmB;AACnB,wBAAoB;AAAA,EACxB;AAEA,MAAI,YAAY;AAChB,MAAI,sBAAsB;AAE1B,QAAM,SAA4B,SAAS,cAAc,QAAQ;AACjE,SAAO,QAAQ;AACf,SAAO,SAAS;AAChB,WAAS,KAAK,YAAY,MAAM;AAChC,QAAM,KAAK,OAAO,WAAW,SAAS,EAAE,8BAA8B,KAAK,CAAC;AAC5E,SAAO,OAAO;AAEd,MAAI,IAAI;AACJ,UAAM,YAAY,GAAG,aAAa,2BAA2B;AAC7D,UAAM,WAAW,YACX,GAAG,aAAa,UAAU,uBAAuB,IACjD,GAAG,aAAa,IAAI,OAAO;AACjC,QAAI,OAAO,WAAW,EAAE,KAAK,QAAQ,GAAG;AACpC,oBAAc;AAAA,IAClB;AACA,QAAI,OAAO,qBAAqB,EAAE,KAAK,QAAQ,GAAG;AAC9C,kBAAY;AAAA,IAChB,WACS,OAAO,UAAU,EAAE,KAAK,QAAQ,KAAK,OAAO,MAAM,EAAE,KAAK,QAAQ,GAAG;AACzE,4BAAsB;AAAA,IAC1B;AAAA,EACJ;AAEA,QAAM,cAAc;AAAA,IAChB,UAAU;AAAA,MACN;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACJ;AAAA,MACA;AAAA,IACJ;AAAA,IACA;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,GAAG;AAAA,IACH;AAAA,IACA,iBAAiB;AAAA,IACjB;AAAA,EACJ;AACJ;;;AC1EO,IAAM,kBAAN,MAAM,iBAAgB;AAAA;AAAA,EAEhB;AAAA;AAAA,EAGT;AAAA;AAAA,EAGS;AAAA;AAAA,EAGT,cAA4C,CAAC;AAAA,EAE5B,QAAQ,oBAAI,IAAY;AAAA,EACjC,mBAAmB;AAAA,EACnB,SAAS;AAAA,EACT,SAAS;AAAA,EACA,iBAAiB,CAAC,GAAG,CAAC;AAAA,EAC/B,yBAAyB;AAAA,EACzB,kBAAoC;AAAA,EAEpC,wBAAwB;AAAA,EAChC,OAAwB,eAAe,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,aAAa,aAAa,YAAY;AAAA;AAAA,EAGzI,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAKjB,YAAY,YAA0B;AAClC,SAAK,aAAa,cAAc,SAAS;AACzC,SAAK,QAAQ;AACb,SAAK,OAAO,CAAC;AACb,SAAK,UAAU;AAAA,EACnB;AAAA;AAAA,EAGA,UAAU;AACN,SAAK,WAAW;AAAA,EACpB;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA;AAAA,EAGA,IAAI,SAAS;AACT,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA;AAAA,EAGA,IAAI,aAAa;AACb,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,IAAI;AACR,QAAI,MAAM,IAAI,OAAO;AAAG,WAAK;AAC7B,QAAI,MAAM,IAAI,SAAS;AAAG,WAAK;AAC/B,QAAI,MAAM,IAAI,KAAK;AAAG,WAAK;AAC3B,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,IAAI,WAAW;AACX,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,MAAM,IAAI,OAAO;AAAG,aAAO;AAC/B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,UAAU;AACV,UAAM,EAAE,OAAO,QAAQ,QAAQ,OAAO,IAAI;AAC1C,QAAI,UAAU,KAAK,UAAU,GAAG;AAC5B,aAAO,CAAC,GAAG,CAAC;AAAA,IAChB;AACA,WAAO,CAAC,EAAE,SAAS,QAAQ,KAAK,SAAS,IAAI,SAAS,SAAS,KAAK,SAAS,CAAC;AAAA,EAClF;AAAA;AAAA,EAGU,UAAU;AAChB,UAAM,EAAE,WAAW,IAAI;AACvB,QAAI,CAAC;AAAY;AACjB,UAAM,UAAU;AAChB,eAAW,WAAW;AACtB,eAAW,iBAAiB,WAAW,KAAK,SAAS,OAAO;AAC5D,eAAW,iBAAiB,SAAS,KAAK,OAAO,OAAO;AACxD,eAAW,iBAAiB,QAAQ,KAAK,MAAM,OAAO;AACtD,eAAW,iBAAiB,SAAS,KAAK,OAAO,OAAO;AACxD,eAAW,iBAAiB,eAAe,KAAK,aAAa,OAAO;AACpE,eAAW,iBAAiB,aAAa,KAAK,WAAW,OAAO;AAChE,eAAW,iBAAiB,WAAW,KAAK,SAAS,OAAO;AAC5D,eAAW,iBAAiB,aAAa,KAAK,WAAW,OAAO;AAChE,eAAW,iBAAiB,SAAS,KAAK,OAAO,OAAO;AACxD,eAAW,iBAAiB,cAAc,KAAK,YAAY,OAAO;AAClE,eAAW,iBAAiB,aAAa,KAAK,WAAW,OAAO;AAChE,eAAW,iBAAiB,YAAY,KAAK,UAAU,OAAO;AAC9D,eAAW,iBAAiB,eAAe,KAAK,aAAa,OAAO;AACpE,eAAW,MAAM;AAAA,EACrB;AAAA;AAAA,EAGU,aAAa;AACnB,UAAM,EAAE,WAAW,IAAI;AACvB,QAAI,CAAC;AAAY;AACjB,UAAM,UAAU;AAChB,eAAW,oBAAoB,WAAW,KAAK,SAAS,OAAO;AAC/D,eAAW,oBAAoB,SAAS,KAAK,OAAO,OAAO;AAC3D,eAAW,oBAAoB,QAAQ,KAAK,MAAM,OAAO;AACzD,eAAW,oBAAoB,SAAS,KAAK,OAAO,OAAO;AAC3D,eAAW,oBAAoB,eAAe,KAAK,aAAa,OAAO;AACvE,eAAW,oBAAoB,aAAa,KAAK,WAAW,OAAO;AACnE,eAAW,oBAAoB,WAAW,KAAK,SAAS,OAAO;AAC/D,eAAW,oBAAoB,aAAa,KAAK,WAAW,OAAO;AACnE,eAAW,oBAAoB,SAAS,KAAK,OAAO,OAAO;AAC3D,eAAW,oBAAoB,cAAc,KAAK,YAAY,OAAO;AACrE,eAAW,oBAAoB,aAAa,KAAK,WAAW,OAAO;AACnE,eAAW,oBAAoB,YAAY,KAAK,UAAU,OAAO;AACjE,eAAW,oBAAoB,eAAe,KAAK,aAAa,OAAO;AAAA,EAC3E;AAAA,EAEQ,QAAQ,CAAC,MAAa;AAC1B,MAAE,eAAe;AAAA,EACrB;AAAA,EAEQ,cAAc,CAAC,MAAa;AAChC,MAAE,eAAe;AAAA,EACrB;AAAA,EAEA,OAAe,aAAa,MAAc;AACtC,WAAO,iBAAgB,aAAa,QAAQ,IAAI,KAAK;AAAA,EACzD;AAAA;AAAA,EAGO,cAAc;AACjB,WAAQ,YAAY,IAAI,IAAI,KAAK,wBAAyB;AAAA,EAC9D;AAAA,EAEQ,mBAAmB,GAAoB;AAC3C,UAAM,EAAE,MAAM,IAAI;AAClB,MAAE,SAAS,MAAM,IAAI,KAAK,IAAI,MAAM,OAAO,KAAK;AAChD,MAAE,WAAW,MAAM,IAAI,OAAO,IAAI,MAAM,OAAO,OAAO;AACtD,MAAE,UAAU,MAAM,IAAI,SAAS,IAAI,MAAM,OAAO,SAAS;AAAA,EAC7D;AAAA,EAEQ,UAAU,CAAC,MAAqB;AACpC,QAAI,iBAAgB,aAAa,EAAE,IAAI,GAAG;AACtC,QAAE,eAAe;AAAA,IACrB;AACA,SAAK,mBAAmB,CAAC;AACzB,SAAK,MAAM,IAAI,EAAE,IAAI;AACrB,SAAK,SAAS;AACd,SAAK,SAAS;AAAA,EAClB;AAAA,EAEQ,QAAQ,CAAC,MAAqB;AAClC,QAAI,iBAAgB,aAAa,EAAE,IAAI,GAAG;AACtC,QAAE,eAAe;AAAA,IACrB;AACA,SAAK,mBAAmB,CAAC;AACzB,SAAK,MAAM,OAAO,EAAE,IAAI;AAAA,EAC5B;AAAA,EAEQ,OAAO,CAAC,MAAkB;AAC9B,QAAI,qBAAqB;AAAU,eAAS,gBAAgB;AAC5D,SAAK,MAAM,MAAM;AAAA,EACrB;AAAA,EAEQ,YAAY,OAAO,MAAkB;AACzC,UAAM,EAAE,YAAY,KAAK,IAAI;AAC7B,SAAK,mBAAmB;AACxB,eAAW,MAAM;AACjB,MAAE,eAAe;AACjB,SAAK,mBAAmB,CAAC;AACzB,SAAK,WAAW,qBAAqB,CAAC;AACtC,UAAM,KAAK,WAAW,YAAY,CAAC;AACnC,QAAI,EAAE,UAAU,kBAAsB;AAClC,WAAK;AAAA,IACT,WAAW,EAAE,UAAU,kBAAuB;AAC1C,WAAK;AAAA,IACT;AAAA,EACJ;AAAA,EAEQ,UAAU,OAAO,MAAkB;AACvC,MAAE,eAAe;AACjB,SAAK,mBAAmB,CAAC;AACzB,QAAI,qBAAqB;AAAU,eAAS,gBAAgB;AAC5D,SAAK,WAAW,qBAAqB,CAAC;AACtC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEQ,QAAQ,OAAO,MAAkB;AACrC,UAAM,EAAE,KAAK,IAAI;AACjB,SAAK,SAAS,EAAE;AAChB,SAAK,SAAS,EAAE;AAChB,SAAK,mBAAmB,CAAC;AACzB,UAAM,KAAK,WAAW,YAAY,CAAC;AACnC,SAAK,wBAAwB,YAAY,IAAI;AAC7C,SAAK,eAAe,EAAE;AAAA,EAC1B;AAAA,EAEQ,YAAY,CAAC,MAAkB;AACnC,QAAI,EAAE,UAAU;AAAG;AACnB,QAAI,KAAK,IAAI,EAAE,SAAS,IAAI,OAAO,KAAK,IAAI,EAAE,SAAS,IAAI;AAAK;AAChE,SAAK,mBAAmB,CAAC;AACzB,QAAI,KAAK,oBAAoB,KAAK,gBAAgB;AAC9C,MAAC,EAAE,cAA8B,mBAAmB;AACpD,WAAK,mBAAmB;AAAA,IAC5B;AACA,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,EAAE,UAAU,eAAoB;AAChC,WAAK,oBAAoB,EAAE;AAC3B,WAAK,oBAAoB,EAAE;AAAA,IAC/B,WAAW,EAAE,UAAU,gBAAqB;AACxC,WAAK,oBAAoB,EAAE;AAC3B,WAAK,oBAAoB,EAAE;AAAA,IAC/B,WAAW,EAAE,UAAU,cAAmB;AACtC,WAAK,oBAAoB,EAAE;AAC3B,WAAK,oBAAoB,EAAE;AAAA,IAC/B;AAAA,EACJ;AAAA,EAEQ,aAAa,OAAO,UAAsB;AAC9C,SAAK,cAAc,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AAChJ,UAAM,EAAE,aAAa,eAAe,IAAI;AACxC,SAAK,WAAW,eAAe,KAAK;AAEpC,YAAQ,YAAY,QAAQ;AAAA,MACxB,KAAK;AACD,uBAAe,CAAC,IAAI,YAAY,CAAC,EAAE;AACnC,uBAAe,CAAC,IAAI,YAAY,CAAC,EAAE;AACnC;AAAA,MACJ;AACI,cAAM,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE;AAC7C,cAAM,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE;AAC7C,aAAK,yBAAyB,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE;AACzD,uBAAe,CAAC,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE,KAAK;AAC5D,uBAAe,CAAC,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE,KAAK;AAC5D;AAAA,IACR;AACA,UAAM,KAAK,WAAW,YAAY,KAAK;AAAA,EAC3C;AAAA,EAEQ,WAAW,OAAO,UAAsB;AAC5C,SAAK,cAAc,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AAChJ,UAAM,EAAE,aAAa,eAAe,IAAI;AACxC,SAAK,WAAW,eAAe,KAAK;AACpC,YAAQ,YAAY,QAAQ;AAAA,MACxB,KAAK;AACD;AAAA,MACJ,KAAK;AACD,uBAAe,CAAC,IAAI,YAAY,CAAC,EAAE;AACnC,uBAAe,CAAC,IAAI,YAAY,CAAC,EAAE;AACnC;AAAA,MACJ;AACI,cAAM,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE;AAC7C,cAAM,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE;AAC7C,aAAK,yBAAyB,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE;AACzD,uBAAe,CAAC,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE,KAAK;AAC5D,uBAAe,CAAC,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE,KAAK;AAC5D;AAAA,IACR;AAAA,EACJ;AAAA,EAEQ,cAAc,CAAC,UAAsB;AACzC,UAAM,eAAe;AACrB,SAAK,cAAc,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AAAA,EACpJ;AAAA,EAEQ,YAAY,CAAC,UAAsB;AACvC,QAAI,MAAM;AAAY,YAAM,eAAe;AAC3C,SAAK,cAAc,MAAM,KAAK,MAAM,OAAO,EAAE,IAAI,YAAU,EAAE,IAAI,MAAM,YAAY,GAAG,KAAK,MAAM,MAAM,OAAO,GAAG,GAAG,KAAK,MAAM,MAAM,OAAO,EAAE,EAAE;AAChJ,UAAM,EAAE,aAAa,eAAe,IAAI;AACxC,QAAI,EAAE,GAAG,EAAE,IAAI,YAAY,CAAC;AAE5B,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,YAAY,SAAS,GAAG;AACxB,YAAM,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE;AAC7C,YAAM,KAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE;AAC7C,YAAM,oBAAoB,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE;AAErD,WAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE,KAAK;AAC5C,WAAK,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,EAAE,KAAK;AAE5C,YAAM,cAAc,aAAK,WAAW,GAAG,CAAC;AACxC,UAAIC,QAAO;AACX,UAAI,KAAK,iBAAiB;AACtB,QAAAA,QAAO,aAAK,KAAK,KAAK,iBAAiB,WAAW;AAAA,MACtD;AACA,WAAK,kBAAkB;AAEvB,YAAM,aAAa,KAAK,yBAAyB;AACjD,WAAK,yBAAyB;AAC9B,WAAK,SAAS;AACd,WAAK,SAAS;AACd,UAAIA,QAAO,IAAI,KAAK,IAAI,UAAU,GAAG;AACjC,YAAI,YAAY,UAAU,GAAG;AACzB,eAAK,gBAAgB;AAAA,QACzB,OAAO;AACH,eAAK,gBAAgB;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AACA,YAAQ,YAAY,QAAQ;AAAA,MACxB,KAAK;AACD,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C;AAAA,MACJ,KAAK;AACD,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C;AAAA,MACJ,KAAK;AACD,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C,aAAK,kBAAkB,IAAI,eAAe,CAAC;AAC3C;AAAA,IACR;AACA,mBAAe,CAAC,IAAI;AACpB,mBAAe,CAAC,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,aAAqB;AACzB,UAAM,EAAE,MAAM,MAAM,IAAI;AACxB,UAAM,QAAQ,cAAc,KAAK,SAAS;AAC1C,QAAI,MAAM,MAAM;AACZ,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,MAAM;AAAG,aAAK,eAAe;AAC3C,UAAI,MAAM,IAAI,WAAW;AAAG,aAAK,6BAA6B;AAC9D,UAAI,MAAM,IAAI,YAAY;AAAG,aAAK,4BAA4B;AAAM;AACpE,UAAI,MAAM,IAAI,SAAS;AAAG,aAAK,0BAA0B;AACzD,UAAI,MAAM,IAAI,WAAW;AAAG,aAAK,0BAA0B;AAAA,IAC/D;AAAA,EACJ;AAAA;AAAA,EAGA,YAAY;AACR,UAAM,EAAE,KAAK,IAAI;AACjB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,4BAA4B;AACjC,SAAK,yBAAyB;AAC9B,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA,EAGA,YAAY;AACR,UAAM,EAAE,KAAK,IAAI;AACjB,WAAO,KAAK,eAAe,KACvB,KAAK,eAAe,KACpB,KAAK,eAAe,KACpB,KAAK,6BAA6B,KAClC,KAAK,0BAA0B,KAC/B,KAAK,oBAAoB,KACzB,KAAK,oBAAoB,KACzB,KAAK,oBAAoB,KACzB,KAAK,oBAAoB,KACzB,KAAK,oBAAoB,KACzB,KAAK,oBAAoB,KACzB,KAAK,kBAAkB,KACvB,KAAK,kBAAkB,KACvB,KAAK,eAAe,KACpB,KAAK,kBAAkB,KACvB,KAAK,kBAAkB,KACvB,KAAK,kBAAkB,KACvB,KAAK,kBAAkB,KACvB,KAAK,kBAAkB,KACvB,KAAK,kBAAkB,KACvB,KAAK,gBAAgB,KACrB,KAAK,gBAAgB;AAAA,EAC7B;AACJ;AAMO,IAAK,eAAL,kBAAKC,kBAAL;AACH,EAAAA,4BAAA,UAAO,KAAP;AACA,EAAAA,4BAAA,UAAO,KAAP;AACA,EAAAA,4BAAA,WAAQ,KAAR;AACA,EAAAA,4BAAA,YAAS,KAAT;AACA,EAAAA,4BAAA,cAAW,KAAX;AACA,EAAAA,4BAAA,aAAU,MAAV;AANQ,SAAAA;AAAA,GAAA;;;ACnZL,IAAe,iBAAf,MAA8B;AAAA;AAAA;AAAA;AAAA,EAiCvB,YAEG,OACX;AADW;AAAA,EAEb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EArBA,IAAI,aAAqB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGU,UAAU;AAChB,SAAK,WAAW;AAAA,EACpB;AAAA,EAEQ,WAAW;AAAA,EACX,cAAsB;AAAA,EACtB;AAAA,EACA,YAAY;AAAA;AAAA;AAAA;AAAA,EAcpB,IAAI,OAAO;AACP,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAQ;AACR,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAa;AACb,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAU;AACV,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,eAAe;AACf,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAW;AACX,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA,EAGA,IAAI,eAAe;AACf,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS,OAAoB;AAEnC,QAAI,EAAE,IAAI,IAAI,MAAM;AACpB,UAAM,SAAS,MAAM,IAAI;AACzB,QAAI,MAAM,SAAS;AAAM,aAAO;AAAA,aACvB,MAAM,SAAS;AAAK,aAAO;AACpC,UAAM,QAAQ,EAAE,GAAG,MAAM,OAAO,IAAI;AACpC,SAAK,SAAS,EAAE,GAAG,OAAO,OAAO,mBAAmB,GAAG,SAAS,MAAM;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,aAAqB;AACzB,QAAI,cAAc,KAAK,cAAc;AAAK,oBAAc,MAAO;AAC/D,SAAK,MAAM,QAAQ,WAAW;AAC9B,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,QAAQ;AACR,UAAI,OAAO,qBAAqB,OAAO,iBAAiB;AACpD,aAAK,SAAS;AAAA,MAClB,OAAO;AACH,eAAO,qBAAqB;AAC5B,cAAM,EAAE,mBAAmB,iBAAiB,OAAO,KAAK,QAAQ,IAAI;AACpE,YAAI,oBAAoB,iBAAiB;AACrC,gBAAMC,QAAO,CAAC,GAAW,GAAWC,OAAe,KAAK,IAAI,KAAKA;AACjE,gBAAM,YAAY,CAACA,OAAeA,KAAI,MAAM,IAAIA,KAAIA,KAAI,IAAI,KAAK,IAAI,KAAKA,KAAI,GAAG,CAAC,IAAI;AACtF,gBAAM,IAAI,UAAU,oBAAoB,eAAe;AACvD,gBAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,MAAM,KAAK,IAAI,KAAK,CAAC;AAC1D,gBAAM,QAAQD,MAAK,MAAM,OAAO,IAAI,OAAO,CAAC;AAC5C,cAAI,MAAMA,MAAK,MAAM,KAAK,IAAI,KAAK,CAAC;AACpC,cAAI,MAAM;AAAM,mBAAO;AAAA,mBACd,MAAM;AAAK,mBAAO;AAC3B,iBAAO,UAAU,EAAE,KAAK,KAAK,MAAM;AAAA,QACvC,OAAO;AACH,iBAAO,OAAO,SAAS,GAAG;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EA+BA,SAAS;AACL,SAAK,MAAM,YAAY;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB,OAAyC;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9D,aAAa,OAAyC;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMxD,UAAU,OAAsD;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlE,OAAO,gBAA8B,UAAkB,KAAM,UAA+B;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS9F,OAAO,gBAAgC,UAAkB,KAAY;AAAA,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMvE,mBAAmB,OAA0B,aAAqD;AAC9F,SAAK,QAAQ,WAAW;AACxB,UAAM,EAAE,UAAU,OAAO,aAAa,IAAI;AAC1C,QAAI,UAAU;AACV,WAAK,cAAe,KAAK,cAAc,IAAK;AAC5C,WAAK,WAAW;AAAA,IACpB;AACA,QAAI,MAAM,UAAU,KAAK,gBAAgB,UAAa,CAAC,UAAU;AAC7D,WAAK,YAAY;AACjB;AAAA,IACJ;AACA,SAAK,YAAY;AACjB,QAAI,OAAO,OAAO,MAAM,IAAI,EAAE,KAAK,OAAK,KAAK,CAAC,KAAK,gBAAgB,UAAU;AACzE,WAAK,OAAO;AACZ,WAAK,MAAM,UAAU;AACrB,YAAM,UAAU,KAAK,aAAa,KAAK;AACvC,aAAO,OAAO,KAAK,OAAO,EAAE,SAAS,EAAE,QAAQ,QAAQ,IAAI;AAAA,IAC/D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAiB,yBAAyB,OAAqB,gBAA8B,gBAAsC;AAC/H,UAAM,MAAM,aAAK,WAAW,GAAG,GAAG,EAAE;AACpC,iBAAK,cAAc,KAAK,KAAK,cAAc;AAC3C,UAAM,SAAS,CAAC,aAAK,IAAI,KAAK,cAAc;AAC5C,WAAO,aAAK,IAAI,OAAO,GAAG,IAAI;AAAA,EAClC;AACJ;;;AC/PO,IAAM,0BAAN,MAA8B;AAAA,EACzB,SAAS;AAAA,EACT,OAAO;AAAA,EACP,QAAQ;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOR,YAAY,QAAgB,GAAG,MAAc,GAAG,OAAe,GAAG;AAC9D,SAAK,QAAQ;AACb,SAAK,MAAM;AACX,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,YAAQ,MAAM,OAAO,KAAK,EAAE;AAC5B,QAAI,SAAS,KAAK,QAAQ;AACtB,WAAK,SAAS;AACd,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA,EAGA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,KAAK,OAAe;AACpB,WAAO,SAAS;AAAK,eAAS;AAC9B,WAAO,QAAQ;AAAG,eAAS;AAC3B,QAAI,SAAS,KAAK,OAAO;AACrB,WAAK,QAAQ;AACb,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,WAAO,SAAS;AAAK,eAAS;AAC9B,WAAO,QAAQ;AAAG,eAAS;AAC3B,QAAI,SAAS,KAAK,MAAM;AACpB,WAAK,OAAO;AACZ,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,WAAW;AACX,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO,KAAK,gBAAgB;AAAA,IACrC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,KAAmB;AACjC,UAAM,EAAE,KAAK,OAAO,KAAK,IAAI,kBAAkB,GAAG;AAClD,SAAK,MAAM,MAAM,MAAM,KAAK;AAC5B,SAAK,QAAQ,QAAQ,MAAM,KAAK;AAChC,SAAK,OAAO,OAAO,MAAM,KAAK;AAC9B,SAAK,OAAO;AAAA,EAChB;AAAA,EAEQ,kBAAgC;AACpC,UAAM,EAAE,OAAO,QAAQ,KAAK,IAAI;AAChC,WAAO,gBAAgB,OAAO,QAAQ,IAAI;AAAA,EAC9C;AACJ;AAQO,SAAS,gBAAgB,MAAc,OAAe,KAAa;AAEtE,QAAM,UAAU,eAAS,SAAS,GAAG,IAAI;AACzC,QAAM,YAAY,eAAS,SAAS,KAAK,IAAI;AAC7C,QAAM,WAAW,eAAS,SAAS,IAAI,IAAI;AAE3C,QAAM,UAAU,KAAK,IAAI,QAAQ;AACjC,QAAM,UAAU,KAAK,IAAI,QAAQ;AACjC,QAAM,WAAW,KAAK,IAAI,SAAS;AACnC,QAAM,WAAW,KAAK,IAAI,SAAS;AACnC,QAAM,SAAS,KAAK,IAAI,OAAO;AAC/B,QAAM,SAAS,KAAK,IAAI,OAAO;AAE/B,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,IAAI,SAAS,WAAW,UAAU,SAAS,WAAW;AAC5D,QAAM,SAAS,aAAK,WAAW,oBAAoB,GAAG,GAAG,kBAAkB;AAC3E,SAAO,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC,CAAC;AACtE;AAOO,SAAS,kBAAkB,KAAmB;AAEjD,QAAM,SAAS,aAAK,WAAW,qBAAqB,GAAG,GAAG,kBAAkB;AAE5E,QAAM,CAAC,IAAI,IAAI,IAAI,EAAE,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAC5D,QAAM,SAAS,KAAK,KAAK,KAAK;AAC9B,QAAM,QAAQ;AAEd,MAAI,MAAM;AACV,MAAI,QAAQ;AACZ,MAAI,OAAO;AACX,MAAI,SAAS,CAAC,OAAO;AACjB,UAAM,IAAI,KAAK,MAAM,IAAI,EAAE;AAC3B,YAAQ,KAAK,KAAK;AAClB,WAAO;AAAA,EACX,WAAW,SAAS,OAAO;AACvB,UAAM,IAAI,KAAK,MAAM,IAAI,EAAE;AAC3B,YAAQ,CAAC,KAAK,KAAK;AACnB,WAAO;AAAA,EACX,OAAO;AACH,UAAM,MAAM,KAAK;AACjB,UAAM,MAAM,KAAK;AACjB,UAAM,MAAM,KAAK;AACjB,UAAM,MAAM,KAAK;AACjB,WAAO,KAAK,MAAM,KAAO,KAAK,KAAK,KAAK,KAAK,CAAC,MAAM,MAAM,MAAM,GAAG;AACnE,YAAQ,KAAK,KAAK,KAAO,MAAM;AAC/B,UAAM,KAAK,MAAM,KAAO,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,GAAG;AAAA,EACrE;AACA,SAAO;AAAA;AAAA,IAEH;AAAA;AAAA,IAEA;AAAA;AAAA,IAEA;AAAA,EACJ;AACJ;AAIO,SAAS,MAAM,OAAeE,MAAaC,MAAa;AAC3D,MAAI,QAAQD,MAAK;AACb,YAAQA;AAAA,EACZ,WAAW,QAAQC,MAAK;AACpB,YAAQA;AAAA,EACZ;AACA,SAAO;AACX;AASO,SAAS,sBAAsB,KAAmB,YAAmB;AACxE,QAAM,KAAK,eAAS,OAAO,KAAK,IAAI,aAAK,IAAI,aAAK,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,IACzE,aAAK,WAAW,GAAG,GAAG,CAAC,IACvB,aAAK,WAAW,GAAG,GAAG,CAAC;AAC7B,MAAI,YAAY;AACZ,iBAAK,cAAc,IAAI,IAAI,UAAU;AAAA,EACzC;AAEA,QAAM,QAAQ,aAAK,MAAM,aAAK,OAAO,GAAG,IAAI,GAAG;AAC/C,MAAI,YAAY;AACZ,UAAM,CAAC,GAAG,GAAG,CAAC,IAAI;AAClB,UAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI;AACjC,UAAM,KAAK,KAAK,IAAI,CAAC;AACrB,UAAM,KAAK,KAAK,IAAI,CAAC;AACrB,UAAM,KAAK,KAAK,IAAI,CAAC;AACrB,QAAI,KAAK,MAAM,KAAK,IAAI;AACpB,YAAM,CAAC,IAAI,KAAK,KAAK,CAAC;AAAA,IAC1B,WAAW,KAAK,IAAI;AAChB,YAAM,CAAC,IAAI,KAAK,KAAK,CAAC;AAAA,IAC1B,OAAO;AACH,YAAM,CAAC,IAAI,KAAK,KAAK,CAAC;AAAA,IAC1B;AAAA,EACJ;AAEA,eAAK,MAAM,IAAI,KAAK,KAAK;AACzB,eAAK,UAAU,IAAI,EAAE;AAErB,eAAK,MAAM,OAAO,IAAI,GAAG;AACzB,eAAK,UAAU,OAAO,KAAK;AAE3B,SAAO,aAAK;AAAA,IACR,aAAK,OAAO;AAAA,IACZ,aAAK,WAAW,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,EAC7F;AACJ;;;AC9MO,IAAM,mBAAN,MAAM,0BAAyB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCjD,YACI,OAES,MACX;AACE,UAAM,KAAK;AAFF;AAAA,EAGb;AAAA;AAAA,EAvCU,gBAAgB;AAAA;AAAA,EAEhB;AAAA;AAAA,EAEA,eAAuB;AAAA,EAExB,OAAO;AAAA,EACP,aAAa;AAAA,EAEd,SAAiC;AAAA,IACrC,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,IACpB,WAAW;AAAA,IACX,yBAAyB;AAAA;AAAA,IACzB,4BAA4B;AAAA,EAChC;AAAA,EAEQ,YAA0B,aAAK,OAAO;AAAA,EAC7B,eAAe,IAAI,wBAAwB,KAAK,EAAE;AAAA,EAC3D;AAAA,EACA,OAAO;AAAA,EAEE,iBAAiB;AAAA,EAC1B,uBAA+B;AAAA,EAC/B,aAAqB;AAAA,EACrB,iBAAiB;AAAA,EACjB,oBAA8C;AAAA,EAC9C,cAAc;AAAA;AAAA,EAetB,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAqB;AAC9B,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,SAAK,aAAa,QAAQ;AAC1B,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,aAAa,MAAM;AACxB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAkD;AAC3D,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAAA,EACpD;AAAA,EAES,YAAkC;AACvC,UAAM,EAAE,MAAM,UAAU,cAAc,KAAK,IAAI;AAC/C,UAAM,EAAE,SAAS,IAAI;AACrB,WAAO,EAAE,MAAM,UAAU,UAAU,YAAY,KAAK;AAAA,EACxD;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,WAAW,IAAI;AACjD,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,UAAU;AACV,WAAK,YAAY;AAAA,IACrB;AACA,QAAI,UAAU;AACV,WAAK,aAAa,kBAAkB,QAAQ;AAC5C,WAAK,aAAa,OAAO;AAAA,IAC7B;AACA,QAAI,cAAc,QAAW;AACzB,WAAK,OAAO;AAAA,IAChB;AACA,SAAK,MAAM,YAAY;AACvB,SAAK,MAAM,iBAAiB;AAAA,EAChC;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,aAAa,IAAI;AACzB,UAAM,cAAc;AACpB,UAAMC,YAAW,KAAK,IAAI,aAAa,SAAS,KAAK,IAAI,eAAS,SAAS,KAAK,IAAI,IAAI,CAAC,CAAC;AAC1F,UAAM,MAAM,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC1C,iBAAK,cAAc,KAAK,KAAK,aAAa,QAAQ;AAClD,SAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAAA,EACxD;AAAA,EAES,OAAO,gBAA8B,UAAkB,KAAM,UAA+B;AACjG,UAAM,EAAE,cAAc,UAAU,IAAI;AACpC,QAAI,SAAS;AACT,UAAI,cAAc,aAAa;AAC/B,UAAI,YAAY,aAAa;AAC7B,UAAI,UAAU;AACV,cAAM,EAAE,OAAO,IAAI,IAAI,kBAAkB,QAAQ;AACjD,sBAAc,QAAQ,KAAK,KAAK;AAChC,oBAAY,MAAM,KAAK,KAAK;AAAA,MAChC;AAEA,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,KAAK,UAAU;AAAA,QAC3E,OAAO,EAAE,KAAK,aAAK,MAAM,SAAS,GAAG,OAAO,aAAa,OAAO,KAAK,aAAa,IAAI;AAAA,MAC1F,CAAC;AAAA,IACL,OACK;AACD,WAAK,YAAY;AACjB,UAAI,UAAU;AACV,aAAK,aAAa,kBAAkB,QAAQ;AAAA,MAChD;AACA,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,OAAO,gBAAgC,UAAkB,KAAY;AAC1E,UAAM,EAAE,cAAc,WAAW,KAAK,IAAI;AAC1C,QAAI,SAAS;AACT,YAAMC,QAAO,KAAK,IAAI,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,IAAI,IAAI,CAAC,GAAG,eAAe,MAAM;AAC1G,YAAM,iBAAiB,aAAK,OAAO;AACnC,mBAAK,IAAI,gBAAgB,aAAK,cAAc,gBAAgB,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,aAAa,QAAQ,GAAG,eAAe,MAAM;AACtI,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,OAAO,KAAK,aAAa,MAAM,KAAK;AAAA,QAChG,OAAO,EAAE,KAAK,aAAK,MAAM,SAAS,GAAG,OAAO,aAAa,OAAO,KAAK,aAAa,IAAI;AAAA,MAC1F,CAAC;AAAA,IACL,OAAO;AACH,YAAMA,QAAO,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,IAAI,IAAI,CAAC;AACzE,WAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,aAAa,QAAQ,GAAG,eAAe,MAAM;AACrJ,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,SAAe;AACpB,UAAM,EAAE,YAAY,cAAc,QAAQ,QAAQ,QAAQ,SAAS,aAAa,IAAI;AACpF,QAAI,cAAc;AACd,WAAK,YAAY,aAAK,MAAM,aAAa,GAAG;AAC5C,mBAAa,QAAQ,aAAa;AAClC,mBAAa,MAAM,aAAa;AAChC,WAAK,QAAQ;AACb;AAAA,IACJ;AACA,SAAK,aAAa,YAAY,IAAI;AAClC,QAAI,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,IAAI,KAAK,mBAAmB;AAClE,iBAAa,OAAO;AACpB,UAAM,CAAC,OAAO,KAAK,IAAI;AAEvB,QAAI,MAAM,IAAI;AACV,YAAM,sBAAsB,cAAc,MAAM,KAAK,QAAQ,OAAO,qBAAqB;AACzF,mBAAa,SAAS,KAAK;AAC3B,mBAAa,OAAO,KAAK;AACzB,UAAI,UAAU,eAAe,OAAO,QAAQ;AACxC,cAAM,EAAE,QAAQ,QAAQ,UAAAD,UAAS,IAAI;AACrC,cAAM,MAAM,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC1C,qBAAK,IAAI,KAAK,KAAK,MAAM;AACzB,qBAAK,cAAc,KAAK,KAAK,aAAa,QAAQ;AAClD,aAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAAA,MACxD;AACA,WAAK,QAAQ;AAAA,IACjB;AAEA,QAAI,MAAM,MAAM,IAAI;AAChB,UAAI,MAAM,GAAG;AACT,cAAM,QAAQ,KAAK;AACnB,cAAM,CAAC,QAAQ,KAAK;AAAA,MACxB;AACA,YAAM,iBAAiB,aAAa,OAAO,iBAAiB;AAC5D,YAAM,gBAAgB,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,KAAK,gBAAgB,CAAC,KAAK,gBAAgB,KAAK,cAAc,GAAG,aAAa,QAAQ;AAC9J,WAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,WAAW,aAAa;AACtE,UAAI,UAAU,OAAO,QAAQ;AACzB,aAAK,SAAS,OAAO,QAAQ,OAAO,MAAM;AAAA,MAC9C;AACA,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,UAA8B,CAAC;AACrC,UAAM,EAAE,WAAW,cAAc,QAAQ,KAAK,IAAI;AAClD,QAAI,CAAC,SAAS,CAAC,aAAK,YAAY,MAAM,UAAU,SAAS,GAAG;AACxD,cAAQ,WAAW;AAAA,IACvB;AACA,QAAI,CAAC,SAAS,CAAC,aAAK,YAAY,MAAM,UAAU,aAAa,QAAQ,GAAG;AACpE,cAAQ,WAAW,aAAa;AAAA,IACpC;AACA,QAAI,CAAC,SAAU,UAAU,MAAM,SAAS,aAAK,YAAY,MAAM,OAAO,QAAQ,MAAM,GAAI;AACpF,cAAQ,QAAQ,QAAQ;AAAA,IAC5B;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,MAAM;AAC9B,cAAQ,MAAM;AAAA,IAClB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAe,mBAAmB,OAAkC;AAChE,UAAM,EAAE,MAAM,YAAY,IAAI;AAC9B,QAAI,MAAM;AACN,YAAM,UAAU,MAAM;AACtB,UAAI,UAAU,aAAa;AACvB,cAAM,SAAS,MAAM,KAAK,KAAK,MAAM,SAAS,MAAM,OAAO;AAC3D,YAAI,QAAQ;AACR,eAAK,SAAS,OAAO,UAAU,IAAI;AAAA,QACvC,OAAO;AACH,eAAK,WAAW,IAAI;AAAA,QACxB;AAAA,MACJ,OAAO;AACH,aAAK,WAAW,KAAK;AAAA,MACzB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAe,aAAa,OAAkC;AAC1D,UAAM,EAAE,cAAc,MAAM,aAAa,IAAI;AAC7C,QAAI,aAAa,UAAU,gBAAgB,MAAM;AAC7C,YAAM,IAAI,aAAa,SAAS,IAAI,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,IAAI,aAAa,CAAC,EAAE;AAC9G,YAAM,IAAI,aAAa,SAAS,IAAI,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,IAAI,aAAa,CAAC,EAAE;AAC9G,YAAM,SAAS,MAAM,KAAK,KAAK,GAAG,CAAC;AACnC,UAAI,QAAQ;AACR,aAAK,SAAS,OAAO,UAAU,IAAI;AAAA,MACvC,OAAO;AACH,aAAK,WAAW,IAAI;AAAA,MACxB;AAAA,IACJ,OAAO;AACH,WAAK,WAAW,KAAK;AAAA,IACzB;AAAA,EACJ;AAAA,EAEA,MAAM,UAAU,OAA+C;AAC3D,UAAM,EAAE,cAAc,MAAM,eAAe,IAAI;AAE/C,UAAM,YAAY,KAAK,aAAa,KAAK;AACzC,QAAI,QAAQ,UAAa,YAAY,KAAK,OAAO,aAAa,KAAK,aAAa;AAC5E;AAAA,IACJ;AACA,SAAK,cAAc;AACnB,UAAM,kBAAkB,OAAO,GAAW,MAAc;AACpD,YAAM,SAAS,MAAM,KAAK,KAAK,GAAG,GAAG,EAAE,OAAO,KAAK,CAAC;AACpD,UAAI,QAAQ;AACR,YAAI,YAAY,IAAI,IAAI,KAAK,uBAAuB,KAAM;AACtD,eAAK,iBAAiB,YAAY,IAAI;AAAA,QAC1C;AACA,aAAK,oBAAoB,OAAO;AAChC,aAAK,uBAAuB,YAAY,IAAI;AAAA,MAChD,WAAW,iBAAiB,WAAW;AACnC,aAAK,oBAAoB;AACzB,aAAK,uBAAuB,YAAY,IAAI;AAAA,MAChD;AAAA,IACJ;AAEA,QAAI,aAAa,KAAK,GAAG;AACrB,UAAI,aAAa,SAAS,GAAG;AACzB,cAAM,gBAAgB,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,GAAG,KAAK,OAAO,aAAa,CAAC,EAAE,IAAI,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC;AAAA,MAC1I;AAAA,IACJ,OAAO;AACH,YAAM,gBAAgB,MAAM,SAAS,MAAM,OAAO;AAAA,IACtD;AACA,SAAK,cAAc;AAAA,EAEvB;AAAA,EAEQ,WAAW,QAAiB;AAChC,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,QAAQ;AACR,WAAK,SAAS,OAAO,QAAQ,MAAM;AAAA,IACvC;AAAA,EACJ;AAAA,EAEQ,SAAS,QAAsB,QAAiB;AACpD,UAAM,EAAE,WAAW,aAAa,IAAI;AACpC,UAAMA,YAAW,aAAK,SAAS,QAAQ,SAAS;AAChD,UAAM,SAAS,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC7C,iBAAK,cAAc,QAAQ,QAAQ,aAAa,QAAQ;AACxD,iBAAK,IAAI,QAAQ,QAAQ,MAAM;AAC/B,iBAAK,IAAI,QAAQ,WAAW,MAAM;AAClC,UAAM,SAAS,aAAK,OAAO,aAAK,OAAO,GAAG,aAAa,QAAQ;AAC/D,iBAAK,cAAc,QAAQ,QAAQ,MAAM;AACzC,SAAK,SAAS,EAAE,QAAQ,QAAQ,UAAAA,WAAU,OAAO;AAAA,EACrD;AAAA;AAAA,EAGU,YAAY;AAClB,UAAM,EAAE,QAAQ,mBAAmB,WAAW,KAAK,IAAI;AACvD,UAAM,EAAE,yBAAyB,2BAA2B,IAAI;AAChE,QAAIE,SAAQ;AACZ,QAAI,2BAA2B,mBAAmB;AAC9C,MAAAA,SAAQ,aAAK,KAAK,WAAW,iBAAiB,IAAI,KAAK,IAAM,KAAK,KAAK,MAAO,OAAQ,CAAC,IAAI;AAC3F,YAAM,gBAAgB,YAAY,IAAI,IAAI,KAAK;AAC/C,UAAI,gBAAgB,KAAK;AACrB,QAAAA,SAAQ,KAAK,IAAIA,QAAO,KAAM,gBAAgB,GAAI;AAAA,MACtD;AACA,UAAI,qBAAqB,KAAK,MAAM,YAAY,CAAC,6BAA6B,IAAI,MAAMA,SAAQ,GAAG,wBAAwB,KAAK,wBAAwB,GAAG;AAC3J,YAAM,mBAAmB,MAAMA,QAAO,wBAAwB,KAAK,wBAAwB,GAAG;AAC9F,YAAM,wBAAwB,MAAMA,QAAO,wBAAwB,KAAK,wBAAwB,GAAG;AACnG,YAAM,gBAAgB,MAAMA,QAAO,wBAAwB,KAAK,wBAAwB,GAAG;AAC3F,aAAO;AAAA,QACH;AAAA,QAAoB;AAAA,QAAkB;AAAA,QAAuB;AAAA,QAAe,OAAO;AAAA,MACvF;AAAA,IACJ;AACA,WAAO;AAAA,MACH,oBAAoB,KAAK,MAAM,YAAY,CAAC,6BAA6B,IAAIA;AAAA,MAAO,kBAAkBA;AAAA,MAAO,uBAAuBA;AAAA,MAAO,eAAeA;AAAA,MAAO,OAAAA;AAAA,IACrK;AAAA,EACJ;AAAA;AAAA,EAGU,qBAA4C;AAClD,UAAM,EAAE,MAAM,cAAc,IAAI;AAChC,UAAM,OAAO,CAAC,KAAK,yBAAyB,gBAAgB,KAAK,mBAAmB,KAAK;AACzF,UAAM,OAAO,CAAC,KAAK,4BAA4B,gBAAgB,KAAK,mBAAmB,KAAK;AAC5F,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAA,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAClC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,GAAG,YAA4D;AAClE,WAAO,sBAAsB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,YAAoE;AAC9E,QAAI,EAAE,sBAAsB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,EAC5E;AACJ;AAEA,SAAS,aAAa,OAAqD;AACvE,SAAO,gBAAgB,cAAc,iBAAiB;AAC1D;AAKO,IAAM,yBAAN,cAAqC,iBAAiB;AAAA,EAGzD,YAAY,OAAiC,MAAmB,QAAiC;AAC7F,UAAM,OAAO,IAAI;AADwB;AAEzC,SAAK;AACL,SAAK,eAAe;AAAA,EACxB;AAAA,EANS,OAAO;AAAA,EAQP,qBAA4C;AACjD,UAAM,EAAE,MAAM,cAAc,IAAI;AAChC,UAAM,OAAO,CAAC,KAAK,yBAAyB,gBAAgB,KAAK,mBAAmB,KAAK;AACzF,UAAM,OAAO,CAAC,KAAK,4BAA4B,gBAAgB,KAAK,mBAAmB,KAAK;AAC5F,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAA,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAElC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AACJ;AAKO,IAAM,wBAAN,cAAoC,iBAAiB;AAAA,EAGxD,YAAY,OAAiC,MAAmB,QAAiC;AAC7F,UAAM,OAAO,IAAI;AADwB;AAEzC,SAAK;AACL,SAAK,eAAe;AAAA,EACxB;AAAA,EANS,OAAO;AAAA,EAQP,qBAA4C;AACjD,UAAM,EAAE,MAAM,cAAc,IAAI;AAChC,UAAM,OAAO,CAAC,KAAK,yBAAyB,gBAAgB,KAAK,mBAAmB,KAAK;AACzF,UAAM,OAAO,CAAC,KAAK,4BAA4B,gBAAgB,KAAK,mBAAmB,KAAK;AAC5F,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAA,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAElC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AACJ;AAKO,IAAM,0BAAN,cAAsC,iBAAiB;AAAA,EAG1D,YAAY,OAAiC,MAAmB,QAAiC;AAC7F,UAAM,OAAO,IAAI;AADwB;AAEzC,SAAK;AACL,SAAK,eAAe;AAAA,EACxB;AAAA,EANS,OAAO;AAAA,EAQP,qBAA4C;AACjD,UAAM,EAAE,MAAM,cAAc,IAAI;AAChC,UAAM,OAAO,CAAC,KAAK,yBAAyB,gBAAgB,KAAK,mBAAmB,KAAK;AACzF,UAAM,OAAO,CAAC,KAAK,4BAA4B,gBAAgB,KAAK,mBAAmB,KAAK;AAC5F,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,SAAS,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAC9C,UAAM,cAAc,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM;AAExF,UAAM,EAAE,oBAAoB,kBAAkB,uBAAuB,eAAe,OAAAA,OAAM,IAAI,KAAK,UAAU;AAC7G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,mBAAmB,mBAAqB,KAAK,iBAAiB;AAC5G,UAAM,KAAM,KAAK,cAAcA,SAAU,KAAK,cAAc,qBAAuB,KAAK,eAAe;AACvG,UAAM,KAAK,cAAc,SAAS;AAClC,UAAM,KAAK,cAAc,SAAS;AAElC,WAAO,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY;AAAA,EAC7C;AACJ;;;AC5dO,IAAM,iBAAN,MAAM,wBAAuB,eAAe;AAAA,EACtC,OAAO;AAAA,EACP,aAAa;AAAA;AAAA;AAAA;AAAA,EAKtB,YAAY,OAAwB;AAChC,UAAM,KAAK;AAAA,EACf;AAAA,EAES,YAAkC;AACvC,UAAM,EAAE,KAAK,IAAI;AACjB,WAAO,EAAE,KAAK;AAAA,EAClB;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,KAAK,IAAI;AACjB,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,SAAK,MAAM,iBAAiB;AAC5B,SAAK,OAAO;AAAA,EAChB;AAAA,EAES,QAAQ,QAAsB,QAAsB;AAAA,EAC7D;AAAA,EAES,SAAe;AAAA,EACxB;AAAA,EAES,aAAa,OAAuD;AACzE,WAAO,CAAC;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,GAAG,YAA0D;AAChE,WAAO,sBAAsB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,YAAkE;AAC5E,QAAI,EAAE,sBAAsB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,EAC1E;AACJ;;;AChDO,IAAM,kBAAN,MAAM,yBAAwB,eAAe;AAAA,EACvC,OAAO;AAAA,EACP,aAAa;AAAA,EAEd,SAAgC;AAAA,IACpC,aAAa;AAAA,IACb,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,EACxB;AAAA,EACiB,eAAe,IAAI,wBAAwB,KAAK,EAAE;AAAA,EAC3D,SAAuB,aAAK,OAAO;AAAA,EACnC,YAAY;AAAA,EACZ,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAMf,YAAY,OAAwB,QAAyC;AACzE,UAAM,KAAK;AACX,WAAO,OAAO,KAAK,QAAQ,MAAM;AAAA,EACrC;AAAA;AAAA,EAGA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,UAAM,EAAE,cAAc,QAAQ,UAAU,IAAI;AAC5C,UAAM,MAAM,aAAK,WAAW,GAAG,GAAG,SAAS;AAC3C,iBAAK,cAAc,KAAK,KAAK,aAAa,QAAQ;AAClD,iBAAK,IAAI,KAAK,KAAK,MAAM;AACzB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,SAAK,aAAa,QAAQ;AAC1B,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,aAAa,MAAM;AACxB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,MAAM,OAAqB;AAC3B,SAAK,SAAS;AACd,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAe;AACxB,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAwC;AACjD,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAAA,EACpD;AAAA,EAES,UAAU,iBAAiB,OAA6B;AAC7D,UAAM,EAAE,MAAM,OAAO,cAAc,UAAAC,WAAU,IAAI,IAAI;AACrD,UAAM,EAAE,SAAS,IAAI;AACrB,WAAO,EAAE,MAAM,OAAO,UAAU,UAAAA,WAAU,YAAY,KAAK,GAAI,iBAAiB,EAAE,UAAU,KAAK,SAAS,IAAI,OAAW;AAAA,EAC7H;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,OAAO,YAAY,UAAAA,UAAS,IAAI;AAClE,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,cAAc,QAAW;AACzB,WAAK,OAAO;AAAA,IAChB;AACA,QAAI,OAAO;AACP,WAAK,SAAS;AAAA,IAClB;AACA,QAAI,UAAU;AACV,WAAK,aAAa,kBAAkB,QAAQ;AAC5C,WAAK,aAAa,OAAO;AAAA,IAC7B;AACA,QAAIA,WAAU;AACV,WAAK,YAAYA;AACjB,UAAI,CAAC,SAAS,YAAY,UAAU;AAChC,cAAM,MAAM,aAAK,WAAW,GAAG,GAAG,CAACA,SAAQ;AAC3C,qBAAK,cAAc,KAAK,KAAK,QAAQ;AACrC,aAAK,SAAS,aAAK,IAAI,KAAK,KAAK,QAAQ;AAAA,MAC7C;AAAA,IACJ;AACA,QAAI,YAAY,OAAO;AACnB,YAAM,EAAE,aAAa,IAAI;AACzB,UAAI,CAACA,WAAU;AACX,aAAK,YAAY,aAAK,SAAS,UAAU,KAAK;AAAA,MAClD;AACA,UAAI,CAAC,UAAU;AACX,cAAM,CAAC,GAAG,GAAG,CAAC,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,UAAU,KAAK;AACzD,cAAM,QAAQ,KAAK,MAAM,CAAC,GAAG,aAAK,IAAI,aAAK,WAAW,GAAG,CAAC,CAAC,CAAC;AAC5D,cAAM,MAAM,KAAK,MAAM,GAAG,CAAC;AAC3B,qBAAa,MAAM,MAAM,MAAM,KAAK;AACpC,qBAAa,QAAQ,QAAQ,MAAM,KAAK;AACxC,qBAAa,OAAO;AAAA,MACxB;AAAA,IACJ;AACA,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACjB;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,OAAO,IAAI;AACnB,SAAK,SAAS;AACd,SAAK,YAAY,KAAK,IAAI,OAAO,aAAa,SAAS,KAAK,IAAI,eAAS,SAAS,KAAK,IAAI,IAAI,CAAC,CAAC;AACjG,SAAK,QAAQ;AAAA,EACjB;AAAA,EAES,SAAS;AACd,UAAM,EAAE,MAAM,YAAY,QAAQ,cAAc,WAAW,MAAM,QAAQ,OAAO,IAAI;AACpF,UAAM,KAAK,KAAK,cAAc,KAAK,mBAAmB,KAAK;AAC3D,UAAM,KAAK,CAAC,KAAK,cAAc,KAAK,mBAAmB,KAAK;AAC5D,UAAM,KAAK,KAAK,cAAc,IAAI,KAAK,mBAAmB,KAAK,cAAc,IAAI,KAAK,eAAe;AACrG,UAAM,KAAK,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC1E,UAAM,KAAK,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAE7E,iBAAa,OAAO;AACpB,UAAM,qBAAqB,MAAM,OAAO,qBAAqB;AAC7D,QAAI,MAAM,IAAI;AACV,mBAAa,SAAS,CAAC,KAAK;AAC5B,mBAAa,OAAO,CAAC,KAAK;AAC1B,WAAK,QAAQ;AAAA,IACjB;AAEA,UAAM,WAAW,KAAK,IAAM,KAAK,KAAK,MAAO,OAAQ,CAAC,IAAI;AAC1D,UAAM,iBAAiB,YAAY,WAAW,aAAa,OAAO,iBAAiB;AACnF,QAAI,IAAI;AACJ,WAAK,aAAa,KAAK;AACvB,WAAK,QAAQ;AAAA,IACjB,WAAW,MAAM,IAAI;AACjB,YAAM,gBAAgB,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,KAAK,gBAAgB,CAAC,KAAK,gBAAgB,CAAC,GAAG,aAAa,QAAQ;AAC5I,WAAK,SAAS,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,aAAa;AAC3D,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,EAAE,QAAQ,cAAc,UAAU,KAAK,IAAI;AACjD,UAAM,UAA8B,CAAC;AACrC,QAAI,CAAC,SAAS,CAAC,aAAK,YAAY,MAAM,UAAU,QAAQ,GAAG;AACvD,cAAQ,WAAW;AAAA,IACvB;AACA,QAAI,CAAC,SAAS,MAAM,aAAa,aAAa,UAAU;AACpD,cAAQ,WAAW,aAAa;AAAA,IACpC;AACA,QAAI,CAAC,SAAS,MAAM,UAAU,QAAQ;AAClC,cAAQ,QAAQ;AAAA,IACpB;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,MAAM;AAC9B,cAAQ,MAAM;AAAA,IAClB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,GAAG,YAA2D;AACjE,WAAO,sBAAsB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,YAAmE;AAC7E,QAAI,EAAE,sBAAsB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,EAC3E;AACJ;;;ACnNO,IAAM,kBAAN,MAAM,yBAAwB,eAAe;AAAA,EACvC,OAAO;AAAA,EACP,aAAa;AAAA,EAEd,SAAgC;AAAA,IACpC,cAAc;AAAA,IACd,gBAAgB;AAAA,EACpB;AAAA,EACQ,YAA0B,aAAK,OAAO;AAAA,EACtC,eAAe,IAAI,wBAAwB;AAAA,EAC3C,OAAO;AAAA;AAAA;AAAA;AAAA,EAKf,YAAY,OAAwB;AAChC,UAAM,KAAK;AAAA,EACf;AAAA;AAAA,EAGA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAqB;AAC9B,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,SAAK,aAAa,QAAQ;AAC1B,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,aAAa,MAAM;AACxB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,OAAO;AACP,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,KAAK,OAAe;AACpB,SAAK,aAAa,OAAO;AACzB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAwC;AACjD,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAChD,QAAI,KAAK,MAAM,aAAa,MAAM;AAC9B,WAAK,MAAM,iBAAiB,KAAK,OAAO;AAAA,IAC5C;AAAA,EACJ;AAAA,EAES,YAAkC;AACvC,UAAM,EAAE,MAAM,UAAU,cAAc,KAAK,IAAI;AAC/C,UAAM,EAAE,SAAS,IAAI;AACrB,WAAO,EAAE,MAAM,UAAU,UAAU,WAAW,KAAK;AAAA,EACvD;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,WAAW,UAAAC,WAAU,WAAW,IAAI;AACtE,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,UAAU;AACV,WAAK,YAAY;AAAA,IACrB;AACA,QAAI,UAAU;AACV,WAAK,aAAa,kBAAkB,QAAQ;AAAA,IAChD;AACA,QAAI,WAAW;AACX,WAAK,OAAO;AAAA,IAChB,WAAW,cAAcA,WAAU;AAC/B,WAAK,OAAO,iBAAgB,mBAAmB,YAAYA,SAAQ;AAAA,IACvE;AACA,SAAK,QAAQ;AACb,SAAK,MAAM,iBAAiB,KAAK,OAAO;AACxC,SAAK,MAAM,YAAY;AAAA,EAC3B;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,aAAa,IAAI;AACzB,UAAM,MAAM,aAAK,WAAW,GAAG,GAAG,MAAM;AACxC,iBAAK,cAAc,KAAK,KAAK,aAAa,QAAQ;AAClD,SAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AACpD,SAAK,aAAa,QAAQ;AAC1B,SAAK,aAAa,MAAM;AACxB,SAAK,aAAa,OAAO;AACzB,SAAK,OAAO,SAAS;AACrB,SAAK,QAAQ;AAAA,EACjB;AAAA,EAES,OAAO,gBAA8B,UAAkB,KAAM,UAA+B;AACjG,UAAM,EAAE,cAAc,UAAU,IAAI;AACpC,QAAI,SAAS;AACT,UAAI,cAAc,aAAa;AAC/B,UAAI,YAAY,aAAa;AAC7B,UAAI,UAAU;AACV,cAAM,EAAE,OAAO,IAAI,IAAI,kBAAkB,QAAQ;AACjD,sBAAc,QAAQ,KAAK,KAAK;AAChC,oBAAY,MAAM,KAAK,KAAK;AAAA,MAChC;AAEA,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,KAAK,UAAU;AAAA,QAC3E,OAAO,EAAE,KAAK,aAAK,MAAM,SAAS,GAAG,OAAO,aAAa,OAAO,KAAK,aAAa,IAAI;AAAA,MAC1F,CAAC;AAAA,IACL,OACK;AACD,WAAK,YAAY;AACjB,UAAI,UAAU;AACV,aAAK,aAAa,kBAAkB,QAAQ;AAAA,MAChD;AACA,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,OAAO,gBAAgC,UAAkB,KAAY;AAC1E,UAAM,EAAE,cAAc,WAAW,KAAK,IAAI;AAC1C,QAAI,SAAS;AACT,YAAMC,QAAO,KAAK,IAAI,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,IAAI,IAAI,CAAC,GAAG,eAAe,MAAM;AAC1G,YAAM,iBAAiB,aAAK,OAAO;AACnC,mBAAK,IAAI,gBAAgB,aAAK,cAAc,gBAAgB,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,aAAa,QAAQ,GAAG,eAAe,MAAM;AACtI,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,OAAO,KAAK,aAAa,MAAM,KAAK;AAAA,QAChG,OAAO,EAAE,KAAK,aAAK,MAAM,SAAS,GAAG,OAAO,aAAa,OAAO,KAAK,aAAa,IAAI;AAAA,MAC1F,CAAC;AAAA,IACL,OAAO;AACH,YAAMA,QAAO,eAAe,SAAS,KAAK,IAAI,eAAS,SAAS,IAAI,IAAI,CAAC;AACzE,WAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,GAAG,GAAGA,KAAI,GAAG,aAAa,QAAQ,GAAG,eAAe,MAAM;AACrJ,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,SAAS;AACd,UAAM,EAAE,MAAM,SAAS,QAAQ,WAAW,cAAc,UAAU,aAAa,IAAI;AACnF,QAAI,cAAc;AACd,WAAK,YAAY,aAAK,MAAM,aAAa,GAAG;AAC5C,mBAAa,QAAQ,aAAa;AAClC,mBAAa,MAAM,aAAa;AAChC,WAAK,QAAQ;AACb;AAAA,IACJ;AAGA,QAAI,KAAK,CAAC,KAAK,cAAc,KAAK,mBAAmB,KAAK,mBAAmB,KAAK,mBAAmB,KAAK;AAC1G,QAAI,KAAK,CAAC,KAAK,cAAc,KAAK,mBAAmB,KAAK,mBAAmB,KAAK,mBAAmB,KAAK;AAC1G,UAAM,KAAM,KAAK,eAAe,OAAQ,WAAW,KAAK,cAAc,OAAO;AAC7E,UAAM,KAAK,CAAC,KAAK,4BAA4B;AAC7C,UAAM,QAAQ,WAAW,IAAI,KAAK,eAAe,KAAK,eAAe,KAAK;AAC1E,UAAM,CAAC,OAAO,KAAK,IAAI;AAEvB,QAAI,IAAI;AACJ,mBAAa,QAAQ,KAAK;AAC1B,WAAK,QAAQ;AAAA,IACjB;AACA,QAAI,MAAM,MAAM,MAAM,MAAM;AACxB,UAAI,QAAQ,GAAG;AACX,cAAM,KAAK,IAAK,OAAO;AACvB,cAAM,QAAQ,CAAC,OAAO;AACtB,cAAM,QAAQ,OAAO;AACrB,aAAK,QAAQ;AAAA,MACjB;AACA,YAAMC,SAAQ,KAAK,OAAO;AAC1B,YAAM,WAAW,aAAK,cAAc,aAAK,OAAO,GAAG,aAAK,WAAW,KAAKA,SAAQ,IAAI,KAAKA,QAAO,EAAE,GAAG,aAAa,QAAQ;AAC1H,WAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,WAAW,QAAQ;AAC5D,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,UAA8B,CAAC;AACrC,QAAI,CAAC,SAAS,MAAM,aAAa,KAAK,WAAW;AAC7C,cAAQ,WAAW,KAAK;AAAA,IAC5B;AACA,QAAI,CAAC,SAAS,MAAM,aAAa,KAAK,aAAa,UAAU;AACzD,cAAQ,WAAW,KAAK,aAAa;AAAA,IACzC;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,KAAK,MAAM;AACnC,cAAQ,MAAM,KAAK;AAAA,IACvB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAGA,OAAe,mBAAmB,gBAAwB,kBAA0B;AAChF,WAAO,KAAK,IAAI,KAAK,gBAAgB,IAAI,KAAK,IAAM,KAAK,KAAK,MAAO,iBAAkB,CAAC,IAAI;AAAA,EAChG;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,GAAG,YAA2D;AACjE,WAAO,sBAAsB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,YAAmE;AAC7E,QAAI,EAAE,sBAAsB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,EAC3E;AACJ;;;AC7OO,IAAM,qBAAN,MAAM,4BAA2B,eAAe;AAAA,EAC1C,OAAO;AAAA,EACP,aAAa;AAAA,EACd,SAAmC;AAAA,IACvC,oBAAoB;AAAA,EACxB;AAAA,EACQ,YAA0B,aAAK,OAAO;AAAA,EAC7B,eAAe,IAAI,wBAAwB,KAAK,EAAE;AAAA,EAC3D,OAAO;AAAA;AAAA;AAAA;AAAA,EAKf,YAAY,OAAwB;AAChC,UAAM,KAAK;AAAA,EACf;AAAA;AAAA,EAGA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAqB;AAC9B,SAAK,YAAY;AACjB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA;AAAA,EAGA,IAAI,QAAQ;AACR,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,MAAM,OAAe;AACrB,SAAK,aAAa,QAAQ;AAC1B,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,aAAa,MAAM;AACxB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,IAAI,MAAM;AACN,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,IAAI,OAAe;AACnB,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAA2C;AACpD,SAAK,SAAS,eAAe,KAAK,QAAQ,MAAM;AAAA,EACpD;AAAA,EAES,YAAkC;AACvC,UAAM,EAAE,MAAM,UAAU,cAAc,KAAK,IAAI;AAC/C,UAAM,EAAE,SAAS,IAAI;AACrB,WAAO,EAAE,MAAM,UAAU,UAAU,YAAY,KAAK;AAAA,EACxD;AAAA,EAES,KAAK,QAA8B;AACxC,UAAM,EAAE,MAAM,UAAU,UAAU,WAAW,IAAI;AACjD,YAAQ,OAAO,QAAQ,KAAK,IAAI;AAChC,QAAI,UAAU;AACV,WAAK,YAAY;AAAA,IACrB;AACA,QAAI,UAAU;AACV,WAAK,aAAa,kBAAkB,QAAQ;AAC5C,WAAK,aAAa,OAAO;AAAA,IAC7B;AACA,QAAI,cAAc,QAAW;AACzB,WAAK,OAAO;AAAA,IAChB;AACA,SAAK,MAAM,YAAY;AACvB,SAAK,MAAM,iBAAiB;AAC5B,SAAK,OAAO;AAAA,EAChB;AAAA,EAES,QAAQ,QAAsB,QAAsB;AACzD,UAAM,EAAE,aAAa,IAAI;AACzB,UAAM,cAAc;AACpB,UAAMC,YAAW,KAAK,IAAI,aAAa,SAAS,KAAK,IAAI,eAAS,SAAS,KAAK,IAAI,IAAI,CAAC,CAAC;AAC1F,UAAM,MAAM,aAAK,WAAW,GAAG,GAAGA,SAAQ;AAC1C,iBAAK,cAAc,KAAK,KAAK,aAAa,QAAQ;AAClD,SAAK,YAAY,aAAK,IAAI,aAAK,OAAO,GAAG,QAAQ,GAAG;AAAA,EACxD;AAAA,EAES,OAAO,gBAA8B,UAAkB,KAAM,UAA+B;AACjG,UAAM,EAAE,cAAc,UAAU,IAAI;AACpC,QAAI,SAAS;AACT,UAAI,cAAc,aAAa;AAC/B,UAAI,YAAY,aAAa;AAC7B,UAAI,UAAU;AACV,cAAM,EAAE,OAAO,IAAI,IAAI,kBAAkB,QAAQ;AACjD,sBAAc,QAAQ,KAAK,KAAK;AAChC,oBAAY,MAAM,KAAK,KAAK;AAAA,MAChC;AAEA,WAAK,SAAS;AAAA,QACV,iBAAiB;AAAA,QACjB,KAAK,EAAE,KAAK,aAAK,MAAM,cAAc,GAAG,OAAO,aAAa,KAAK,UAAU;AAAA,QAC3E,OAAO,EAAE,KAAK,aAAK,MAAM,SAAS,GAAG,OAAO,aAAa,OAAO,KAAK,aAAa,IAAI;AAAA,MAC1F,CAAC;AAAA,IACL,OACK;AACD,WAAK,YAAY;AACjB,UAAI,UAAU;AACV,aAAK,aAAa,kBAAkB,QAAQ;AAAA,MAChD;AACA,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,SAAe;AACpB,UAAM,EAAE,MAAM,cAAc,QAAQ,QAAQ,MAAM,aAAa,IAAI;AACnE,QAAI,cAAc;AACd,WAAK,YAAY,aAAK,MAAM,aAAa,GAAG;AAC5C,mBAAa,QAAQ,aAAa;AAClC,mBAAa,MAAM,aAAa;AAChC,WAAK,QAAQ;AACb;AAAA,IACJ;AACA,UAAM,KAAK,KAAK,cAAc,KAAK,cAAc,KAAK;AACtD,UAAM,KAAK,CAAC,KAAK,yBAAyB,IAAI,KAAK,mBAAmB,KAAK;AAC3E,UAAM,KAAK,CAAC,KAAK,4BAA4B,IAAI,KAAK,mBAAmB,KAAK;AAC9E,iBAAa,OAAO;AAEpB,QAAI,MAAM,IAAI;AACV,YAAM,qBAAqB,KAAK,OAAO,OAAO,qBAAqB;AACnE,mBAAa,SAAS,KAAK;AAC3B,mBAAa,OAAO,KAAK;AACzB,WAAK,QAAQ;AAAA,IACjB;AAEA,QAAI,IAAI;AACJ,YAAM,KAAK,IAAK,KAAK;AACrB,WAAK,OAAO,KAAK,IAAI,KAAK,IAAI,IAAI,OAAO,EAAE,GAAG,GAAG;AACjD,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EAES,aAAa,OAAuD;AACzE,UAAM,UAA8B,CAAC;AACrC,UAAM,EAAE,WAAW,cAAc,KAAK,IAAI;AAC1C,QAAI,CAAC,SAAS,MAAM,aAAa,WAAW;AACxC,cAAQ,WAAW;AAAA,IACvB;AACA,QAAI,CAAC,SAAS,MAAM,aAAa,aAAa,UAAU;AACpD,cAAQ,WAAW,aAAa;AAAA,IACpC;AACA,QAAI,CAAC,SAAS,MAAM,QAAQ,MAAM;AAC9B,cAAQ,MAAM;AAAA,IAClB;AACA,QAAI,CAAC,OAAO;AACR,cAAQ,OAAO;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,GAAG,YAA8D;AACpE,WAAO,sBAAsB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAO,YAAsE;AAChF,QAAI,EAAE,sBAAsB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,EAC9E;AACJ;;;AC1LO,SAAS,mBAAmB,OAAwB,MAAmB;AAC1E,SAAO;AAAA,IACH,OAAO,IAAI,gBAAgB,KAAK;AAAA,IAChC,QAAQ,IAAI,iBAAiB,OAAO,IAAI;AAAA,IACxC,OAAO,IAAI,gBAAgB,KAAK;AAAA,IAChC,UAAU,IAAI,mBAAmB,KAAK;AAAA,IACtC,cAAc,IAAI,uBAAuB,OAAO,IAAI;AAAA,IACpD,aAAa,IAAI,sBAAsB,OAAO,IAAI;AAAA,IAClD,SAAS,IAAI,wBAAwB,OAAO,IAAI;AAAA,IAChD,MAAM,IAAI,eAAe,KAAK;AAAA,EAClC;AACJ;;;ACrBA,IAAM,aAAa;AAAA,EACf,SAAS,UAAU,gBAAgB,eAAe;AAAA,EAClD,SAAS,UAAUC,iBAAgB,eAAe;AACtD;AAGO,SAAS,UAAU,SAAc,WAAkC;AACtE,gBAAc,SAAS,WAAW,SAAS,CAAC;AAChD;AAEA,SAAS,UAAU,aAAwC,cAAiC;AACxF,QAAM,QAAQ;AAAA,IACV,QAAQ;AAAA,MACJ,UAAU;AAAA,MACV,UAAU;AAAA,MACV,OAAO;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACF,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACF,UAAU;AAAA,IACd;AAAA,IAEA,UAAU;AAAA,MACN,QAAQ,UAAU,WAAW;AAAA,IACjC;AAAA,IACA,UAAU;AAAA,MACN,OAAO;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACH,QAAQ;AAAA,QACJ,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,gBAAgB;AAAA,UACZ,QAAQ;AAAA,QACZ;AAAA,QACA,MAAM;AAAA,UACF,KAAK;AAAA,UACL,KAAK;AAAA,QACT;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,SAAS;AAAA,MACL,SAAS,mBAAmB,aAAa,YAAY;AAAA,IACzD;AAAA,EACJ;AACA,SAAO;AACX;AAEA,SAASA,gBAAe,GAAa;AACjC,QAAMC,SAAQ,CAAC,GAAG,CAAC;AACnB,QAAM,MAAMA,OAAM,CAAC;AACnB,EAAAA,OAAM,CAAC,IAAIA,OAAM,CAAC;AAClB,EAAAA,OAAM,CAAC,IAAI,CAAC;AACZ,SAAOA;AACX;AAIO,SAAS,eAAe,GAAa;AACxC,QAAMA,SAAQ,CAAC,GAAG,CAAC;AACnB,QAAM,MAAMA,OAAM,CAAC;AACnB,EAAAA,OAAM,CAAC,IAAI,CAACA,OAAM,CAAC;AACnB,EAAAA,OAAM,CAAC,IAAI;AACX,SAAOA;AACX;AAQO,SAAS,gBAAgB,GAAS;AACrC,MAAI,KAAK,qBACL,KAAK;AACT,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,aAAK;AAAA,IACR,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,CAAE,KAAK;AAAA,IACjB,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,EAAE;AACzB;AAQO,SAAS,gBAAgB,GAAS;AACrC,MAAI,KAAK,oBACL,KAAK;AACT,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,aAAK;AAAA,IACR,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,CAAE,KAAK;AAAA,IACjB,KAAK,KAAK,KAAK;AAAA,IACf,KAAK,KAAK,KAAK;AAAA,EAAE;AACzB;AAEA,SAAS,mBAAmB,aAAwC,cAAiC;AACjG,SAAO,SAAU,IAAgC;AAC7C,UAAM,iBAA6C,CAAC;AACpD,eAAW,OAAO,IAAI;AAClB,YAAM,mBAAiD,CAAC;AACxD,iBAAW,QAAQ,IAAI,WAAW;AAC9B,yBAAiB,KAAK;AAAA,UAClB,UAAU,YAAY,KAAK,QAAe;AAAA,UAC1C,UAAU,KAAK,WAAW,aAAa,KAAK,QAAe,IAAI;AAAA,UAC/D,OAAO,KAAK;AAAA,QAChB,CAAC;AAAA,MACL;AACA,qBAAe,KAAK,EAAE,MAAM,IAAI,MAAM,WAAW,kBAAkB,cAAc,IAAI,aAAa,CAAC;AAAA,IACvG;AACA,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,UAAU,UAAqC;AACpD,SAAO,SAAU,IAAgC;AAC7C,UAAM,gBAA4C,CAAC;AACnD,eAAW,SAAS,IAAI;AACpB,oBAAc,KAAK;AAAA,QACf,OAAO,MAAM;AAAA,QAAO,SAAS,MAAM;AAAA,QACnC,cAAc,SAAS,MAAM,YAA+B;AAAA,MAChE,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AACJ;AAGO,SAAS,cAAc,OAAY,OAAY;AAClD,aAAW,OAAO,OAAO;AACrB,UAAM,OAAO,QAAQ,MAAM,GAAG,IAAI;AAClC,UAAM,QAAQ,MAAM,GAAG;AACvB,QAAI,QAAQ,OAAO;AACf,UAAI,OAAO,QAAQ,YAAY;AAC3B,cAAM,GAAG,IAAI,KAAK,KAAK;AAAA,MAC3B,OAAO;AACH,sBAAc,OAAO,IAAI;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACtHO,SAAS,kBAAkB,YAA+B,eAAuB,UAA6D;AACjJ,QAAM,mBAAmB,WAAW,KAAK,CAAC,GAAG,MAAM,SAAS,2BAA2B,YAAY,KAAK,IAAI,EAAE,SAAS,IAAI,KAAK,IAAI,EAAE,SAAS,IAAI,KAAK,IAAI,EAAE,SAAS,IAAI,KAAK,IAAI,EAAE,SAAS,CAAC;AAChM,QAAM,SAA2B,CAAC;AAClC,QAAM,aAA6D,CAAC;AACpE,QAAM,sBAAsB;AAC5B,QAAM,qBAAqB;AAC3B,QAAM,UAAU,sBAAsB;AACtC,QAAM,SAAS,qBAAqB;AACpC,QAAM,cAAc,SAAS,aAAa,aAAK,WAAW,SAAS,WAAW,cAAc,CAAC,GAAG,SAAS,WAAW,cAAc,CAAC,GAAG,CAAC,SAAS,WAAW,cAAc,CAAC,CAAC,IAAI;AAC/K,QAAM,iBAAiB;AACvB,WAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,EAAE,GAAG;AAC9C,UAAM,gBAAgB,iBAAiB,CAAC;AACxC,QAAI,WAAW;AACf,UAAM,WAAW,aAAK,WAAW,KAAK,MAAM,cAAc,IAAI,aAAa,GAAG,KAAK,MAAM,cAAc,IAAI,aAAa,CAAC;AAEzH,eAAW,SAAS,QAAQ;AACxB,YAAM,KAAK,MAAM,SAAS,CAAC,IAAI,SAAS,CAAC;AACzC,YAAM,KAAK,MAAM,SAAS,CAAC,IAAI,SAAS,CAAC;AACzC,YAAMC,WAAU,KAAK,KAAK,KAAK;AAC/B,UAAIA,WAAU,SAAS;AACnB,mBAAW;AACX;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,YAAY,aAAa;AACzB,iBAAW,aAAK,gBAAgB,aAAa,cAAc,QAAQ,IAAI;AAAA,IAC3E;AACA,QAAI,UAAU;AACV,aAAO,KAAK,EAAE,UAAU,aAAK,MAAM,QAAQ,GAAG,WAAW,cAAc,UAAU,QAAQ,CAAC,EAAE,CAAC;AAAA,IACjG;AAEA,QAAI,SAAS,cAAc;AACvB,UAAI,eAAe;AACnB,iBAAW,SAAS,YAAY;AAC5B,cAAM,KAAK,MAAM,SAAS,CAAC,IAAI,SAAS,CAAC;AACzC,cAAM,KAAK,MAAM,SAAS,CAAC,IAAI,SAAS,CAAC;AACzC,cAAMA,WAAU,KAAK,KAAK,KAAK;AAC/B,YAAIA,WAAU,QAAQ;AAClB,yBAAe;AACf;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,gBAAgB,aAAa;AAC7B,uBAAe,aAAK,gBAAgB,aAAa,cAAc,QAAQ,IAAI;AAAA,MAC/E;AACA,UAAI,cAAc;AACd,mBAAW,KAAK,EAAE,UAAU,YAAY,cAAc,SAAS,CAAC;AAAA,MACpE;AAAA,IACJ;AAAA,EAEJ;AAEA,MAAI,SAAS,YAAY;AACrB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACpC,YAAM,MAAM,OAAO,CAAC,EAAE;AACtB,YAAM,MAAM,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,SAAS,WAAW,aAAa;AAC1E,mBAAK,UAAU,KAAK,GAAG;AACvB,mBAAK,YAAY,OAAO,CAAC,EAAE,UAAU,KAAK,KAAK,EAAE;AAAA,IACrD;AAGA,QAAI,eAA+C,CAAC;AACpD,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AACxC,YAAM,KAAK,aAAK,IAAI,aAAK,OAAO,GAAG,SAAS,WAAW,eAAe,WAAW,CAAC,EAAE,QAAQ;AAC5F,mBAAK,UAAU,IAAI,EAAE;AACrB,UAAIC,SAAQ,KAAK,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AACnC,UAAIA,SAAQ,CAAC,KAAK,KAAK,GAAG;AACtB,QAAAA,UAAS,KAAK,KAAK;AAAA,MACvB;AACA,mBAAa,KAAK,EAAE,OAAAA,QAAO,EAAE,CAAC;AAAA,IAClC;AACA,mBAAe,aAAa,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAC5D,QAAI,aAAa,SAAS,GAAG;AACzB,YAAM,OAAe,CAAC;AACtB,YAAM,SAAyB,CAAC;AAChC,iBAAW,KAAK,cAAc;AAC1B,YAAI,KAAK,SAAS,GAAG;AACjB,cAAI,aAAK,gBAAgB,OAAO,OAAO,SAAS,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,UAAU,IAAI,IAAI;AAClF;AAAA,UACJ;AAAA,QACJ;AACA,aAAK,KAAK,WAAW,EAAE,CAAC,EAAE,QAAQ;AAClC,eAAO,KAAK,WAAW,EAAE,CAAC,EAAE,UAAU;AAAA,MAC1C;AACA,aAAO,EAAE,QAAQ,KAAK;AAAA,IAC1B;AAAA,EAEJ;AAGA,SAAO,EAAE,OAAO;AACpB;;;ACzGO,IAAMC,QAAN,MAGiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6Cb,YAEM,QACT,eAAuC,SACvC,qBAAuE,oBACzE;AAHW;AAC8B;AAGvC,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,mDAAmD;AACvE,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,kEAAkE;AAEtF,SAAK,iBAAiB;AACtB,SAAK,oBAAoB,WAAW,eAAe,QAAQ,SAAS,KAAK,gBAAgB;AACzF,SAAK,gBAAgB,mBAAmB;AACxC,SAAK,iBAAiB,KAAK,kBAAkB,KAAK,aAAa;AAC/D,SAAK,iBAAiB;AAAA,MAClB,QAAQ,KAAK,YAAY;AAAA,MACzB,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAEA,UAAM,QAAQ,IAAI,gBAAgB,MAAM;AACxC,SAAK,cAAc,mBAAmB,OAAO,IAAI;AACjD,SAAK,oBAAoB,OAAO,OAAO,KAAK,WAAW,EAAE,CAAC;AAC1D,SAAK,kBAAkB,OAAO;AAE9B,UAAM,iBAAiB,KAAK,kBAAkB,IAAI,eAAe,MAAM;AACnE,WAAK,2BAA2B;AAAA,IACpC,CAAC;AACD,mBAAe,QAAQ,MAAM;AAC7B,SAAK,sBAAsB,kBAAkB,KAAK,gBAAgB,KAAK,OAAO;AAAA,EAClF;AAAA;AAAA,EA1EA;AAAA,EAEQ;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAgG;AAAA,EAChG;AAAA,EACA;AAAA,EAKS;AAAA;AAAA,EAGP;AAAA;AAAA,EAEA;AAAA;AAAA,EAEA;AAAA;AAAA,EAGF,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,iBAA4B;AAAA,EAC5B,gBAAgB;AAAA,EAEhB,oBAA4B;AAAA;AAAA,EA4CpC,CAAC,OAAO,OAAO,IAAI;AACf,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA,EAGA,UAAU;AACN,SAAK,gBAAgB,WAAW;AAChC,SAAK,gBAAgB,QAAQ;AAC7B,SAAK,iBAAiB;AAAA,EAC1B;AAAA;AAAA,EAGA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,mBAAmC;AACnC,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,gBAA2C;AAC3C,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAAE,WAAO,KAAK;AAAA,EAAgB;AAAA,EAClD,IAAI,cAAc,OAAsB;AACpC,SAAK,iBAAiB;AACtB,SAAK,oBAAoB,KAAK;AAAA,EAClC;AAAA;AAAA,EAGA,YAAY;AACR,UAAM,EAAE,eAAe,YAAY,IAAI;AACvC,UAAM,MAAO,eAAe,QAAQ,YAAY,YAAY,OAAO;AACnE,UAAM,MAAM,aAAK,SAAS,aAAK,OAAO,GAAG,GAAG;AAC5C,WAAO,KAAK,IAAI,IAAI,CAAC,CAAC,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,+BAA+B,GAAW,GAAW;AACjD,UAAM,EAAE,gBAAgB,OAAO,IAAI;AACnC,UAAM,EAAE,OAAO,OAAO,IAAI,KAAK,YAAY;AAC3C,QAAI,gBAAgB;AAChB,YAAM,OAAO,OAAO,sBAAsB;AAC1C,YAAM,WAAW,KAAK;AACtB,YAAM,YAAY,KAAK;AACvB,YAAM,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,WAAW,KAAK,CAAC,GAAG,KAAK;AACxE,YAAM,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK,OAAO,KAAK,IAAI,OAAO,aAAa,MAAM,CAAC,GAAG,MAAM;AACzF,YAAM,OAAQ,KAAK,OAAO,QAAS,IAAI;AACvC,YAAM,OAAQ,KAAK,OAAO,SAAU,IAAI;AACxC,YAAM,iBAAiB,eAAe,gBAAgB;AACtD,YAAM,kBAAkB,eAAe,iBAAiB;AACxD,YAAM,QAAQ,aAAK,WAAY,MAAM,eAAe,CAAC,GAAK,MAAM,eAAe,CAAC,GAAI,CAAC;AACrF,YAAM,MAAM,aAAK,cAAc,aAAK,OAAO,GAAG,OAAO,eAAe;AACpE,aAAO,aAAK,WAAW,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,IAClD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,sBAAsB,UAAkD;AAC1E,QAAI,eAAyC,CAAC;AAC9C,UAAM,WAAW,MAAM,MAAM,SAAS,SAAS,CAAC;AAChD,QAAI,SAAS,IAAI;AACb,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,qBAAgB,KAAkB,IAAI,UAAQ;AAC1C,eAAO,EAAE,MAAM,KAAK,IAAI,IAAI,MAAM,QAAQ,EAAE,SAAS,IAAI,KAAK,eAAe,IAAI,IAAI,cAAc,IAAI,QAAQ,QAAQ,EAAE,SAAS,EAAE;AAAA,MACxI,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,iBAAiB,KAAU,aAAiD;AAC9E,UAAM,cAAc,MAAM,KAAK;AAC/B,gBAAY,UAAU,GAAG;AACzB,UAAM,YAAY,IAAI,IAAI,GAAG;AAC7B,cAAU,YAAY;AACtB,UAAM,QAAQ,MAAM,cAAc,WAAW,WAAW;AACxD,UAAM,eAAe,EAAE,MAAM;AAC7B,cAAU,cAAc,SAAS;AACjC,SAAK,kBAAkB,YAAY;AACnC,WAAO,aAAa,MAAM;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,kBAAkB,UAAkF;AACtG,UAAM,UAAU,KAAK;AACrB,QAAI,SAAS;AACT,YAAMC,SAAQ,mBAAmB,KAAK;AACtC,aAAO,kBAAkB,MAAM,QAAQ,cAAc,GAAGA,QAAO,QAAQ;AAAA,IAC3E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,4BAA4B;AAC9B,UAAM,UAAU,KAAK;AACrB,QAAI,SAAS;AACT,cAAQ,kBAAkB;AAC1B,YAAM,QAAQ,MAAM,QAAQ,QAAQ,YAAY,GAAG;AACnD,aAAO,QAAQ,kBAAkB,IAAI;AAAA,IACzC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,kBAAkB,GAAW,GAAW,SAA2D;AACrG,UAAM,SAAS,MAAM,KAAK,KAAK,GAAG,GAAG,OAAO;AAC5C,QAAI,QAAQ;AACR,YAAM,cAAc,MAAM,KAAK;AAC/B,cAAQ,MAAM,YAAY,KAAK,kBAAkB,OAAO,UAAU,OAAO,QAAQ,GAAG;AAAA,IACxF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,KAAK,GAAW,GAAW,SAA2D;AACxF,UAAM,UAAU,KAAK;AACrB,QAAI,SAAS;AACT,YAAM,UAAU,MAAM,QAAQ,KAAK,GAAG,GAAG,OAAO;AAChD,UAAI,QAAQ,QAAQ;AAChB,YAAI,aAA4C;AAChD,cAAM,cAAc,aAAK,OAAO;AAChC,cAAM,cAAc,aAAK,OAAO;AAEhC,cAAM,gBAAgB;AAEtB,cAAM,eAAe,QAAQ,OAAO,CAAC,GAAG,MAAM;AAC1C,cAAI,cAAc,aAAa,aAAK,IAAI,EAAE,QAAQ,EAAE,MAAM,IAAI,eAAe;AACzE,yBAAK,KAAK,aAAa,EAAE,MAAM;AAC/B,yBAAK,KAAK,aAAa,EAAE,MAAM;AAC/B,yBAAa;AAAA,UACjB;AACA,cAAI,SAAS,gBAAgB,MAAM;AAC/B,gBAAI,EAAE,mBAAmB,OAAO;AAC5B,qBAAO;AAAA,YACX;AAAA,UACJ;AACA,iBAAO,EAAE,QAAQ,EAAE,QAAQ,IAAI;AAAA,QACnC,CAAC;AACD,YAAI,cAAqB,QAAQ;AAC7B,kBAAQ,QAAQ,OAAK;AACjB,gBAAI,aAAK,IAAI,EAAE,QAAQ,WAAW,IAAI,iBAAiB,aAAK,IAAI,EAAE,QAAQ,WAAW,IAAI,eAAe;AACpG,2BAAa;AAAA,YACjB;AAAA,UACJ,CAAC;AAAA,QACL;AACA,YAAI,SAAS,gBAAgB,QAAQ,aAAa,mBAAmB,OAAO;AACxE,iBAAO;AAAA,QACX;AACA,cAAM,wBAAwB,QAAQ,WAAW,SAAS,2CAAiD,KAAK,aAAK,OAAO;AAC5H,cAAM,gBAA+B;AAAA,UACjC,GAAG;AAAA,UACH,UAAU,aAAK,WAAW,aAAa,SAAS,CAAC,GAAG,CAAC,aAAa,SAAS,CAAC,GAAG,aAAa,SAAS,CAAC,CAAC;AAAA,UACvG,QAAQ,aAAK,WAAW,aAAa,OAAO,CAAC,GAAG,CAAC,aAAa,OAAO,CAAC,GAAG,aAAa,OAAO,CAAC,CAAC;AAAA,UAC/F;AAAA,UACA,UAAU,aAAK,cAAc,aAAK,OAAO,GAAG,aAAa,QAAQ,qBAAqB;AAAA,UACtF,WAAW,KAAK,cAAc,OAAO,YAAY,SAAY,aAAa;AAAA,QAC9E;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,uBACF,MACA,cACA,SACiC;AACjC,UAAM,WAAW,SAAS,YAAY;AACtC,aAAS,iBAAiBC,OAAcC,cAAmD;AACvF,aAAOD,SAAQC;AAAA,IACnB;AACA,QAAI,CAAC,iBAAiB,MAAM,KAAK,WAAW;AACxC,YAAM,IAAI,MAAM,4BAA4B,IAAI,GAAG;AAEvD,UAAM,EAAE,aAAa,eAAe,IAAI;AACxC,QAAI,EAAE,kBAAkB,IAAI;AAG5B,QAAIC;AACJ,QAAI,YAAY,kBAAkB,eAAe,WAAW;AACxD,qBAAe,kBAAkB;AACjC,YAAM,QAAQ,MAAM,eAAe,QAAQ,YAAY,GAAG;AAC1D,YAAM,SAAS,eAAe,gBAAgB,IAAI;AAClD,MAAAA,YAAW,OAAO;AAClB,iBAAW,SAAS,QAAQ;AACxB,QAAAA,YAAW,KAAK,IAAIA,WAAU,KAAK;AAAA,MACvC;AAAA,IACJ;AAGA,UAAM,YAAY,kBAAkB;AAAA,MAAU;AAAA;AAAA,IAA6C;AAC3F,UAAM,aAAa,YAAY,IAAI;AACnC,wBAAoB,KAAK,oBAAoB;AAC7C,UAAM,EAAE,UAAU,UAAU,OAAO,UAAU,IAAI;AACjD,sBAAkB,KAAK,EAAE,MAAM,UAAU,cAAc,YAAY,UAAU,UAAU,cAAc,YAAY,UAAU,OAAO,UAAAA,WAAU,WAAW,cAAc,QAAQ,QAAQ,aAAa,YAAY,QAAW,CAAC;AAC1N,UAAM,UAAU,kBAAkB,aAAa;AAC/C,SAAK,kBAAkB,EAAE,QAAQ,QAAQ,CAAC;AAC1C,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,IAAI,aAA2B;AACjC,QAAI;AACJ,QAAI,iBAAiB,YAAY,IAAI;AACrC,QAAI,kBAAkB;AACtB,QAAI,gBAAgB;AACpB,QAAI,UAAU;AACd,UAAM,iBAA2B,CAAC;AAClC,QAAI,kBAAkB;AACtB,WAAO,KAAK,QAAQ,EAAE,aAAa,WAAW,QAAQ;AAClD,YAAM,EAAE,gBAAgB,mBAAmB,cAAc,IAAI;AAC7D,YAAM,aAAa,MAAMC,eAAc,UAAU,cAAc;AAC/D,YAAM,YAAY,aAAa;AAC/B,YAAM,gBAAgB,kBAAkB,mBAAmB,KAAK,eAAe,QAAQ,aAAa,cAAc;AAClH,UAAI,eAAe;AACf,aAAK,kBAAkB,aAAa;AAAA,MACxC;AAEA,YAAM,cAAc,gBAAgB;AACpC,UAAI,kBAAkB,CAAC,eAAe,cAAc,GAAG;AACnD,uBAAe,KAAK;AAEpB,YAAI,aAAa;AACb,cAAI,cAAc,OAAO,KAAK,KAAK,YAAY,YAAY,MAAM,OAAO;AAEpE,iBAAK,kBAAkB,EAAE,aAAa,EAAE,IAAI,KAAK,GAAG,UAAU,EAAE,IAAI,KAAK,EAAE,CAAC;AAAA,UAChF;AACA,cAAI,CAAC,SAAS;AAEV,iBAAK,qBAAqB,KAAK,IAAI,GAAG,KAAK,uBAAuB,CAAC;AACnE,iBAAK,OAAO;AACZ,iBAAK,kBAAkB,EAAE,SAAS,EAAE,QAAQ,EAAE,EAAE,CAAC;AACjD,iBAAK,oBAAoB;AACzB,sBAAU;AAAA,UAEd;AAAA,QACJ,OAAO;AACH,cAAI,SAAS;AAET,iBAAK,qBAAqB,KAAK;AAC/B,iBAAK,iBAAiB;AAEtB,iBAAK,kBAAkB,EAAE,aAAa,EAAE,IAAI,MAAM,EAAE,CAAC;AACrD,iBAAK,gBAAgB;AACrB,sBAAU;AAAA,UACd,OAAO;AAEH,2BAAe,KAAK,SAAS;AAC7B,iBAAK,yBAAyB,cAAc;AAAA,UAChD;AACA,gBAAM,uBAAuB;AAC7B,cAAI,KAAK,cAAc,QAAQ,UAAU,sBAAsB;AAC3D,iBAAK,oBAAoB;AACzB,iBAAK,kBAAkB,EAAE,SAAS,EAAE,QAAQ,qBAAqB,EAAE,CAAC;AAAA,UACxE;AAAA,QACJ;AAEA,aAAK,UAAU,UAAU;AAEzB,YAAI,KAAK,eAAe;AACpB,eAAK,aAAa,KAAK,aAAa;AACpC,eAAK,gBAAgB;AAAA,QACzB;AAEA,cAAM,EAAE,cAAc,IAAI;AAC1B,YAAI,cAAc,iBAAiB,eAAe,SAAS;AACvD,sBAAY;AACZ,gBAAM,eAAe,eAAe,OAAO,aAAa;AACxD,uBAAa,KAAK,CAAC,UAAU;AACzB,iBAAK,cAAc,EAAE,QAAQ,OAAO,MAAM,EAAE,YAAY,KAAK,oBAAoB,YAAY,cAAc,aAAa,KAAK,mBAAmB,KAAK,MAAM,gBAAgB,MAAO,MAAM,gBAAgB,OAAU,EAAE;AACpN,iBAAK,SAAS,WAAW;AACzB,8BAAkB;AAAA,UACtB,CAAC;AAAA,QACL,WAAW,iBAAiB;AACxB,eAAK,SAAS,WAAW;AACzB,cAAI,aAAa;AAGb,2BAAe,kBAAkB;AAAA,UACrC;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,KAAK,kBAAkB,QAAQ;AAC/B,0BAAkB;AAClB,wBAAgB;AAAA,MACpB,WAAW,CAAC,iBAAiB;AACzB,yBAAiB;AAAA,MACrB;AACA,wBAAkB,KAAK,kBAAkB;AACzC,uBAAiB;AAAA,IACrB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO;AACH,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,SAAmC;AACjD,SAAK,gBAAgB,eAAe,KAAK,eAAe,OAAO;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,oBAAoB,SAAgD;AAChE,gBAAY,KAAK;AACjB,UAAM,cAAc,EAAE,GAAG,QAAQ;AACjC,cAAU,aAAa,SAAS;AAChC,UAAM,WAAW,eAAe,KAAK,eAAe,WAAW;AAC/D,WAAO,oBAAoB,UAAU,WAAW;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCmB,mBAAmB,CAAC,YAA2B;AAC9D,SAAK,iBAAiB;AACtB,SAAK,iBAAiB,KAAK,cAAc;AAAA,EAC7C;AAAA,EAEQ,iBAAiB,eAA8B;AACnD,SAAK,qBAAqB,cAAc;AACxC,SAAK,uBAAuB,cAAc;AAC1C,SAAK,2BAA2B;AAChC,SAAK,kBAAmB,MAAO,cAAc,kBAAmB;AAChE,SAAK,iBAAkB,MAAO,cAAc,kBAAmB;AAAA,EACnE;AAAA,EAEQ,SAAS;AACb,UAAMJ,SAAQ,mBAAmB,KAAK;AAEtC,QAAI,EAAE,OAAO,OAAO,IAAI,KAAK,OAAO,sBAAsB;AAC1D,SAAK,eAAe,QAAQ;AAC5B,SAAK,eAAe,SAAS;AAC7B,YAAQ,KAAK,MAAM,QAAQA,MAAK;AAChC,aAAS,KAAK,MAAM,SAASA,MAAK;AAClC,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,QAAI,SAAS,OAAO,SAAS,UAAU,OAAO,QAAQ;AAClD,WAAK,aAAa,EAAE,QAAQ,EAAE,OAAO,OAAO,EAAE,CAAC;AAAA,IACnD;AAAA,EACJ;AAAA,EAEQ,6BAA6B;AACjC,UAAM,EAAE,cAAc,IAAI;AAC1B,QAAI,cAAc,OAAO,GAAG;AACxB,YAAM,SAAS,cAAc,QAAQ,IAAI,MAAM,OAAO,OAAO;AAC7D,UAAI,uBAAuB,cAAc,mBAAmB;AAC5D,YAAM,EAAE,OAAO,OAAO,IAAI,KAAK,OAAO,sBAAsB;AAC5D,UAAI,UAAU,uBAAuB,IAAI,QAAQ;AACjD,UAAI,UAAU,QAAQ;AAClB,gCAAwB,SAAS;AAAA,MACrC;AACA,WAAK,uBAAuB;AAC5B,WAAK,qBAAqB;AAAA,IAC9B;AACA,SAAK,OAAO;AAAA,EAChB;AAAA,EAEQ,aAAa,SAA6B;AAC9C,SAAK,qBAAqB,KAAK;AAC/B,SAAK,iBAAiB,eAAe,KAAK,gBAAgB,OAAO;AACjE,SAAK,eAAe,SAAS,KAAK,eAAe;AACjD,cAAU,SAAS,SAAS;AAC5B,SAAK,gBAAgB,kBAAkB,KAAK,eAAe,OAAO;AAClE,SAAK,WAAW,KAAK,eAAe,OAAO;AAAA,EAC/C;AAAA,EAEQ,kBAAkB,OAAoB;AAC1C,UAAMK,SAAQ,gBAAgB,KAAK;AACnC,cAAUA,QAAO,SAAS;AAC1B,WAAOA;AAAA,EACX;AAAA;AAAA,EAIQ,yBAAyB,gBAA0B;AACvD,UAAM,UAAU;AAChB,QAAI,eAAe,UAAU,SAAS;AAClC,YAAM,kBAAkB,CAAC,GAAG,cAAc;AAC1C,sBAAgB,KAAK;AACrB,YAAM,iBAAiB,gBAAgB,KAAK,MAAM,UAAU,CAAC,CAAC;AAC9D,qBAAe,OAAO,GAAG,CAAC;AAC1B,YAAM,WAAW;AACjB,YAAM,MAAM,YAAY,IAAI;AAE5B,UAAI,KAAK,eAAe;AACpB,cAAM,gBAAgB,iBAAiB,KAAK,kBAAkB,KAAK,kBAAkB;AACrF,YAAI,KAAK,iBAAiB,eAAe;AACrC,eAAK,gBAAgB;AACrB,eAAK,kBAAkB,EAAE,UAAU,EAAE,IAAI,KAAK,cAAc,EAAE,CAAC;AAAA,QACnE;AAAA,MACJ;AACA,UAAI,MAAM,KAAK,oBAAoB,UAAU;AACzC,aAAK,yBAAyB,gBAAgB,GAAG;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEQ,yBAAyB,gBAAwB,KAAa;AAClE,UAAM,oBAAoB,KAAK;AAC/B,UAAM,mBAAmB,KAAK;AAE9B,UAAM,kBAAkB,CAAC,KAAK,KAAK,CAAC;AACpC,QAAI,iBAAiB,mBAAmB;AACpC,UAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAK,qBAAqB,KAAK,uBAAuB,gBAAgB,EAAE,KAAK,cAAc;AAC3F,aAAK,OAAO;AAAA,MAChB;AACA,WAAK,oBAAoB;AACzB;AAAA,IACJ,WAAW,iBAAiB,kBAAkB;AAC1C,UAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAK,qBAAqB,KAAK,uBAAuB,gBAAgB,EAAE,KAAK,cAAc;AAC3F,aAAK,oBAAoB;AACzB,aAAK,OAAO;AAAA,MAChB;AACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,aAAa,gBAAgB,KAA0C;AACnE,UAAM,gBAAgB,sBAAsB,GAAG;AAC/C,UAAM,iBAAiB,uBAAuB,GAAG;AACjD,UAAM,CAAC,QAAQC,QAAO,IAAI,MAAM,QAAQ,IAAI,CAAC,eAAe,cAAc,CAAC;AAC3E,WAAO;AAAA,MACH,GAAG;AAAA,MACH,GAAGA;AAAA,IACP;AAAA,EACJ;AACJ;;;AC5oBO,SAAS,yBAAwC;AACpD,SAAO;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,EAChB;AACJ;AAOO,SAAS,2BAA2B,SAAgC;AACvE,SAAO;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAS;AAAA,EACtB;AACJ;AAOO,SAAS,wBAAwB,OAAkC;AACtE,QAAM,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI;AACrB,SAAO;AAAA,IACH;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IACZ;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,KAAK;AAAA,EACrB;AACJ;AASO,SAAS,6BAA6B,SAAiD;AAC1F,QAAM,IAAI,yBAAyB,QAAQ,GAAG;AAC9C,QAAM,IAAI,yBAAyB,QAAQ,KAAK;AAChD,QAAM,IAAI,yBAAyB,QAAQ,IAAI;AAC/C,QAAM,IAAI,yBAAyB,QAAQ,OAAO;AAClD,SAAO;AAAA,IACH,EAAE,CAAC;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAClB;AAAA,IAAG,EAAE,CAAC;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAClB;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAClB;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,EAAE,CAAC;AAAA,IAAG,EAAE,CAAC;AAAA,EACtB;AACJ;AAOO,SAAS,6BAA6B,SAAiD;AAC1F,QAAM,CAAC,IAAI,EAAE,IAAI,yBAAyB,QAAQ,SAAS;AAC3D,QAAM,CAAC,IAAI,EAAE,IAAI,yBAAyB,QAAQ,OAAO;AAEzD,WAAS,IAAI,GAAW,GAAW,GAAW;AAC1C,WAAO,KAAK,IAAI,KAAK;AAAA,EACzB;AAEA,QAAM,KAAK,QAAQ,cAAc;AACjC,QAAM,KAAK,IAAI,IAAI,GAAG,GAAG,EAAE,IAAI;AAC/B,QAAM,KAAK,IAAI,IAAI,GAAG,GAAG,EAAE,IAAI;AAI/B,SAAO;AAAA,IACH;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IACf;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IACf;AAAA,IAAI;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IACf;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,EACjB;AACJ;AAEA,SAAS,kBAAkB,WAA+E;AACtG,SAAO,OAAQ,aAAc;AACjC;AAEA,SAAS,yBAAyB,WAAiD;AAC/E,MAAIC,SAAQ;AACZ,MAAI,SAAS;AACb,MAAI,kBAAkB,SAAS,GAAG;AAC9B,QAAI,UAAU,SAAS,QAAW;AAC9B,MAAAA,SAAQ,UAAU;AAAA,IACtB;AACA,QAAI,UAAU,UAAU,QAAW;AAC/B,eAAS,UAAU;AAAA,IACvB;AAAA,EACJ,WAAW,OAAO,aAAa,UAAU;AACrC,IAAAA,SAAQ;AACR,aAAS;AAAA,EACb;AACA,SAAO,CAACA,QAAO,MAAM;AACzB;;;ACvGA,IAAM,kBAA8C;AAAA,EAChD,MAAM;AAAA,EACN,gBAAgB;AAAA,EAChB,iBAAiB;AACrB;AAEA,IAAM,kBAA8C;AAAA,EAChD,UAAU,aAAK,OAAO;AAC1B;AAGO,SAAS,sBAAsB,QAAQ,GAAG,QAAiB;AAC9D,QAAM,YAA0C,CAAC;AACjD,QAAM,IAAI,UAAU,SAAS,IAAI,IAAI,KAAK,IAAI,OAAO,IAAI,CAAC,IAAI;AAC9D,QAAM,WAAW,OAAQ,KAAK,OAAO,IAAI,IAAI,KAAK;AAClD,QAAM,WAAW,MAAO,KAAK,OAAO,IAAI;AACxC,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,UAAM,WAAW,aAAK,WAAW,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;AACnE,QAAI,aAAK,OAAO,QAAQ,IAAI,IAAI,GAAG;AAC/B;AACA;AAAA,IACJ;AACA,UAAM,WAAW,aAAK,UAAU,aAAK,OAAO,GAAG,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC;AACjF,cAAU,KAAK,EAAE,UAAU,SAAS,CAAC;AAAA,EACzC;AACA,SAAO;AACX;AAaO,SAAS,iBAAiB,UAAiE;AAC9F,QAAM,WAAW,mBAAmB,CAAC,KAAK,MAAM,QAAS,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG,GAAG,CAAE;AACnF,QAAM,UAAU,kBAAkB;AAClC,eAAa;AAEb,QAAM,aAAa;AAAA,IACf,UAAU,EAAE,MAAM,cAAc,QAAQ,UAAU,YAAY,IAAI,YAAY,EAAE;AAAA,IAChF,QAAQ,EAAE,MAAM,cAAc,QAAQ,UAAU,YAAY,IAAI,YAAY,GAAG;AAAA,IAC/E,QAAQ,EAAE,MAAM,cAAc,QAAQ,UAAU,YAAY,IAAI,YAAY,GAAG;AAAA,EACnF;AAEA,QAAM,WAAuC;AAAA,IACzC,eAAe;AAAA,IACf;AAAA,IACA;AAAA,EACJ;AAEA,QAAM,YAA6C,EAAE,UAAU,SAAS;AACxE,QAAM,OAA+B,EAAE,YAAY,CAAC,SAAS,EAAE;AAC/D,QAAM,YAAY,CAAC,eAAe;AAClC,SAAO,EAAE,MAAM,UAAU;AAC7B;AAEA,SAAS,mBAAmB,MAA+F;AACvH,WAAS,KAAK,GAAiB,GAAiB,OAAqB;AACjE,UAAM,SAAS,aAAK,MAAM,aAAK,OAAO,GAAG,GAAG,CAAC;AAC7C,aAAS,KAAK,IAAmB,IAAmB;AAChD,YAAM,MAAM,aAAK,MAAM,MAAM;AAC7B,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,mBAAK,EAAE,EAAE,KAAK,KAAK,CAAC;AACpB,aAAO,KAAK,KAAK,QAAQ,KAAK;AAAA,IAClC;AACA,WAAO;AAAA,MACH,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,MACpB,GAAG,KAAK,OAAO,KAAK;AAAA,IACxB;AAAA,EACJ;AAEA,SAAO,IAAI,aAAa;AAAA,IACpB,GAAG,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACxC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,IACvC,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAAA;AAAA,EAC5C,CAAC;AACL;AAEA,SAAS,oBAAoB;AACzB,MAAI,YAAY;AAChB,WAAS,OAAO;AACZ,UAAM,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,OAAK,IAAI,SAAS;AACrD,iBAAa;AACb,WAAO;AAAA,EACX;AACA,SAAO,IAAI,YAAY;AAAA,IACnB,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,IACR,GAAG,KAAK;AAAA,EACZ,CAAC;AACL;AAeO,SAAS,mBAAmB,SAAS,GAAG,UAAiE;AAC5G,QAAM,SAAS;AACf,QAAM,EAAE,gBAAgB,cAAc,eAAe,IAAI,YAAY,QAAQ,MAAM;AAEnF,eAAa;AAEb,QAAM,aAAa;AAAA,IACf,UAAU,EAAE,MAAM,cAAc,QAAQ,eAAe;AAAA,IACvD,QAAQ,EAAE,MAAM,cAAc,QAAQ,aAAa;AAAA,IACnD,WAAW,EAAE,MAAM,cAAc,QAAQ,eAAe;AAAA,EAC5D;AAEA,QAAM,WAAuC;AAAA,IACzC,eAAe;AAAA,IACf;AAAA,IACA,SAAS,eAAe,SAAS;AAAA,EACrC;AAEA,QAAM,YAA6C,EAAE,UAAU,SAAS;AACxE,QAAM,OAA+B,EAAE,YAAY,CAAC,SAAS,EAAE;AAC/D,SAAO,EAAE,MAAM,WAAW,CAAC,eAAe,EAAE;AAChD;AAEA,SAAS,YAAY,QAAgB,QAAgB;AACjD,QAAM,KAAK,IAAI,KAAK,KAAK,CAAC,KAAK;AAC/B,QAAM,WAAW;AAAA,IACb;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,CAAE;AAAA,IAAG;AAAA,IACzC;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,CAAE;AAAA,IACzC;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,IAAK,CAAE;AAAA,IAAG;AAAA,IAAG;AAAA,EAC7C;AACA,QAAM,UAAU;AAAA,IACZ;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAC7C;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAI;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAC9C;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAC1C;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAI;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,IAAG;AAAA,EAChD;AACA,SAAO,WAAW,UAAU,SAAS,QAAQ,MAAM;AACvD;AAEA,SAAS,WAAW,UAAoB,SAAmB,QAAgB,QAAgB;AACvF,QAAM,eAAyB,CAAC;AAChC,QAAM,WAAqB,CAAC;AAG5B,YAAU,MAAM;AAGhB,cAAY,MAAM;AAGlB,cAAY;AAGZ,QAAM,iBAAiB,IAAI,aAAa,YAAY;AACpD,QAAM,eAAe,IAAI,aAAa,YAAY;AAClD,QAAM,iBAAiB,IAAI,aAAa,QAAQ;AAEhD,MAAI,UAAU,GAAG;AACb,yBAAqB;AAAA,EACzB,OAAO;AACH,qBAAiB;AAAA,EACrB;AAEA,SAAO,EAAE,gBAAgB,cAAc,eAAe;AAGtD,WAAS,UAAUC,SAAgB;AAC/B,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AAGtB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AAExC,uBAAiB,QAAQ,IAAI,CAAC,GAAG,CAAC;AAClC,uBAAiB,QAAQ,IAAI,CAAC,GAAG,CAAC;AAClC,uBAAiB,QAAQ,IAAI,CAAC,GAAG,CAAC;AAGlC,oBAAc,GAAG,GAAG,GAAGA,OAAM;AAAA,IACjC;AAAA,EACJ;AAEA,WAAS,cAAc,GAAiB,GAAiB,GAAiBA,SAAgB;AACtF,UAAM,OAAOA,UAAS;AAGtB,UAAM,IAAsB,CAAC;AAG7B,aAAS,IAAI,GAAG,KAAK,MAAM,KAAK;AAC5B,QAAE,CAAC,IAAI,CAAC;AACR,YAAM,KAAK,aAAK,KAAK,aAAK,OAAO,GAAG,GAAG,GAAG,IAAI,IAAI;AAClD,YAAM,KAAK,aAAK,KAAK,aAAK,OAAO,GAAG,GAAG,GAAG,IAAI,IAAI;AAClD,YAAM,OAAO,OAAO;AACpB,eAAS,IAAI,GAAG,KAAK,MAAM,KAAK;AAC5B,YAAI,MAAM,KAAK,MAAM,MAAM;AACvB,YAAE,CAAC,EAAE,CAAC,IAAI;AAAA,QACd,OAAO;AACH,YAAE,CAAC,EAAE,CAAC,IAAI,aAAK,KAAK,aAAK,OAAO,GAAG,IAAI,IAAI,IAAI,IAAI;AAAA,QACvD;AAAA,MACJ;AAAA,IACJ;AAGA,aAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,KAAK,GAAG,KAAK;AACzC,cAAM,IAAI,KAAK,MAAM,IAAI,CAAC;AAC1B,YAAI,IAAI,MAAM,GAAG;AACb,qBAAW,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACtB,qBAAW,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AACtB,qBAAW,EAAE,CAAC,EAAE,CAAC,CAAC;AAAA,QACtB,OAAO;AACH,qBAAW,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACtB,qBAAW,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;AAC1B,qBAAW,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,YAAYC,SAAgB;AACjC,UAAM,SAAS,aAAK,OAAO;AAE3B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK,GAAG;AAC7C,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,mBAAK,MAAM,QAAQ,aAAK,UAAU,QAAQ,MAAM,GAAGA,OAAM;AACzD,mBAAa,IAAI,CAAC,IAAI,OAAO,CAAC;AAC9B,mBAAa,IAAI,CAAC,IAAI,OAAO,CAAC;AAC9B,mBAAa,IAAI,CAAC,IAAI,OAAO,CAAC;AAAA,IAClC;AAAA,EACJ;AAEA,WAAS,cAAc;AACnB,UAAM,SAAS,aAAK,OAAO;AAC3B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK,GAAG;AAC7C,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAC9B,aAAO,CAAC,IAAI,aAAa,IAAI,CAAC;AAE9B,YAAM,IAAI,QAAQ,MAAM,IAAI,IAAI,KAAK,KAAK;AAC1C,YAAM,IAAI,YAAY,MAAM,IAAI,KAAK,KAAK;AAC1C,eAAS,KAAK,GAAG,IAAI,CAAC;AAAA,IAC1B;AACA,eAAW;AACX,gBAAY;AAAA,EAChB;AAEA,WAAS,cAAc;AAEnB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAEzC,YAAM,KAAK,SAAS,IAAI,CAAC;AACzB,YAAM,KAAK,SAAS,IAAI,CAAC;AACzB,YAAM,KAAK,SAAS,IAAI,CAAC;AAEzB,YAAMC,OAAM,KAAK,IAAI,IAAI,IAAI,EAAE;AAC/B,YAAMC,OAAM,KAAK,IAAI,IAAI,IAAI,EAAE;AAG/B,UAAID,OAAM,OAAOC,OAAM,KAAK;AACxB,YAAI,KAAK;AAAK,mBAAS,IAAI,CAAC,KAAK;AACjC,YAAI,KAAK;AAAK,mBAAS,IAAI,CAAC,KAAK;AACjC,YAAI,KAAK;AAAK,mBAAS,IAAI,CAAC,KAAK;AAAA,MACrC;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,WAAW,QAAsB;AACtC,iBAAa,KAAK,GAAG,MAAM;AAAA,EAC/B;AAEA,WAAS,iBAAiBC,QAAe,QAAc;AACnD,UAAM,SAASA,SAAQ;AACvB,WAAO,CAAC,IAAI,SAAS,SAAS,CAAC;AAC/B,WAAO,CAAC,IAAI,SAAS,SAAS,CAAC;AAC/B,WAAO,CAAC,IAAI,SAAS,SAAS,CAAC;AAAA,EACnC;AAEA,WAAS,aAAa;AAClB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,IAAI,aAAK,OAAO;AACtB,UAAM,WAAW,aAAK,OAAO;AAE7B,UAAM,MAAM,aAAK,OAAO;AACxB,UAAM,MAAM,aAAK,OAAO;AACxB,UAAM,MAAM,aAAK,OAAO;AAExB,aAAS,IAAI,GAAG,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK,GAAG,KAAK,GAAG;AAC5D,mBAAK,IAAI,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,CAAC;AACzE,mBAAK,IAAI,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,CAAC;AACzE,mBAAK,IAAI,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,CAAC;AACzE,mBAAK,IAAI,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC;AAC9C,mBAAK,IAAI,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC;AAC9C,mBAAK,IAAI,KAAK,SAAS,IAAI,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC;AAE9C,mBAAK,IAAI,UAAU,GAAG,CAAC;AACvB,mBAAK,IAAI,UAAU,UAAU,CAAC;AAC9B,mBAAK,MAAM,UAAU,UAAU,IAAK,CAAC;AAErC,YAAM,MAAM,QAAQ,QAAQ;AAE5B,gBAAU,KAAK,IAAI,GAAG,GAAG,GAAG;AAC5B,gBAAU,KAAK,IAAI,GAAG,GAAG,GAAG;AAC5B,gBAAU,KAAK,IAAI,GAAG,GAAG,GAAG;AAAA,IAChC;AAAA,EACJ;AAEA,WAAS,UAAU,IAAkB,QAAgB,QAAsBC,UAAiB;AACxF,QAAKA,WAAU,KAAO,GAAG,CAAC,MAAM,GAAI;AAChC,eAAS,MAAM,IAAI,GAAG,CAAC,IAAI;AAAA,IAC/B;AACA,QAAK,OAAO,CAAC,MAAM,KAAO,OAAO,CAAC,MAAM,GAAI;AACxC,eAAS,MAAM,IAAIA,WAAU,IAAI,KAAK,KAAK;AAAA,IAC/C;AAAA,EACJ;AAGA,WAAS,QAAQ,QAAsB;AACnC,WAAO,KAAK,MAAM,OAAO,CAAC,GAAG,CAAE,OAAO,CAAC,CAAC;AAAA,EAC5C;AAGA,WAAS,YAAY,QAAsB;AACvC,WAAO,KAAK,MAAM,CAAE,OAAO,CAAC,GAAG,KAAK,KAAM,OAAO,CAAC,IAAI,OAAO,CAAC,IAAM,OAAO,CAAC,IAAI,OAAO,CAAC,CAAE,CAAC;AAAA,EAC/F;AAEA,WAAS,uBAAuB;AAC5B,QAAI,mBAAmB,QAAW;AAC9B,YAAM,KAAK,aAAK,OAAO,GAAG,KAAK,aAAK,OAAO;AAE3C,eAAS,IAAI,GAAG,KAAK,eAAe,QAAQ,IAAI,IAAI,KAAK,GAAG;AACxD,cAAM,KAAK,eAAe,SAAS,IAAI,GAAG,IAAI,CAAC;AAC/C,cAAM,KAAK,eAAe,SAAS,IAAI,GAAG,IAAI,CAAC;AAC/C,cAAM,KAAK,eAAe,SAAS,IAAI,GAAG,IAAI,CAAC;AAC/C,qBAAK,IAAI,IAAI,IAAI,EAAE;AACnB,qBAAK,IAAI,IAAI,IAAI,EAAE;AACnB,qBAAK,MAAM,IAAI,IAAI,EAAE;AACrB,qBAAK,UAAU,IAAI,EAAE;AACrB,qBAAK,KAAK,aAAa,SAAS,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE;AACjD,qBAAK,KAAK,aAAa,SAAS,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE;AACjD,qBAAK,KAAK,aAAa,SAAS,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ;AAEA,WAAS,mBAAmB;AACxB,aAAS,IAAI,GAAG,KAAK,aAAa,QAAQ,IAAI,IAAI,KAAK,GAAG;AACtD,YAAM,SAAS,aAAa,SAAS,GAAG,IAAI,CAAC;AAC7C,mBAAK,UAAU,QAAQ,MAAM;AAAA,IACjC;AAAA,EACJ;AACJ;;;ACzWO,IAAM,iBAAiB;AAI9B,eAAS,mBAAmB,KAAK;",
  "names": ["equals", "scale", "equals", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromRotation", "fromScaling", "fromTranslation", "fromValues", "identity", "invert", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "rotate", "scale", "set", "str", "sub", "subtract", "translate", "transpose", "create", "clone", "copy", "fromValues", "set", "identity", "transpose", "invert", "adjoint", "determinant", "multiply", "translate", "scale", "rotate", "len", "fromTranslation", "fromScaling", "fromRotation", "fromQuat", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "mul", "sub", "add", "clone", "copy", "create", "dot", "equals", "exactEquals", "fromValues", "identity", "invert", "len", "length", "lerp", "mul", "multiply", "normalize", "random", "rotateX", "rotateY", "rotateZ", "scale", "set", "sqrLen", "squaredLength", "str", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat4", "transformQuat", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "create", "identity", "dot", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "random", "invert", "str", "clone", "fromValues", "copy", "set", "add", "mul", "lerp", "length", "len", "squaredLength", "sqrLen", "normalize", "exactEquals", "equals", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotate", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat3", "transformMat4", "rotate", "angle", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "version", "wrap", "set", "isMatrix", "isScalar", "proxy", "set", "value", "values", "clone", "distance", "min", "max", "len", "CoordSpace", "ClippingMode", "ClippingId", "TonemappingMode", "distance", "isPowerOf2", "isPowerOf2", "len", "download", "download", "self", "PrimitiveType", "OptionalVertexAttribute", "MaterialType", "TextureSemantic", "version", "readSchema", "MaterialType", "OptionalVertexAttribute", "PrimitiveType", "TextureSemantic", "version", "PrimitiveType", "OptionalVertexAttribute", "textureBytes", "scale", "objectId", "MaterialType", "wasm", "enumerateBuffers", "indices", "index", "deviations", "count", "version", "readSchema", "len", "version", "transfer", "download", "transfer", "isElements", "calcNumPrimitives", "version", "OctreeNode", "distance", "projection", "scale", "min", "max", "version", "OctreeNode", "getColor", "index", "values", "terrain", "points", "objectIds", "transforms", "zeroes", "ones", "index", "col", "camera", "tonemapping", "pos", "scale", "stats", "create", "scale", "i", "isPowerOf2", "RenderContext", "proxy", "width", "height", "dist", "snap", "wasm", "scale", "distance", "RenderContext", "download", "scale", "wrap", "defaultMaterial", "traverseNodeTree", "request", "version", "request", "init", "version", "request", "str", "value", "download", "request", "obj", "returnValue", "proxy", "handler", "angle", "parts", "drawObjects", "line", "ortho", "_p", "v", "angle", "dist", "len", "length", "dir", "total", "polygon", "dist", "angle", "a", "b", "s", "MeasureView", "measure", "getInstance", "isUrl", "dist", "MouseButtons", "lerp", "t", "min", "max", "distance", "dist", "scale", "distance", "distance", "dist", "scale", "distance", "flipCADToGLVec", "clone", "sqrDist", "angle", "View", "scale", "kind", "controllers", "distance", "RenderContext", "clone", "measure", "scale", "detail", "radius", "max", "min", "index", "azimuth"]
}
